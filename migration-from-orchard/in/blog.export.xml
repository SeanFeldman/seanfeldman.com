<!--Exported from Orchard-->
<Orchard>
  <Recipe>
    <Name>Generated by Orchard.ImportExport</Name>
    <Author>sfeldman</Author>
    <ExportUtc>2025-01-05T00:44:28.0164713Z</ExportUtc>
  </Recipe>
  <Data>
    <BlogPost Id="/alias=azure-automation-reducing-cost" Status="Published">
      <BodyPart Text="&lt;p&gt;The idea behind this is extremely simple: to run a deployment machine in Azure that will be used to deploy updates to production. In my environment we get everything packaged on build server, but deployment has to happen in a controlled environment and from a manual kick-off. Deployments are not performed at night, hence compute time is wasted. To save 50% (at least) of compute time, VM has to be down.  &lt;p&gt;Plan for solution: get a single instance VM down during night and up at work hours. My initial thought was to use Azure Cloud Services auto-scale feature.  &lt;p&gt;Pros:  &lt;p&gt;- Defined under Cloud Service VM instance belongs to  &lt;p&gt;- Scaling is a property of Cloud Service  &lt;p&gt;Cons:  &lt;p&gt;- Requires Availability Set to be created and associated with VM instance  &lt;p&gt;- Requires at least 2 VM instances to run Auto-Scaling (deal breaker!)  &lt;p&gt;&amp;nbsp; &lt;p&gt;Fortunately, with the new release of Azure Automation, this can be done with Runbooks (a Runbook is a workflow that contains a PowerShell script, that can also call child Runbooks).  &lt;p&gt;Pros:  &lt;p&gt;- Doesn’t require multiple instances of VM (hence saving money)  &lt;p&gt;- Runs under the context of subscription, therefore has access to &lt;b&gt;&lt;u&gt;all resources&lt;/u&gt;&lt;/b&gt;  &lt;p&gt;Cons:  &lt;p&gt;- Scheduling is not as flexible as with Auto-Scaling and needs to be associated with a Runbook  &lt;p&gt;&amp;nbsp; &lt;p&gt;What I ended up doing was quick and dirty, but it does the job for now.  &lt;p&gt;1. Create an automation object (Virtual-Machines)  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/clip_image001_478773BB.png&quot;&gt;&lt;img title=&quot;clip_image001&quot; style=&quot;border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px&quot; border=&quot;0&quot; alt=&quot;clip_image001&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/clip_image001_thumb_0BCA6BB9.png&quot; width=&quot;1137&quot; height=&quot;263&quot;&gt;&lt;/a&gt;  &lt;p&gt;2. Imported two Runbooks into automation (Start-AzureVMsOnSchedule and Stop-AzureMVsOnSchedule)  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/clip_image002_1B6D077B.png&quot;&gt;&lt;img title=&quot;clip_image002&quot; style=&quot;border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px&quot; border=&quot;0&quot; alt=&quot;clip_image002&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/clip_image002_thumb_4B2AAFFA.png&quot; width=&quot;851&quot; height=&quot;384&quot;&gt;&lt;/a&gt;  &lt;p&gt;Note that “import” is as simple as importing PS script wrapped in &lt;i&gt;workflow name_of_workflow { #powershell script }&lt;/i&gt;  &lt;p&gt;3. Published imported runbooks  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/clip_image003_7AE85879.png&quot;&gt;&lt;img title=&quot;clip_image003&quot; style=&quot;border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px&quot; border=&quot;0&quot; alt=&quot;clip_image003&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/clip_image003_thumb_759971C8.png&quot; width=&quot;750&quot; height=&quot;219&quot;&gt;&lt;/a&gt;  &lt;p&gt;4. Associated a schedule with each runbook  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/clip_image004_6C403D45.png&quot;&gt;&lt;img title=&quot;clip_image004&quot; style=&quot;border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px&quot; border=&quot;0&quot; alt=&quot;clip_image004&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/clip_image004_thumb_47427CCC.png&quot; width=&quot;894&quot; height=&quot;187&quot;&gt;&lt;/a&gt;  &lt;p&gt;5. Specified for each schedule to execute on a certain time daily (for Start runbook to run at 7AM, for Stop runbook to run at 7PM). BTW, parameters can be passed to individual runbooks, so that job (executed runbook) becomes a parameterized job. Also, resources can be used from all  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/clip_image005_7E1F61C3.png&quot;&gt;&lt;img title=&quot;clip_image005&quot; style=&quot;border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px&quot; border=&quot;0&quot; alt=&quot;clip_image005&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/clip_image005_thumb_7FEFB78A.png&quot; width=&quot;408&quot; height=&quot;243&quot;&gt;&lt;/a&gt;  &lt;p&gt;6. Once a job (schedule runbook) was executed, it’s logged (you can drill into details of each command – can see Bruce`s eyes light up)  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/clip_image006_6FE37984.png&quot;&gt;&lt;img title=&quot;clip_image006&quot; style=&quot;border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px&quot; border=&quot;0&quot; alt=&quot;clip_image006&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/clip_image006_thumb_317DB5D1.png&quot; width=&quot;567&quot; height=&quot;637&quot;&gt;&lt;/a&gt;  &lt;p&gt;7. Job executed (spike at 7AM) and VM is up and running. Big Success *Borat accent* :)  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_08097491.png&quot;&gt;&lt;img title=&quot;image&quot; style=&quot;border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_0326C0D5.png&quot; width=&quot;406&quot; height=&quot;442&quot;&gt;&lt;/a&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_3A03A5CC.png&quot;&gt;&lt;img title=&quot;image&quot; style=&quot;border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_7961595C.png&quot; width=&quot;378&quot; height=&quot;177&quot;&gt;&lt;/a&gt;  &lt;p&gt;Note that when you edit Draft of your runbook, you can run (test) it before publishing. Also, you can import existing modules (Azure module is imported by default) using command toolbar at the bottom, add settings that can be shared by multiple runbooks, and insert Activity (powershell command) / Runbook / setting.  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/clip_image007_298B34D1.png&quot;&gt;&lt;img title=&quot;clip_image007&quot; style=&quot;border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px&quot; border=&quot;0&quot; alt=&quot;clip_image007&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/clip_image007_thumb_76BB2E5C.png&quot; width=&quot;843&quot; height=&quot;191&quot;&gt;&lt;/a&gt;  &lt;p&gt;Azure Automation is a great feature to leverage. Excited to see all of these things shaping up and making work easier, allowing to cut down costs at the same time.&lt;/p&gt; &lt;p&gt;Update 1: I’ve noticed that while VM was started and stopped, scripts didn’t execute cleanly. To solve that, I had to wrap commands in InlineScript { #start/stop-AzureVM … } construct&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2014-04-08T14:18:00Z" PublishedUtc="2014-04-19T20:30:30.9028809Z" ModifiedUtc="2014-04-08T14:18:00Z" />
      <TagsPart Tags="" />
      <AutoroutePart Alias="azure-automation-reducing-cost" UseCustomPattern="false" />
      <TitlePart Title="Azure Automation – Reducing Cost" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=azure-pays-off" Status="Published">
      <BodyPart Text="&lt;p&gt;A year ago I have started looking and evaluating cloud options. AWS and Azure were two options. I have decided to go with Azure for a couple of reasons that are still valid today (even more than a year ago)&lt;/p&gt; &lt;ol&gt; &lt;li&gt;As an MSDN subscriber, I could leverage MSDN credits that are sufficient to learn&lt;/li&gt; &lt;li&gt;PaaS on Azure was very appealing while on AWS it seemed a little foreign and not as friendly as AWS`s IaaS offer (a year ago Azure`s IaaS was very poor, so for infrastructure purposes only I’d probably wouldn’t choose Azure back then)&lt;/li&gt; &lt;li&gt;Simplicity, or at least perception I had&lt;/li&gt;&lt;/ol&gt; &lt;p&gt;As an MSDN subscriber you get a LOT. You get credits on Azure that you can use towards anything you want (PaaS, IaaS, developer services, etc.) You can run production on MSDN subscription, but you can learn. And learning is important. I would strongly recommend to go beyond a single MSDN subscription discount and get a Pay-as-you-Go subscription to test out things. You can read documentation, play with cost calculator, but nothing, I repeat NOTHING, will replace the actual usage where real people are hitting your service, storage and CDN transactions are happening, when you run your minimal viable product with scale out as needed, leveraging developer services. If you try to shave off that cost, you’ll never fully learn. After all, without errors there are no successes. If you try to minimize the risk to none, you better not get on cloud at all.&lt;/p&gt; &lt;p&gt;PaaS or SaaS? Or both? This is a question only you can answer. My answer to this is: it depends. Certain things will require IaaS, other things will require PaaS. And PaaS on Azure has changed over time. It used to be just Cloud Services with Web and Wroker roles and a very complex process of deployment. But now we also have Azure Web Sites (ironically AWS) that have simplified the process of deployment and introduced some great options such as continuous deployment from code repository, IIS always on, web sockets, web jobs, etc. Today, one can build a globally scaleable web application without resorting to complex Cloud Services (thanks to Traffic Manager that made AWS a first class citizen). For scenarios you’d like to have pure VMs, you can leverage Azure IaaS that has become even richer with recent announcements at Build 2014. Automate it, schedule it, scale it, do anything you want.&lt;/p&gt; &lt;p&gt;Azure is simple. Interface is simple. Powershell cmdlets are easy. Will it stay simple for long? &lt;a href=&quot;http://portal.azure.com&quot; target=&quot;_blank&quot;&gt;Azure new portal&lt;/a&gt; is making an attempt to address growing complexity by making it visually aesthetic and pleasant, something to validate in future to come.&lt;/p&gt; &lt;p&gt;So did this investment pay off? Yes. On several fronts:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Application hosting cost – now we know what it cost us to run a web application X&lt;/li&gt; &lt;li&gt;Infrastructure / hosting cost reduction – no argument here, costs went &lt;u&gt;significantly&lt;/u&gt; down&lt;/li&gt; &lt;li&gt;Scaling – we can scale out with ease (once proper architecture is implemented. Do not dream of taking your application “as-is” and have it in the cloud)&lt;/li&gt; &lt;li&gt;Less dependency on IT – IT now can concentrate on more important things than spinning up VMs or monitoring response time&lt;/li&gt; &lt;li&gt;Automation – this has been addressed so many times, and yet I’ll say this again, with Azure automation is so easy that it’s a sin not to take advantage of it. And once you’ve automated a process, you’ve documented it and ensured that others can understand “the magic”.&lt;/li&gt;&lt;/ol&gt; &lt;p&gt;We’ve implemented PaaS with Cloud Services, Plain AWS, IaaS, and recently have completed a spike that involved all above with an alternative approach for Sitecore CMS (that in its core is not so cloud friendly). Preview is available at &lt;a title=&quot;http://ta-mcit.azurewebsites.net/&quot; href=&quot;http://ta-mcit.azurewebsites.net/&quot;&gt;http://ta-mcit.azurewebsites.net/&lt;/a&gt;&amp;nbsp; and hopefully launch to come soon. When that happens, I’ll brag a little more about how we did it.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2014-04-07T03:05:32Z" PublishedUtc="2014-04-19T20:30:31.527866Z" ModifiedUtc="2014-04-07T03:05:32Z" />
      <TagsPart Tags="Cloud" />
      <AutoroutePart Alias="azure-pays-off" UseCustomPattern="false" />
      <TitlePart Title="Azure Pays Off" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=early-testing" Status="Published">
      <BodyPart Text="&lt;p&gt;Early testing is amazing. I am not talking about TDD and developers testing their own creation. I am talking about testing performed by professional QAs with mindset to hack the heck of your system (code, server, deployment, you name it). The value of early testing vs. late testing in SDLC is very easy to show to those that deal with with software on a daily basis and live it everyday. But how do you translate it to the business? Visualize it. One is high level – show one approach vs another and start asking questions.&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_57D2CCEC.png&quot;&gt;&lt;img title=&quot;image&quot; style=&quot;border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_3A7D7522.png&quot; width=&quot;476&quot; height=&quot;131&quot;&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;vs&lt;/p&gt; &lt;p&gt;&amp;nbsp;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_198A027B.png&quot;&gt;&lt;img title=&quot;image&quot; style=&quot;border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_2DA31F04.png&quot; width=&quot;349&quot; height=&quot;333&quot;&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Current project my team is working on we’ve decided to start testing early, while code in its dippers. Not only test it, but get a &lt;a href=&quot;https://www.whitehatsec.com/sentinel_services/sentinel_services.html&quot; target=&quot;_blank&quot;&gt;Sentinel service from WhiteHat&lt;/a&gt; that is a on-going testing while we develop the product. Won’t outline all the benefits of the system, but mention what we got out of this as a business.&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Finding serious deficiencies in our software &lt;/li&gt; &lt;li&gt;Fixing software flaws that would be security issues and bugs&lt;/li&gt; &lt;li&gt;Saved time on design changes while it is easy to accommodate those&lt;/li&gt; &lt;li&gt;Removed “surprise” component out of our software&lt;/li&gt;&lt;/ol&gt; &lt;p&gt;#4 is the last but not the least from business point of view. Having confidence in your product is extremely important. We owe it to our stakeholders and our customers. Label it agile or common sense, it is great to do the right thing and see the results. &lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2013-11-30T23:34:00Z" PublishedUtc="2014-04-19T20:30:32.3716084Z" ModifiedUtc="2013-11-30T23:34:00Z" />
      <TagsPart Tags="Agile" />
      <AutoroutePart Alias="early-testing" UseCustomPattern="false" />
      <TitlePart Title="Early Testing" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=book-review" Status="Published">
      <BodyPart Text="&lt;p&gt;We are ramping up on our development of a new version of existing system that &lt;a href=&quot;http://www.amazon.com/Learning-NServiceBus-David-Boike/dp/1782166343&quot; target=&quot;_blank&quot;&gt;&lt;img title=&quot;Learning NServiceBus book&quot; style=&quot;border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; float: right; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px&quot; border=&quot;0&quot; alt=&quot;Learning NServiceBus&quot; align=&quot;right&quot; src=&quot;http://ecx.images-amazon.com/images/I/71tDf-19HrL.jpg&quot; width=&quot;324&quot; height=&quot;400&quot;&gt;&lt;/a&gt;will utilize NServiceBus for communication between its various parts. &lt;a href=&quot;http://www.amazon.com/Learning-NServiceBus-David-Boike/dp/1782166343&quot; target=&quot;_blank&quot;&gt;Learning NServiceBus&lt;/a&gt; is a great resource to get going, especially if you need in short time to go from 0 to 100. The books falls a little short on testing IMO, but it gives you enough to move in the right direction. In case you are planning to deviate from a standard transport (MSMQ), you won’t find a lot of help in this book. Though frankly, outstanding NServiceBus team and amazing community behind it will answer any of your questions, if those were not already answered. Since NServiceBus is now under Particular, this is the new &lt;a href=&quot;https://groups.google.com/forum/#!forum/particularsoftware&quot; target=&quot;_blank&quot;&gt;user group&lt;/a&gt; you want to send your questions to.&lt;/p&gt; &lt;p&gt;&amp;nbsp;&lt;/p&gt; &lt;p&gt;In my future posts, I will talk a little more about how we are designing our new system and going to use NServiceBus with Azure transport, which opens up so many opportunities and fascinating architecture options.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2013-11-29T04:52:21Z" PublishedUtc="2014-04-19T20:30:32.6528503Z" ModifiedUtc="2013-11-29T04:52:21Z" />
      <TagsPart Tags="Books,NServiceBus" />
      <AutoroutePart Alias="book-review" UseCustomPattern="false" />
      <TitlePart Title="Book Review: Learning NServiceBus" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=tag-management-with-gtm" Status="Published">
      <BodyPart Text="&lt;h2&gt;What is a tag? &lt;/h2&gt;  &lt;p&gt;In the marketing world tag (or pixel) is used for tracking purposes. Historically it was based on a call to retrieve a 1x1 transparent image. Rational behind this was to retrieve client side information of a site visitor on a 3rd party server. Information would include browser standard information including cookies. There’s a lot of things that can be done with this information from analytical and marketing point of view.&lt;/p&gt;  &lt;h2&gt;Why is is so Messy?&lt;/h2&gt;  &lt;p&gt;Tracking and conversion tags (pixels) were supposed to be “add-ons” that any non-technical web master (and later “business user”) should be able to drop into mark-up and be done. After a little bit information flows into tag vendor server and reports are available. But it is not as simple as it sounds when you need to work with &lt;em&gt;multiple &lt;/em&gt;tag vendors. Imagine following scenarios.&lt;/p&gt;  &lt;p&gt;Scenario 1:&lt;/p&gt;  &lt;blockquote&gt;   &lt;p&gt;We need to know how many unique visits we had to a page X.&lt;/p&gt; &lt;/blockquote&gt;  &lt;p&gt;Scenario 2:&lt;/p&gt;  &lt;blockquote&gt;   &lt;p&gt;We need to count how many times visitors clicked a button Y.&lt;/p&gt; &lt;/blockquote&gt;  &lt;p&gt;For scenario #1, traditionally it is achieved by adding a tag to the HTML. Something like &lt;/p&gt;  &lt;div id=&quot;codeSnippetWrapper&quot;&gt;   &lt;div id=&quot;codeSnippet&quot; style=&quot;border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4&quot;&gt;     &lt;pre style=&quot;border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white&quot;&gt;&lt;span id=&quot;lnum1&quot; style=&quot;color: #606060&quot;&gt;   1:&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;img&lt;/span&gt; &lt;span style=&quot;color: #ff0000&quot;&gt;src&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;=&amp;quot;http://vendor/tag.jpg?client=id&amp;amp;page=code&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;For scenario #2, again, traditionally it is as “simple” as embedding code into onclick event&lt;/p&gt;&#xA;&#xA;&lt;div id=&quot;codeSnippetWrapper&quot;&gt;&#xA;  &lt;div id=&quot;codeSnippet&quot; style=&quot;border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4&quot;&gt;&#xA;    &lt;pre style=&quot;border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white&quot;&gt;&lt;span id=&quot;lnum1&quot; style=&quot;color: #606060&quot;&gt;   1:&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;button&lt;/span&gt; &lt;span style=&quot;color: #ff0000&quot;&gt;onclick&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;=&amp;quot;vendorTagFunction(params)&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;It’s almost good, except mixed concerns and need to constantly change. In the marketing world, tags come and go. And it happens frequently. And with multiple vendors. Therefore you end up with a few issues doubled (when tag is added and removed), multiplied by number of vendors.&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;  &lt;li&gt;Constant need to modify mark-up &lt;/li&gt;&#xA;&#xA;  &lt;li&gt;Constant need to modify client side code (JavaScript handlers) &lt;/li&gt;&#xA;&#xA;  &lt;li&gt;Constant need to deploy changes &lt;/li&gt;&#xA;&#xA;  &lt;li&gt;Mixing of concerns (marketing vs. development) &lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;h2&gt;What’s a Solution?&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;Separation of Concerns. Tags are not needed for markup and client side code. Developers and designers shouldn’t be concerned with those. Marketers should (well, ideally at least). In order to achieve that, tags should be &lt;strong&gt;placed and managed&lt;/strong&gt; &lt;strong&gt;separately from markup and code&lt;/strong&gt;. This is where Tag Management tools are handy. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;A tool I have tried so far was &lt;a href=&quot;http://www.google.com/tagmanager/&quot; target=&quot;_blank&quot;&gt;Google Tag Manager&lt;/a&gt; (or just GTM) and it works great for these kind of things.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;How Tag Management Helps?&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;These are a few things that GTM does for you:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;  &lt;li&gt;Takes tags code and markup out of your markup and code and by that makes it clean and lean &lt;/li&gt;&#xA;&#xA;  &lt;li&gt;Injects tags dynamically based on rules execution &lt;/li&gt;&#xA;&#xA;  &lt;li&gt;Allows to manage rules and tags outside of your main solution &lt;/li&gt;&#xA;&#xA;  &lt;li&gt;Versioning by marketers – a very strong feature &lt;/li&gt;&#xA;&#xA;  &lt;li&gt;Publishing* of a specific version &lt;/li&gt;&#xA;&#xA;  &lt;li&gt;Preview and debugging to ensure things work before get published &lt;/li&gt;&#xA;&#xA;  &lt;li&gt;Ability to add/remove tags w/o main site re-deployment &lt;/li&gt;&#xA;&#xA;  &lt;li&gt;and more… &lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;* Publishing that is happening within GTM, no connection to your main markup/code publishing&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;How Simple it is?&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;Simple. There’s really not that much to it, but once you utilize the power, you’ll not go back again to embedding tags in markup/code ever again. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Another benefit is integration. If you use Google Analytics, you can easily integrate that one (another cross-cutting concern is removed from you markup).&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;Are there Alternatives?&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;Plenty. Google is not the pioneer in this area, and the tool is far from perfect. Lots of other companies have offerings that are good and viable solutions. We found GTM to be simple, clean, and cost effective (free for now) to address our requirements. &lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2013-06-13T03:37:00Z" PublishedUtc="2014-04-19T20:30:32.9497206Z" ModifiedUtc="2013-06-13T03:37:00Z" />
      <TagsPart Tags="Patterns" />
      <AutoroutePart Alias="tag-management-with-gtm" UseCustomPattern="false" />
      <TitlePart Title="Tag Management With GTM" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=testing-ravendb-custom-bundle-plugin" Status="Published">
      <BodyPart Text="&lt;p&gt;RavenDB is amazing. You don’t have to work with it for a long time to get that. What’s even more amazing is the extensibility and testability of it. This post is about the last two.&lt;/p&gt;  &lt;p&gt;In my recent work I needed to have versioning of documents with very specific requirements that are not matching RavenDB built in &lt;a href=&quot;http://ravendb.net/docs/server/extending/bundles/versioning&quot; target=&quot;_blank&quot;&gt;versioning bundle&lt;/a&gt;. Default versioning bundle would generate revisions of all documents upon any change that occurs to a document. In my scenario, I needed only 1 revision at any given time, and revision should be generated only for the documents that have a Status field and its value is changing to “Published”. Very specific to the business requirement. After poking around, reading &lt;a href=&quot;http://ravendb.net/docs/server/extending/plugins&quot; target=&quot;_blank&quot;&gt;documentation&lt;/a&gt;, and bugging people on &lt;a href=&quot;https://groups.google.com/forum/?fromgroups=#!topic/ravendb/kAruTZeTuZ4&quot; target=&quot;_blank&quot;&gt;user group&lt;/a&gt;, I learned a few things about testing custom bundle/plugin RavenDB style. &lt;/p&gt;  &lt;h2&gt;Testing&lt;/h2&gt;  &lt;p&gt;If you are doing unit testing, &lt;a href=&quot;http://nuget.org/packages/RavenDB.Tests.Helpers&quot; target=&quot;_blank&quot;&gt;RavenDB.Tests.Helpers&lt;/a&gt; is your friend. Once nuget package is installed, your tests can inherit from &lt;em&gt;RavenTestBase &lt;/em&gt;class that will wire a new embedded document store for you, optimized for testing, and allowing additional modification needed for testing scenario(s) (#3). For bundle/plugin testing, I needed to register all of my triggers (optionally, you could register one at a time, or all of the triggers found in assembly) in Raven’s configuration. The base class exposes &lt;em&gt;ModifyConfiguration&lt;/em&gt; for that purpose (#1). In addition to that, RavenDB needs to be told that we are activating our bundle (#4). Logging (#2) was more for me to see what happens with RavenDB while test is running.&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_54DD5A8B.png&quot;&gt;&lt;img style=&quot;background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_3088503C.png&quot; width=&quot;840&quot; height=&quot;167&quot; /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;h2&gt;Custom Triggers&lt;/h2&gt;  &lt;p&gt;One this that I haven’t seen in documentation, but was helped with at the user group was the attributes needed for each custom trigger. &lt;em&gt;InheritedExport &lt;/em&gt;and &lt;em&gt;ExportMetadata &lt;/em&gt;are both needed. BundleName is the name that is registered with Raven’s configuration.&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_68C6C754.png&quot;&gt;&lt;img style=&quot;background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_2F43B75D.png&quot; width=&quot;486&quot; height=&quot;39&quot; /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;h2&gt;Enabling Bundle in RavenDB&lt;/h2&gt;  &lt;p&gt;In order to get custom bundle to work, it has to be copied into Plugins folder under RavenDB location and database setting has to be updated to let Raven know we want bundle to be activated.&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_75C0A765.png&quot;&gt;&lt;img style=&quot;background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_1C228AB1.png&quot; width=&quot;370&quot; height=&quot;180&quot; /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;h2&gt;Bundle in Action&lt;/h2&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_7FA598D0.png&quot;&gt;&lt;img style=&quot;background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_5B140B4C.png&quot; width=&quot;420&quot; height=&quot;93&quot; /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_5EB22629.png&quot;&gt;&lt;img style=&quot;background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_05140975.png&quot; width=&quot;456&quot; height=&quot;116&quot; /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_2B75ECC0.png&quot;&gt;&lt;img style=&quot;background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_23EA7D53.png&quot; width=&quot;461&quot; height=&quot;93&quot; /&gt;&lt;/a&gt;&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2013-02-22T18:28:00Z" PublishedUtc="2014-04-19T20:30:35.9028177Z" ModifiedUtc="2013-02-22T18:28:00Z" />
      <TagsPart Tags="OSS,RavenDB,TDD" />
      <AutoroutePart Alias="testing-ravendb-custom-bundle-plugin" UseCustomPattern="false" />
      <TitlePart Title="Testing RavenDB Custom Bundle/Plugin" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=visual-studio-2012-update-2-ctp-browser" Status="Published">
      <BodyPart Text="&lt;p&gt;I have ran into an interesting message when opened a user group site in Visual Studio (not something that I usually do) and it made me wonder&lt;/p&gt;  &lt;p&gt;1. What version of IE Visual Studio 2012 Update 2 CTP is using if not the one found on machine (IE9 on my Windows 7)&lt;/p&gt;  &lt;p&gt;2. Google is playing dirty… this message would only show up in IE version 8 and lower.&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/Capture_7264BB5E.png&quot;&gt;&lt;img style=&quot;background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px&quot; title=&quot;Capture&quot; border=&quot;0&quot; alt=&quot;Capture&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/Capture_thumb_03D51C37.png&quot; width=&quot;941&quot; height=&quot;36&quot; /&gt;&lt;/a&gt;&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2013-02-08T21:32:00Z" PublishedUtc="2014-04-19T20:30:36.5590528Z" ModifiedUtc="2013-02-08T21:32:00Z" />
      <TagsPart Tags="VS.NET" />
      <AutoroutePart Alias="visual-studio-2012-update-2-ctp-browser" UseCustomPattern="false" />
      <TitlePart Title="Visual Studio 2012 Update 2 CTP – Browser" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=ravendb-in-memory-query-monitoring" Status="Published">
      <BodyPart Text="&lt;p&gt;RavenDB has a great way to monitor what’s happening between client and server. I found it very helpful when trying to figure out what’s happening, or just understand how things work (such as querying). &lt;/p&gt;  &lt;p&gt;When doing unit testing, the pattern is to leverage in-memory store to speed things up. Unfortunately, when that’s the case, there’s exposed communication happening between unit tests (client) and in-memory store (server).&lt;/p&gt;  &lt;p&gt;There are a few possible solutions folks have suggested, but one that really made my day was… custom logger. This is a fantastic way to tap into what’s happening and see it all (Thank you &lt;a href=&quot;https://groups.google.com/d/msg/ravendb/ANEIBix4pTY/smUjE5jk78IJ&quot; target=&quot;_blank&quot;&gt;Matt Johnson&lt;/a&gt; for help).&lt;/p&gt;  &lt;p&gt;Now there’s no more blindness and magic. Everything is revealed. Happiness.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2013-01-22T04:03:00Z" PublishedUtc="2014-04-19T20:30:36.9027972Z" ModifiedUtc="2013-01-22T04:03:00Z" />
      <TagsPart Tags="RavenDB,TDD" />
      <AutoroutePart Alias="ravendb-in-memory-query-monitoring" UseCustomPattern="false" />
      <TitlePart Title="RavenDB In Memory Query Monitoring" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=browserstack" Status="Published">
      <BodyPart Text="&lt;p&gt;If you are doing web development, then you have the headache of testing your web application on various browsers. What makes it even more “fun” is the fact that on a given OS you might run multiple browsers of various versions. What I have done in the past was targeting “standard” browsers. That was long time ago, and today reality is a little more challenging. Along with the desktop browsers, nowadays there are mobile browsers that are making things a bit more complex.&lt;/p&gt;  &lt;p&gt;Typical solution would be to create VMs. But just a thought of managing all those VMs in a library of VMs, hardware/cloud investment to make it work… gives me chills. Luckily, there’s a service called &lt;a href=&quot;http://www.browserstack.com&quot;&gt;browserstack&lt;/a&gt; that does it for you. And let me tell you that for the money they ask you get a LOT.&lt;/p&gt;  &lt;p&gt;Windows XP/7/8, OSX Snow Leopard/Lion/Mountain Lion/iOS-*, Android-* – that’s just a short list of OSes supported by browserstack. But that’s not all. What makes it even better, are the Web Tunnel and Command Line options. So far I have tested only the first, which allows you to run an OS/browser you choose with the LOCAL web site under development. Yes, you are reading correctly, local version. I.e. you do NOT have to publish to a preview public site to make it work. Slick.&lt;/p&gt;  &lt;p&gt;The second option, command like, is more for automated testing. I’m yet to try it, but it sounds promising and something tells me my team will love this option &lt;img style=&quot;border-bottom-style: none; border-left-style: none; border-top-style: none; border-right-style: none&quot; class=&quot;wlEmoticon wlEmoticon-smile&quot; alt=&quot;Smile&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/wlEmoticon-smile_7E14D716.png&quot; /&gt;&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2013-01-08T05:38:00Z" PublishedUtc="2014-04-19T20:30:37.4965386Z" ModifiedUtc="2013-01-08T05:38:00Z" />
      <TagsPart Tags="Automation,Tools" />
      <AutoroutePart Alias="browserstack" UseCustomPattern="false" />
      <TitlePart Title="browserstack" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=2012-summary" Status="Published">
      <BodyPart Text="&lt;p&gt;Year end is always an interesting time. Reminds a sort of retrospective, but that’s a geek in me that sees it that way. Yet what happened this year? A lot for me. Here’s a list of significant things for me:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;Leading and managing people are two different things, combining both and having good results is not an easy task&lt;/li&gt;    &lt;li&gt;Start-up experience, building from concept to a pilot&lt;/li&gt;    &lt;li&gt;Windows Azure experience, lessons learned from Cloud Services with NServiceBus&lt;/li&gt;    &lt;li&gt;Getting a little taste of Client Side “revolution” through knockout and backbone&lt;/li&gt;    &lt;li&gt;Power of ASP.NET MVC WebAPI and SignalR&lt;/li&gt;    &lt;li&gt;RavenDB (and document databases in general) awesomeness I wish I’d discover earlier&lt;/li&gt;    &lt;li&gt;And last, but not least, learning more about humans and myself&lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;This was a good year, packed with lots of learning and new things. The goal for 2013 is to keep it that way and exceed. &lt;/p&gt;  &lt;p&gt;Happy new year to everyone!&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2012-12-21T15:06:00Z" PublishedUtc="2014-04-19T20:30:37.8402853Z" ModifiedUtc="2012-12-21T15:06:00Z" />
      <TagsPart Tags="Personal" />
      <AutoroutePart Alias="2012-summary" UseCustomPattern="false" />
      <TitlePart Title="2012 Summary" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=nuget-package-restoration-on-a-build-server" Status="Published">
      <BodyPart Text="&lt;p&gt;One of our latest projects has failed to restore nuget packages on the build server. Error message was &lt;/p&gt;  &lt;blockquote&gt;   &lt;p&gt;Package restore is disabled by default. To give consent, open the Visual Studio Options dialog, click on Package Manager node and check 'Allow NuGet to download missing packages during build.' You can also give consent by setting the environment variable 'EnableNuGetPackageRestore' to 'true'. &lt;/p&gt; &lt;/blockquote&gt;  &lt;p&gt;I have looked into options, and was surprised that default way to handle it was&lt;/p&gt;  &lt;blockquote&gt;   &lt;ul&gt;     &lt;li&gt;Go to your build server (rdp or physical) &lt;/li&gt;      &lt;li&gt;Start Visual Studio&lt;/li&gt;   &lt;/ul&gt; &lt;/blockquote&gt;  &lt;p&gt;While this is acceptable for a local development, for a build server this is a big red light right there. Gladly, as pointed out in this &lt;a href=&quot;http://blog.deltacode.be/2012/07/10/nuget-package-restore-fails-on-tfs-build-server/&quot;&gt;blog post&lt;/a&gt;, there’s an option of setting a system variable to solve the issue.&lt;/p&gt;  &lt;p&gt;Would be nice to see nuget default to system variable, and then fallback to an instance of VS on a server, but not the way around. &lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2012-12-11T18:52:00Z" PublishedUtc="2014-04-19T20:30:38.21528Z" ModifiedUtc="2012-12-11T18:52:00Z" />
      <TagsPart Tags="Automation,Tools" />
      <AutoroutePart Alias="nuget-package-restoration-on-a-build-server" UseCustomPattern="false" />
      <TitlePart Title="Nuget Package Restoration on a Build Server" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=windows-8-start-menu-button" Status="Published">
      <BodyPart Text="&lt;img style=&quot;display: inline; float: left&quot; align=&quot;left&quot; src=&quot;http://teknowlodgy.com/wp-content/uploads/2012/06/Windows-Vista-Start-Button.png&quot; width=&quot;40&quot; height=&quot;40&quot; mce_src=&quot;http://teknowlodgy.com/wp-content/uploads/2012/06/Windows-Vista-Start-Button.png&quot; /&gt;   &lt;p&gt;Quite amusing to read pros and cons of not having a start menu button in Windows 8. Debates from how great it is to how poor the decision was to remove it are all over the web. &lt;img style=&quot;display: inline; float: right&quot; align=&quot;right&quot; src=&quot;http://upload.wikimedia.org/wikipedia/en/3/3a/Windows7StartMenu.png&quot; width=&quot;183&quot; height=&quot;242&quot; mce_src=&quot;http://upload.wikimedia.org/wikipedia/en/3/3a/Windows7StartMenu.png&quot; /&gt;&lt;/p&gt;  &lt;p&gt;I know people want to be able to navigate to their apps quickly through a single point. But for the love of simplicity, is THIS simple? Yes, I am talking about that monster hiding behind little cute as button button… Start Menu. Not only you had to click through multiple times, but also you had to master multiple cascading menus that where chaotically expanding all over the screen, unless you never installed applications and had it nice and tidy. Is this what people are complaining about? Hmmm, interesting.&lt;/p&gt;  &lt;p&gt;For myself this was not even relevant. I have stopped using this “useful” button along with the spaghetti menu long time ago (from Windows XP) thanks to David (ex-co-worker) who has introduced me to &lt;a href=&quot;http://www.stardock.com/products/objectdock/information_plus.asp&quot; mce_href=&quot;http://www.stardock.com/products/objectdock/information_plus.asp&quot;&gt;Object Dock Plus&lt;/a&gt;. That got rid of the start button along with the unnecessary task bar (you may say I copied Mac – so it be, they also “borrowed” the idea from somewhere, good software development &lt;a href=&quot;http://weblogs.asp.net/blogs/sfeldman/image_2693E620.png&quot; mce_href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_2693E620.png&quot;&gt;&lt;img style=&quot;background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: right; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; align=&quot;right&quot; src=&quot;http://weblogs.asp.net/blogs/sfeldman/image_thumb_651933C6.png&quot; width=&quot;188&quot; height=&quot;245&quot; mce_src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_651933C6.png&quot; /&gt;&lt;/a&gt;practice). Next step – &lt;a href=&quot;http://executor.dk/&quot; mce_href=&quot;http://executor.dk/&quot;&gt;Executor&lt;/a&gt;. There are other alternatives, but I found this one the best. Wish only the creator would compile it in 64bit mode, but that’s a different post. So switching to Windows 8 is seamless – no need in button and menu at all. &lt;/p&gt;  &lt;p&gt;Now why do I write this post? Probably because it’s my reaction to&amp;#160; those who wine and complaint about the fact that someone moved their cheese, ignoring the fact that the cheese was stinky old. Embrace the change, and if you don’t like it, then find alternative, but don’t complaint just because you &lt;u&gt;think&lt;/u&gt; it’s not going to work.&lt;/p&gt;  &lt;p&gt;And BTW, Windows 8 has brought my old hardware back to life. Something that only Linux could do before &lt;img class=&quot;wlEmoticon wlEmoticon-winkingsmile&quot; alt=&quot;Winking smile&quot; src=&quot;http://weblogs.asp.net/blogs/sfeldman/wlEmoticon-winkingsmile_2B29F0DA.png&quot; mce_src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/wlEmoticon-winkingsmile_2B29F0DA.png&quot; /&gt;&lt;/p&gt;  &lt;p&gt;Update 2012-09-20: If you really miss the button, there’s a solution for you as well. It’s called &lt;a href=&quot;http://lee-soft.com/vistart/windows-8-start-menu.html&quot; mce_href=&quot;http://lee-soft.com/vistart/windows-8-start-menu.html&quot;&gt;VI Start&lt;/a&gt; for Windows 8&lt;/p&gt;  &lt;p&gt;Update 20012-11-02: Another free alternative is &lt;a href=&quot;http://classicshell.sourceforge.net/&quot; target=&quot;_blank&quot; mce_href=&quot;http://classicshell.sourceforge.net/&quot;&gt;Classic Start&lt;/a&gt;. &lt;a href=&quot;http://classicshell.sourceforge.net/features.html&quot; target=&quot;_blank&quot; mce_href=&quot;http://classicshell.sourceforge.net/features.html&quot;&gt;Features list &lt;/a&gt;is quite impressing.&lt;/p&gt;  &lt;p&gt;Update 2012-11-08: If you want Shutdown/Logoff/Restart tiles on your new start screen, there’s an easy &lt;a href=&quot;http://gallery.technet.microsoft.com/scriptcenter/Create-a-ShutdownRestartLog-37c8111d&quot;&gt;PowerShell commands&lt;/a&gt; to get the job done.&lt;/p&gt;  &lt;p&gt;Update 2012-11-26: So far the slickest implementation is &lt;a href=&quot;http://www.stardock.com/products/start8/&quot;&gt;Start8&lt;/a&gt; by StarDock, which I like for Fences and ObjectDock.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2012-11-08T15:12:00Z" PublishedUtc="2014-04-19T20:30:38.8715182Z" ModifiedUtc="2012-11-08T15:12:00Z" />
      <TagsPart Tags="" />
      <AutoroutePart Alias="windows-8-start-menu-button" UseCustomPattern="false" />
      <TitlePart Title="Windows 8 – Start Menu Button" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=git-repository-on-windows-server" Status="Published">
      <BodyPart Text="&lt;p&gt;Our group is moving to Git for code management and we were looking for in-house hosting option on Windows platform. I was surprised to find out that out of the box there are not many options. Rolling your own solution (aka setting it up manually) was not an option as we are a small group that is already tasked with enough work. So I started my search for free or paid options. You can guess that options were limited, yet one product I found has exceeded expectation and was just perfect – &lt;a href=&quot;http://www.scm-manager.org&quot;&gt;SCM-Manager&lt;/a&gt;. Easy, simple, smooth integration with Active Directory and Jenkins build server. What else a boy needs &lt;img style=&quot;border-bottom-style: none; border-left-style: none; border-top-style: none; border-right-style: none&quot; class=&quot;wlEmoticon wlEmoticon-smile&quot; alt=&quot;Smile&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/wlEmoticon-smile_3F177B71.png&quot; /&gt;Not to mention that it’s absolutely free. Amazing piece of work. Highly recommended.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2012-11-02T02:13:00Z" PublishedUtc="2014-04-19T20:30:39.4652707Z" ModifiedUtc="2012-11-02T02:13:00Z" />
      <TagsPart Tags="Tools" />
      <AutoroutePart Alias="git-repository-on-windows-server" UseCustomPattern="false" />
      <TitlePart Title="Git Repository on Windows Server" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=not-a-good-day-to-watch-presentations-on-software-development" Status="Published">
      <BodyPart Text="&lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_71ABAFC4.png&quot;&gt;&lt;img style=&quot;background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_5E1E5023.png&quot; width=&quot;787&quot; height=&quot;85&quot; /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Wow.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2012-09-28T02:48:18Z" PublishedUtc="2014-04-19T20:30:40.2152521Z" ModifiedUtc="2012-09-28T02:48:18Z" />
      <TagsPart Tags="" />
      <AutoroutePart Alias="not-a-good-day-to-watch-presentations-on-software-development" UseCustomPattern="false" />
      <TitlePart Title="Not a Good Day to Watch Presentations on Software Development" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=windows-live-multiple-accounts-simultaneously" Status="Published">
      <BodyPart Text="&lt;p&gt;Among the features I love about Gmail is to be able to access multiple accounts w/o signing out and signing in. I’m late to learn this, but apparently you can do the same thing with Windows Live IDs. Same idea, straight forward.&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_02E408AE.png&quot;&gt;&lt;img style=&quot;background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_2FF8F57C.png&quot; width=&quot;686&quot; height=&quot;321&quot; /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;The bonus is that you can control access to your account like LinkedIn, Facebook, Twitter, and Google. Very neat.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2012-09-20T13:58:00Z" PublishedUtc="2014-04-19T20:30:40.8090012Z" ModifiedUtc="2012-09-20T13:58:00Z" />
      <TagsPart Tags="Other" />
      <AutoroutePart Alias="windows-live-multiple-accounts-simultaneously" UseCustomPattern="false" />
      <TitlePart Title="Windows Live - Multiple Accounts Simultaneously" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=curl-to-scrape-data" Status="Published">
      <BodyPart Text="&lt;p&gt;I ran into a situation today when one of our microsites that was developed by a 3rd party is no longer… manageable. To be less politically correct, we don’t have access to the data anymore. Nothing significant, but annoying. The only way to see the data was through the web site. Yet data was paged, with about 40 pages. This is where curl was really helpful. Apparently, you can &lt;a href=&quot;http://www.codediesel.com/tools/6-essential-curl-commands/&quot;&gt;parameterize URLs&lt;/a&gt; (thanks to Sameer’s post) passed into the command, as well as the output. Here’s an example:&lt;/p&gt;  &lt;p&gt;curl.exe -o &lt;strong&gt;page#1.html&lt;/strong&gt; http://dummy.com/show?page=&lt;strong&gt;[1-40&lt;/strong&gt;&lt;strong&gt;] &lt;/strong&gt;&lt;/p&gt;  &lt;p&gt;Where page#1.html will be populated by the current index and index is set from 1 to 40. Awesome trick!&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2012-09-20T13:43:00Z" PublishedUtc="2014-04-19T20:30:41.262116Z" ModifiedUtc="2012-09-20T13:43:00Z" />
      <TagsPart Tags="Automation" />
      <AutoroutePart Alias="curl-to-scrape-data" UseCustomPattern="false" />
      <TitlePart Title="cURL to Scrape Data" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=my-son-s-first-program" Status="Published">
      <BodyPart Text="&lt;p&gt;This is it. Liam has built his first program (sort of) and I am glad that the reason he did it was to confirm what he learned and not as a desire to become a programmer. If you haven’t seen &lt;a href=&quot;http://www.khanacademy.org/cs/&quot;&gt;http://www.khanacademy.org/cs/&lt;/a&gt; check it out. An outstanding resource for kids to learn basic programming and practice some math skills. Liam has started Algebra and this was his first “program” to solidify understanding of concepts such as &lt;em&gt;variable&lt;/em&gt;,&amp;#160; &lt;em&gt;algebraic expression&lt;/em&gt;, &lt;em&gt;formula&lt;/em&gt;, &lt;em&gt;input&lt;/em&gt;, and &lt;em&gt;output&lt;/em&gt;. &lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_0E593A4F.png&quot;&gt;&lt;img title=&quot;image&quot; style=&quot;border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_7B380DA2.png&quot; width=&quot;614&quot; height=&quot;242&quot; /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;I loved the fact that it was in JavaScript, so natural (he knows how to use browser), intuitive (var for variable). Except semicolon – VB developers would agree with Liam on his words: “weird”.&amp;#160; &lt;/p&gt;  &lt;p&gt;As a parent, I’m going to embrace this tool, hoping that Liam will benefit from “real-time” visualization, though I will never substitute a printed book with it.&lt;/p&gt;  &lt;p&gt;PS: Liam is 8, in case you are wondering.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2012-09-06T00:14:00Z" PublishedUtc="2014-04-19T20:30:41.7308667Z" ModifiedUtc="2012-09-06T00:14:00Z" />
      <TagsPart Tags="Personal" />
      <AutoroutePart Alias="my-son-s-first-program" UseCustomPattern="false" />
      <TitlePart Title="My Son`s First Program" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=twitter-bootstrap" Status="Published">
      <BodyPart Text="&lt;p&gt;If you have tried to build a web interface that would work for most of browsers and variety of devices, you’ll appreciate &lt;a href=&quot;http://twitter.github.com/bootstrap/index.html&quot;&gt;Twitter Bootstrap&lt;/a&gt; project/framework. &lt;/p&gt;  &lt;p&gt;Personally, I liked the following:&lt;/p&gt;  &lt;ol&gt;   &lt;li&gt;Decent documentation and examples&lt;/li&gt;    &lt;li&gt;Ease of setup and use (nuget: Install-Package twitter.Bootstrap)&lt;/li&gt;    &lt;li&gt;Intuitive rules names&lt;/li&gt; &lt;/ol&gt;  &lt;p&gt;Recent &lt;a href=&quot;http://www.dotnetcurry.com/magazine/dnc-magazine-issue1.aspx&quot;&gt;DNC Magazine&lt;/a&gt; has a starter article on how to get it going.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2012-09-05T05:58:00Z" PublishedUtc="2014-04-19T20:30:41.980854Z" ModifiedUtc="2012-09-05T05:58:00Z" />
      <TagsPart Tags="ASP.NET,CSSHTML,OSS" />
      <AutoroutePart Alias="twitter-bootstrap" UseCustomPattern="false" />
      <TitlePart Title="Twitter Bootstrap" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=when-manual-is-better-than-automated" Status="Published">
      <BodyPart Text="&lt;p&gt;When system is built, no one wants to baby sit after its up and running. Therefore, there is a strong desire to automate everything, including error handling. But sometimes automation is not suitable for every error, and here is a good example.&lt;/p&gt;  &lt;p&gt;An email signup service that I have created is using a 3rd party service to discover city, region, and country from city name only.&amp;#160; Easy and intuitive for customers, head ache free to maintain (no need to keep data source up-to-date). All good and nice till I got an error reported by someone on the team – instead of City the system reported “junk” (see screenshot).&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_37D247A5.png&quot;&gt;&lt;img style=&quot;background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_548BBCBA.png&quot; width=&quot;461&quot; height=&quot;322&quot; /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;After debugging a little, it was simply bad data coming back from the 3rd party service (which I have to admit was extremely reliable and accurate for the most part). So what do you do? Initial response in the team was “lets code it so that when a city has a comma and space, we strip it along with the rest. I.e., when “Calgary, Alberta” is received for a city name, we strip the “, Alberta” portion. Sounds like a great idea, can be automated and be done.&lt;/p&gt;  &lt;p&gt;But wait a second, there’s also a different issue as well, sometimes system reports Region (aka state / district / province) incorrectly (“AB Alberta” rather than “Alberta”). It is not affecting production right away. So would it be correct to apply the same “fix logic”? At the same time, it could be “City, Regions, Country” returned in a field for City only. Does it make sense to automate the process of fixing the problem (considering that it happens rarely)? Or, perhaps, it’s worth to automate alerts about malformed data, but leave data clean-up to a person?&lt;/p&gt;  &lt;p&gt;We have decided to do the minimum required – automate alerts for data that looks odd, and leave fixing to a person that actually deals with subscriptions.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2012-06-23T01:30:00Z" PublishedUtc="2014-04-19T20:30:42.4495982Z" ModifiedUtc="2012-06-23T01:30:00Z" />
      <TagsPart Tags="Automation" />
      <AutoroutePart Alias="when-manual-is-better-than-automated" UseCustomPattern="false" />
      <TitlePart Title="Automate or Not" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=cut-deployment-time-and-cost-on-windows-azure" Status="Published">
      <BodyPart Text="&lt;p&gt;I’m new to Windows Azure, and learning by making mistakes. There’s a lot to learn about Azure in general, and one of the interesting aspects is deployments and cost associated with it. Taking this moment, I’d like to thank &lt;a href=&quot;http://cloudshaper.wordpress.com/&quot; target=&quot;_blank&quot;&gt;Yves Goeleven&lt;/a&gt;, Azure MVP, who has helped me a lot.&lt;/p&gt;  &lt;p&gt;The simplest deployment that can be done is either directly from Visual Studio .NET. But it’s not automated, and requires a person to trigger it. Next option is to automate it with PowerShell scripts, leveraging &lt;a href=&quot;https://wappowershell.codeplex.com&quot; target=&quot;_blank&quot;&gt;Windows Azure PowerShell Cmdlet&lt;/a&gt;. But you have to ask yourself, what am I deploying EVERY SINGLE TIME? &lt;/p&gt;  &lt;p&gt;When deployed for the first time, I was horrified – 30MB package. Goodness, no wonder it takes forever. “Azure sucks” was my immediate diagnosis. Wait a second, does it? Hmmm… Something tells me it’s not the Azure that sucks. Let’s analyze it. I have several 3rd party dependencies which contributed over 7MB in assemblies. Wow, that’s a lot. Now for each role (and I have two – web and worker roles) that is 7MB x 2 = 14MB. Heavy, don’t you think?&lt;/p&gt;  &lt;p&gt;Solution is simple – Startup Task. Azure supports &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windowsazure/gg456327.aspx&quot; target=&quot;_blank&quot;&gt;Startup tasks&lt;/a&gt;, which is a very powerful concept. You have an option to operate on the machine instance or a role is deployed to, prior to the role execution. This is great, because I can fetch my 3rd party dependencies just before role instance is started, ensuring all dependencies are in place. Where from though? Azure storage. When you deploy your package, you deploy it to the Azure Storage anyways, so why not to upload a zipped blob with your dependencies once, and fetch it every time? This will save you the cost of uploading for &lt;strong&gt;every single deployment &lt;/strong&gt;you do. Event better – when on the same data centre, you don’t pay for moving data. So not only your packages are smaller, shorter deployment time (upload part), but also you save on storage transactions, translated into money saving.&lt;/p&gt;  &lt;p&gt;I have gone through this exercise with the dependency I had – NServiceBus, once just for worker role, and then for web role as well, and results are quite impressive as you can see. From 30MB deployment down to 11MB.&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_6EA3E9B9.png&quot;&gt;&lt;img style=&quot;background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_01786D64.png&quot; width=&quot;783&quot; height=&quot;108&quot; /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Dependencies need to be packaged and uploaded either manually, or scripted as a part of build process upon dependencies version change. Therefore I’d suggest to evaluate which dependencies can follow this path and which cannot. You don’t have to stop on 3rd party only, and can also apply the same to Microsoft Azure assemblies, since those eat up space as well, and are found in every role you deploy. &lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_30E6DC30.png&quot;&gt;&lt;img style=&quot;background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_3DE0BC41.png&quot; width=&quot;643&quot; height=&quot;85&quot; /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;And once you do that, well, you are down to the minimum of your project generated artefacts.&lt;/p&gt;  &lt;p&gt;I have an idea of creating a “Dependencies Start-Up Task” NuGet package that would take away boiler platting away and allow you to achieve this task with less effort. Would you consider it to be useful? Let me know your opinion, and, perhaps, a few bits will be spared and NuGet be less spammed.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2012-06-01T07:55:00Z" PublishedUtc="2014-04-19T20:30:43.3402131Z" ModifiedUtc="2012-06-01T07:55:00Z" />
      <TagsPart Tags="Automation,Cloud,PowerShell" />
      <AutoroutePart Alias="cut-deployment-time-and-cost-on-windows-azure" UseCustomPattern="false" />
      <TitlePart Title="Cut Deployment Time and Cost on Windows Azure" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=cspack-exe" Status="Published">
      <BodyPart Text="&lt;p&gt;When packaging Windows Azure solution from within Visual Studio .NET 2010, CSPACK is generating cspackproperties file behind the scenes, &lt;strong&gt;defaulting to .NET 3.5 Framework&lt;/strong&gt;. I missed that part when going over the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windowsazure/gg432988.aspx&quot; target=&quot;_blank&quot;&gt;documentation&lt;/a&gt; and had to go through the worker role that can’t starts and no error is logged, since worker never loads. Gladly, &lt;a href=&quot;http://social.msdn.microsoft.com/Forums/en-US/windowsazuredevelopment/thread/0e7a89ba-53af-4c0f-a991-1bea69f5ff5f&quot; target=&quot;_blank&quot;&gt;solution&lt;/a&gt; is trivial and so old that is probably long time forgotten by the Azure veterans. But for newbies like myself, don’t dismiss &lt;a href=&quot;https://channel9.msdn.com/Shows/Cloud+Cover/Cloud-Cover-Episode-29-Working-with-CSPack&quot; target=&quot;_blank&quot;&gt;old material&lt;/a&gt;, even if it’s from 2010.&amp;#160; Nothing New Under the Sky…&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2012-05-23T03:37:00Z" PublishedUtc="2014-04-19T20:30:43.6061598Z" ModifiedUtc="2012-05-23T03:37:00Z" />
      <TagsPart Tags="Cloud" />
      <AutoroutePart Alias="cspack-exe" UseCustomPattern="false" />
      <TitlePart Title="CSPACK.EXE - Careful with Defaults" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=backbone-js-nservicebus-and-cloud-hosting" Status="Published">
      <BodyPart Text="&lt;h1&gt;Past&lt;/h1&gt;  &lt;p&gt;In the past I have always created on premises solutions for web applications that have mostly based on the server side code responsible for front UI and backend code, with a little to none client side code (usually called “scripting” with intention that it is not really a code), predominant validation on the server side with some duplication on the client. Technology of choice was ASP.NET MVC. When choice was not mine, sometime it would be ASP.NET WebForms. Services would be created using WCF, without auto-generated proxies.&lt;/p&gt;  &lt;p&gt;Always had quite&amp;#160; a few challenges with this approach, and those included:&lt;/p&gt;  &lt;ol&gt;   &lt;li&gt;How do I test my UI interactions (those are especially brutal when UI generated partially by server side code) &lt;/li&gt;    &lt;li&gt;How do I communicate data more fluently between server and client &lt;/li&gt;    &lt;li&gt;How do I handle services related issues &lt;/li&gt;    &lt;li&gt;How do I scale development for a mixed team that has creative folks w/o coding background or setup on their machines &lt;/li&gt; &lt;/ol&gt;  &lt;h1&gt;Current&lt;/h1&gt;  &lt;p&gt;After looking where web development is heading, it stroke me that I am dismissing client side big time. For the sake of argument, my cellphone is as much capable as my computer browser. Interesting that I still differentiate the two when besides the size and and scale of horse power both are sort of the same these days… &lt;/p&gt;  &lt;p&gt;Either way, after looking at backbone.js and the tooling around it, playing with it in &lt;a href=&quot;https://www.jetbrains.com/webstorm/&quot; target=&quot;_blank&quot;&gt;JetBrains WebStorm IDE&lt;/a&gt; it felt right to write client side application and delegate UI responsibility to the browser executed code, and not script I was using before (note: I still don’t entirely grasp the potential with JavaScript, but hopefully getting there). When watched &lt;a href=&quot;https://peepcode.com/products/backbone-js&quot; target=&quot;_blank&quot;&gt;Backbone Basics&lt;/a&gt; it made me wander, why would I need my server code for UI and related validation? Truly, all it was required for was for data retrieval/storage. I scaled back my server side application to static views, controllers, and integration code (storage, services, etc.). &lt;/p&gt;  &lt;p&gt;This way, some of my questions if not got answered, then at least I could see the light at the end of the tunnel. neither designers didn’t have to stare and @Model.FirstName like fields anymore asking what the heck is that, nor had they to have a full blown development environment in order to make CSS change or markup layout update. It felt great. Suddenly, UI interactions testing became more realistic (I have only saw Jasmin and QUnit in action, and it looks way better than no tests for client side at all I used to complaint about). &lt;/p&gt;  &lt;p&gt;Another great outcome of this was ubiquitous language. I know it sounds a bit weird, we are using C# on server side and JavaScript on the client side. Ubiquitous language for me was JSON. I know could go back and forth leveraging a single standard for expressing data. &lt;/p&gt;  &lt;p&gt;Now in the server side code I could concentrate on things like reliability using &lt;a href=&quot;http://nservicebus.com&quot; target=&quot;_blank&quot;&gt;NServiceBus&lt;/a&gt;, which I like a lot, which solved a lot of questions of reliability, boiler platting code, and simplicity. &lt;/p&gt;  &lt;p&gt;Next step was to challenge on premises hosting. I have tried Azure (cloud solution or whatever the current name is) and all of the above fit so nicely. It just made sense. Static files became content that could be served faster through CDNs (or at least this is my plan), which would possibly include views, templates, images, and client side code. Services could be scaled if needed (granted they are written in appropriate manner, and this is where NServiceBus helps a lot). I also looked at the cost benefit. Looking at the hosting cost, hardware cost, maintenance cost, cloud becomes more attractive. There’s a lot to figure out and improve in my case, though it feels like the right direction.&lt;/p&gt;  &lt;h1&gt;Future&lt;/h1&gt;  &lt;p&gt;So with all this, where am I heading? Exploring more for sure. I have to figure things like automation and deployments using build server and automated scripts, rather than Visual Studio .NET. I have to learn how to leverage web better for things like caching and distribution. Really get JavaScript and not just use it shallowly. Review my old development assumptions and possibly unlearn a thing or two &lt;img style=&quot;border-bottom-style: none; border-left-style: none; border-top-style: none; border-right-style: none&quot; class=&quot;wlEmoticon wlEmoticon-smile&quot; alt=&quot;Smile&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/wlEmoticon-smile_4151CD16.png&quot; /&gt;&lt;/p&gt;  &lt;p&gt;Whatever it is going to be, it looks better than were I started, because it’s getting into a shape where I would want my code to be. And if you happened to know good resources for pushing forward approach I am trying to adopt, don’t be shy to share. &lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2012-05-12T14:47:00Z" PublishedUtc="2014-04-19T20:30:44.0433301Z" ModifiedUtc="2012-05-12T14:47:00Z" />
      <TagsPart Tags="Cloud,JavaScript,NServiceBus,SOA" />
      <AutoroutePart Alias="backbone-js-nservicebus-and-cloud-hosting" UseCustomPattern="false" />
      <TitlePart Title="Backbone.js, NServiceBus, and Cloud Hosting" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=a-b-c-ab-ac" Status="Published">
      <BodyPart Text="&lt;p&gt;Sometimes very basic things are so rooted in our heads that we often forget how to explain those basics to others. So was in my case when I needed to prove my son that A(B+C) is AB+AC and not just AB+C as he originally thought. To my surprise, I couldn’t think of a way to visualize it and explain. Wait a second, if you can’t explain something you supposedly know, then you don’t really know it well… Gladly, a friend of mine remind me the way to prove it. Why am I sharing this incident? Because a lot of times we assume we know something, till we actually need to explain it to others, and that’s where our knowledge is truly tested. This is something that is greatly exposed in pair-programming. And maybe that’s the reason so many avoid it with every possible excuse out there. Just saying…&lt;/p&gt;  &lt;p&gt;Oh, and if you want to see the simplest way to explain to a kid why A(B+C) = AB+AC, here’s visualization:&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/ABC_17F3D7D8.png&quot;&gt;&lt;img style=&quot;background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px&quot; title=&quot;ABC&quot; border=&quot;0&quot; alt=&quot;ABC&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/ABC_thumb_171B71EE.png&quot; width=&quot;247&quot; height=&quot;173&quot; /&gt;&lt;/a&gt;&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2012-04-18T05:37:00Z" PublishedUtc="2014-04-19T20:30:44.5745713Z" ModifiedUtc="2012-04-18T05:37:00Z" />
      <TagsPart Tags="Personal" />
      <AutoroutePart Alias="a-b-c-ab-ac" UseCustomPattern="false" />
      <TitlePart Title="A(B+C)=AB+AC" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=tortoisegit-svn-and-self-signed-certificates" Status="Published">
      <BodyPart Text="&lt;p&gt;I have ran into a problem when tried to pull down a project from subversion repository that uses self-signed certificate. This &lt;a href=&quot;https://code.google.com/p/tortoisegit/issues/detail?id=318#c11&quot; target=&quot;_blank&quot;&gt;post&lt;/a&gt; has helped tremendously. &lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2012-03-15T16:49:00Z" PublishedUtc="2014-04-19T20:30:44.8558284Z" ModifiedUtc="2012-03-15T16:49:00Z" />
      <TagsPart Tags="Tools" />
      <AutoroutePart Alias="tortoisegit-svn-and-self-signed-certificates" UseCustomPattern="false" />
      <TitlePart Title="TortoiseGit, SVN, and Self-Signed Certificates" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=nservicebus-sql-server-and-dtc" Status="Published">
      <BodyPart Text="&lt;p&gt;This exception drove me nuts:&lt;/p&gt;  &lt;blockquote&gt;   &lt;p&gt;System.Transactions.TransactionException: The partner transaction manager has disabled its support for remote/network transactions. (Exception from HRESULT: 0x8004D025) ---&amp;gt; System.Runtime.InteropServices.COMException: The partner transaction manager has disabled its support for remote/network transactions. (Exception from HRESULT: 0x8004D025)&lt;/p&gt; &lt;/blockquote&gt;  &lt;p&gt;&lt;a href=&quot;http://mikaelkoskinen.net/post/fixing-disabled-its-support-for-remote-network-transactions-HRESULT-0x8004D025.aspx&quot; target=&quot;_blank&quot;&gt;This blog post&lt;/a&gt; solved it and made my day. Thank you.&lt;/p&gt;  &lt;p&gt;DTC was disabled on SQL Server machine, which caused messages sent via NServiceBus to fail when NSB service was trying to process them in transactional manner agains SQL Server. As blog post above says, &lt;a href=&quot;http://technet.microsoft.com/en-us/library/cc753510(WS.10).aspx&quot; target=&quot;_blank&quot;&gt;Microsoft post&lt;/a&gt; explains how to address the issue.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2012-03-02T04:16:00Z" PublishedUtc="2014-04-19T20:30:45.1214391Z" ModifiedUtc="2012-03-02T04:16:00Z" />
      <TagsPart Tags="NServiceBus" />
      <AutoroutePart Alias="nservicebus-sql-server-and-dtc" UseCustomPattern="false" />
      <TitlePart Title="NServiceBus, SQL Server, and DTC" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=nservicebus-gotcha-nservicebus-host-exe-can-t-locate-iconfigurethisendpoint" Status="Published">
      <BodyPart Text="&lt;blockquote&gt;   &lt;p&gt;Unhandled Exception: System.InvalidOperationException: No endpoint onfiguration found in scanned assemblies. This usual ly happens when NServiceBus fails to load your assembly contaning IConfigureThisEndpoint. Try specifying the type explicitly in the NServiceBus.Host.exe.config using the appsetting key: EndpointConfigurationTypeScanned path: C:\SearchFeedingService\      &lt;br /&gt;&amp;#160;&amp;#160; at NServiceBus.Host.Program.ValidateEndpoints(IEnumerable`1 endpointConfigurationTypes)       &lt;br /&gt;&amp;#160;&amp;#160; at NServiceBus.Host.Program.GetEndpointConfigurationType()       &lt;br /&gt;&amp;#160;&amp;#160; at NServiceBus.Host.Program.Main(String[] args)&lt;/p&gt; &lt;/blockquote&gt;  &lt;p&gt;First I googled &lt;a href=&quot;http://stackoverflow.com/questions/6095043/the-dreaded-no-endpoint-configuration-found-in-scanned-assemblies-nservicebus&quot; target=&quot;_blank&quot;&gt;stackoverflow&lt;/a&gt;. Handy, but was not my case as I had only one implementation of IConfigureThisEndpoint, same .NET version, and everything was packaged. Then I found &lt;a href=&quot;http://frankmao.com/2010/10/08/my-nservicebus-demo/&quot; target=&quot;_blank&quot;&gt;this post&lt;/a&gt;, which helped a lot – I had to explicitly tell NSB what type implements IConfigureThisEndpoint. Not sure why this was happening.&lt;/p&gt;  &lt;p&gt;&lt;font color=&quot;#ff0000&quot;&gt;&lt;strong&gt;Update:&lt;/strong&gt;&lt;/font&gt; The issue was a result of bad packaging… A newer version of StructureMap.dll was packaged (not the version expected by NSB). So the exception, as mentioned in other posts, is masquerading the real problem. &lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2012-02-22T00:59:00Z" PublishedUtc="2014-04-19T20:30:45.4339357Z" ModifiedUtc="2012-02-22T00:59:00Z" />
      <TagsPart Tags="NServiceBus" />
      <AutoroutePart Alias="nservicebus-gotcha-nservicebus-host-exe-can-t-locate-iconfigurethisendpoint" UseCustomPattern="false" />
      <TitlePart Title="NServiceBus Gotcha - NServiceBus.Host.exe Can’t Locate IConfigureThisEndpoint" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=rename-visual-studio-window-title" Status="Published">
      <BodyPart Text="&lt;p&gt;Today have learned from RSS feed about &lt;a href=&quot;http://visualstudiogallery.msdn.microsoft.com/f3f23845-5b1e-4811-882f-60b7181fa6d6&quot; target=&quot;_blank&quot;&gt;Rename Visual Studio Window Title extension for VS2010&lt;/a&gt;. A great help when working with several branches of the same base code. Borrowing one of the screenshots from the official &lt;a href=&quot;http://visualstudioaddins.svprogramming.net/2012/02/03/rename-visual-studio-window-title-extension-for-visual-studio-2010/&quot; target=&quot;_blank&quot;&gt;blog&lt;/a&gt; to show it.&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_0B29C850.png&quot;&gt;&lt;img style=&quot;background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_5F0CCB5E.png&quot; width=&quot;470&quot; height=&quot;154&quot; /&gt;&lt;/a&gt;&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2012-02-03T16:44:00Z" PublishedUtc="2014-04-19T20:30:46.0901791Z" ModifiedUtc="2012-02-03T16:44:00Z" />
      <TagsPart Tags="VS.NET" />
      <AutoroutePart Alias="rename-visual-studio-window-title" UseCustomPattern="false" />
      <TitlePart Title="Rename Visual Studio Window Title" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=keymaps-for-r-plugin" Status="Published">
      <BodyPart Text="&lt;p align=&quot;left&quot;&gt;If you are starting with R# (which you should definitely consider in case you are a professional .NET developer and not use an alternative), this &lt;a href=&quot;http://keymaps.forresharper.org/&quot; target=&quot;_blank&quot;&gt;plugin&lt;/a&gt; might be helpful to start with all the shortcuts.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2012-01-18T17:30:00Z" PublishedUtc="2014-04-19T20:30:46.387058Z" ModifiedUtc="2012-01-18T17:30:00Z" />
      <TagsPart Tags="Tools" />
      <AutoroutePart Alias="keymaps-for-r-plugin" UseCustomPattern="false" />
      <TitlePart Title="Keymaps For R# Plugin" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=web-sequence-diagram" Status="Published">
      <BodyPart Text="&lt;p&gt;This is one handy tool I really liked – &lt;a href=&quot;http://www.websequencediagrams.com/&quot; target=&quot;_blank&quot;&gt;web sequence diagrams online&lt;/a&gt;. No installations, quick, simple, free (except advance stuff).&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2012-01-16T18:37:00Z" PublishedUtc="2014-04-19T20:30:46.6839187Z" ModifiedUtc="2012-01-16T18:37:00Z" />
      <TagsPart Tags="Tools" />
      <AutoroutePart Alias="web-sequence-diagram" UseCustomPattern="false" />
      <TitlePart Title="Web Sequence Diagram" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=moq-with-indexer" Status="Published">
      <BodyPart Text="&lt;p&gt;Mocking HttpRequest and HttpResponse is not complicated with HttpRequestBase and HttpResponseBase introduced in ASP.NET. I had to mock ServerVariables property of HttpRequest and run into an issue – I was accessing an indexer property and didn’t know how to do this. Gladly, ran into a post that mentioned that indexer is actually utilizing a virtual Get() method. Reflector has confirmed that.&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_305993F1.png&quot;&gt;&lt;img style=&quot;background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: left; border-top: 0px; border-right: 0px; padding-top: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; align=&quot;left&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_2427F3FD.png&quot; width=&quot;173&quot; height=&quot;173&quot; /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_5F0F26C6.png&quot;&gt;&lt;img style=&quot;background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_4FF847EC.png&quot; width=&quot;271&quot; height=&quot;89&quot; /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;Great! Now indexer can be mocked.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2012-01-11T21:49:00Z" PublishedUtc="2014-04-19T20:30:47.6214068Z" ModifiedUtc="2012-01-11T21:49:00Z" />
      <TagsPart Tags="C#,TDD" />
      <AutoroutePart Alias="moq-with-indexer" UseCustomPattern="false" />
      <TitlePart Title="Moq with NameValueCollection" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=writing-a-custom-configurationsection" Status="Published">
      <BodyPart Text="&lt;p&gt;Writing a Custom ConfigurationSection is not a big task, but can be very challenging if you forget some details. I loved &lt;a href=&quot;http://www.abhisheksur.com/2011/09/writing-custom-configurationsection-to.html&quot; target=&quot;_blank&quot;&gt;this post&lt;/a&gt; as it reminded me that you have to have both the Section tag and the collection within it tag… dah!&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2012-01-09T05:13:00Z" PublishedUtc="2014-04-19T20:30:48.2465398Z" ModifiedUtc="2012-01-09T05:13:00Z" />
      <TagsPart Tags="C#" />
      <AutoroutePart Alias="writing-a-custom-configurationsection" UseCustomPattern="false" />
      <TitlePart Title="Writing a Custom ConfigurationSection" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=join-me" Status="Published">
      <BodyPart Text="&lt;p&gt;Working with remote team members can be sometimes challenging. Working with temporary team members is even more challenging. IT can sometime get in your way when you need screen sharing, and you need it fast. Typically I’d go first with the official route – IT provided service (in case company provides that service or has acquired it), VNC (if IT supports it), or something else, more creative. &lt;/p&gt;  &lt;p&gt;Working with a particular vendor yesterday, I had to share something really quick and didn’t have a way to do so. They have asked me to go to &lt;a href=&quot;http://join.me&quot; target=&quot;_blank&quot;&gt;join.me&lt;/a&gt; and click “share”. Boy I got excited by simplicity – within seconds we had screen sharing/controlling going on. No heavy client installation, just a lightweight thin application, no registration, invitation is easy to create, multiple users connecting, sharing mouse/keyboard. And all this for free. Love it.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2012-01-06T15:04:00Z" PublishedUtc="2014-04-19T20:30:48.4182728Z" ModifiedUtc="2012-01-06T15:04:00Z" />
      <TagsPart Tags="Tools" />
      <AutoroutePart Alias="join-me" UseCustomPattern="false" />
      <TitlePart Title="Join.me" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=happy-2012" Status="Published">
      <BodyPart Text="&lt;p&gt;Life is a book. Each one of us is an author. Every year is a chapter. Every New Year eve we wish to start fresh, to begin a new chapter in our life. Let me wish you to live your next year in a such way, that you would be proud to add another chapter to your life book, proudly looking at the passing year and building on top of that many other chapters, full with love, happiness, great achievements, and people so dear to your heart.&lt;/p&gt;  &lt;p&gt;   &lt;br /&gt;Happy 2012.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2012-01-01T00:39:00Z" PublishedUtc="2014-04-19T20:30:48.5901484Z" ModifiedUtc="2012-01-01T00:39:00Z" />
      <TagsPart Tags="Personal" />
      <AutoroutePart Alias="happy-2012" UseCustomPattern="false" />
      <TitlePart Title="Happy 2012" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=esent-database" Status="Published">
      <BodyPart Text="&lt;p&gt;Thank to &lt;a href=&quot;http://ayende.com&quot; target=&quot;_blank&quot;&gt;Oren Eini&lt;/a&gt;, now I have another tool under my toolbelt – ESENT database. Fully transactional database, deployed with all windows, just add &lt;a href=&quot;http://managedesent.codeplex.com/&quot; target=&quot;_blank&quot;&gt;managed wrapper&lt;/a&gt; and good to go. Moral of this post – there’s so much under my nose that I am not even aware of…&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2011-12-30T02:38:00Z" PublishedUtc="2014-04-19T20:30:48.8401437Z" ModifiedUtc="2011-12-30T02:38:00Z" />
      <TagsPart Tags=".NET" />
      <AutoroutePart Alias="esent-database" UseCustomPattern="false" />
      <TitlePart Title="ESENT Database" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=happy-hanukkah-christmas-kwanza-new-year-or-happy" Status="Published">
      <BodyPart Text="" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2011-12-22T17:55:26Z" PublishedUtc="2014-04-19T20:30:49.0588911Z" ModifiedUtc="2011-12-22T17:55:26Z" />
      <TagsPart Tags="" />
      <AutoroutePart Alias="happy-hanukkah-christmas-kwanza-new-year-or-happy" UseCustomPattern="false" />
      <TitlePart Title="Happy Hanukkah, Christmas, Kwanza, New Year or Happy-*!" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=iconfinder" Status="Published">
      <BodyPart Text="&lt;p&gt;I have always wanted to be able to find free icons for the documents and visual explanations I was putting together, w/o violating any creator rights and yet being able to find quality items. Finally a co-worker of mine, &lt;a href=&quot;http://www.elliotnegelev.com/&quot; target=&quot;_blank&quot;&gt;Eliot Negelev&lt;/a&gt;, has showed me the site that does it: &lt;a href=&quot;http://www.iconfinder.com&quot; target=&quot;_blank&quot;&gt;IconFinder.com&lt;/a&gt; Love it!&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2011-12-21T08:39:00Z" PublishedUtc="2014-04-19T20:30:49.2620138Z" ModifiedUtc="2011-12-21T08:39:00Z" />
      <TagsPart Tags="Tools" />
      <AutoroutePart Alias="iconfinder" UseCustomPattern="false" />
      <TitlePart Title="IconFinder" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=nservicebus-first-hands-on-experience" Status="Published">
      <BodyPart Text="&lt;p&gt;I previously blogged on &lt;a href=&quot;http://weblogs.asp.net/sfeldman/archive/2011/12/06/nservicebus-course-afterthought.aspx&quot; target=&quot;_blank&quot;&gt;afterthoughts&lt;/a&gt; on NServiceBus course. Equipped with new powerful knowledge I have approached on of the TODO tasks on my plate – decouple email notification service from the main web application. &lt;/p&gt;  &lt;p&gt;First, the problem with the code that needed to be resolved. A customer is submitting content that has to be approved. Once content was submitted, an email is generated to notify approver. Approver either rejects or accepts the content, and notification is sent to the customer. Simple. Yet the original implementation has email notification logic residing within the application. What happens when application explodes or SMTP is down? Out of luck, sorry.&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Windows-Live-Writer/NServiceBus-for-a-Newbie_BD80/image_2.png&quot;&gt;&lt;img style=&quot;background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Windows-Live-Writer/NServiceBus-for-a-Newbie_BD80/image_thumb.png&quot; width=&quot;371&quot; height=&quot;271&quot; /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;What should it be?&lt;/p&gt;  &lt;p&gt;Personally, I think email notification service should be completely separated from the application. A bus should connect application and services and be the reliable mechanism for transportation of system messages (white envelope on the picture). In case email notification service is not available, messages are not lost, and email are not failing to reach their destination. Application can work with notification service being down or temporarily not available. Once service is available, messages are delivered to the service and it is service responsibility to fire emails to approver and customer. In case SMTP is not working, there’s a single point of failure, which is easy to troubleshoot. When using NServiceBus, queues are transactional, which means system messages are not removed until there’s a successful processing or message was retried defined number of times and moved to the failed queue. The biggest advantage of this approach, is the fact that no system message is lost, application is still running, and once service failure is addressed, system messages can be re-submitted (commands replayed). In worse case scenario, pull out messages manually and send a piece of paper with doves :) Or maybe not, but you got the drift.&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Windows-Live-Writer/NServiceBus-for-a-Newbie_BD80/image_4.png&quot;&gt;&lt;img style=&quot;background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: left; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; align=&quot;left&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Windows-Live-Writer/NServiceBus-for-a-Newbie_BD80/image_thumb_1.png&quot; width=&quot;534&quot; height=&quot;266&quot; /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;h2&gt;Weak Points&lt;/h2&gt;  &lt;p&gt;I have used NServiceBus 2.6 since 3.0 is still in Beta and it wouldn’t be wise to apply a beta in production… There are several points of weakness I run into:&lt;/p&gt;  &lt;ol&gt;   &lt;li&gt;Configurations – yacks. It is not complex, but tedious, and time wasting. I wish there’d be a tool not just to spit out a default configuration one time only, but a tool that actually allows to update and existing solution configuration (NServiceBus folks, here’s a feature request). &lt;/li&gt;    &lt;li&gt;Multiple assembly references – to build the project I had to use different NuGet packages for NSB. I’d rather see a single NuGet package instead of multiple ones that are way too confusing. Once packages are in place, referencing multiple assemblies is awkward. Maybe next version this will be resoled. &lt;/li&gt;    &lt;li&gt;Scattered documentation – documentation is there, but it’s not in a single spot. User group, release notes, NServiceBus site, StackOverflow. I guess this is a typical problem of any software project and not unique to NSB only. &lt;/li&gt;    &lt;li&gt;User group – I just don’t like the interface and functionality of Yahoo user group. Not being able to receive notification for specific thread – drives me insane. &lt;/li&gt; &lt;/ol&gt;  &lt;h2&gt;&lt;/h2&gt;  &lt;p&gt;SOA Done Right?&lt;/p&gt;  &lt;p&gt;I am not sure if using NServiceBus will answer all the questions, but so far a lot of them got covered for me:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;Reliability &lt;/li&gt;    &lt;li&gt;Sub-systems decoupling &lt;/li&gt;    &lt;li&gt;Single Responsibility &lt;/li&gt;    &lt;li&gt;Single point of failure &lt;/li&gt;    &lt;li&gt;Versioning &lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;Next step for myself would be to attend &lt;a href=&quot;http://www.nservicebus.com/AdvancedDistributedSystemsDesignCourse.aspx&quot; target=&quot;_blank&quot;&gt;Udi’s Advanced Distributed Systems Design course&lt;/a&gt;. Till then, more experiments with NSB.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2011-12-21T03:28:00Z" PublishedUtc="2011-12-21T03:28:00Z" ModifiedUtc="2011-12-21T03:28:00Z" />
      <TagsPart Tags="" />
      <AutoroutePart Alias="nservicebus-first-hands-on-experience" UseCustomPattern="false" />
      <TitlePart Title="NServiceBus - First Hands-On Experience" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=nservicebus-course-afterthought" Status="Published">
      <BodyPart Text="&lt;p&gt;I have attended Enterprise Development with NServiceBus course last week. Interestingly, a lot of questions I had back a while ago where answered. Either I was missing the knowledge, or not asking the right questions. Either way, &lt;a href=&quot;http://weblogs.asp.net/sfeldman/archive/2010/09/21/consuming-wcf-service-from-biztalk.aspx&quot; target=&quot;_blank&quot;&gt;what I was trying&lt;/a&gt; to accomplish a year and something ago with BizTalk could be done ten times simpler with NSB. BizTalk was a great tool for mapping, but definitely neither a services platform nor a bus. Long-term running processes with BizTalk (aka &lt;a href=&quot;http://weblogs.asp.net/sfeldman/archive/2010/07/12/debugging-biztalk-orchestrations.aspx&quot; target=&quot;_blank&quot;&gt;Orchestrations&lt;/a&gt;) felt plain wrong. The fact that one was not able to test the bread and butter of a business process w/o having a full end to end integration testing was mind blowing. &lt;a href=&quot;http://weblogs.asp.net/sfeldman/archive/2010/09/29/creating-biztalk-message-in-custom-net-component.aspx&quot; target=&quot;_blank&quot;&gt;Creating messages&lt;/a&gt; outside of BizTalk has felt like a shameful sin.&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;http://info.headspring.com/nservicebus-training/?utm_campaign=NSB-Details-Udi&amp;amp;utm_source=Social%20Media&quot; target=&quot;_blank&quot;&gt;Training at Austin&lt;/a&gt; with &lt;a href=&quot;http://lostechies.com/jimmybogard/&quot; target=&quot;_blank&quot;&gt;Jimmy Bogard&lt;/a&gt; (&lt;a href=&quot;http://www.headspring.com/&quot; target=&quot;_blank&quot;&gt;Headspring&lt;/a&gt;) is a good start to get you going if you wondering around SOA / Bus maze and want clarity.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2011-12-07T01:18:00Z" PublishedUtc="2014-04-19T20:30:50.8244912Z" ModifiedUtc="2011-12-07T01:18:00Z" />
      <TagsPart Tags="SOA" />
      <AutoroutePart Alias="nservicebus-course-afterthought" UseCustomPattern="false" />
      <TitlePart Title="NServiceBus Course – Afterthought" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=semantic-versioning" Status="Published">
      <BodyPart Text="&lt;h3&gt;&lt;font style=&quot;font-weight: normal&quot;&gt;I’ve been experimenting with build artefacts versioning for quite a while. Last time I was using major.minor.build.revision – this worked for us well, yet was not really significant for production operations. New place, new rules, and again into reviewing on how things are done. I am questioning the versioning schema I’ve used, and looking into alternatives. The best I have found so far is &lt;/font&gt;&lt;font style=&quot;font-weight: normal&quot;&gt;&lt;a href=&quot;http://semver.org/&quot; target=&quot;_blank&quot;&gt;Semantic Versioning&lt;/a&gt;. Why this one? Several reasons. &lt;/font&gt;&lt;/h3&gt;  &lt;p&gt;1. It’s publicly documented&lt;/p&gt;  &lt;p&gt;2. It makes sense from development and production operations point of view&lt;/p&gt;  &lt;p&gt;What do you use and what experience did you have with Semantic versioning in that past?&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2011-11-04T23:28:00Z" PublishedUtc="2014-04-19T20:30:51.0901142Z" ModifiedUtc="2011-11-04T23:28:00Z" />
      <TagsPart Tags="Other" />
      <AutoroutePart Alias="semantic-versioning" UseCustomPattern="false" />
      <TitlePart Title="Semantic Versioning" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=autof5" Status="Published">
      <BodyPart Text="&lt;p&gt;Just a few weeks ago I wrote a small application that would allow a designer to work on markup and CSS and when those are saved, changes automatically uploaded to an FTP and local browser that is usually sitting on the second monitor is refreshed. That was a fun side little app to do.&lt;/p&gt;  &lt;p&gt;Today I run into another refresh-option-application&lt;a href=&quot;http://blogs.msdn.com/b/hongyes/archive/2011/11/03/introducing-to-autof5-nuget-package-live-editing-in-asp-net.aspx&quot; target=&quot;_blank&quot;&gt;AutoF5&lt;/a&gt;. It solves ASP.NET development issue with making changes to markup and CSS and refresh &lt;strong&gt;locally&lt;/strong&gt;. Check it out, really nice and simple.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2011-11-04T03:19:00Z" PublishedUtc="2014-04-19T20:30:51.3557374Z" ModifiedUtc="2011-11-04T03:19:00Z" />
      <TagsPart Tags="ASP.NET" />
      <AutoroutePart Alias="autof5" UseCustomPattern="false" />
      <TitlePart Title="AutoF5" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=wix-3-6-beta" Status="Published">
      <BodyPart Text="&lt;p&gt;A while ago I had a conversation with a gentleman who resisted .NET development on the client side reasoning it that in case .NET framework doesn’t exist, installer won’t fail. &lt;a href=&quot;http://robmensching.com/blog/posts/2011/10/24/WiX-v3.6-Beta-released&quot; target=&quot;_blank&quot;&gt;WiX 3.6 Beta&lt;/a&gt; is out and it solved the “problem”. Reminds me of situation when “business code needs to be efficient to take less memory” situation. We’ve all seen that code die slowly and painfully &lt;img style=&quot;border-bottom-style: none; border-left-style: none; border-top-style: none; border-right-style: none&quot; class=&quot;wlEmoticon wlEmoticon-smile&quot; alt=&quot;Smile&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Windows-Live-Writer/WiX-3.6-Beta_78DA/wlEmoticon-smile_2.png&quot; /&gt;&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2011-10-31T20:37:00Z" PublishedUtc="2011-10-31T20:37:00Z" ModifiedUtc="2011-10-31T20:37:00Z" />
      <TagsPart Tags="Other" />
      <AutoroutePart Alias="wix-3-6-beta" UseCustomPattern="false" />
      <TitlePart Title="WiX 3.6 Beta" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=stop-asserting-arguments-by-name" Status="Published">
      <BodyPart Text="&lt;p&gt;Asserting arguments is essentially a healthy practice. What I don’t like, is the fact that since day one &lt;em&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/aa310842(v=VS.71).aspx&quot; target=&quot;_blank&quot;&gt;ArgumentNullException&lt;/a&gt;&lt;/em&gt; used a string for argument name, and now with .NET 4.5 almost knocking on the door, there’s still only string option. &lt;/p&gt;  &lt;div style=&quot;padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px&quot; id=&quot;scid:812469c5-0cb0-4c63-8c15-c81123a09de7:cdca917b-9c0d-4c25-a7fe-33a88ff16705&quot; class=&quot;wlWriterEditableSmartContent&quot;&gt;&lt;pre name=&quot;code&quot; class=&quot;c#:nocontrols&quot;&gt; if (x == null)&#xA;    throw new ArgumentNullException(&quot;Value was null&quot;, &quot;x&quot;);&lt;/pre&gt;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/dd264808.aspx&quot; target=&quot;_blank&quot;&gt;Code Contracts&lt;/a&gt; introduced a while ago, has an implementation for &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.diagnostics.contracts.contract.requires.aspx&quot; target=&quot;_blank&quot;&gt;Requires&lt;/a&gt; precondition that is good, yet still has the same issue. &lt;/p&gt;&#xA;&#xA;&lt;div style=&quot;padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px&quot; id=&quot;scid:812469c5-0cb0-4c63-8c15-c81123a09de7:1162227a-6a44-4243-8715-3baec5da99a9&quot; class=&quot;wlWriterEditableSmartContent&quot;&gt;&lt;pre name=&quot;code&quot; class=&quot;c#:nocontrols&quot;&gt;Contract.Requires&amp;lt;ArgumentNullException&amp;gt;( x != null, &quot;x&quot; );&lt;/pre&gt;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;Many other frameworks still rely on string as a source of the argument name for assertions these frameworks make (Sitecore as a such that I have recently used). &lt;/p&gt;&#xA;&#xA;&lt;div style=&quot;padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px&quot; id=&quot;scid:812469c5-0cb0-4c63-8c15-c81123a09de7:f3c07474-756a-44ad-bf58-e8864a60f2d0&quot; class=&quot;wlWriterEditableSmartContent&quot;&gt;&lt;pre name=&quot;code&quot; class=&quot;c#:nocontrols&quot;&gt;Sitecore.Diagnostics.Assert.ArgumentNotNull(args, &quot;args&quot;);&lt;/pre&gt;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;Why not to add an expression support and be done with it? This way, when you refactor code and “accidentally” rename your argument, assertion message is not going to lie. I’ve being using this code with assertions created by 3rd party:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&#xA;  &lt;div style=&quot;padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px&quot; id=&quot;scid:812469c5-0cb0-4c63-8c15-c81123a09de7:9822f295-d807-4079-aba5-7fb215817708&quot; class=&quot;wlWriterEditableSmartContent&quot;&gt;&lt;pre name=&quot;code&quot; class=&quot;c#:nocontrols&quot;&gt;    public static string Get_Name(Expression&amp;lt;Func&amp;lt;object&amp;gt;&amp;gt; func)&#xA;    {&#xA;      return (func.Body as MemberExpression).Member.Name;&#xA;    }&lt;/pre&gt;&lt;/div&gt;&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;And no worries about re-naming my arguments. &lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2011-10-28T02:53:00Z" PublishedUtc="2014-04-19T20:30:51.965851Z" ModifiedUtc="2011-10-28T02:53:00Z" />
      <TagsPart Tags="C#" />
      <AutoroutePart Alias="stop-asserting-arguments-by-name" UseCustomPattern="false" />
      <TitlePart Title="Stop Asserting Arguments by Name" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=powergui" Status="Published">
      <BodyPart Text="&lt;p&gt;In my &lt;a href=&quot;http://weblogs.asp.net/sfeldman/archive/2011/10/22/goodbye-nant-hello-psake.aspx&quot; target=&quot;_blank&quot;&gt;last post&lt;/a&gt; I have described the move from NAnt to PSake that is based on PowerShell. One missing piece for making the whole experience smooth was Visual Studio support for PowerShell syntax and some Intellisense. Gladly, I have run into &lt;a href=&quot;http://powerguivsx.codeplex.com/&quot; target=&quot;_blank&quot;&gt;PowerGUIVsx&lt;/a&gt;, that does just that: syntax highlighting, intellisense, and even debugging. Sweet!&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2011-10-27T10:22:00Z" PublishedUtc="2014-04-19T20:30:54.4338207Z" ModifiedUtc="2011-10-27T10:22:00Z" />
      <TagsPart Tags="Automation,PowerShell,VS.NET" />
      <AutoroutePart Alias="powergui" UseCustomPattern="false" />
      <TitlePart Title="PowerGUI" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=goodbye-nant-hello-psake" Status="Published">
      <BodyPart Text="&lt;p&gt;My exploration of automation and CI has started around somewhere in 2007. Back then it was more of a guess and trial, trying to figure out what I don’t know and should learn. Automated build scripts was the first thing I needed to learn. Back then, NAnt seamed to be the best candidate, and quite frankly, it was the first thing that looked solid to me, therefore making it my default. Ironically, I had &lt;a href=&quot;http://weblogs.asp.net/sfeldman/archive/2008/01/18/tdd-by-sample-search-criteria.aspx&quot; target=&quot;_blank&quot;&gt;my first build script&lt;/a&gt; working with Visual Source Safe.&lt;/p&gt;  &lt;p&gt;NAnt was a good companion for a long period of time. But at some point in time I have started looking for alternatives. MSBuild looked interesting, considering all of the .NET projects and solutions created by Visual Studio were MSBuild. Why not to extend that and have your scripts in MSBuild completely? But then it was same chatty XML, no better than NAnt quite frankly. I looked at PSake and Rake, but unfortunately, there was no time to get serious with those back then.&lt;/p&gt;  &lt;p&gt;Recently, I had to build a small side project, and wanted to build it&amp;#160; from scratch with no old bits copied from previous projects (templates are good, but they don’t allow you to experiment). So I looked again at PSake, which matured a lot and got to version 4. I was pleasantly surprised how fluid it felt to use it. Reading a few good examples (including the &lt;a href=&quot;https://github.com/JamesKovacs/psake/wiki&quot; target=&quot;_blank&quot;&gt;wiki&lt;/a&gt; on the GitHub) and starting a book on PowerShell (if you want to understand better how PSake achieves what it does so well) I’ve decided to adopt PSake as my build scripting tool from now on.&lt;/p&gt;  &lt;p&gt;Why did I like about PSake? &lt;/p&gt;  &lt;ol&gt;   &lt;li&gt;It is not chatty as XML scripting tools &lt;/li&gt;    &lt;li&gt;It reads easily for developers who are used to C# (or any programming language) &lt;/li&gt;    &lt;li&gt;Easily extendable (based on PowerShell, that is taking full advantage of .NET) &lt;/li&gt;    &lt;li&gt;Deployment is a piece of cake (this one is really big – PowerShell is on every computer these days, including servers, which means you do not have to worry to set it up, it’s there for you) &lt;/li&gt;    &lt;li&gt;Remote executing – being able to execute scripts remotely allows to have that “backdoor” and “visibility” that I was missing sometimes with NAnt &lt;/li&gt; &lt;/ol&gt;  &lt;p&gt;I am sure there’s more that I haven’t discovered yet, but just this makes it enough for myself to make the decision. So NAnt, So long and thank you for all the fish.&lt;/p&gt;  &lt;p&gt;PSake, let the work begin.&lt;/p&gt;  &lt;p&gt;2012-01-03: &lt;a href=&quot;http://geek.ianbattersby.com/2012/01/01/iis7-self-elevating-powershell&quot; target=&quot;_blank&quot;&gt;IIS7 and Self-Elevating PowerShell script for web application deployment&lt;/a&gt;&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2011-10-22T20:22:00Z" PublishedUtc="2014-04-19T20:30:54.7619428Z" ModifiedUtc="2011-10-22T20:22:00Z" />
      <TagsPart Tags="PowerShell" />
      <AutoroutePart Alias="goodbye-nant-hello-psake" UseCustomPattern="false" />
      <TitlePart Title="Goodbye NAnt. Hello PSake." />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=eazfuscator-net" Status="Published">
      <BodyPart Text="&lt;p&gt;There’s another kid on the .NET obfuscation block – totally free and plays nicely with command line - &lt;a href=&quot;http://www.foss.kharkov.ua/g1/projects/eazfuscator/dotnet/Default.aspx&quot; target=&quot;_blank&quot;&gt;Eazfuscator.NET&lt;/a&gt;. It also has a &lt;a href=&quot;http://nuget.org/List/Packages/eazfuscator.net&quot; target=&quot;_blank&quot;&gt;NuGet package&lt;/a&gt; available for download, though it’s not up-to-date.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2011-10-18T20:11:00Z" PublishedUtc="2014-04-19T20:30:55.136937Z" ModifiedUtc="2011-10-18T20:11:00Z" />
      <TagsPart Tags="" />
      <AutoroutePart Alias="eazfuscator-net" UseCustomPattern="false" />
      <TitlePart Title="Eazfuscator.NET" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=using-nuget-without-committing-packages-to-source-control" Status="Published">
      <BodyPart Text="&lt;p&gt;I am catching up on NuGet and learning a few good things. A project should be in buildable state once you pull it from the repository. This is always my goal with the projects I work on. Therefore, one of the requirements that I always set was to have “autonomous” project – everything included within the project itself (libraries, tools, etc.). Some exceptions would be things that don’t make sense to commit and rather have them installed on all machines (OS, Server apps, SDKs, etc.). &lt;/p&gt;  &lt;p&gt;With NuGet, my initial approach was always to commit the packages. Then why would someone commit a package that is already sitting on NuGet.org and can be easily fetched from there without trashing my company's repository per each project with probably the same libraries used across multiple projects. I needed &lt;a href=&quot;http://docs.nuget.org/docs/workflows/using-nuget-without-committing-packages&quot; target=&quot;_blank&quot;&gt;a way to use NuGet w/o committing packages to source control&lt;/a&gt;. And it’s there! NuGetPowerTools does it in a great way. It modifies project files to verify that components brought through NuGet still present, and if they don’t, instructs to fetch them locally.&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Windows-Live-Writer/Using-NuGet-without-committing-packages-_D9C/image_2.png&quot;&gt;&lt;img style=&quot;background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Windows-Live-Writer/Using-NuGet-without-committing-packages-_D9C/image_thumb.png&quot; width=&quot;946&quot; height=&quot;126&quot; /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;So the next time projects compile, it only checks for packages, but doesn’t pull them down as they already exist.&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Windows-Live-Writer/Using-NuGet-without-committing-packages-_D9C/image_4.png&quot;&gt;&lt;img style=&quot;background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Windows-Live-Writer/Using-NuGet-without-committing-packages-_D9C/image_thumb_1.png&quot; width=&quot;945&quot; height=&quot;103&quot; /&gt;&lt;/a&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;Since it rely on project files, it doesn’t matter if your first compilation takes place in Visual Studio on command line, both will work. For Visual studio it will fix the missing assemblies referenced in project issue.&lt;/p&gt;  &lt;p&gt;Love it!&lt;/p&gt;  &lt;p&gt;2011-12-29: Simpler approach is described &lt;a href=&quot;http://docs.nuget.org/docs/workflows/using-nuget-without-committing-packages&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;. &lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2011-10-16T13:05:00Z" PublishedUtc="2011-10-16T13:05:00Z" ModifiedUtc="2011-10-16T13:05:00Z" />
      <TagsPart Tags="" />
      <AutoroutePart Alias="using-nuget-without-committing-packages-to-source-control" UseCustomPattern="false" />
      <TitlePart Title="Using NuGet without committing packages to source control" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=windows-phone" Status="Published">
      <BodyPart Text="&lt;p&gt;Windows Phone, Windows Phone 7, Windows Phone 7.5. And still no change. Consumer is not attracted. I hear a lot about cool features and awesome innovations on various .NET podcasts. A lot is written in MSDN magazine and different .NET developer blogs. Yet consumer is not interested. Or maybe is not even aware of all the mighty potential that can be his or her just by trading the iconical iPhone for Windows logo. Heck, let the trends show what consumer is interested in:&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Windows-Live-Writer/2802731ccf90_74B3/image_2.png&quot;&gt;&lt;img style=&quot;background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Windows-Live-Writer/2802731ccf90_74B3/image_thumb.png&quot; width=&quot;594&quot; height=&quot;299&quot; /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Looking around, I can’t find a single one in use among my friends and co-workers. Ironically, quite a few of those happened to be developers as well. So where does it hide? Oh, maybe it masks under that apple logo?…&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;Moral&lt;/strong&gt;&lt;/p&gt;  &lt;p&gt;If you don’t give it to consumer, it doesn’t matter how great it is, it is still a failure.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2011-10-13T20:47:00Z" PublishedUtc="2011-10-13T20:47:00Z" ModifiedUtc="2011-10-13T20:47:00Z" />
      <TagsPart Tags="Other" />
      <AutoroutePart Alias="windows-phone" UseCustomPattern="false" />
      <TitlePart Title="Windows Phone" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=mvc-application-with-php-view" Status="Published">
      <BodyPart Text="&lt;p&gt;For somone who has expertise in PHP and not Razor/ASPX views &lt;a href=&quot;http://www.php-compiler.net/&quot; target=&quot;_blank&quot;&gt;Phalanger&lt;/a&gt; might be a great middle ground. This is an &lt;a href=&quot;http://www.infoq.com/articles/Phalanger&quot; target=&quot;_blank&quot;&gt;integration&lt;/a&gt; of PHP and .NET. Always great to see another language join the .NET club &lt;img style=&quot;border-bottom-style: none; border-left-style: none; border-top-style: none; border-right-style: none&quot; class=&quot;wlEmoticon wlEmoticon-smile&quot; alt=&quot;Smile&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/wlEmoticon-smile_0B6D26AE.png&quot; /&gt;&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2011-10-12T14:40:00Z" PublishedUtc="2014-04-19T20:30:57.574405Z" ModifiedUtc="2011-10-12T14:40:00Z" />
      <TagsPart Tags=".NET" />
      <AutoroutePart Alias="mvc-application-with-php-view" UseCustomPattern="false" />
      <TitlePart Title="MVC Application with PHP View" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=raivendb-course-in-calgary" Status="Published">
      <BodyPart Text="&lt;p&gt;Ok, now that you actually looked at the post, here are the details.&lt;/p&gt;  &lt;p&gt;I am looking into bringing &lt;a href=&quot;http://ayende.com&quot; target=&quot;_blank&quot;&gt;Oren Eini&lt;/a&gt; to Calgary to teach &lt;a href=&quot;http://ravendb.net/&quot; target=&quot;_blank&quot;&gt;RavenDB&lt;/a&gt; course. The group will not exceed 6-8 people, and we already have two participants willing to take it. This is a great deal, considering you saving almost 50% (flights, hotel, traveling time if not paid by your company). If you are from Calgary or around and willing to take the course, drop me a note at feldman {dot} sean {at} gmail {dot} com.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2011-10-12T04:52:00Z" PublishedUtc="2014-04-19T20:30:57.8400294Z" ModifiedUtc="2011-10-12T04:52:00Z" />
      <TagsPart Tags="RavenDB" />
      <AutoroutePart Alias="raivendb-course-in-calgary" UseCustomPattern="false" />
      <TitlePart Title="RaivenDB Course in Calgary" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=windows-8-in-desktop-mode" Status="Published">
      <BodyPart Text="&lt;p&gt;Ironically, there are too many people predicting the “end of the world”. For Windows 8 Metro style UI doesn’t make sense if you are developing business applications or using a non-touch interface computer. Windows 8 allows to disable Metro UI (and by that also disables applications that are Metro UI applications) and puts UI into the “conventional” Window 7 look and feel. Registry key for explorer can allow you switching between Desktop and Metro UIs as mentioned in this &lt;a href=&quot;http://www.ghacks.net/2011/09/15/windows-8-start-menu-toggle-disable-enable-metro-ui/&quot; target=&quot;_blank&quot;&gt;blog post&lt;/a&gt;. So end of the world is postponed to some later days folks.&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/win8dev-2011-10-04-11-16-05_1F28486E.png&quot;&gt;&lt;img style=&quot;background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px&quot; title=&quot;win8dev-2011-10-04-11-16-05&quot; border=&quot;0&quot; alt=&quot;win8dev-2011-10-04-11-16-05&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/win8dev-2011-10-04-11-16-05_thumb_61B7E3E6.png&quot; width=&quot;644&quot; height=&quot;484&quot; /&gt;&lt;/a&gt;&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2011-10-04T17:23:00Z" PublishedUtc="2014-04-19T20:30:58.3400233Z" ModifiedUtc="2011-10-04T17:23:00Z" />
      <TagsPart Tags="Other" />
      <AutoroutePart Alias="windows-8-in-desktop-mode" UseCustomPattern="false" />
      <TitlePart Title="Windows 8 in Desktop mode" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=javascript-unit-testing" Status="Published">
      <BodyPart Text="&lt;p&gt;Recent announcements for Windows 8 development is not including JavaScript with HTML5 has opened up Windows development for more developers. I wanted to see where testing for JavaScript is standing and was surprised at the variety of frameworks out there. Back in the days when I was trying to do web testing with WatiN, it was painful, especially when a browser had to be loaded for those tests. My interest was around JavaScript testing w/o need to load a browser. &lt;a href=&quot;http://docs.jquery.com/Qunit&quot; target=&quot;_blank&quot;&gt;QUnit&lt;/a&gt; looked very good, but it still required an actual browser. Also, in a CI scenario, I wanted to be able to use a command line/tool execution style.&lt;/p&gt;  &lt;p&gt;I have ran into &lt;a href=&quot;http://chutzpah.codeplex.com/&quot; target=&quot;_blank&quot;&gt;Chutzpah&lt;/a&gt; test runner. Great wrapper for QUnit executing w/o need for a browser. More than that, it doesn’t require that standard QUnit shell HTML file for output, which makes tests execution simple and straight forward – execute command line test runner on the scripts folder.&lt;/p&gt;  &lt;p&gt;Successful tests execution&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_39D95587.png&quot;&gt;&lt;img style=&quot;background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_40202C15.png&quot; width=&quot;536&quot; height=&quot;182&quot; /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Failed tests execution&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_466702A3.png&quot;&gt;&lt;img style=&quot;background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_57D7637B.png&quot; width=&quot;791&quot; height=&quot;245&quot; /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;This is perfect! Not only runs w/o browser, but also nicely fits to run with CI on a server.&lt;/p&gt;  &lt;p&gt;The test runner also comes with a Visual Studio addin to run JavaScripts tests within IDE.&lt;/p&gt;  &lt;p&gt;This is the one that I found that nailed it for what I needed. Are there other tools that can do the same and more?&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2011-09-30T15:34:00Z" PublishedUtc="2014-04-19T20:30:59.2775632Z" ModifiedUtc="2011-09-30T15:34:00Z" />
      <TagsPart Tags="CI,TDD" />
      <AutoroutePart Alias="javascript-unit-testing" UseCustomPattern="false" />
      <TitlePart Title="JavaScript Unit Testing" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=shana-tova" Status="Published">
      <BodyPart Text="&lt;p&gt;It’s 5772 New (Jewish) Year tomorrow. I wish everyone Shana Tova.&lt;/p&gt;  &lt;div style=&quot;padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px&quot; id=&quot;scid:5737277B-5D6D-4f48-ABFC-DD9C333F4C5D:3552cfee-2f5f-4e39-b5df-bea6d47dd6db&quot; class=&quot;wlWriterEditableSmartContent&quot;&gt;&lt;div&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=3PnPHhwu5xU&quot; target=&quot;_new&quot;&gt;&lt;img src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/video1d325b5d625b_3C47246D.jpg&quot; style=&quot;border-style: none&quot; galleryimg=&quot;no&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2011-09-28T03:46:00Z" PublishedUtc="2014-04-19T20:30:59.9025099Z" ModifiedUtc="2011-09-28T03:46:00Z" />
      <TagsPart Tags="Personal" />
      <AutoroutePart Alias="shana-tova" UseCustomPattern="false" />
      <TitlePart Title="Shana Tova" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=not-invented-here-syndrome-case-for-having-it" Status="Published">
      <BodyPart Text="&lt;p&gt;In general, NIHS (Not Invented Here Syndrome) is a negative for your core business. Trying to re-invent something that already exists and probably does the job 10 times better. But what happens when an existing tool doesn’t do it better, or it is not customizable to your business, or it’s something that you’d pay wa-a-a-y too much just to use a fraction of what it can? &lt;/p&gt;  &lt;p&gt;I ran into an old &lt;a href=&quot;http://www.joelonsoftware.com/articles/fog0000000007.html&quot; target=&quot;_blank&quot;&gt;post from Joel Spolsky&lt;/a&gt; and tend to agree. Also, something that sales people are not concerned about, in some cases testability is not possible with out-of-the-box products, leaving your product blindly trust that it’s working. &lt;/p&gt;  &lt;p&gt;Bottom line – I am not advocating for building it all. On contrary, if you can leverage an existing library/tool/product, do it. Just don’t sacrifice what your core business will rely on and find out that it’s missing.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2011-09-20T19:23:00Z" PublishedUtc="2014-04-19T20:31:00.1524993Z" ModifiedUtc="2011-09-20T19:23:00Z" />
      <TagsPart Tags="Other" />
      <AutoroutePart Alias="not-invented-here-syndrome-case-for-having-it" UseCustomPattern="false" />
      <TitlePart Title="Not Invented Here Syndrome – Case for Having it" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=windows-8-first-impression" Status="Published">
      <BodyPart Text="&lt;p&gt;First impression is always important. I have decided to install Windows 8 in a virtual environment. Even though running it “natively” on a hardware is a better experience, I still wanted to see how well the hardware requirement was slimed down. Also, I have a very old idea of working in a VM box only, but it was always not a simple goal to achieve with Windows and Visual Studio being such a RAM / recourses pigs. This time around things looked very…. impressing.&lt;/p&gt;  &lt;p&gt;First, I have defined my system as a single 1, single core machine, with only 2GB of RAM. Installation was very quick. UI is simplified and clean. It took less than Windows 7 to load and was really fast.&amp;#160; Over time fast loading time can disappear, But for that, seems like Windows 8 has an option – refresh windows installation w/o affecting user files. How good it is I don’t know, but worth trying out.&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_48EC8030.png&quot;&gt;&lt;img style=&quot;background-image: none; border-bottom: 0px; border-left: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_39D5A156.png&quot; width=&quot;244&quot; height=&quot;73&quot; /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;I really loved the fact that account created for logging into the Windows could be either a local account or my existing Live ID account – handy.&lt;/p&gt;  &lt;p&gt;Using tiles interface w/o a touch computer is a bit weird in the beginning, yet easy to get used to. Page Up/Down Home/End keys scroll the screen. &lt;/p&gt;  &lt;p&gt;Tiles is like an alternative view of the windows menu. Instead of the regular Windows Button with the traditional menu you get to switch between the tiles view and the conventional desktop view, which is very similar to Windows 7.&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_38FD3B6C.png&quot;&gt;&lt;img style=&quot;background-image: none; border-bottom: 0px; border-left: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_5120A5C7.png&quot; width=&quot;182&quot; height=&quot;50&quot; /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Hardware utilization (keep in mind this is a very limited virtual machine) wasn’t bad at all after 15 minutes of playing around.&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_1E509F53.png&quot;&gt;&lt;img style=&quot;background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_7C1893CC.png&quot; width=&quot;530&quot; height=&quot;484&quot; /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;And I really loved what was done with the task manager&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_78B6FC24.png&quot;&gt;&lt;img style=&quot;background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_6F0E8DEE.png&quot; width=&quot;536&quot; height=&quot;484&quot; /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Loading Visual Studio .NET 11 was a blast! Literally a few seconds. I do not remember VS taking up that little memory since… ever. Exciting. Unfortunately, due to the fact that this is a preview only, Metro applications is all I could get from the new project menu. At least I am glad that testing is there. And do you see JavaScript getting a first-class citizenship? That’s neat.&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_4974EAC0.png&quot;&gt;&lt;img style=&quot;background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_560297DC.png&quot; width=&quot;644&quot; height=&quot;340&quot; /&gt;&lt;/a&gt;&lt;/p&gt;            &lt;p&gt;XAML (WPF) is the default UI. That felt very familiar. Blend properties window was right in VS – handy.&lt;/p&gt;  &lt;p&gt;I am very impressed with the responsiveness and simplicity. Can’t wait to get the release bits and install it on the real hardware.&lt;/p&gt;  &lt;p&gt;PS: to install Win8 on VMWare, I used &lt;a href=&quot;http://www.mywindowsclub.com/resources/5081-Install-Windows-VMWare-Workstation.aspx&quot; target=&quot;_blank&quot;&gt;this tutorial&lt;/a&gt;&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2011-09-17T05:21:00Z" PublishedUtc="2014-04-19T20:31:01.6837274Z" ModifiedUtc="2011-09-17T05:21:00Z" />
      <TagsPart Tags="Other" />
      <AutoroutePart Alias="windows-8-first-impression" UseCustomPattern="false" />
      <TitlePart Title="Windows 8 – First Impression" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=curing-singletonitis" Status="Published">
      <BodyPart Text="&lt;p&gt;A few years ago I have blogged about &lt;a href=&quot;http://weblogs.asp.net/sfeldman/archive/2008/10/22/singletonitis.aspx&quot; mce_href=&quot;http://weblogs.asp.net/sfeldman/archive/2008/10/22/singletonitis.aspx&quot; target=&quot;_blank&quot;&gt;Singletonitis&lt;/a&gt;. Another place, different people, yet the same problem appears again – singletonitis. The issues I have outlined back then where &lt;/p&gt;  &lt;p&gt;1. Testing&lt;/p&gt;  &lt;p&gt;2. Difficulty to replace implementation&lt;/p&gt;  &lt;p&gt;3. Requirement to track all the location where Singleton is utilized once we need to replace it.&lt;/p&gt;  &lt;p&gt;I’d like to look into these again and re-address this ‘disease’ so to speak.&lt;/p&gt;  &lt;h2&gt;Testing (for Design Verification)&lt;/h2&gt;  &lt;p&gt;Testing is important. Maybe back then (2008) some would argue, but not today. But what this testing is for? To confirm that implementation adheres to the desired design. And, as a side effect, to have a safety net. The why not to test singleton implementation and be done? The headache with singleton is not about singleton itself, but other code/components that rely on it. Yes, these days you could use tools like Moles and Typemock, but why would you if you could DESIGN your code properly to begin with?&lt;/p&gt;  &lt;p&gt;To me it is more about team decision on code design and collaboration. Imagine the following two scenarios:&lt;/p&gt;  &lt;p&gt;Scenario 1: John – “I will work on the UserSession and provide you (Mike) with the contract”. Mike – “Sounds good, I’ll throw into that contract a few methods I need, when you get to implement it, lets talk”.&lt;/p&gt;  &lt;p&gt;Scenario 2: John – “I will work on the UserSession that will do This and That”. Mike – “I will work on the component and will require UserSession, but don’t know if I need This, That, or Whatever”.&lt;/p&gt;  &lt;p&gt;Can you spot where singletonitis thrives? Absolutely, in the team that works in silos and throws stuff over the fence. In the scenario where collaborative work is observed, need for “utility-like” classes is drastically low. After all, why would I create waste that is not used by anyone.&lt;/p&gt;  &lt;h2&gt;Other Issues&lt;/h2&gt;  &lt;p&gt;Other issues (#2,#3) are insignificant and easily solved just by following #1. Testing leads to better code design, it leads to contracts, contracts lead to design-by-contract, allowing principles like Inversion of Control (IoC) and &lt;a href=&quot;/sfeldman/archive/2008/02/20/understanding-ioc-container-part-2.aspx&quot; target=&quot;_blank&quot; mce_href=&quot;/sfeldman/archive/2008/02/20/understanding-ioc-container-part-2.aspx&quot;&gt;Dependency Injection&lt;/a&gt; (DI). Gladly, these days, we have enough tools and knowledge among developers to recognize it (Ninject, AutoFac, Castle, Unity, etc). &lt;/p&gt;  &lt;p&gt;So the next time you see code&amp;nbsp; where Signleton is abused – cure it.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2011-09-16T03:56:00Z" PublishedUtc="2014-04-19T20:31:02.0118644Z" ModifiedUtc="2011-09-16T03:56:00Z" />
      <TagsPart Tags="C#,OO,Patterns,TDD" />
      <AutoroutePart Alias="curing-singletonitis" UseCustomPattern="false" />
      <TitlePart Title="Curing Singletonitis" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=windows-8" Status="Published">
      <BodyPart Text="&lt;p&gt;Watching Build event I couldn’t not to smile. Microsoft is not always getting it right, but it looks like this time around they bet on a stronger horse. When .NET was released, ASP.NET was an attempt to bring desktop development to the web. Not the best approach. This time around, web development is coming to the desktop. Sounds interesting, and quite promising.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2011-09-14T04:05:00Z" PublishedUtc="2014-04-19T20:31:02.8243383Z" ModifiedUtc="2011-09-14T04:05:00Z" />
      <TagsPart Tags=".NET" />
      <AutoroutePart Alias="windows-8" UseCustomPattern="false" />
      <TitlePart Title="Windows 8" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=fat-me" Status="Published">
      <BodyPart Text="&lt;p&gt;What would I look like with excessive weight… Hilarious! Another reason to watch eating habits and exercising &lt;img style=&quot;border-bottom-style: none; border-left-style: none; border-top-style: none; border-right-style: none&quot; class=&quot;wlEmoticon wlEmoticon-smile&quot; alt=&quot;Smile&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/wlEmoticon-smile_46A802FE.png&quot; /&gt;&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/clip_image002_14442F7F.jpg&quot;&gt;&lt;img style=&quot;background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px&quot; title=&quot;clip_image002&quot; border=&quot;0&quot; alt=&quot;clip_image002&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/clip_image002_thumb_0599839A.jpg&quot; width=&quot;300&quot; height=&quot;450&quot; /&gt;&lt;/a&gt;&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2011-09-02T20:48:00Z" PublishedUtc="2014-04-19T20:31:03.6055783Z" ModifiedUtc="2011-09-02T20:48:00Z" />
      <TagsPart Tags="Personal" />
      <AutoroutePart Alias="fat-me" UseCustomPattern="false" />
      <TitlePart Title="Fat Me" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=todo" Status="Published">
      <BodyPart Text="&lt;p&gt;There’s no perfect software. If it would exist, we’d never build a newer one.&lt;/p&gt;  &lt;p&gt;There’s also software that should never be built from the beginning. TFS is one of those.&lt;/p&gt;  &lt;p&gt;I’ve used it for the past 3 months, and it was way far more than just an unpleasant experience. I have previously worked with VSS, TFS, and Mercurial. I am somewhat biased, yet towards proper work experience and quality of tools.&amp;#160; These are the issues that I have had with this software.&lt;/p&gt;  &lt;p&gt;1. When getting latest of the project, the UI doesn’t show what’s coming down. In order to be able to see it, one has to go through “View History” on solution, which shows changes on a solution file only. After than, and extra step is to remove solution (.sln) file from the path and refresh to see the log. Possibly there’s another way, but boy this is painful. &lt;/p&gt;  &lt;p&gt;2. Changed password on TFS server caused VS.NET 2010 to freeze.&lt;/p&gt;  &lt;p&gt;3. Renamed and committed file was reported as missing on a following commitment.&lt;/p&gt;  &lt;p&gt;4. File marked as checked-out despite undoing changes (this is one of the biggest issues I’ve had with TFS. The notion of checking file out is so native to old and ugly VSS, that it just felt like going years back into dark ages).&lt;/p&gt;  &lt;p&gt;5. Online/Offline explicit concept – horrible. Great if you work in the office only and never work out of office. But when you do, it just becomes an annoyance.&lt;/p&gt;  &lt;p&gt;6. Going online/offline requires to re-enter credentials. Really? Why not to keep it optional? Why not to allow credential saving? The tool is supposed to work for you, not against you. Big deal you say. Well, when you work with external (to organization) TFS server, and have to enter domain_name\user_name and password that is for security purposes generated as an insanely sequence of random characters – it is painful.&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;7. Remember how VSS one day would just loose your commits? Same feeling you get when TFS doesn’t detect changes done “offline” and throwing this message at you (yes, laundry services where required at that moment).&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_74234BA7.png&quot;&gt;&lt;img style=&quot;background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_1770404D.png&quot; width=&quot;323&quot; height=&quot;188&quot; /&gt;&lt;/a&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;8. Non intuitive UI (some commands are in context menu, some in toolbar menu, like Exclude file). You can’t call VS.NET 2010 interface “a lick-able” UI, though TFS is complete fiasco on that. A good example – select all files for commit (highlight all files, and click spacebar).&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_57302728.png&quot;&gt;&lt;img style=&quot;background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_3A470253.png&quot; width=&quot;437&quot; height=&quot;304&quot; /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;9. Merging conflicts is cumbersome (non-intuitive UI, file marked as in conflict, and just opening it resolved it, believe it or not!?!).&lt;/p&gt;  &lt;p&gt;10. Bulk checkout when unneeded – edited ASCX file, but code behind AND designer files were “checked out” and committed… old good VSS days bubble up in my head.&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_50893233.png&quot;&gt;&lt;img style=&quot;background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_2B8B71BA.png&quot; width=&quot;471&quot; height=&quot;192&quot; /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;11. Explorer based visualization doesn’t work when you are offline at all, something that other tools providing.&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_06E5CE0C.png&quot;&gt;&lt;img style=&quot;background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_5415C797.png&quot; width=&quot;450&quot; height=&quot;144&quot; /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;12. Undo Pending Checkins not always actually does what it claims to do… Surprise, surprise.&lt;/p&gt;  &lt;p&gt;13. Can’t search comments history. Wow.&lt;/p&gt;  &lt;p&gt;I can go on and on, but at this point it’s enough. As for our group – we won’t utilize TFS after this project. As for myself, I will not touch this thing that can’t even do one thing, but do it well. Yes, it’s coming from MS, yes it can manage project, items, etc. But if it can’t properly serve the sole purpose it was created for, what’s good in it then? The good part - there are plenty of alternatives (SVN, Hg, Git, etc.).&lt;/p&gt;  &lt;p&gt;&lt;font color=&quot;#ff0000&quot;&gt;Update 2011-10-11&lt;/font&gt;&lt;/p&gt;  &lt;p&gt;14. Today it just blew in my face when I tried to commit changes. Apparently, the database behind the monster refused to cooperate with the message “&lt;a href=&quot;http://bhavikblogs.blogspot.com/2009/05/tf30042-database-is-full-contact-your.html&quot; target=&quot;_blank&quot;&gt;Database is full. Contact your administrator&lt;/a&gt;”. Wow, for the whole time I’ve used Subversion never I encountered a message/issue like this one. Great job, TFS. Not to mention wasted time till the issue was fixed by system administrator…&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2011-09-01T03:39:00Z" PublishedUtc="2014-04-19T20:31:05.3555574Z" ModifiedUtc="2011-09-01T03:39:00Z" />
      <TagsPart Tags="" />
      <AutoroutePart Alias="todo" UseCustomPattern="false" />
      <TitlePart Title="TFS" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=being-productive-with-mouse" Status="Published">
      <BodyPart Text="&lt;p&gt;I am a big fan of &lt;a href=&quot;http://weblogs.asp.net/sfeldman/archive/2009/07/18/productivity-with-multiple-monitors.aspx&quot; target=&quot;_blank&quot;&gt;productivity&lt;/a&gt; and for myself &lt;a href=&quot;http://weblogs.asp.net/sfeldman/archive/2008/04/09/pair-programming-keyboard-and-mice.aspx&quot; target=&quot;_blank&quot;&gt;mouse&lt;/a&gt; is usually more of a drag than help when coding. While watching a presentation caught presenter using a mouse in a way I never did, and that was quite productive!&lt;/p&gt;  &lt;p&gt;The objective was to create an entity for an ORM. Here’s how it went.&lt;/p&gt;  &lt;p&gt;First, a code-first entity was created leveraging &lt;em&gt;prop &lt;/em&gt;code snippet.&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_3BF38383.png&quot;&gt;&lt;img style=&quot;background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_4881309F.png&quot; width=&quot;353&quot; height=&quot;131&quot; /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Then pressing ALT key and making of selection of “nothing” in front of all the properties &lt;em&gt;public&lt;/em&gt; keyword, including the rows with the mouse. Thin blue line on the left represent this “selection”. &lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_60A49AFA.png&quot;&gt;&lt;img style=&quot;background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_14D8C441.png&quot; width=&quot;361&quot; height=&quot;139&quot; /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Last step is to type &lt;em&gt;virtual &lt;/em&gt;and we are done. Now all the properties are marked as virtual for ORM’s satisfaction. What a great way of doing it!&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_543677D1.png&quot;&gt;&lt;img style=&quot;background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: left; border-top: 0px; border-right: 0px; padding-top: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; align=&quot;left&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_33AF381F.png&quot; width=&quot;404&quot; height=&quot;92&quot; /&gt;&lt;/a&gt;&lt;/p&gt;      &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;Moral of the story – never say never. Mouse can make you productive sometimes as well &lt;img style=&quot;border-bottom-style: none; border-left-style: none; border-top-style: none; border-right-style: none&quot; class=&quot;wlEmoticon wlEmoticon-smile&quot; alt=&quot;Smile&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/wlEmoticon-smile_1327F86D.png&quot; /&gt;&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2011-08-29T20:05:00Z" PublishedUtc="2014-04-19T20:31:07.1211592Z" ModifiedUtc="2011-08-29T20:05:00Z" />
      <TagsPart Tags="Personal" />
      <AutoroutePart Alias="being-productive-with-mouse" UseCustomPattern="false" />
      <TitlePart Title="Being Productive With Mouse" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=dscm-enjoy-both-worlds" Status="Published">
      <BodyPart Text="&lt;p&gt;A while ago, the team I was part of had a discussion about choosing the best DSCM (Distributed Source Code Management). Two candidate back then were &lt;a href=&quot;http://mercurial.selenic.com/&quot; mce_href=&quot;http://mercurial.selenic.com/&quot; target=&quot;_blank&quot;&gt;Mercurial&lt;/a&gt; (Hg) and &lt;a href=&quot;http://git-scm.com/&quot; mce_href=&quot;http://git-scm.com/&quot; target=&quot;_blank&quot;&gt;Git&lt;/a&gt;. We were already using &lt;a href=&quot;http://subversion.tigris.org/&quot; mce_href=&quot;http://subversion.tigris.org/&quot; target=&quot;_blank&quot;&gt;Subversion&lt;/a&gt; and very accustomed to &lt;a href=&quot;http://www.visualsvn.com/&quot; mce_href=&quot;http://www.visualsvn.com/&quot; target=&quot;_blank&quot;&gt;VisualSVN&lt;/a&gt; in conjunction with &lt;a href=&quot;http://tortoisesvn.tigris.org/&quot; mce_href=&quot;http://tortoisesvn.tigris.org/&quot; target=&quot;_blank&quot;&gt;TortoiseSVN&lt;/a&gt;. Opinions split, time frames never allowed to actually make the switch and so the question remained unanswered: which one is to go with.&lt;/p&gt;  &lt;p&gt;While there are a lot of blog posts stating what side to take, I personally went with Hg (partially due to its similarity in work with SVN I was used to). Yet there’s a lot of code that is hosted on Git repositories, and I wanted to access it as well. Commands for Hg and Git might not always have the same name, but the final result is similar. So why shouldn’t one be able to use a single tool to access both types of repositories? And surely a quick search has revealed &lt;a href=&quot;http://www.ffuts.org/blog/accessing-a-git-repository-with-tortoisehg-on-windows/&quot; mce_href=&quot;http://www.ffuts.org/blog/accessing-a-git-repository-with-tortoisehg-on-windows/&quot; target=&quot;_blank&quot;&gt;a way to do so&lt;/a&gt; in a very easy way.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2011-08-23T20:15:00Z" PublishedUtc="2014-04-19T20:31:07.3399043Z" ModifiedUtc="2011-08-23T20:15:00Z" />
      <TagsPart Tags="Other" />
      <AutoroutePart Alias="dscm-enjoy-both-worlds" UseCustomPattern="false" />
      <TitlePart Title="DSCM – Enjoy Both Worlds" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=functional-programming-in-c-book" Status="Published">
      <BodyPart Text="&lt;p&gt;For a change, this was a really interesting read. &lt;a href=&quot;http://www.amazon.com/Functional-Programming-Techniques-Projects-Programmer/dp/0470744588&quot; target=&quot;_blank&quot;&gt;&lt;img style=&quot;background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: right; border-top: 0px; border-right: 0px; padding-top: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; align=&quot;right&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_072D9BEE.png&quot; width=&quot;205&quot; height=&quot;259&quot; /&gt;&lt;/a&gt;&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2011-07-28T20:31:48Z" PublishedUtc="2014-04-19T20:31:07.7461834Z" ModifiedUtc="2011-07-28T20:31:48Z" />
      <TagsPart Tags="" />
      <AutoroutePart Alias="functional-programming-in-c-book" UseCustomPattern="false" />
      <TitlePart Title="Functional Programming in C#–Book" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=asp-net-4-cms-book" Status="Published">
      <BodyPart Text="&lt;p&gt;I have looked for a book about CMS concepts and was excited to spot ASP.NET 4 CMS. As much as I was excited initially, that much I was disappointed as going through the book. Here a few things I did not find pleasant about it:&lt;/p&gt;  &lt;ol&gt;   &lt;li&gt;The book is &lt;strong&gt;not &lt;/strong&gt;about CMS concepts and techniques. Vastly it’s about .NET 4.0 and tools the author wanted to talk about in order to share its own experience while building &lt;strong&gt;a &lt;/strong&gt;CMS system.&lt;/li&gt;    &lt;li&gt;Talking about new features of C# 4.0 and Visual Studio .NET 2010 in a CMS books is at least a waste of readers time. &lt;/li&gt;    &lt;li&gt;Using WebForms and talking about clean mark-up (or Search Engine Optimization) was a bit of a slap in a face.&lt;/li&gt; &lt;/ol&gt;  &lt;p&gt;Either way, I am back to my search for a good book on CMS concepts and techniques.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2011-07-25T23:52:00Z" PublishedUtc="2014-04-19T20:31:07.964955Z" ModifiedUtc="2011-07-25T23:52:00Z" />
      <TagsPart Tags="Books" />
      <AutoroutePart Alias="asp-net-4-cms-book" UseCustomPattern="false" />
      <TitlePart Title="ASP.NET 4 CMS–Book" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=the-clean-coder-book-review" Status="Published">
      <BodyPart Text="&lt;a href=&quot;http://www.amazon.ca/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882&quot; target=&quot;_blank&quot;&gt;&lt;img style=&quot;background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: right; border-top: 0px; border-right: 0px; padding-top: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; align=&quot;right&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_73572F8D.png&quot; width=&quot;185&quot; height=&quot;240&quot; /&gt;&lt;/a&gt;   &lt;p&gt;Uncle Bob did it again. Another book that is full of experience and wisdom. This time it’s not about code, it’s about being a professional developer and what it means. I really loved the book. There were so many examples that I couldn’t not to smile recalling instances from my own experience having parallels with what is described in the book. One particular sentence I really loved was about TDD:&lt;/p&gt;  &lt;blockquote&gt;   &lt;p&gt;“I know this sounds strident and unilateral, but given the record I don’t think surgeons should have to defend hand-washing, and I don’t think programmers should have to defend TDD.”&lt;/p&gt; &lt;/blockquote&gt;  &lt;p&gt;So true. This is exactly what I felt like every single time a discussion around “justification for doing TDD/BDD” came up. If I’d decide on CS students reading materials, this one would make it on the list.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2011-07-01T04:05:00Z" PublishedUtc="2014-04-19T20:31:08.2774038Z" ModifiedUtc="2011-07-01T04:05:00Z" />
      <TagsPart Tags="" />
      <AutoroutePart Alias="the-clean-coder-book-review" UseCustomPattern="false" />
      <TitlePart Title="The Clean Coder – Book Review" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=mercurial-on-iis" Status="Published">
      <BodyPart Text="&lt;p&gt;&lt;a href=&quot;http://mercurial.selenic.com&quot; target=&quot;_blank&quot;&gt;Mercurial&lt;/a&gt; is a very appealing distributed source code versioning system. I used it with Google code and also for some local work when no server repository was available. Worked great. This time I wanted to go through the scenario of setting up Mercurial as a team repository with a centralized server. This would be still useful for an individual developer to have local commits (better than committing every single change just to ensure it’s captured) and would allow to push an entire change set to be versioned on the server and allow others to retrieve that change set with all the “intermediate bookmarks”.&lt;/p&gt;  &lt;p&gt;Setting up Mercurial on a server through IIS was not painful, but tedious and too manual (yes, I prefer simplicity over unnecessary complexity – hint: VisualSVN server). I was a bit turned down by the fact that Active Directory authentication is not working with IIS for Mercurial. You can get it going with LDAP support build into Apache web server. &lt;/p&gt;  &lt;p&gt;For me – for now I am going with Subversion. When something like VisualSVN Server for Mercurial shows up, I’m switching.&amp;#160; Unless I need the local (disconnected) mode &lt;img style=&quot;border-bottom-style: none; border-left-style: none; border-top-style: none; border-right-style: none&quot; class=&quot;wlEmoticon wlEmoticon-smile&quot; alt=&quot;Smile&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/wlEmoticon-smile_547E6291.png&quot; /&gt;&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2011-06-02T16:25:00Z" PublishedUtc="2014-04-19T20:31:08.6367655Z" ModifiedUtc="2011-06-02T16:25:00Z" />
      <TagsPart Tags="Other" />
      <AutoroutePart Alias="mercurial-on-iis" UseCustomPattern="false" />
      <TitlePart Title="Mercurial on IIS" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=reactive-framework-rx-explained" Status="Published">
      <BodyPart Text="&lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;http://www.infoq.com/presentations/Rx-Curing-Your-Asynchronous-Programming-Blues&quot; target=&quot;_blank&quot;&gt;This is a great explanation&lt;/a&gt; of Rx Framework given by Bart De Smet on InfoQ. Very good explanation and samples.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2011-05-25T03:59:00Z" PublishedUtc="2014-04-19T20:31:09.3242581Z" ModifiedUtc="2011-05-25T03:59:00Z" />
      <TagsPart Tags=".NET" />
      <AutoroutePart Alias="reactive-framework-rx-explained" UseCustomPattern="false" />
      <TitlePart Title="Reactive Framework Rx Explained" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=growing-object-oriented-software-guided-by-tests-book" Status="Published">
      <BodyPart Text="&lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_43BB5DAF.png&quot;&gt;&lt;img style=&quot;background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: right; border-top: 0px; border-right: 0px; padding-top: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; align=&quot;right&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_62259E98.png&quot; width=&quot;190&quot; height=&quot;258&quot; /&gt;&lt;/a&gt;An interesting book about not just how to develop with TDD, but also how to grow a project that utilizes TDD process. When developing code using TDD, you are unavoidably face the difficulties of maintaining 2 “project”s – production code and tests/specs. This is a Java code book, but principles are the same and applicable to .NET as well. Good read, though I would not tie too many hopes to the book. After all, you cannot learn how to shave on someone’s else beard. &lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2011-05-22T19:25:00Z" PublishedUtc="2014-04-19T20:31:09.9023812Z" ModifiedUtc="2011-05-22T19:25:00Z" />
      <TagsPart Tags="Books" />
      <AutoroutePart Alias="growing-object-oriented-software-guided-by-tests-book" UseCustomPattern="false" />
      <TitlePart Title="Growing Object-Oriented Software Guided by Tests – Book" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=dotpeak" Status="Published">
      <BodyPart Text="&lt;p&gt;JetBrains has released the &lt;a href=&quot;http://www.jetbrains.com/decompiler/?dotnetblog&quot; target=&quot;_blank&quot;&gt;beta version of their tool&lt;/a&gt; that can replace Reflector. Just the navigation around with R# like shortcuts is worth trying it. I tried &lt;a href=&quot;http://www.telerik.com/products/decompiling.aspx&quot; target=&quot;_blank&quot;&gt;Telerik’s JustDecompile&lt;/a&gt;, though it wasn’t as good as dotPeek. ILSpy is another player on the field, that I have tried to use. So far the leader is dotPeek. Let’s see how the game will go. Once thing is obvious – Reflector is loosing.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2011-05-12T04:50:00Z" PublishedUtc="2014-04-19T20:31:10.1523692Z" ModifiedUtc="2011-05-12T04:50:00Z" />
      <TagsPart Tags="Other" />
      <AutoroutePart Alias="dotpeak" UseCustomPattern="false" />
      <TitlePart Title="dotPeak" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=generic-repository-cons" Status="Published">
      <BodyPart Text="&lt;p&gt;Generic Repository (something like Repository&amp;lt;T&amp;gt;) is a good concept with intention of keeping code DRY, though problematic. Here are a few drawbacks of a generic repository:&lt;/p&gt;  &lt;ol&gt;   &lt;li&gt;It is not always logical to call behaviours Save, Delete, etc on all repositories &lt;/li&gt;    &lt;li&gt;Support (logging as an example) requires to know what specific repository was invoked, and not just Repository&amp;lt;T&amp;gt; &lt;/li&gt; &lt;/ol&gt;  &lt;p&gt;Just recently I ran into a log with an exception, where operation on …&lt;em&gt;Repositories.Repository`1.Save(T obj...) &lt;/em&gt;failed and there was no way to figure out &lt;strong&gt;what&lt;/strong&gt; repository out of 4 different one actually failed save operation.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2011-05-01T02:11:00Z" PublishedUtc="2014-04-19T20:31:10.3867501Z" ModifiedUtc="2011-05-01T02:11:00Z" />
      <TagsPart Tags="" />
      <AutoroutePart Alias="generic-repository-cons" UseCustomPattern="false" />
      <TitlePart Title="Generic Repository–Cons" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=change" Status="Published">
      <BodyPart Text="&lt;p&gt;I really loved the last exhibit at the &lt;a href=&quot;http://www.tyrrellmuseum.com/&quot;&gt;&lt;font style=&quot;font-weight: normal&quot;&gt;Royal Tyrrell Museum&lt;/font&gt;&lt;/a&gt; (door with the words):&lt;/p&gt;  &lt;blockquote&gt;   &lt;p&gt;Species come and species go. The only constant in life on earth is change.&lt;/p&gt;&lt;/blockquote&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2011-04-28T02:34:00Z" PublishedUtc="2014-04-19T20:31:10.6211234Z" ModifiedUtc="2011-04-28T02:34:00Z" />
      <TagsPart Tags="Personal" />
      <AutoroutePart Alias="change" UseCustomPattern="false" />
      <TitlePart Title="Change" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=course-online-agile-fundamentals" Status="Published">
      <BodyPart Text="&lt;p&gt;&lt;a href=&quot;http://training.thoughtworks-studios.com/course/view.php?id=3&quot; target=&quot;_blank&quot;&gt;Agile Fundamentals&lt;/a&gt; is an online course ThoughtWorks is provided free of charge. The subjects discussed are &lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;Origins&lt;/li&gt;    &lt;li&gt;Core Practices&lt;/li&gt;    &lt;li&gt;Technical Practices&lt;/li&gt;    &lt;li&gt;Quality&lt;/li&gt;    &lt;li&gt;Planning/Communicating&lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;This is a good primer for Agile. If you want to have a quick introduction, this course will be helpful.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2011-04-26T14:00:00Z" PublishedUtc="2014-04-19T20:31:10.8711107Z" ModifiedUtc="2011-04-26T14:00:00Z" />
      <TagsPart Tags="Agile" />
      <AutoroutePart Alias="course-online-agile-fundamentals" UseCustomPattern="false" />
      <TitlePart Title="Course Online - Agile Fundamentals" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=pro-asp-net-mvc-2-framework" Status="Published">
      <BodyPart Text="&lt;p&gt;I have started this book long time ago, but never got to end of it. Finally, I had a &lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_51286B88.png&quot;&gt;&lt;img style=&quot;background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: right; border-top: 0px; border-right: 0px; padding-top: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; align=&quot;right&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_7277EB57.png&quot; width=&quot;185&quot; height=&quot;244&quot; /&gt;&lt;/a&gt;chance to do so. What a great book. The cover says “The Expert’s Voice in .NET”, and I found Seven Sanderson a real expert in ASP.NET MVC. &lt;/p&gt;  &lt;p&gt;In the past, I did a lot of WebForms work. These days I spend a lot working on ASP.NET MVC and like it way more. Primarily for the reasons of testability and being closer to the real web (stateless and mark-up). &lt;/p&gt;  &lt;p&gt;If you are looking for a good ASP.NET MVC book or just a reference/refresher, this one is worth reading.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2011-04-24T06:32:00Z" PublishedUtc="2014-04-19T20:31:12.0273543Z" ModifiedUtc="2011-04-24T06:32:00Z" />
      <TagsPart Tags="Books" />
      <AutoroutePart Alias="pro-asp-net-mvc-2-framework" UseCustomPattern="false" />
      <TitlePart Title="Pro ASP.NET MVC 2 Framework" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=r-alt-enter-in-word" Status="Published">
      <BodyPart Text="&lt;p&gt;&lt;a href=&quot;http://blogs.jetbrains.com/dotnet/2011/04/use-altenter-in-microsoft-word-for-spell-checking-quick-fixes/&quot; target=&quot;_blank&quot;&gt;This a neat shortcut assignment&lt;/a&gt; I probably will end up using a lot &lt;img style=&quot;border-bottom-style: none; border-right-style: none; border-top-style: none; border-left-style: none&quot; class=&quot;wlEmoticon wlEmoticon-smile&quot; alt=&quot;Smile&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/wlEmoticon-smile_48146BF6.png&quot; /&gt;&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2011-04-19T13:11:00Z" PublishedUtc="2014-04-19T20:31:12.4804666Z" ModifiedUtc="2011-04-19T13:11:00Z" />
      <TagsPart Tags="Other" />
      <AutoroutePart Alias="r-alt-enter-in-word" UseCustomPattern="false" />
      <TitlePart Title="R# ALT-ENTER in Word" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=not-caving-in-on-tdd" Status="Published">
      <BodyPart Text="&lt;p&gt;TDD causes different people react to it in a completely different way. Some just jump on it like on a glass of a cold sparkling drink in the heat of a summer day. Some run away from it like it’s a wild dog ready to take a bite. Some feel that there might be a value for them in it, but don’t really want to move away from the comfort zone. And the last group of people always have an interesting way making an attempt to justify why having no TDD is good. &lt;/p&gt;  &lt;p align=&quot;left&quot;&gt;A classical example would be the current project I work on – integrating .NET sub-system with C++ components/subsystem. I stick to TDD because I know the value is enormous, but not instantaneous, it comes with time. During integration with C++ subsystem, there was some weird behaviour with no clarity where would it break (managed or unmanaged code). Sure thing my steps where to validate that all tests cases present. And sure they did. Within seconds I could not only confirm that I am dealing with all various edge-cases, but also run the “executable specifications” to verify code adheres to expected behaviour / design. And guess what, the bug was identified on… the side where developer was so convinced that “previous experience would compensate for lack of tests” that there’s no point of even bothering with TDD. Ironic.&lt;/p&gt;  &lt;p align=&quot;left&quot;&gt;But what’s the moral of the story? &lt;/p&gt;  &lt;p align=&quot;left&quot;&gt;If you on your path to start TDD, or trying to show others the benefits – don’t cave in, be patient and keep doing what you do. It is unavoidable, and eventually the simple truth will come out. TDD works just like medicine – once it’s in the blood stream, it will sure kick in.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2011-04-07T06:37:00Z" PublishedUtc="2014-04-19T20:31:12.8085976Z" ModifiedUtc="2011-04-07T06:37:00Z" />
      <TagsPart Tags="Agile" />
      <AutoroutePart Alias="not-caving-in-on-tdd" UseCustomPattern="false" />
      <TitlePart Title="Not Caving In on TDD" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=jenkins-getting-revision-for-project-with-multiple-modules" Status="Published">
      <BodyPart Text="&lt;p&gt;I ran into this problem just recently on a project that has more than a single repository for a project. Using Jenkins (Hudson) was awesome for the past 2+ years and I was surprised that it couldn’t handle revision environment variable assignment when more than a single module had a place in a build job. According to &lt;a href=&quot;http://jenkins.361315.n4.nabble.com/svn-revision-with-multiple-modules-my-2EuroCents-td373332.html&quot; target=&quot;_blank&quot;&gt;some threads&lt;/a&gt;, this is done by design. One workaround in particular that I liked was to look into the poll log file and get information out of it.&lt;/p&gt;  &lt;p&gt;This is a quick implementation of a get-revision function for nant to grab revision based on the project name (&lt;em&gt;stringToSearch &lt;/em&gt;argument) and its looking at the polling log file per project.&lt;/p&gt;  &lt;div style=&quot;border-bottom: silver 1px solid; text-align: left; border-left: silver 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 125.7%; padding-right: 4px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; height: 210px; max-height: 200px; font-size: 8pt; overflow: auto; border-top: silver 1px solid; cursor: text; border-right: silver 1px solid; padding-top: 4px&quot; id=&quot;codeSnippetWrapper&quot;&gt;.    &lt;div style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot; id=&quot;codeSnippet&quot;&gt;     &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: white; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot; id=&quot;lnum1&quot;&gt;   1:&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;script&lt;/span&gt; &lt;span style=&quot;color: #ff0000&quot;&gt;language&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;=&amp;quot;C#&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #ff0000&quot;&gt;prefix&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;=&amp;quot;utils&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: white; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot; id=&quot;lnum1&quot;&gt;   1:&lt;/span&gt;&amp;#160; &lt;/pre&gt;&lt;!--CRLF--&gt;&lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot; id=&quot;lnum2&quot;&gt;   2:&lt;/span&gt;         &amp;lt;imports&amp;gt;&lt;/pre&gt;&lt;!--CRLF--&gt;&lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: white; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot; id=&quot;lnum3&quot;&gt;   3:&lt;/span&gt;             &amp;lt;import &lt;span style=&quot;color: #0000ff&quot;&gt;namespace&lt;/span&gt;=&lt;span style=&quot;color: #006080&quot;&gt;&amp;quot;System.Globalization&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/pre&gt;&lt;!--CRLF--&gt;&lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot; id=&quot;lnum4&quot;&gt;   4:&lt;/span&gt;             &amp;lt;import &lt;span style=&quot;color: #0000ff&quot;&gt;namespace&lt;/span&gt;=&lt;span style=&quot;color: #006080&quot;&gt;&amp;quot;System.IO&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/pre&gt;&lt;!--CRLF--&gt;&lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: white; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot; id=&quot;lnum5&quot;&gt;   5:&lt;/span&gt;       &amp;lt;import &lt;span style=&quot;color: #0000ff&quot;&gt;namespace&lt;/span&gt;=&lt;span style=&quot;color: #006080&quot;&gt;&amp;quot;System.Text.RegularExpressions&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/pre&gt;&lt;!--CRLF--&gt;&lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot; id=&quot;lnum6&quot;&gt;   6:&lt;/span&gt;     &amp;lt;/imports&amp;gt;&lt;/pre&gt;&lt;!--CRLF--&gt;&lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: white; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot; id=&quot;lnum7&quot;&gt;   7:&lt;/span&gt;         &amp;lt;code&amp;gt;&lt;/pre&gt;&lt;!--CRLF--&gt;&lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot; id=&quot;lnum8&quot;&gt;   8:&lt;/span&gt;             &amp;lt;![CDATA[&lt;/pre&gt;&lt;!--CRLF--&gt;&lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: white; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot; id=&quot;lnum9&quot;&gt;   9:&lt;/span&gt;               [Function(&lt;span style=&quot;color: #006080&quot;&gt;&amp;quot;get-revision&amp;quot;&lt;/span&gt;)]&lt;/pre&gt;&lt;!--CRLF--&gt;&lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot; id=&quot;lnum10&quot;&gt;  10:&lt;/span&gt;               &lt;span style=&quot;color: #0000ff&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;int&lt;/span&gt; GetRevision(&lt;span style=&quot;color: #0000ff&quot;&gt;string&lt;/span&gt; filePath, &lt;span style=&quot;color: #0000ff&quot;&gt;string&lt;/span&gt; stringToSearch) &lt;/pre&gt;&lt;!--CRLF--&gt;&lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: white; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot; id=&quot;lnum11&quot;&gt;  11:&lt;/span&gt;                             {&lt;/pre&gt;&lt;!--CRLF--&gt;&lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot; id=&quot;lnum12&quot;&gt;  12:&lt;/span&gt;                 &lt;span style=&quot;color: #0000ff&quot;&gt;if&lt;/span&gt; (!System.IO.File.Exists(filePath))&lt;/pre&gt;&lt;!--CRLF--&gt;&lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: white; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot; id=&quot;lnum13&quot;&gt;  13:&lt;/span&gt;                   &lt;span style=&quot;color: #0000ff&quot;&gt;return&lt;/span&gt; 0;&lt;/pre&gt;&lt;!--CRLF--&gt;&lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot; id=&quot;lnum14&quot;&gt;  14:&lt;/span&gt;                                 System.IO.FileInfo file = &lt;span style=&quot;color: #0000ff&quot;&gt;new&lt;/span&gt; System.IO.FileInfo(filePath);&lt;/pre&gt;&lt;!--CRLF--&gt;&lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: white; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot; id=&quot;lnum15&quot;&gt;  15:&lt;/span&gt;                 &lt;span style=&quot;color: #0000ff&quot;&gt;using&lt;/span&gt; (System.IO.StreamReader stream = file.OpenText())&lt;/pre&gt;&lt;!--CRLF--&gt;&lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot; id=&quot;lnum16&quot;&gt;  16:&lt;/span&gt;                 {&lt;/pre&gt;&lt;!--CRLF--&gt;&lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: white; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot; id=&quot;lnum17&quot;&gt;  17:&lt;/span&gt;                   System.Text.RegularExpressions.Match match = System.Text.RegularExpressions.Regex.Match(stream.ReadToEnd(), stringToSearch + &lt;span style=&quot;color: #006080&quot;&gt;@&amp;quot;.*\srevision\s(?&amp;lt;revision&amp;gt;.*?)\r #string_to_search &amp;lt;ANYTHING&amp;gt;revision(group_revision)\r&amp;quot;&lt;/span&gt;,&lt;/pre&gt;&lt;!--CRLF--&gt;&lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot; id=&quot;lnum18&quot;&gt;  18:&lt;/span&gt;                     System.Text.RegularExpressions.RegexOptions.Multiline |&lt;/pre&gt;&lt;!--CRLF--&gt;&lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: white; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot; id=&quot;lnum19&quot;&gt;  19:&lt;/span&gt;                     System.Text.RegularExpressions.RegexOptions.IgnoreCase | &lt;/pre&gt;&lt;!--CRLF--&gt;&lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot; id=&quot;lnum20&quot;&gt;  20:&lt;/span&gt;                     System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace);&lt;/pre&gt;&lt;!--CRLF--&gt;&lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: white; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot; id=&quot;lnum21&quot;&gt;  21:&lt;/span&gt;                   &lt;span style=&quot;color: #0000ff&quot;&gt;return&lt;/span&gt; match.Success ? &lt;span style=&quot;color: #0000ff&quot;&gt;int&lt;/span&gt;.Parse(match.Groups[&lt;span style=&quot;color: #006080&quot;&gt;&amp;quot;revision&amp;quot;&lt;/span&gt;].Value, System.Globalization.NumberStyles.Any) : 0;&lt;/pre&gt;&lt;!--CRLF--&gt;&lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot; id=&quot;lnum22&quot;&gt;  22:&lt;/span&gt;                 }&lt;/pre&gt;&lt;!--CRLF--&gt;&lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: white; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot; id=&quot;lnum23&quot;&gt;  23:&lt;/span&gt;               }&lt;/pre&gt;&lt;!--CRLF--&gt;&lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot; id=&quot;lnum24&quot;&gt;  24:&lt;/span&gt;             ]]&amp;gt;&lt;/pre&gt;&lt;!--CRLF--&gt;&lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: white; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot; id=&quot;lnum25&quot;&gt;  25:&lt;/span&gt;         &amp;lt;/code&amp;gt;&lt;/pre&gt;&lt;!--CRLF--&gt;&lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot; id=&quot;lnum26&quot;&gt;  26:&lt;/span&gt;     &lt;/pre&gt;&lt;!--CRLF--&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;script&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;And this is how the typical usage would look like:&lt;/p&gt;&#xA;&#xA;&lt;div style=&quot;border-bottom: silver 1px solid; text-align: left; border-left: silver 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 125.8%; padding-right: 4px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; height: 150px; max-height: 200px; font-size: 8pt; overflow: auto; border-top: silver 1px solid; cursor: text; border-right: silver 1px solid; padding-top: 4px&quot; id=&quot;codeSnippetWrapper&quot;&gt;&#xA;  &lt;div style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot; id=&quot;codeSnippet&quot;&gt;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: white; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot; id=&quot;lnum1&quot;&gt;   1:&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;property&lt;/span&gt; &lt;span style=&quot;color: #ff0000&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;=&amp;quot;svn.revision&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #ff0000&quot;&gt;value&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;=&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #ff0000&quot;&gt;readonly&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;=&amp;quot;false&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot; id=&quot;lnum2&quot;&gt;   2:&lt;/span&gt;  &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #ff0000&quot;&gt;test&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;=&amp;quot;${environment::variable-exists('SVN_REVISION')}&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: white; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot; id=&quot;lnum3&quot;&gt;   3:&lt;/span&gt;    &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;property&lt;/span&gt; &lt;span style=&quot;color: #ff0000&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;=&amp;quot;svn.revision&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #ff0000&quot;&gt;value&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;=&amp;quot;${environment::get-variable('SVN_REVISION')}&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot; id=&quot;lnum4&quot;&gt;   4:&lt;/span&gt;  &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;if&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: white; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot; id=&quot;lnum5&quot;&gt;   5:&lt;/span&gt;  &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #ff0000&quot;&gt;test&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;=&amp;quot;${not environment::variable-exists('SVN_REVISION')}&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot; id=&quot;lnum6&quot;&gt;   6:&lt;/span&gt;    &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;property&lt;/span&gt; &lt;span style=&quot;color: #ff0000&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;=&amp;quot;svn.revision&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #ff0000&quot;&gt;value&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;=&amp;quot;${utils::get-revision('.\..\scm-polling.log', project::get-name())}&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: white; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot; id=&quot;lnum7&quot;&gt;   7:&lt;/span&gt;  &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;if&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;As an afterthought, I could actually set SVN_REVISION to the value from the log, and then work with SVN_REVISION as usual.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2011-04-07T04:43:00Z" PublishedUtc="2014-04-19T20:31:13.8554479Z" ModifiedUtc="2011-04-07T04:43:00Z" />
      <TagsPart Tags="CI" />
      <AutoroutePart Alias="jenkins-getting-revision-for-project-with-multiple-modules" UseCustomPattern="false" />
      <TitlePart Title="Jenkins – Getting Revision for Project with Multiple Modules" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=testdriven-net-anycpu-tests" Status="Published">
      <BodyPart Text="&lt;p&gt;TestDriven.NET defaults tests for code running on AnyCPU platform to be executed under 32-bit process by default. In order to change that, it has to be configured in VS through Tools –&amp;gt; Options –&amp;gt; TestDriven.NET –&amp;gt; AnyCPU Tests&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_6369CFF8.png&quot;&gt;&lt;img style=&quot;background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_62253719.png&quot; width=&quot;659&quot; height=&quot;345&quot; /&gt;&lt;/a&gt;&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2011-03-31T16:47:00Z" PublishedUtc="2014-04-19T20:31:14.5898148Z" ModifiedUtc="2011-03-31T16:47:00Z" />
      <TagsPart Tags="TDD" />
      <AutoroutePart Alias="testdriven-net-anycpu-tests" UseCustomPattern="false" />
      <TitlePart Title="TestDriven.NET AnyCPU Tests" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=developing-with-elevated-privileges-gods-syndrome" Status="Published">
      <BodyPart Text="&lt;p&gt;Are you developing on Windows 7? Do you have your UAC turned off?&lt;/p&gt;  &lt;p&gt;These are the questions I am asking developers that suddenly run into “unexpected behavior” with the code that used to work on their machines an now it doesn’t. When running Visual Studio .NET with elevated privileges you are the god. Literally. You can do anything – create virtual directories under IIS, manipulate file system where normally you’d be restricted, access anything you want – heaven for a developer. But the reality is that applications a lot of time ending up in environments that have UAC turned on. I do not expect a client system administrator to drop UAC on his server “just because our XYZ software was written in a God’s mode”. Good luck with that.&lt;/p&gt;  &lt;p&gt;Yes, there are cases when you just have to elevate your privileges and nothing can be done about it. One scenario we ran into is compiling legacy VB6 application on a build server. And even for this scenario you do not drop UAC, you use the tools provided with the system. RunAs is one of those tools.&lt;/p&gt;  &lt;p&gt;Bottom line – do not assume that running without UAC is a given thing, on contrary, assume it’s on and work out limitations with understanding of what are the options.&lt;/p&gt;  &lt;p&gt;PS: RunAs case was actually simple – running once build scripts on the server manually with RunAs providing it with automated build service account and password. In order to persist the credential and avoid manual password typing,&lt;b&gt; /savecred&lt;/b&gt; can be used. This will ensure that every time RunAs is executed with those credentials, no password prompts will be required. &lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2011-03-31T04:35:00Z" PublishedUtc="2014-04-19T20:31:14.9335571Z" ModifiedUtc="2011-03-31T04:35:00Z" />
      <TagsPart Tags="VS.NET" />
      <AutoroutePart Alias="developing-with-elevated-privileges-gods-syndrome" UseCustomPattern="false" />
      <TitlePart Title="Developing with Elevated Privileges – Gods’ Syndrome" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=iis-7-writing-log-files" Status="Published">
      <BodyPart Text="&lt;p&gt;I have ran into a problem while using &lt;a href=&quot;http://nlog-project.org/&quot; target=&quot;_blank&quot;&gt;NLog&lt;/a&gt; with web application – logs not created when application is deployed to IIS. Everything would indicate that this is permissions issue, except that I couldn’t figure out what account my web application was running under. Under II6 it was simple – IUSR, but with IIS 7 things have changed a little. Then I learned about &lt;a href=&quot;http://learn.iis.net/page.aspx/624/application-pool-identities/&quot; target=&quot;_blank&quot;&gt;Application Pool Identities&lt;/a&gt;. Very interesting, especially when locating an account &lt;strong&gt;DefaultAppPool&lt;/strong&gt; resolves nothing, but &lt;strong&gt;IIS AppPool\DefaultAppPool&lt;/strong&gt; does find &lt;strong&gt;DefaultAppPool&lt;/strong&gt;. Either way, once I set write permissions for &lt;strong&gt;DefaultAppPool&lt;/strong&gt; on the web application folder controlled by IIS, my problems were solved.&lt;/p&gt;  &lt;p&gt;Moral of this story – when working with new things (IIS in this case), make sure you know read the manual. Just “clicking” it might be quite expensive (time wise).&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2011-03-30T01:49:00Z" PublishedUtc="2014-04-19T20:31:15.2460556Z" ModifiedUtc="2011-03-30T01:49:00Z" />
      <TagsPart Tags="Other" />
      <AutoroutePart Alias="iis-7-writing-log-files" UseCustomPattern="false" />
      <TitlePart Title="IIS 7 - Writing Log Files" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=podcast-technical-debt" Status="Published">
      <BodyPart Text="&lt;p&gt;This a great podcast from Deep Fried Bytes and Gary Short that is doing a great overview and explanation about &lt;a href=&quot;http://deepfriedbytes.com/podcast/episode-66-getting-a-lesson-about-technical-debt-from-gary-short&quot; target=&quot;_blank&quot;&gt;Technical Debt&lt;/a&gt; to folks that are not developer, but managers. &lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2011-03-28T19:09:00Z" PublishedUtc="2014-04-19T20:31:15.5435982Z" ModifiedUtc="2011-03-28T19:09:00Z" />
      <TagsPart Tags="Agile" />
      <AutoroutePart Alias="podcast-technical-debt" UseCustomPattern="false" />
      <TitlePart Title="Podcast: Technical Debt" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=lighthouse-ci-friendly-unit-test-runner-for-silverlight" Status="Published">
      <BodyPart Text="&lt;p&gt;Brand new &lt;a href=&quot;http://lighthouse.codeplex.com/&quot; target=&quot;_blank&quot;&gt;project&lt;/a&gt; described by the author on his &lt;a href=&quot;http://blog.roboblob.com/2011/03/22/lighthouse_silverlight_unit_test_runner_project_released/&quot; target=&quot;_blank&quot;&gt;blog&lt;/a&gt;.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2011-03-23T12:13:00Z" PublishedUtc="2014-04-19T20:31:15.9022958Z" ModifiedUtc="2011-03-23T12:13:00Z" />
      <TagsPart Tags="Silverlight,TDD" />
      <AutoroutePart Alias="lighthouse-ci-friendly-unit-test-runner-for-silverlight" UseCustomPattern="false" />
      <TitlePart Title="Lighthouse - CI Friendly Unit Test Runner for Silverlight" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=wcf-dynamic-client-with-dynamic-service-end-point" Status="Published">
      <BodyPart Text="&lt;p&gt;First reaction would be why?&lt;/p&gt;  &lt;p&gt;Allow me present the problem: Application has regular WCF service and RESTful service implemented with ASP.NET MVC controller (we could implement RESTful service with WCF, but then the challenge would not exist…).&lt;/p&gt;  &lt;p&gt;Invocation of RESTful service done with WebClient object requires requires URI. This URI is easy to store in appSettings of the configuration file. But then on the same client, to access WCF service, address is specified within the client endpoint configuration. &lt;/p&gt;  &lt;p&gt;Solution is the following:&lt;/p&gt;  &lt;pre style=&quot;border-bottom: #cecece 1px solid; border-left: #cecece 1px solid; padding-bottom: 5px; background-color: #ffffff; min-height: 40px; padding-left: 5px; width: 650px; padding-right: 5px; overflow: auto; border-top: #cecece 1px solid; border-right: #cecece 1px solid; padding-top: 5px&quot;&gt;&lt;pre style=&quot;background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&quot;&gt;  1: &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;appSettings&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;/pre&gt;&lt;pre style=&quot;background-color: #ebebeb; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&quot;&gt;  2:     &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;add&lt;/span&gt; &lt;span style=&quot;color: #ff0000&quot;&gt;key&lt;/span&gt;=&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;quot;ServicesBaseAddress&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #ff0000&quot;&gt;value&lt;/span&gt;=&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;quot;http://localhost/Services/&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;/&amp;gt;&lt;/span&gt;&#xA;&lt;/pre&gt;&lt;pre style=&quot;background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&quot;&gt;  3:     &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;add&lt;/span&gt; &lt;span style=&quot;color: #ff0000&quot;&gt;key&lt;/span&gt;=&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;quot;ServiceName&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #ff0000&quot;&gt;value&lt;/span&gt;=&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;quot;WCFService&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;/&amp;gt;&lt;/span&gt;&#xA;&lt;/pre&gt;&lt;pre style=&quot;background-color: #ebebeb; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&quot;&gt;  4:     &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;add&lt;/span&gt; &lt;span style=&quot;color: #ff0000&quot;&gt;key&lt;/span&gt;=&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;quot;RESTServiceName&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #ff0000&quot;&gt;value&lt;/span&gt;=&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;quot;Controller/Action&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;/&amp;gt;&lt;/span&gt;&#xA;&lt;/pre&gt;&lt;pre style=&quot;background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&quot;&gt;  5:   &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;appSettings&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;WCF Client configuration:&lt;/p&gt;&#xA;&#xA;&lt;pre style=&quot;border-bottom: #cecece 1px solid; border-left: #cecece 1px solid; padding-bottom: 5px; background-color: #ffffff; min-height: 40px; padding-left: 5px; width: 650px; padding-right: 5px; overflow: auto; border-top: #cecece 1px solid; border-right: #cecece 1px solid; padding-top: 5px&quot;&gt;&lt;pre style=&quot;background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&quot;&gt;  1: &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;client&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;/pre&gt;&lt;pre style=&quot;background-color: #ebebeb; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&quot;&gt;  2:   &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;endpoint&lt;/span&gt; &lt;span style=&quot;color: #ff0000&quot;&gt;name&lt;/span&gt;=&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;quot;WCFService&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #ff0000&quot;&gt;address&lt;/span&gt;=&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #ff0000&quot;&gt;binding&lt;/span&gt;=&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;quot;basicHttpBinding&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #ff0000&quot;&gt;bindingConfiguration&lt;/span&gt;=&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;quot;SomeService_Binding&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #ff0000&quot;&gt;contract&lt;/span&gt;=&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;quot;WcfBaseAddressSpike.Server.ISomeService&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;/pre&gt;&lt;pre style=&quot;background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&quot;&gt;  3: &#x9;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;identity&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;/pre&gt;&lt;pre style=&quot;background-color: #ebebeb; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&quot;&gt;  4: &#x9;  &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;dns&lt;/span&gt; &lt;span style=&quot;color: #ff0000&quot;&gt;value&lt;/span&gt;=&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;quot;localhost&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;/&amp;gt;&lt;/span&gt;&#xA;&lt;/pre&gt;&lt;pre style=&quot;background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&quot;&gt;  5: &#x9;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;identity&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;/pre&gt;&lt;pre style=&quot;background-color: #ebebeb; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&quot;&gt;  6:   &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;endpoint&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;/pre&gt;&lt;pre style=&quot;background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&quot;&gt;  7: &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;client&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;/&lt;/pre&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;WCF dynamic client creation:&lt;/p&gt;&#xA;&#xA;&lt;div style=&quot;padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px&quot; id=&quot;scid:f32c3428-b7e9-4f15-a8ea-c502c7ff2e88:3168a54f-f939-446b-8e9c-4d5ba922a40d&quot; class=&quot;wlWriterEditableSmartContent&quot;&gt;&lt;pre class=&quot;brush: c#;&quot;&gt;var uri = new Uri(new Uri(ConfigurationManager.AppSettings[&quot;ServicesBaseAddress&quot;]), ConfigurationManager.AppSettings[&quot;ServiceName&quot;]);&#xA;var channel = new ChannelFactory&amp;lt;ISomeService&amp;gt;(&quot;WCFService&quot;).CreateChannel(new EndpointAddress(uri));&#xA;var response = channel.Ping();&lt;/pre&gt;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;RESTful service invocation:&lt;/p&gt;&#xA;&#xA;&lt;div style=&quot;padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px&quot; id=&quot;scid:f32c3428-b7e9-4f15-a8ea-c502c7ff2e88:93793ad3-d504-4b29-b9b6-a2f2390bb828&quot; class=&quot;wlWriterEditableSmartContent&quot;&gt;&lt;pre class=&quot;brush: c#;&quot;&gt; var uri = new Uri(new Uri(ConfigurationManager.AppSettings[&quot;ServicesBaseAddress&quot;]), ConfigurationManager.AppSettings[&quot;RESTServiceName&quot;]);&#xA; var response = new WebClient.DownloadString(uri);&lt;/pre&gt;&lt;/div&gt;&#xA;&#xA;&lt;div style=&quot;padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px&quot; id=&quot;scid:fb3a1972-4489-4e52-abe7-25a00bb07fdf:290c17d6-f2ad-43da-8a6b-fae3cd5f0cd4&quot; class=&quot;wlWriterSmartContent&quot;&gt;&#xA;  &lt;p&gt;Source files &lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/WcfBaseAddressSpike_2A4A1B2E.zip&quot; target=&quot;_blank&quot;&gt;Source files&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/div&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2011-03-23T04:29:00Z" PublishedUtc="2014-04-19T20:31:16.261677Z" ModifiedUtc="2011-03-23T04:29:00Z" />
      <TagsPart Tags="" />
      <AutoroutePart Alias="wcf-dynamic-client-with-dynamic-service-end-point" UseCustomPattern="false" />
      <TitlePart Title="WCF Dynamic Client with Dynamic Service End Point" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=mpromptu-interface" Status="Published">
      <BodyPart Text="&lt;p&gt;While trying to solve a problem of removing conditional execution from my code, I wanted to take advantage of .NET 4.0 and it’s dynamic capabilities. Going with DynamicObject or ExpandoObject initially didn’t get me any success since those by default support properties and indexes, but not methods. Luckily, I have a reply for &lt;a href=&quot;http://stackoverflow.com/questions/5241544/dynamicobject-invoking-method-based-on-argument-value&quot; target=&quot;_blank&quot;&gt;my post&lt;/a&gt; and learned about this great OSS library called &lt;a href=&quot;http://code.google.com/p/impromptu-interface/&quot; target=&quot;_blank&quot;&gt;impromptu-interface&lt;/a&gt;. It based on DLR capabilities in .NET 4.0 and I have to admit that it made my code extremely simple – no more if :) &lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2011-03-14T04:56:00Z" PublishedUtc="2014-04-19T20:31:16.449165Z" ModifiedUtc="2011-03-14T04:56:00Z" />
      <TagsPart Tags=".NET,OSS" />
      <AutoroutePart Alias="mpromptu-interface" UseCustomPattern="false" />
      <TitlePart Title="Impromptu-interface" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=reflector-the-king-is-dead-long-live-the-king" Status="Published">
      <BodyPart Text="&lt;p&gt;There was enough of responses for &lt;a href=&quot;http://www.red-gate.com/products/dotnet-development/reflector/announcement&quot; target=&quot;_blank&quot;&gt;Red Gate announcement&lt;/a&gt; about free version of .NET Reflector. Neither there’s a need to explain how useful the tool is for almost any .NET developer. There were a lot of talks about the price – $35 is it something to make noise about or just accept it and move on. Honestly, I couldn’t make my mind and was sitting on a fence. &lt;/p&gt;  &lt;p&gt;Today I learned some really exciting news – two (not one), two different initiatives to replace Reflector.&lt;/p&gt;  &lt;ol&gt;   &lt;li&gt;A completely free &lt;a href=&quot;http://wiki.sharpdevelop.net/ilspy.ashx&quot; target=&quot;_blank&quot;&gt;ILSpy&lt;/a&gt; from SharpDevelop&lt;/li&gt;    &lt;li&gt;Commercial later to be stand-alone free &lt;a href=&quot;http://blogs.jetbrains.com/dotnet/2011/02/resharper-6-bundles-decompiler-free-standalone-tool-to-follow/&quot; target=&quot;_blank&quot;&gt;decompiler tool from JetBrains&lt;/a&gt;&lt;/li&gt; &lt;/ol&gt;  &lt;p&gt;These are great news. &lt;/p&gt;  &lt;p&gt;First – ILSpy is already doing what I need – you can download it and start using. Having experience with a few projects from SharpDevelop I believe it will be a great tool to have. One of immediate things that I found is reflecting obfuscated assemblies. Reflector blows up and closes, where ILSpy takes it gracefully and just shows an exception with no additional popup windows.&lt;/p&gt;  &lt;p&gt;JetBrains – company I highly respect. This is the case where I would continue paying money for their product and get more productivity. I am heavily relying on R# to do my job, and having a reflecting option would only add oil into fire of convincing others to use the tool. Though what I was excited was the statement JetBrains boldly put out: &lt;/p&gt;  &lt;blockquote&gt;   &lt;p&gt;…&lt;strong&gt;it’s going to be released this year, and it’s going to be free of charge&lt;/strong&gt;. And by saying “free”, we actually mean “free”.&lt;/p&gt;&lt;/blockquote&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2011-02-18T12:56:00Z" PublishedUtc="2014-04-19T20:31:16.6366695Z" ModifiedUtc="2011-02-18T12:56:00Z" />
      <TagsPart Tags=".NET" />
      <AutoroutePart Alias="reflector-the-king-is-dead-long-live-the-king" UseCustomPattern="false" />
      <TitlePart Title="Reflector – The King is Dead. Long Live the King." />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=creating-collection-with-no-code-almost" Status="Published">
      <BodyPart Text="&lt;p&gt;When doing testing, I tend to create an object mother for the items generated multiple times for specifications. Quite often these objects need to be a part of a collection. A neat way to do so is to leverage .NET params mechanism:&lt;/p&gt;  &lt;div style=&quot;padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px&quot; id=&quot;scid:f32c3428-b7e9-4f15-a8ea-c502c7ff2e88:fa6ddec0-6ba2-471c-a362-1d2167d0a79c&quot; class=&quot;wlWriterEditableSmartContent&quot;&gt;&lt;pre class=&quot;brush: c#;&quot;&gt;    public static IEnumerable&amp;lt;T&amp;gt; CreateCollection&amp;lt;T&amp;gt;(params T[] items)&#xA;    {&#xA;      return items;&#xA;    }&lt;/pre&gt;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;And usage is the following:&lt;/p&gt;&#xA;&#xA;&lt;div style=&quot;padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px&quot; id=&quot;scid:f32c3428-b7e9-4f15-a8ea-c502c7ff2e88:71d457d1-3bb9-4a0c-87a4-a792b2929081&quot; class=&quot;wlWriterEditableSmartContent&quot;&gt;&lt;pre class=&quot;brush: c#;&quot;&gt;private static IEnumerable&amp;lt;IPAddress&amp;gt; addresses = CreateCollection(new IPAddress(123456789), new IPAddress(987654321));&lt;/pre&gt;&lt;/div&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2011-01-15T05:56:00Z" PublishedUtc="2014-04-19T20:31:16.8085349Z" ModifiedUtc="2011-01-15T05:56:00Z" />
      <TagsPart Tags="C#" />
      <AutoroutePart Alias="creating-collection-with-no-code-almost" UseCustomPattern="false" />
      <TitlePart Title="Creating collection with no code (almost)" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=simple-mvvm-walkthrough-refactored-part-2" Status="Published">
      <BodyPart Text="&lt;p&gt;In the &lt;a href=&quot;http://weblogs.asp.net/sfeldman/archive/2011/01/12/simple-mvvm-walkthrough-refactored.aspx&quot; target=&quot;_blank&quot;&gt;previous post&lt;/a&gt; I showed an attempt to get rid of the magical strings. It worked great for a string property, but failed for the integer one as JR has reported. I decided to look into that, but this time around through TDD and this is what I found (besides the fact that going TDD way would definitely catch it).&lt;/p&gt;  &lt;p&gt;When a string property is passed in, returned object is expected therefore there’s nothing complicated, it works. Though, when an integer (or any other type that is not a string) is passed in, .NET implicitly applies Convert() method.&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_24125F37.png&quot;&gt;&lt;img style=&quot;background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_0A3E2908.png&quot; width=&quot;246&quot; height=&quot;27&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_0965C31E.png&quot;&gt;&lt;img style=&quot;background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_2CB2B7C3.png&quot; width=&quot;303&quot; height=&quot;27&quot; /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Therefore the code should be update:&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;div style=&quot;padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px&quot; id=&quot;scid:f32c3428-b7e9-4f15-a8ea-c502c7ff2e88:efe1269b-3b4b-4347-b154-a5793efa82d1&quot; class=&quot;wlWriterEditableSmartContent&quot;&gt;&lt;pre class=&quot;brush: c#;&quot;&gt;class PropertyOf&amp;lt;T&amp;gt;&#xA;  {&#xA;    public static string Resolve(Expression&amp;lt;Func&amp;lt;T, object&amp;gt;&amp;gt; expression)&#xA;    {&#xA;      Expression candidate = null;&#xA;&#xA;      if (expression.Body is UnaryExpression)&#xA;        candidate = (expression.Body as UnaryExpression).Operand;&#xA;&#xA;      if (expression.Body is MemberExpression)&#xA;        candidate = expression.Body;&#xA;&#xA;      return (candidate as MemberExpression).Member.Name;&#xA;    }&#xA;  }&lt;/pre&gt;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;Tests are quite simple:&lt;/p&gt;&#xA;&#xA;&lt;div style=&quot;padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px&quot; id=&quot;scid:f32c3428-b7e9-4f15-a8ea-c502c7ff2e88:a0d6cee0-8ebb-4a96-9ea2-17c6bba5ac3c&quot; class=&quot;wlWriterEditableSmartContent&quot;&gt;&lt;pre class=&quot;brush: c#;&quot;&gt;    [Observation]&#xA;    public void Should_return_integer_property_name_as_is_within_the_containing_class()&#xA;    {&#xA;      PropertyOf&amp;lt;Dummy&amp;gt;.Resolve(x =&amp;gt; x.IntegerProperty).Should_Be_Equal_To(&quot;IntegerProperty&quot;);&#xA;    }&#xA;&#xA;    [Observation]&#xA;    public void Should_return_string_property_name_as_is_within_the_containing_class()&#xA;    {&#xA;      PropertyOf&amp;lt;Dummy&amp;gt;.Resolve(x =&amp;gt; x.StringProperty).Should_Be_Equal_To(&quot;StringProperty&quot;);&#xA;    }&#xA;&#xA;    private class Dummy&#xA;    {&#xA;      public int IntegerProperty { get; set; }&#xA;      public string StringProperty { get; set; }&#xA;    }&lt;/pre&gt;&lt;/div&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2011-01-13T03:13:21Z" PublishedUtc="2014-04-19T20:31:17.902271Z" ModifiedUtc="2011-01-13T03:13:21Z" />
      <TagsPart Tags="" />
      <AutoroutePart Alias="simple-mvvm-walkthrough-refactored-part-2" UseCustomPattern="false" />
      <TitlePart Title="Simple MVVM Walkthrough – Refactored–Part 2" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=simple-mvvm-walkthrough-refactored" Status="Published">
      <BodyPart Text="&lt;p&gt;JR has put together a good &lt;a href=&quot;http://agilewarrior.wordpress.com/2011/01/11/simple-mvvm-walkthrough-part-i/&quot; target=&quot;_blank&quot; mce_href=&quot;http://agilewarrior.wordpress.com/2011/01/11/simple-mvvm-walkthrough-part-i/&quot;&gt;introduction post&lt;/a&gt; into MVVM pattern. I love kick start examples that serve the purpose well. And even more than that I love examples that also can pass the real world projects check. So I took the sample code and refactored it slightly for a few aspects that a lot of developers might raise a eyebrow.&lt;/p&gt;  &lt;p&gt;Michael &lt;a href=&quot;http://agilewarrior.wordpress.com/2011/01/11/simple-mvvm-walkthrough-part-i/#comment-515&quot; target=&quot;_blank&quot; mce_href=&quot;http://agilewarrior.wordpress.com/2011/01/11/simple-mvvm-walkthrough-part-i/#comment-515&quot;&gt;has mentioned&lt;/a&gt; model (entity) visibility from view. I agree on that. A few other items that don’t settle are using property names as string (magical strings) and Saver class internal casting of a parameter (custom code for each Saver command). &lt;/p&gt;  &lt;p&gt;Fixing a property names usage is a straight forward exercise – leverage expressions. Something simple like this would do the initial job:&lt;/p&gt;  &lt;div style=&quot;padding: 0px; margin: 0px; display: inline; float: none;&quot; id=&quot;scid:f32c3428-b7e9-4f15-a8ea-c502c7ff2e88:c0801d35-21e2-460a-a22e-2def3789c9c5&quot; class=&quot;wlWriterEditableSmartContent&quot;&gt;&lt;pre class=&quot;brush: c#;&quot;&gt;class PropertyOf&amp;lt;T&amp;gt;&lt;br&gt;  {&lt;br&gt;    public static string Resolve(Expression&amp;lt;Func&amp;lt;T, object&amp;gt;&amp;gt; expression)&lt;br&gt;    {&lt;br&gt;      var member = expression.Body as MemberExpression;&lt;br&gt;      return member.Member.Name;&lt;br&gt;    }&lt;br&gt;  }&lt;/pre&gt;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;With this, refactoring property names becomes an easy task, with confidence that an old property name will not stay in the code after property gets renamed. An updated Invoice would look like this:&lt;/p&gt;&#xA;&#xA;&lt;div style=&quot;padding: 0px; margin: 0px; display: inline; float: none;&quot; id=&quot;scid:f32c3428-b7e9-4f15-a8ea-c502c7ff2e88:07368021-27e5-49b6-87ab-61c3310bc7ab&quot; class=&quot;wlWriterEditableSmartContent&quot;&gt;&lt;pre class=&quot;brush: c#;collapse:true;&quot;&gt;public class Invoice : INotifyPropertyChanged&lt;br&gt;  {&lt;br&gt;    private int id;&lt;br&gt;    private string receiver;&lt;br&gt;&lt;br&gt;    public event PropertyChangedEventHandler PropertyChanged;&lt;br&gt;&lt;br&gt;    private void OnPropertyChanged(string propertyName)&lt;br&gt;    {&lt;br&gt;      if (PropertyChanged != null)&lt;br&gt;      {&lt;br&gt;        PropertyChanged(this, new PropertyChangedEventArgs(propertyName));&lt;br&gt;      }&lt;br&gt;    }&lt;br&gt;&lt;br&gt;    public int Id&lt;br&gt;    {&lt;br&gt;      get { return id; }&lt;br&gt;      set&lt;br&gt;      {&lt;br&gt;        if (id != value)&lt;br&gt;        {&lt;br&gt;          id = value;&lt;br&gt;          OnPropertyChanged(PropertyOf&amp;lt;Invoice&amp;gt;.Resolve(x =&amp;gt; x.Id));&lt;br&gt;        }&lt;br&gt;      }&lt;br&gt;    }&lt;br&gt;&lt;br&gt;    public string Receiver&lt;br&gt;    {&lt;br&gt;      get { return receiver; }&lt;br&gt;      set&lt;br&gt;      {&lt;br&gt;        receiver = value;&lt;br&gt;        OnPropertyChanged(PropertyOf&amp;lt;Invoice&amp;gt;.Resolve(x =&amp;gt; x.Receiver));&lt;br&gt;      }&lt;br&gt;    }&lt;br&gt;  }&lt;/pre&gt;&lt;/div&gt;&#xA;&#xA;&lt;p align=&quot;left&quot;&gt;For the saver, I decided to change it a little so now it becomes a “view-model agnostic” command, one that can be used for multiple commands/view-models. Reason for this is the fact that on average UI has more than a single command. Updated Saver now accepts an action at the construction time and executes that action when command is exercised. No more black magic &lt;img src=&quot;http://weblogs.asp.net/blogs/sfeldman/wlEmoticon-smile_5E0AE80F.png&quot; style=&quot;border-style: none;&quot; class=&quot;wlEmoticon wlEmoticon-smile&quot; alt=&quot;Smile&quot; mce_src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/wlEmoticon-smile_5E0AE80F.png&quot;&gt;&lt;/p&gt;&#xA;&#xA;&lt;div style=&quot;padding: 0px; margin: 0px; display: inline; float: none;&quot; id=&quot;scid:f32c3428-b7e9-4f15-a8ea-c502c7ff2e88:861878b8-a54a-4117-8f41-9ba89d9ffa9e&quot; class=&quot;wlWriterEditableSmartContent&quot;&gt;&lt;pre class=&quot;brush: c#;&quot;&gt;  internal class Command : ICommand&lt;br&gt;  {&lt;br&gt;    private readonly Action executeAction;&lt;br&gt;&lt;br&gt;    public Command(Action executeAction)&lt;br&gt;    {&lt;br&gt;      this.executeAction = executeAction;&lt;br&gt;    }&lt;br&gt;&lt;br&gt;    public bool CanExecute(object parameter)&lt;br&gt;    {&lt;br&gt;      return true;&lt;br&gt;    }&lt;br&gt;&lt;br&gt;    public event EventHandler CanExecuteChanged;&lt;br&gt;&lt;br&gt;    public void Execute(object parameter)&lt;br&gt;    {&lt;br&gt;      // no more black magic&lt;br&gt;      executeAction();&lt;br&gt;    }&lt;br&gt;  }&lt;/pre&gt;&lt;/div&gt;&#xA;&#xA;&lt;p align=&quot;left&quot;&gt;Change in InvoiceViewModel is instantiation of Saver command and execution action for the specific command.&lt;/p&gt;&#xA;&#xA;&lt;div style=&quot;padding: 0px; margin: 0px; display: inline; float: none;&quot; id=&quot;scid:f32c3428-b7e9-4f15-a8ea-c502c7ff2e88:6c0fb2a6-4926-49b1-af35-a2333bca71d9&quot; class=&quot;wlWriterEditableSmartContent&quot;&gt;&lt;pre class=&quot;brush: c#;&quot;&gt; public ICommand SaveCommand&lt;br&gt;    {&lt;br&gt;      get&lt;br&gt;      {&lt;br&gt;        if (saveCommand == null)&lt;br&gt;          saveCommand = new Command(ExecuteAction);&lt;br&gt;        return saveCommand;&lt;br&gt;      }&lt;br&gt;      set { saveCommand = value; }&lt;br&gt;    }&lt;br&gt;&lt;br&gt;    private void ExecuteAction()&lt;br&gt;    {&lt;br&gt;      DisplayMessage = string.Format(&quot;Thanks for creating invoice: {0} {1}&quot;, Invoice.Id, Invoice.Receiver);&lt;br&gt;    }&lt;/pre&gt;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;This way internal knowledge of InvoiceViewModel remains in InvoiceViewModel and Command (ex-Saver) is view-model agnostic.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Now the sample is not only a good introduction, but also has some practicality in it. My 5 cents on the subject.&lt;/p&gt;&#xA;&#xA;&lt;div style=&quot;padding: 0px; margin: 0px; display: inline; float: none;&quot; id=&quot;scid:fb3a1972-4489-4e52-abe7-25a00bb07fdf:1c634a94-86f4-4786-ada0-3b48b99fb172&quot; class=&quot;wlWriterEditableSmartContent&quot;&gt;&lt;p&gt;Sample code &lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/MvvmSimple2_435C5566.zip&quot; target=&quot;_blank&quot;&gt;MvvmSimple2.zip&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;font color=&quot;#ff3300&quot;&gt;Update 2011-01-12&lt;/font&gt;: I have addressed the null exception issue in &lt;a href=&quot;/sfeldman/archive/2011/01/12/simple-mvvm-walkthrough-refactored-part-2.aspx&quot; target=&quot;_blank&quot; mce_href=&quot;/sfeldman/archive/2011/01/12/simple-mvvm-walkthrough-refactored-part-2.aspx&quot;&gt;part 2&lt;/a&gt;. &lt;br&gt;&lt;/p&gt;&lt;/div&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2011-01-12T07:07:00Z" PublishedUtc="2014-04-19T20:31:18.433513Z" ModifiedUtc="2011-01-12T07:07:00Z" />
      <TagsPart Tags="" />
      <AutoroutePart Alias="simple-mvvm-walkthrough-refactored" UseCustomPattern="false" />
      <TitlePart Title="Simple MVVM Walkthrough – Refactored" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=goals-for-2011" Status="Published">
      <BodyPart Text="&lt;p&gt;These are the goals I am setting to work on in 2011 and try to get them done.&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;Practice my agile skills with the new team, bringing it to the next level &lt;/li&gt;    &lt;li&gt;Building a solid team &lt;/li&gt;    &lt;li&gt;Learning and implementing &lt;a href=&quot;http://www.udidahan.com/2009/12/09/clarified-cqrs/&quot; target=&quot;_blank&quot; mce_href=&quot;http://www.udidahan.com/2009/12/09/clarified-cqrs/&quot;&gt;CQRS&lt;/a&gt; based system &lt;/li&gt;    &lt;li&gt;Participate and contribute for an &lt;a href=&quot;http://en.wikipedia.org/wiki/Open-source_software&quot; target=&quot;_blank&quot; mce_href=&quot;http://en.wikipedia.org/wiki/Open-source_software&quot;&gt;OSS&lt;/a&gt; project &lt;/li&gt;    &lt;li&gt;Learn &lt;a href=&quot;http://www.apple.com/macosx/&quot; target=&quot;_blank&quot; mce_href=&quot;http://www.apple.com/macosx/&quot;&gt;MacOS &lt;/a&gt;and development in ObjectiveC / Cocoa &lt;/li&gt;    &lt;li&gt;Use &lt;a href=&quot;http://www.mono-project.com&quot; target=&quot;_blank&quot; mce_href=&quot;http://www.mono-project.com&quot;&gt;Mono &lt;/a&gt;&lt;/li&gt;    &lt;li&gt;Learn &lt;a href=&quot;http://www.asp.net/mvc&quot; target=&quot;_blank&quot; mce_href=&quot;http://www.asp.net/mvc&quot;&gt;ASP.NET MVC &lt;/a&gt;&lt;/li&gt;    &lt;li&gt;Learn printing architecture on &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ee380649%28PROT.10%29.aspx&quot; target=&quot;_blank&quot; mce_href=&quot;http://msdn.microsoft.com/en-us/library/ee380649%28PROT.10%29.aspx&quot;&gt;Windows&lt;/a&gt; and Linux &lt;/li&gt;    &lt;li&gt;Learn embedded development (&lt;a href=&quot;http://www.oracle.com/technetwork/java/index.html&quot; target=&quot;_blank&quot; mce_href=&quot;http://www.oracle.com/technetwork/java/index.html&quot;&gt;Java&lt;/a&gt;) &lt;/li&gt;    &lt;li&gt;Finish basement – yes, a goal that is not computer related :)&lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;This is going to be an exciting year!&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2011-01-01T02:12:00Z" PublishedUtc="2014-04-19T20:31:18.8866343Z" ModifiedUtc="2011-01-01T02:12:00Z" />
      <TagsPart Tags="Personal" />
      <AutoroutePart Alias="goals-for-2011" UseCustomPattern="false" />
      <TitlePart Title="Goals for 2011" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=t-sql-tidy" Status="Published">
      <BodyPart Text="&lt;p&gt;A &lt;a href=&quot;http://www.tsqltidy.com/Default.aspx&quot; target=&quot;_blank&quot;&gt;great tool / SQL Server Management Studio add-on&lt;/a&gt; to format your T-SQL statement to look clean and professional. The neat part that online version is also available.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2010-12-08T07:36:00Z" PublishedUtc="2014-04-19T20:31:19.1366318Z" ModifiedUtc="2010-12-08T07:36:00Z" />
      <TagsPart Tags="Other,Tools" />
      <AutoroutePart Alias="t-sql-tidy" UseCustomPattern="false" />
      <TitlePart Title="T-SQL Tidy" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=visualsvn-server-enforce-comments" Status="Published">
      <BodyPart Text="&lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/Pre-commit.hook_7D797823.png&quot;&gt;&lt;img style=&quot;background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: right; border-top: 0px; border-right: 0px; padding-top: 0px&quot; title=&quot;Pre-commit.hook&quot; border=&quot;0&quot; alt=&quot;Pre-commit.hook&quot; align=&quot;right&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/Pre-commit.hook_thumb_31ADA16A.png&quot; width=&quot;352&quot; height=&quot;372&quot; /&gt;&lt;/a&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;setlocal    &lt;br /&gt;    &lt;br /&gt;set REPOS=%1    &lt;br /&gt;set TXN=%2    &lt;br /&gt;set SVNLOOK=&amp;quot;%PROGRAMFILES(X86)%\VisualSVN Server\bin\svnlook.exe&amp;quot;    &lt;br /&gt;    &lt;br /&gt;REM Make sure that the log message contains some text.    &lt;br /&gt;FOR /F &amp;quot;usebackq delims==&amp;quot; %%g IN (`%SVNLOOK% log -t %TXN% %REPOS% FINDSTR /R /C:......`) DO goto NORMAL_EXIT    &lt;br /&gt;    &lt;br /&gt;:ERROR_TOO_SHORT    &lt;br /&gt;echo &amp;quot;Must provide comments&amp;quot; &amp;gt;&amp;amp;2    &lt;br /&gt;goto ERROR_EXIT    &lt;br /&gt;    &lt;br /&gt;:ERROR_EXIT    &lt;br /&gt;exit /b 1    &lt;br /&gt;    &lt;br /&gt;REM All checks passed, so allow the commit.    &lt;br /&gt;:NORMAL_EXIT    &lt;br /&gt;exit 0     &lt;/p&gt;&#xA;2012-01-03: Post on StackOverflow on this: http://stackoverflow.com/questions/247888/how-to-require-commit-messages-in-visualsvn-server" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2010-11-22T03:38:00Z" PublishedUtc="2014-04-19T20:31:19.6209992Z" ModifiedUtc="2010-11-22T03:38:00Z" />
      <TagsPart Tags="Tools" />
      <AutoroutePart Alias="visualsvn-server-enforce-comments" UseCustomPattern="false" />
      <TitlePart Title="VisualSVN Server - Enforce Comments" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=agile-sticky-board" Status="Published">
      <BodyPart Text="&lt;p&gt;I had a long plan to demonstrate in an animated way a software project &lt;a href=&quot;http://animoto.com/play/lLsnERX0HNzj0IAZVG00Yw&quot; target=&quot;_blank&quot;&gt;progress without using any software&lt;/a&gt; or what is know in agile as Sticky Borad (stickies board). Wanted to capture the process of thought, the evolution and how things are dynamically progressing. The chance finally came to do so.&lt;/p&gt;  &lt;p&gt;This is my 300th blog on weblogs.asp.net – circle being closed.&lt;/p&gt;  &lt;p&gt;Enjoy: &lt;object id=&quot;vp1lLsnE&quot; width=&quot;432&quot; height=&quot;240&quot; classid=&quot;clsid:d27cdb6e-ae6d-11cf-96b8-444553540000&quot;&gt;&lt;param name=&quot;movie&quot; value=&quot;http://static.animoto.com/swf/w.swf?w=swf/vp1&amp;amp;e=1290231708&amp;amp;f=lLsnERX0HNzj0IAZVG00Yw&amp;amp;d=194&amp;amp;m=b&amp;amp;r=w&amp;amp;i=m&amp;amp;options=&quot;&gt;&lt;/param&gt;&lt;param name=&quot;allowFullScreen&quot; value=&quot;true&quot;&gt;&lt;/param&gt;&lt;param name=&quot;allowscriptaccess&quot; value=&quot;always&quot;&gt;&lt;/param&gt;&lt;embed id=&quot;vp1lLsnE&quot; src=&quot;http://static.animoto.com/swf/w.swf?w=swf/vp1&amp;amp;e=1290231708&amp;amp;f=lLsnERX0HNzj0IAZVG00Yw&amp;amp;d=194&amp;amp;m=b&amp;amp;r=w&amp;amp;i=m&amp;amp;options=&quot; type=&quot;application/x-shockwave-flash&quot; allowscriptaccess=&quot;always&quot; allowfullscreen=&quot;true&quot; width=&quot;432&quot; height=&quot;240&quot;&gt;&lt;/embed&gt;&lt;/object&gt;&lt;/p&gt;  &lt;p&gt;Create your own &lt;a href=&quot;http://animoto.com&quot;&gt;video slideshow&lt;/a&gt; at animoto.com.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2010-11-20T05:35:00Z" PublishedUtc="2014-04-19T20:31:20.1991162Z" ModifiedUtc="2010-11-20T05:35:00Z" />
      <TagsPart Tags="Agile,Personal" />
      <AutoroutePart Alias="agile-sticky-board" UseCustomPattern="false" />
      <TitlePart Title="Agile Sticky Board" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=mbunit-hidden-gem" Status="Published">
      <BodyPart Text="&lt;p&gt;Row tests are fun. You can simulate various inputs with expected outputs and execute them all with a single observation (test). The problem for myself was always the fact that when this was done, the only way to accomplish it was to merge the logical &lt;em&gt;because&lt;/em&gt; which operates on system under test behaviour and the observation itself (assertion). This leads to a slightly less readable code IMO.&lt;/p&gt;    &lt;div style=&quot;padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px&quot; id=&quot;scid:f32c3428-b7e9-4f15-a8ea-c502c7ff2e88:d019a037-262d-4f9f-99ca-2f94b94d3a31&quot; class=&quot;wlWriterEditableSmartContent&quot;&gt;&lt;pre class=&quot;brush: c#;&quot;&gt;[Row(“hello”, 5)]&#xA;[Row(“you”, 3)]&#xA;public void behaviour_and_observation(string value, int expected_number_of_letters)&#xA;{&#xA;&#x9;system_under_test.GetLenth(value).Should_be_equal_to(expected_number_of_letters);&#xA;}&#xA;&#xA;&lt;/pre&gt;&lt;/div&gt;&#xA;Luckily, as pointed out by one of my ex-coworkers Dragosh, MbUnit has a way to assist with a specification that is trying to keep concerns separated. It’s called &lt;a href=&quot;http://www.gallio.org/api/html/T_MbUnit_Framework_ParameterAttribute.htm&quot; target=&quot;_blank&quot;&gt;ParameterAttribute&lt;/a&gt;.&#xA;&#xA;&#xA;&#xA;&lt;p&gt;What specification does look like then?&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div style=&quot;padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px&quot; id=&quot;scid:f32c3428-b7e9-4f15-a8ea-c502c7ff2e88:87e2480a-f251-498a-8000-0cbb7a07249e&quot; class=&quot;wlWriterEditableSmartContent&quot;&gt;&lt;pre class=&quot;brush: c#;&quot;&gt;[Header(&quot;Value&quot;, &quot;ExpectedLength&quot;)]&#xA;[Row(&quot;hello&quot;, 5)]&#xA;[Row(&quot;you&quot;, 3)]&#xA;[Specification]&#xA;public class Some_specification : ContextSpecification&#xA;{&#xA;&#x9;[Parameter]&#xA;                 public string Value{ get; set; }&#xA; &#xA;                 [Parameter]&#xA;                 public int ExpectedLength{ get; set; }&#xA; &#xA;                 [Because]&#xA;                 protected void When_obtaining_length()&#xA;                 {&#xA;                          result = system_under_test.GetLength(Value);&#xA;                 }&#xA; &#xA;                 [Observation]&#xA;      &#x9; public void Should_get_proper_length()&#xA;                 {&#xA;                          result.Should_be_equal_to(ExpectedLength);&#xA;                 }&#xA;}&lt;/pre&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;This is a trivial code, but with a bit more complex code the technique becomes really handy.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2010-11-13T05:16:00Z" PublishedUtc="2014-04-19T20:31:20.5439752Z" ModifiedUtc="2010-11-13T05:16:00Z" />
      <TagsPart Tags="C#,TDD" />
      <AutoroutePart Alias="mbunit-hidden-gem" UseCustomPattern="false" />
      <TitlePart Title="MbUnit–Hidden Gem" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=c-4-0-in-a-nutshell-book" Status="Published">
      <BodyPart Text="&lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_48AAF934.png&quot;&gt;&lt;img style=&quot;background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: right; border-top: 0px; border-right: 0px; padding-top: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; align=&quot;right&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_2E6A9010.png&quot; width=&quot;172&quot; height=&quot;256&quot; /&gt;&lt;/a&gt;I like to refresh my memory on the basics. A lot of times you’ll look at something that you already know slightly different every single time. So is true with this book. It’s a great reference for C# as well as cover for the new features introduced in 4.0 (one of those &lt;a href=&quot;http://weblogs.asp.net/sfeldman/archive/2010/10/28/dynamic-in-the-wild.aspx&quot; target=&quot;_blank&quot;&gt;I have already blogged&lt;/a&gt; about). &lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2010-11-13T04:55:00Z" PublishedUtc="2014-04-19T20:31:21.1834872Z" ModifiedUtc="2010-11-13T04:55:00Z" />
      <TagsPart Tags="Books" />
      <AutoroutePart Alias="c-4-0-in-a-nutshell-book" UseCustomPattern="false" />
      <TitlePart Title="C# 4.0 in a Nutshell–Book" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=drive-book" Status="Published">
      <BodyPart Text="&lt;p&gt;It started with &lt;a href=&quot;http://agilewarrior.wordpress.com&quot; target=&quot;_blank&quot;&gt;Jonathan&lt;/a&gt; talking about the video he saw, &lt;a href=&quot;http://www.youtube.com/watch?v=u6XAPnuFjJc&quot; target=&quot;_blank&quot;&gt;Drive: The surprising truth&lt;a href=&quot;http://www.youtube.com/watch?v=u6XAPnuFjJc&quot; target=&quot;_blank&quot;&gt;&lt;img style=&quot;background-image: none; border-right-width: 0px; margin: 0px 0px 0px 16px; padding-left: 0px; padding-right: 0px; display: inline; float: right; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; align=&quot;right&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_017FC426.png&quot; width=&quot;189&quot; height=&quot;290&quot; /&gt;&lt;/a&gt; about what motivates us&lt;/a&gt;. I really liked it, and decided to proceed to the book. The book is outstanding, hits in the target. Among other things, I can definitely use it to explain a good portion of things that happened to me in the past. What is interesting, is what Daniel Pink describes as “Drive”, Mihaly Csikszentmihalyi describes as “Flow” (another book to read). I really liked the language and associations Pink has used in the book – software and computers. This makes analogies and examples extremely simple. Good read.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2010-11-10T16:02:00Z" PublishedUtc="2014-04-19T20:31:21.5584997Z" ModifiedUtc="2010-11-10T16:02:00Z" />
      <TagsPart Tags="Books" />
      <AutoroutePart Alias="drive-book" UseCustomPattern="false" />
      <TitlePart Title="Drive–Book" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=resharper-test-runner-is-slow" Status="Published">
      <BodyPart Text="&lt;p&gt;I love &lt;a href=&quot;http://www.jetbrains.com/resharper/&quot; target=&quot;_blank&quot;&gt;R#&lt;/a&gt;. It’s a great Add-on that makes Visual Studio .NET a usable tool. What I don’t like about R# is it’s test runner – so slow… I switched to use &lt;a href=&quot;http://www.testdriven.net&quot; target=&quot;_blank&quot;&gt;TestDriven.NET&lt;/a&gt; almost two years ago. In the last few weeks had to go back to R# test runner. What a difference. I tried to capture the difference on a video, so that you’d see the difference between R# test runner, TD.NET, and command line build script that does everything (compile and test). By the looks of it, R# takes about the same time as command line script. A tool that does literally miracles with VS.NET should be a bit snappier IMO.&lt;/p&gt;  &lt;div style=&quot;padding-bottom: 0px; margin: 0px auto; padding-left: 0px; width: 425px; padding-right: 0px; display: block; float: none; padding-top: 0px&quot; id=&quot;scid:5737277B-5D6D-4f48-ABFC-DD9C333F4C5D:1f3cffc6-58a3-497c-b6f7-65a43f1c64ad&quot; class=&quot;wlWriterSmartContent&quot;&gt;   &lt;div&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=jjkPBDVqoUg&quot; target=&quot;_new&quot;&gt;&lt;img style=&quot;border-bottom-style: none; border-right-style: none; border-top-style: none; border-left-style: none&quot; alt=&quot;&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/video033d39c2f86b_577FF9CF.jpg&quot; galleryimg=&quot;no&quot; /&gt;&lt;/a&gt;&lt;/div&gt; &lt;/div&gt;  &lt;p&gt;PS: I used free version of &lt;a href=&quot;http://www.techsmith.com/jing/&quot; target=&quot;_blank&quot;&gt;Jing&lt;/a&gt; to capture the video since this is something I was using for a while. But to get it into AVI I used &lt;a href=&quot;http://www.microsoft.com/expression/products/Encoder4_Overview.aspx&quot; target=&quot;_blank&quot;&gt;free Microsoft Expression Encoder 4&lt;/a&gt;, which I will be using as a capturing tool. Changing tools as you go, another blog post subject.&lt;/p&gt;  &lt;p&gt;&lt;font color=&quot;#ff0000&quot;&gt;2010-11-03 Update:&lt;/font&gt; QAs at JetBrains are looking into the issue.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2010-10-31T06:55:00Z" PublishedUtc="2014-04-19T20:31:22.1522232Z" ModifiedUtc="2010-10-31T06:55:00Z" />
      <TagsPart Tags="" />
      <AutoroutePart Alias="resharper-test-runner-is-slow" UseCustomPattern="false" />
      <TitlePart Title="ReSharper Test Runner is SLOW" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=time-to-move-on" Status="Published">
      <BodyPart Text="&lt;p&gt;So now it’s official. After 2 year with Cortex I am leaving. It was an extremely interesting period in my professional life. I was given an opportunity to work with so many great people and an outstanding group of developers, build a great team, exercise TDD/BDD development, experiment with agile processes, design and build systems that evolved the company business in electronic procurement and supply chain management. Among many other things that I could list here, I learned a big deal of human-related skills. In the business of software and computers, human skills are still one of the most important commodities that striving to acquire is necessary for any software developer that wants to be successful. &lt;/p&gt;  &lt;p&gt;Every end is a beginning. I am excited to start another chapter in 2 weeks.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2010-10-31T03:07:00Z" PublishedUtc="2014-04-19T20:31:22.949082Z" ModifiedUtc="2010-10-31T03:07:00Z" />
      <TagsPart Tags="Personal" />
      <AutoroutePart Alias="time-to-move-on" UseCustomPattern="false" />
      <TitlePart Title="Time to Move On" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=effective-rest-services-via-net-book" Status="Published">
      <BodyPart Text="&lt;p&gt;This a very good introduction into RESTfull services on .NET platform.&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;http://www.amazon.ca/Effective-REST-Services-via-NET/dp/0321613252&quot; target=&quot;_blank&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: inline; margin-left: 0px; border-top: 0px; margin-right: 0px; border-right: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; align=&quot;right&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_593CB153.png&quot; width=&quot;198&quot; height=&quot;265&quot; /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt; The author goes into implementation on bare metal (browsers),&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;http://www.amazon.ca/Effective-REST-Services-via-NET/dp/0321613252&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt; ASP.NET MVC, WebForms, WCF, Silverlight, etc. A good read to get into RESTfull services.&amp;#160; &lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;http://www.amazon.ca/Effective-REST-Services-via-NET/dp/0321613252&quot; target=&quot;_blank&quot;&gt;&amp;#160;&lt;/a&gt;&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2010-10-30T04:42:00Z" PublishedUtc="2014-04-19T20:31:23.839694Z" ModifiedUtc="2010-10-30T04:42:00Z" />
      <TagsPart Tags="Books" />
      <AutoroutePart Alias="effective-rest-services-via-net-book" UseCustomPattern="false" />
      <TitlePart Title="Effective REST Services via .NET – Book" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=dynamic-in-the-wild" Status="Published">
      <BodyPart Text="&lt;p&gt;Today &lt;a href=&quot;http://agilewarrior.wordpress.com/&quot; target=&quot;_blank&quot; mce_href=&quot;http://agilewarrior.wordpress.com/&quot;&gt;Jonathan&lt;/a&gt; and myself worked on a RESTful service that is responsible to create a new invoice. The design decision was to return HTTP status code 409 (Conflict) in case client tries to add more than once the same invoice. The code looked like this:&lt;/p&gt;  &lt;div style=&quot;padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px&quot; id=&quot;scid:f32c3428-b7e9-4f15-a8ea-c502c7ff2e88:c108507c-c5be-4b84-a4da-1d15d71023b4&quot; class=&quot;wlWriterSmartContent&quot;&gt;   &lt;pre class=&quot;brush: c#;&quot;&gt;public Invoice AddNewInvoice(Invoice newInvoice)&lt;br /&gt;        {&lt;br /&gt;            var existingInvoice = invoices.Find(x =&amp;gt; x.Id == newInvoice.Id);&lt;br /&gt;            var ctx = WebOperationContext.Current;&lt;br /&gt;            ctx.OutgoingResponse.Headers[&amp;quot;Cache-Control&amp;quot;] = &amp;quot;no-cache&amp;quot;;&lt;br /&gt;&lt;br /&gt;            if (existingInvoice != null)&lt;br /&gt;            {&lt;br /&gt;                ctx.OutgoingResponse.StatusCode = HttpStatusCode.Conflict;&lt;br /&gt;                return null;&lt;br /&gt;            }&lt;br /&gt;&lt;br /&gt;            invoices.Add(newInvoice);&lt;br /&gt;&lt;br /&gt;            ctx.OutgoingResponse.StatusCode = HttpStatusCode.Created;&lt;br /&gt;            ctx.OutgoingResponse.Location = PluginFactory.INSTANCE.InvoiceServiceUri() + &amp;quot;/&amp;quot; + newInvoice.Id;&lt;br /&gt;&lt;br /&gt;            return new Invoice(newInvoice.Id, newInvoice.Receiver);&lt;br /&gt;        }&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;Everything was fine, except that in our client (Silverlight 4.0) application it was impossible to get the HTTP status code you’d normally get on a normal .NET stack. By the looks of it, definitely something Microsoft team should look into.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;But no worries, we decided to look into WebException to see if it really that clueless or it actually has what we need and hides it. After all, Response is a WebResponse object.&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: block; float: none; margin-left: auto; border-top: 0px; margin-right: auto; border-right: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;http://weblogs.asp.net/blogs/sfeldman/image_thumb_70881E9A.png&quot; width=&quot;291&quot; height=&quot;240&quot; mce_src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_70881E9A.png&quot; /&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Unfortunately, no luck there. The implementation was exactly what Intellisense showed us.&lt;/p&gt;&#xA;&#xA;&lt;div style=&quot;padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px&quot; id=&quot;scid:f32c3428-b7e9-4f15-a8ea-c502c7ff2e88:162fed68-5a8e-43ba-91df-9a704eec0254&quot; class=&quot;wlWriterSmartContent&quot;&gt;&#xA;  &lt;pre class=&quot;brush: c#;collapse:true;&quot;&gt;  public abstract class WebResponse : IDisposable&lt;br /&gt;  {&lt;br /&gt;    public abstract long ContentLength { get; }&lt;br /&gt;    public abstract string ContentType { get; }&lt;br /&gt;    public abstract Uri ResponseUri { get; }&lt;br /&gt;    public virtual WebHeaderCollection Headers { get; }&lt;br /&gt;    public virtual bool SupportsHeaders { get; }&lt;br /&gt;    void IDisposable.Dispose();&lt;br /&gt;    public abstract Stream GetResponseStream();&lt;br /&gt;    public abstract void Close();&lt;br /&gt;  }&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;Then we tried the last resort – review object in debugger. And there we could find an interesting thing. &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/dd920295%28v=VS.95%29.aspx&quot; target=&quot;_blank&quot; mce_href=&quot;http://msdn.microsoft.com/en-us/library/dd920295%28v=VS.95%29.aspx&quot;&gt;Silverlight has two HTTP stack implementations&lt;/a&gt;, Browser and Client. We used the Client one. The type of e.Response was &lt;i&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.net.httpwebresponse%28v=VS.95%29.aspx&quot; target=&quot;_blank&quot; mce_href=&quot;http://msdn.microsoft.com/en-us/library/system.net.httpwebresponse%28v=VS.95%29.aspx&quot;&gt;System.Net.Browser.ClientHttpWebResponse&lt;/a&gt; &lt;/i&gt;as a result of that. Now &lt;i&gt;ClientHttpWebResponse &lt;/i&gt;had everything we needed. The only problem was that casting was impossible due to Microsoft decision to make &lt;i&gt;ClientHttpWebResponse &lt;/i&gt;internal.&amp;#160; &lt;/p&gt;&#xA;&#xA;&lt;p&gt;&amp;#160;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&amp;#160;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;http://weblogs.asp.net/blogs/sfeldman/image_440BEC58.png&quot; mce_href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_440BEC58.png&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: block; float: none; margin-left: auto; border-top: 0px; margin-right: auto; border-right: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;http://weblogs.asp.net/blogs/sfeldman/image_thumb_3156F2A1.png&quot; width=&quot;372&quot; height=&quot;78&quot; mce_src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_3156F2A1.png&quot; /&gt;&lt;/a&gt;&amp;#160;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Normally, we’d go with reflection to access the StatusCode property. But reflection is ugly and painful. This is where &lt;i&gt;dynamic &lt;/i&gt;becomes really handy. Definition of &lt;i&gt;dynamic &lt;/i&gt;says:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;Type dynamic behaves like type object in most circumstances. However, operations that contain expressions of type dynamic are not resolved or type checked by the compiler. The compiler packages together information about the operation, and that information is later used to evaluate the operation at run time. As part of the process, variables of type dynamic are compiled into variables of type object. Therefore, type dynamic exists only at compile time, not at run time.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;Final result that works:&lt;/p&gt;&#xA;&#xA;&lt;div style=&quot;padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px&quot; id=&quot;scid:f32c3428-b7e9-4f15-a8ea-c502c7ff2e88:ed86b87c-297d-44f4-8811-ea4fcd1ed385&quot; class=&quot;wlWriterSmartContent&quot;&gt;&#xA;  &lt;pre class=&quot;brush: c#;&quot;&gt;&#x9;catch (WebException e)&lt;br /&gt;                {&lt;br /&gt;                  dynamic exceptionResponse = e.Response;&lt;br /&gt;                    if (exceptionResponse.StatusCode == HttpStatusCode.Conflict)&lt;br /&gt;                        //...&lt;br /&gt;                    else&lt;br /&gt;                        //...&lt;br /&gt;                }&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;Update: JR has actually posted the code were this technique is applied. &lt;a href=&quot;http://agilewarrior.wordpress.com/2010/10/30/restful-wcf-service-with-silverlight4/&quot; target=&quot;_blank&quot;&gt;Check it out&lt;/a&gt;.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2010-10-29T03:49:00Z" PublishedUtc="2014-04-19T20:31:24.5584359Z" ModifiedUtc="2010-10-29T03:49:00Z" />
      <TagsPart Tags="" />
      <AutoroutePart Alias="dynamic-in-the-wild" UseCustomPattern="false" />
      <TitlePart Title="dynamic in the Wild" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=compliment" Status="Published">
      <BodyPart Text="&lt;p&gt;Today, a work of two years has manifested itself as an ordinary fact.&lt;/p&gt;  &lt;p&gt;An old project (2 years old) had to be re-opened for new features required by client. This is a project we started when I joined the company, back when team didn’t have any TDD skills. It was group’s first attempt to use BDD, combined with Mocking using Rhino.Mocks, NHibernate, WatiN, and some other tools and libraries that previously were never used. We executed tests using ReSharper 4.1 test runner and didn’t have build script to execute them automatically (build server was the next step after the project was done). So we tagged the project as a legacy project, and placed in the legacy projects repository (the one that had all the “fragile” code).&lt;/p&gt;  &lt;p&gt;So as I was going through the project details with the development team, I automatically called it Legacy Code. And after we were done with a quick pair-review, a developer told me “Sean, you are wrong, this is not a legacy code. I have tests to verify changes. I have confidence in what I will be doing. Therefore it is not Legacy Code.”&lt;/p&gt;  &lt;p&gt;Call me sensitive, but it did warm my heart.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2010-10-20T05:09:00Z" PublishedUtc="2014-04-19T20:31:25.1365526Z" ModifiedUtc="2010-10-20T05:09:00Z" />
      <TagsPart Tags="Other,TDD" />
      <AutoroutePart Alias="compliment" UseCustomPattern="false" />
      <TitlePart Title="Compliment" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=this-developer-s-life-podcast" Status="Published">
      <BodyPart Text="&lt;p&gt;The other day I was listening to This Developer’s Life podcast, episode 1 – &lt;a href=&quot;http://thisdeveloperslife.com/post/1203177584/1-0-1-getting-fired&quot; target=&quot;_blank&quot;&gt;Getting Fired&lt;/a&gt;. Please don’t confused, I am not getting fired (yet), but I find it very interesting how Rob formulated his experience. I also completely in agreement with &lt;a href=&quot;http://ayende.com/blog&quot; target=&quot;_blank&quot;&gt;Oren Eini&lt;/a&gt;. Being honest (not rude) is a key to successful work relationship. Dealing with people is not always logical, therefore the importance of way things are communicated sometimes exceed the message itself.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2010-10-16T01:54:00Z" PublishedUtc="2014-04-19T20:31:25.3240605Z" ModifiedUtc="2010-10-16T01:54:00Z" />
      <TagsPart Tags="Personal" />
      <AutoroutePart Alias="this-developer-s-life-podcast" UseCustomPattern="false" />
      <TitlePart Title="This Developer’s Life Podcast" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=microsoft-sql-server-2008-management-studio-express" Status="Published">
      <BodyPart Text="&lt;p&gt;I am so grateful to Graham O’Neale for blogging &lt;a href=&quot;http://goneale.com/2009/05/24/cant-install-microsoft-sql-server-2008-management-studio-express/&quot; target=&quot;_blank&quot;&gt;his experience&lt;/a&gt; with installing Management Studio Express for&amp;#160; MS SQL Server 2008. This has definitely saved me time (and others based on comments). &lt;/p&gt;  &lt;p&gt;In my case, I have installed Visual Studio .NET 2010 first, and then tried to install Management Studio Express. &lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2010-10-15T14:45:00Z" PublishedUtc="2014-04-19T20:31:25.5427973Z" ModifiedUtc="2010-10-15T14:45:00Z" />
      <TagsPart Tags="" />
      <AutoroutePart Alias="microsoft-sql-server-2008-management-studio-express" UseCustomPattern="false" />
      <TitlePart Title="Microsoft SQL Server 2008 Management Studio Express" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=the-agile-samurai-book" Status="Published">
      <BodyPart Text="&lt;p&gt;It is a great honour to work with the &lt;a href=&quot;http://agilewarrior.wordpress.com/&quot; target=&quot;_blank&quot;&gt;person&lt;/a&gt; who wrote the &lt;a href=&quot;http://www.amazon.com/Agile-Samurai-Masters-Deliver-Software/dp/1934356581&quot; target=&quot;_blank&quot;&gt;book&lt;/a&gt; I&lt;a href=&quot;http://www.amazon.com/Agile-Samurai-Masters-Deliver-Software/dp/1934356581&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: inline; margin-left: 0px; border-top: 0px; margin-right: 0px; border-right: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; align=&quot;right&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_1D544DB9.png&quot; width=&quot;202&quot; height=&quot;244&quot; /&gt;&lt;/a&gt; just recently finished reading. The Agile Samurai is a mix of project management and software development. It’s a reality check helper if you are trying to run agile process in your company/team/project. The intention of this post is not to review the book, this is what I will do later at Amazon. Jonathan has managed to make me think of certain things in a different manner, maybe a little bit more realistic. There are a few new tools I can put under my belt (&lt;a href=&quot;http://www.pragprog.com/magazines/2010-10/way-of-the-agile-warrior&quot; target=&quot;_blank&quot;&gt;Inception Deck&lt;/a&gt;) to move forward with. The most important message from the book IMHO was not taking Agile literally as written - fluctuate, experiment, and question.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2010-10-14T03:17:00Z" PublishedUtc="2014-04-19T20:31:25.8552952Z" ModifiedUtc="2010-10-14T03:17:00Z" />
      <TagsPart Tags="Agile,Books" />
      <AutoroutePart Alias="the-agile-samurai-book" UseCustomPattern="false" />
      <TitlePart Title="The Agile Samurai – Book" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=time-and-kids" Status="Published">
      <BodyPart Text="&lt;p&gt;This is not a technical post.&lt;/p&gt;  &lt;p&gt;A while ago I was told that you always have time, you just don’t know how to manage it. I tried to resist to that person, knowing nothing about life of family with little kids. Yes, you can make “borrow” some time from family and kids, but that is &lt;strong&gt;not&lt;/strong&gt; an option I would take.&lt;/p&gt;  &lt;p&gt;The article below is a very accurate description of what it’s like, and highly recommended to those “that know better” :)&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/parenting_69EBDBAE.png&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: block; float: none; margin-left: auto; border-top: 0px; margin-right: auto; border-right: 0px&quot; title=&quot;parenting&quot; border=&quot;0&quot; alt=&quot;parenting&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/parenting_thumb_0F653343.png&quot; width=&quot;558&quot; height=&quot;604&quot; /&gt;&lt;/a&gt;&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2010-10-08T01:57:00Z" PublishedUtc="2014-04-19T20:31:26.5740464Z" ModifiedUtc="2010-10-08T01:57:00Z" />
      <TagsPart Tags="Personal" />
      <AutoroutePart Alias="time-and-kids" UseCustomPattern="false" />
      <TitlePart Title="Time and Kids" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=creating-biztalk-message-in-custom-net-component" Status="Published">
      <BodyPart Text="&lt;p&gt;In my previous blog about &lt;a href=&quot;http://weblogs.asp.net/sfeldman/archive/2010/09/21/consuming-wcf-service-from-biztalk.aspx&quot; target=&quot;_blank&quot;&gt;consuming WCF service from BizTalk orchestration&lt;/a&gt; I wrote about how we’d invoke a service based on a document coming in and mapping it into the service request schema.&lt;/p&gt;  &lt;p&gt;This time I had the input for the service coming from a context, and not necessarily from the document itself, and needed to be able to perform same service invocation, yet constructing request document dynamically with-in the orchestration. To simplify the process, I still pass in a document, and distinguish a field with the value I want to pass into the service. This way I don’t actually have to waste time on property promotion. The key here is to invoke a custom .NET component (GAC-ed singleton) to construct the message with the value(s) coming from the original message context.&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_1CB6C5C7.png&quot; target=&quot;_blank&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: block; float: none; margin-left: auto; border-top: 0px; margin-right: auto; border-right: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_269BB732.png&quot; width=&quot;444&quot; height=&quot;426&quot; /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;Where the code is quite simple – invoke singleton with the required value(s):&lt;/p&gt;  &lt;div style=&quot;padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px&quot; id=&quot;scid:f32c3428-b7e9-4f15-a8ea-c502c7ff2e88:66f36264-4ba5-473e-8249-d04533254ebf&quot; class=&quot;wlWriterEditableSmartContent&quot;&gt;&lt;pre class=&quot;brush: c#;&quot;&gt;System.Diagnostics.Trace.WriteLine(&quot;Invoking factory.&quot;);&#xA;toServiceMsg = MessageFactory.RequestMessageFactory.CreateProcessMessage(originalMsg.Value);&#xA;System.Diagnostics.Trace.WriteLine(&quot;Done invoking factory.&quot;);&lt;/pre&gt;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The interesting part is the &lt;em&gt;CreateProcessMessage &lt;/em&gt;method itself. The message I am generating is of schema &lt;em&gt;Process &lt;/em&gt;(service incoming schema, &lt;em&gt;ProcessResponse &lt;/em&gt;is outgoing schema). I couldn’t use XLANGMessage since it’s an abstract class. Therefore needed something to allow BizTalk message construction. This is where I ran into this &lt;a href=&quot;http://blogs.msdn.com/b/appfabriccat/archive/2010/06/23/4-different-ways-to-process-an-xlangmessage-within-an-helper-component-invoked-by-an-orchestration.aspx&quot; target=&quot;_blank&quot;&gt;great blog post&lt;/a&gt; describing some of the options. I tried to look up more info, but honestly, this part of BizTalk is so badly documented IMO, that couldn’t get a lot. Not to mention that there’s no intellisense on these things… Anyways, this is what the method does:&lt;/p&gt;&#xA;&#xA;&lt;div style=&quot;padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px&quot; id=&quot;scid:f32c3428-b7e9-4f15-a8ea-c502c7ff2e88:d349a40b-5f6e-40c2-b196-5ccd2ef70577&quot; class=&quot;wlWriterEditableSmartContent&quot;&gt;&lt;pre class=&quot;brush: c#;&quot;&gt;namespace MessageFactory&#xA;{&#xA;&#x9;public static class RequestMessageFactory&#xA;&#x9;{&#xA;&#x9;&#x9;private const string Namespace = &quot;http://tempuri.org/&quot;;&#xA;&#xA;&#x9;&#x9;public static XLANGMessage CreateProcessMessage(int value)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;var message = new GeneralMessage(&quot;Process&quot;);&#xA;&#x9;&#x9;&#x9;var memoryStream = new MemoryStream();&#xA;&#x9;&#x9;&#x9;using (var writer = XmlWriter.Create(memoryStream))&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;writer.WriteStartDocument();&#xA;&#x9;&#x9;&#x9;&#x9;writer.WriteStartElement(&quot;Process&quot;, Namespace);&#xA;&#x9;&#x9;&#x9;&#x9;writer.WriteStartElement(&quot;value&quot;, Namespace);&#xA;&#x9;&#x9;&#x9;&#x9;writer.WriteString(value.ToString());&#xA;&#x9;&#x9;&#x9;&#x9;writer.WriteEndElement();&#xA;&#x9;&#x9;&#x9;&#x9;writer.WriteEndElement();&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;memoryStream.Seek(0, SeekOrigin.Begin);&#xA;&#xA;&#x9;&#x9;&#x9;message[0].LoadFrom(memoryStream);&#xA;&#x9;&#x9;&#x9;return message.GetMessageWrapperForUserCode();&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;[Serializable]&#xA;&#x9;public sealed class GeneralMessage : BTXMessage&#xA;&#x9;{&#xA;&#x9;&#x9;public GeneralMessage(string messageName) &#xA;&#x9;&#x9;&#x9;: this (messageName, Service.RootService.XlangStore.OwningContext)&#xA;&#x9;&#x9;{}&#xA;&#xA;&#x9;&#x9;private GeneralMessage(string messageName, Context owningContext) &#xA;&#x9;&#x9;&#x9;: base(messageName, owningContext)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;owningContext.RefMessage(this);&#xA;&#x9;&#x9;&#x9;AddAnyPart(&quot;Body&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;}&lt;/pre&gt;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;A lot of magic IMO. I wish Microsoft would provide a bit more on the subject, such as what &lt;em&gt;Service.RootService.XlangStore.OwningContex&lt;/em&gt; is and why we need to &lt;em&gt;Ref&lt;/em&gt;-a-&lt;em&gt;Message&lt;/em&gt; (guessing is not knowing!).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Another “smell” is that now the factory (custom .NET component) had to be aware of the contract without being connected to the schema file itself or any visible link. So whenever the contract is changing, factory has to reflect that change. The only way I can capture that is a test that would generate the message and try to validate it against the schema.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Any thoughts on the subject? Don’t be shy.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2010-09-30T04:26:00Z" PublishedUtc="2014-04-19T20:31:27.3185486Z" ModifiedUtc="2010-09-30T04:26:00Z" />
      <TagsPart Tags="BizTalk,C#,WCF" />
      <AutoroutePart Alias="creating-biztalk-message-in-custom-net-component" UseCustomPattern="false" />
      <TitlePart Title="Creating BizTalk Message in Custom .NET Component" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=biztalk-2010-server-developer-edition" Status="Published">
      <BodyPart Text="&lt;p&gt;Today Developer Edition for BT2010 &lt;a href=&quot;http://www.microsoft.com/biztalk/en/us/developer.aspx&quot; target=&quot;_blank&quot;&gt;was announced&lt;/a&gt;. Great news for anyone who does BT development/testing.&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_0B18BFD5.png&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: block; float: none; margin-left: auto; border-top: 0px; margin-right: auto; border-right: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_288DA192.png&quot; width=&quot;743&quot; height=&quot;345&quot; /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;Wise move, IMO.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2010-09-23T20:20:00Z" PublishedUtc="2014-04-19T20:31:28.1001544Z" ModifiedUtc="2010-09-23T20:20:00Z" />
      <TagsPart Tags="BizTalk" />
      <AutoroutePart Alias="biztalk-2010-server-developer-edition" UseCustomPattern="false" />
      <TitlePart Title="BizTalk 2010 Server – Developer Edition" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=consuming-wcf-service-from-biztalk" Status="Published">
      <BodyPart Text="&#xA;&lt;p&gt;Sometimes trivial things in .NET are not so trivial in the BizTalk world. Especially for standard .NET developers with the mindset for routine .NET development. Recently, I was asked to give a hand with a simple task that was surprisingly taking too long (and good that was asked for, why to waste time if you can leverage someone to give a hand – always something I resort to). On the web, there are plenty of resources, yet nothing emphasizes the little things that are obvious to somewhat experienced BizTalk-ers and is brand new to mature .NET developers. Lets dive into example.&lt;/p&gt;&#xA;  &#xA;&lt;p&gt;Lets say we have a business process that requires to involve a WCF service during a message processing, taking a piece of data from the message as a parameter for the service, and working with the returned value.&lt;/p&gt;&#xA;  &#xA;&lt;p&gt;&lt;a href=&quot;http://weblogs.asp.net/blogs/sfeldman/image_00A42511.png&quot; mce_href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_00A42511.png&quot;&gt;&lt;img src=&quot;http://weblogs.asp.net/blogs/sfeldman/image_thumb_04B10394.png&quot; style=&quot;border: 0px none ; display: block; float: none; margin-left: auto; margin-right: auto;&quot; title=&quot;image&quot; alt=&quot;image&quot; mce_src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_04B10394.png&quot; border=&quot;0&quot; height=&quot;237&quot; width=&quot;377&quot;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;  &#xA;&lt;p&gt;In a standard .NET project we’d define the contract (&lt;i&gt;ISomeService&lt;/i&gt;)and implement the service (&lt;i&gt;SomeService&lt;/i&gt;), testing that it adheres to the desired behavior.&amp;nbsp; &lt;/p&gt;&#xA;  &lt;div style=&quot;margin: 0px; padding: 0px; display: inline; float: none;&quot; id=&quot;scid:f32c3428-b7e9-4f15-a8ea-c502c7ff2e88:b6b84783-3455-4ea3-a82f-ec8863b90ac3&quot; class=&quot;wlWriterEditableSmartContent&quot;&gt;&#xA;&lt;pre class=&quot;brush: c#;&quot;&gt;[ServiceContract]&lt;br&gt;public interface ISomeService&lt;br&gt;{&lt;br&gt;&#x9;[OperationContract]&lt;br&gt;&#x9;string Process(int value);&lt;br&gt;}&lt;br&gt;&lt;br&gt;public class SomeService : ISomeService&lt;br&gt;{&lt;br&gt;&#x9;public string Process(int value)&lt;br&gt;&#x9;{&lt;br&gt;&#x9;&#x9;return string.Format(&quot;Processed: {0}&quot;, value);&lt;br&gt;&#x9;}&lt;br&gt;}&lt;/pre&gt;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;Now the interesting part. To reference a service from a BizTalk project, the simplest way is to point to the service instance running somewhere. This is similar to generating a service reference for a regular .NET project, except that service configuration is stored not in (.NET traditional) configuration file, but in a binding file, typical to BizTalk. The key is to “just generate” this binding, and tweak it later for desired purposes.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The easiest way to get the service running, is to create a simple self-hosting console application (no need in IIS or windows service). &lt;/p&gt;&#xA;&#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&lt;div style=&quot;margin: 0px; padding: 0px; display: inline; float: none;&quot; id=&quot;scid:f32c3428-b7e9-4f15-a8ea-c502c7ff2e88:be32ddbd-7117-440d-ada8-9ad868ac2f3b&quot; class=&quot;wlWriterEditableSmartContent&quot;&gt;&#xA;&lt;pre class=&quot;brush: c#;&quot;&gt;static void Main(string[] args)&lt;br&gt;{&lt;br&gt;&#x9;using (var serviceHost = new ServiceHost(typeof(SomeService)))&lt;br&gt;&#x9;{&lt;br&gt;&#x9;&#x9;serviceHost.Open();&lt;br&gt;&#x9;&#x9;&#x9;&#x9;&lt;br&gt;&#x9;&#x9;Console.WriteLine(&quot;Running service (press ESC to finish).&quot;);&lt;br&gt;&lt;br&gt;&#x9;&#x9;while(true)&lt;br&gt;&#x9;&#x9;{&lt;br&gt;&#x9;&#x9;&#x9;if (!Console.KeyAvailable) &lt;br&gt;&#x9;&#x9;&#x9;&#x9;continue;&lt;br&gt;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;br&gt;&#x9;&#x9;&#x9;var pressedKey = Console.ReadKey(true);&lt;br&gt;&#x9;&#x9;&#x9;if (pressedKey.Key == ConsoleKey.Escape)&lt;br&gt;&#x9;&#x9;&#x9;&#x9;break;&lt;br&gt;&#x9;&#x9;}&lt;br&gt;&lt;br&gt;&#x9;&#x9;serviceHost.Close();&lt;br&gt;&#x9;&#x9;Console.WriteLine(&quot;Service finished.&quot;);&lt;br&gt;&#x9;}&lt;br&gt;}&lt;/pre&gt;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;Again, how service is exposed in self-hosted console runner is not important, the generated binding file (once service is referenced from BizTalk application) can be changes as desired. For simplicity, I hosted it with basic HTTP binding and enabled MEX.&lt;/p&gt;&#xA;&#xA;&lt;div style=&quot;margin: 0px; padding: 0px; display: inline; float: none;&quot; id=&quot;scid:f32c3428-b7e9-4f15-a8ea-c502c7ff2e88:515e5b52-4dc4-4ef8-b8eb-f7a96531a7a9&quot; class=&quot;wlWriterEditableSmartContent&quot;&gt;&#xA;&lt;pre class=&quot;brush: xml;collapse:true;&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&amp;gt;&lt;br&gt;&amp;lt;configuration&amp;gt;&lt;br&gt;  &amp;lt;system.web&amp;gt;&lt;br&gt;    &amp;lt;compilation debug=&quot;true&quot; /&amp;gt;&lt;br&gt;  &amp;lt;/system.web&amp;gt;&lt;br&gt;  &amp;lt;system.serviceModel&amp;gt;&lt;br&gt;    &amp;lt;services&amp;gt;&lt;br&gt;      &amp;lt;service name=&quot;SomeService.SomeService&quot; behaviorConfiguration=&quot;SomeService.SomeServiceBehavior&quot;&amp;gt;&lt;br&gt;        &amp;lt;host&amp;gt;&lt;br&gt;          &amp;lt;baseAddresses&amp;gt;&lt;br&gt;            &amp;lt;add baseAddress = &quot;http://localhost/SomeService&quot; /&amp;gt;&lt;br&gt;          &amp;lt;/baseAddresses&amp;gt;&lt;br&gt;        &amp;lt;/host&amp;gt;&lt;br&gt;        &amp;lt;endpoint address =&quot;&quot; binding=&quot;basicHttpBinding&quot; contract=&quot;SomeService.ISomeService&quot;&amp;gt;&lt;br&gt;          &amp;lt;identity&amp;gt;&lt;br&gt;            &amp;lt;dns value=&quot;localhost&quot;/&amp;gt;&lt;br&gt;          &amp;lt;/identity&amp;gt;&lt;br&gt;        &amp;lt;/endpoint&amp;gt;&lt;br&gt;        &amp;lt;endpoint address=&quot;mex&quot; binding=&quot;mexHttpBinding&quot; contract=&quot;IMetadataExchange&quot;/&amp;gt;&lt;br&gt;      &amp;lt;/service&amp;gt;&lt;br&gt;    &amp;lt;/services&amp;gt;&lt;br&gt;    &amp;lt;behaviors&amp;gt;&lt;br&gt;      &amp;lt;serviceBehaviors&amp;gt;&lt;br&gt;        &amp;lt;behavior name=&quot;SomeService.SomeServiceBehavior&quot;&amp;gt;&lt;br&gt;          &amp;lt;serviceMetadata httpGetEnabled=&quot;True&quot;/&amp;gt;&lt;br&gt;          &amp;lt;serviceDebug includeExceptionDetailInFaults=&quot;True&quot; /&amp;gt;&lt;br&gt;        &amp;lt;/behavior&amp;gt;&lt;br&gt;      &amp;lt;/serviceBehaviors&amp;gt;&lt;br&gt;    &amp;lt;/behaviors&amp;gt;&lt;br&gt;  &amp;lt;/system.serviceModel&amp;gt;&lt;br&gt;&amp;lt;/configuration&amp;gt;&lt;/pre&gt;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;From BizTalk project, added Generated Item –&amp;gt; Consume WCF Service, used self-hosted service URL (&lt;a href=&quot;http://localhost/SomeService&quot; mce_href=&quot;http://localhost/SomeService&quot;&gt;&lt;i&gt;http://localhost/SomeService&lt;/i&gt;&lt;/a&gt;). Just before hitting the Next button, don’t forget to run the self-hosted service runner. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Once service is referenced, there are a few items that are auto-generated. The important ones are:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;  &#xA;&lt;li&gt;SomeService_tempuri_org.xsd&lt;/li&gt;&#xA;&#xA;  &#xA;&lt;li&gt;SomeService_BindingInfo.xml&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;The schema file contains all the schemas for arguments and return type schemas for all the service operations exposed by service. Since &lt;i&gt;SomeService&lt;/i&gt; exposes a single operation with arguments coming in and return values, these are the generated schemas:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;http://weblogs.asp.net/blogs/sfeldman/image_5B3CC253.png&quot; mce_href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_5B3CC253.png&quot;&gt;&lt;img src=&quot;http://weblogs.asp.net/blogs/sfeldman/image_thumb_5D794B0F.png&quot; style=&quot;border: 0px none ; display: block; float: none; margin-left: auto; margin-right: auto;&quot; title=&quot;image&quot; alt=&quot;image&quot; mce_src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_5D794B0F.png&quot; border=&quot;0&quot; height=&quot;114&quot; width=&quot;185&quot;&gt;&lt;/a&gt; Since the name of the operation is &lt;i&gt;Process&lt;/i&gt;, arguments and return schemas use the name. Returned type is &lt;i&gt;string&lt;/i&gt;, yet in order to work with the value in orchestration, I recommend to make it a distinguished field.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Next step is to define a map, that would take the message we process and map into the message of a type that &lt;i&gt;Process &lt;/i&gt;operation accepts (can be constructed from a scratch, but mapping is easier, cleaner, and easily testable).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;http://weblogs.asp.net/blogs/sfeldman/image_4AC45158.png&quot; mce_href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_4AC45158.png&quot;&gt;&lt;img src=&quot;http://weblogs.asp.net/blogs/sfeldman/image_thumb_6F586F8D.png&quot; style=&quot;border: 0px none ; display: block; float: none; margin-left: auto; margin-right: auto;&quot; title=&quot;image&quot; alt=&quot;image&quot; mce_src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_6F586F8D.png&quot; border=&quot;0&quot; height=&quot;127&quot; width=&quot;640&quot;&gt;&lt;/a&gt; &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Once in place, we can finalize the orchestration&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;http://weblogs.asp.net/blogs/sfeldman/image_3811E852.png&quot; mce_href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_3811E852.png&quot;&gt;&lt;img src=&quot;http://weblogs.asp.net/blogs/sfeldman/image_thumb_1550B095.png&quot; style=&quot;border: 0px none ; display: block; float: none; margin-left: auto; margin-right: auto;&quot; title=&quot;image&quot; alt=&quot;image&quot; mce_src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_1550B095.png&quot; border=&quot;0&quot; height=&quot;607&quot; width=&quot;598&quot;&gt;&lt;/a&gt; &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Trace just to ensure that the service is executed as expected.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&#xA;&lt;div style=&quot;margin: 0px; padding: 0px; display: inline; float: none;&quot; id=&quot;scid:f32c3428-b7e9-4f15-a8ea-c502c7ff2e88:1c2aa78d-48cc-48f4-88bd-0df0e7796b36&quot; class=&quot;wlWriterEditableSmartContent&quot;&gt;&#xA;&lt;pre class=&quot;brush: c#;&quot;&gt;System.Diagnostics.Trace.WriteLine(System.DateTime.Now.ToString());    &lt;br&gt;System.Diagnostics.Trace.WriteLine(msgFromService.parameters.ProcessResult);    &lt;/pre&gt;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Deploying and executing this process results in the next output for the given input of 123:&lt;/p&gt;&#xA;&#xA;&lt;div style=&quot;margin: 0px; padding: 0px; display: inline; float: none;&quot; id=&quot;scid:f32c3428-b7e9-4f15-a8ea-c502c7ff2e88:1dc8432a-0923-4b0f-aa67-722d04493796&quot; class=&quot;wlWriterEditableSmartContent&quot;&gt;&#xA;&lt;pre class=&quot;brush: xml;&quot;&gt;&amp;lt;ns0:Message xmlns:ns0=&quot;http://InvokerApp&quot;&amp;gt;&lt;br&gt;  &amp;lt;Value&amp;gt;123&amp;lt;/Value&amp;gt;&lt;br&gt;&amp;lt;/ns0:Message&amp;gt;&lt;/pre&gt;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;http://weblogs.asp.net/blogs/sfeldman/image_32C59252.png&quot; mce_href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_32C59252.png&quot;&gt;&lt;img src=&quot;http://weblogs.asp.net/blogs/sfeldman/image_thumb_2FB3345D.png&quot; style=&quot;border: 0px none ; display: block; float: none; margin-left: auto; margin-right: auto;&quot; title=&quot;image&quot; alt=&quot;image&quot; mce_src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_2FB3345D.png&quot; border=&quot;0&quot; height=&quot;217&quot; width=&quot;640&quot;&gt;&lt;/a&gt; &lt;/p&gt;&#xA;&#xA;&lt;p&gt;The console runner has to be there for the time of BizTalk application execution since the binding file (that is supposed to be deployed into BizTalk along with the BT Application) contains information about that service configuration. Quick review of the binding information shows that it’s just a service configuration, and should be re-written to meet the real service configuration.&lt;/p&gt;&#xA;&#xA;&lt;div style=&quot;margin: 0px; padding: 0px; display: inline; float: none;&quot; id=&quot;scid:f32c3428-b7e9-4f15-a8ea-c502c7ff2e88:ba583d89-de2d-45d4-bfea-5adb7b1940c2&quot; class=&quot;wlWriterEditableSmartContent&quot;&gt;&#xA;&lt;pre class=&quot;brush: xml;collapse:true; highlight: [9];&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;&lt;br&gt;&amp;lt;BindingInfo xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; Assembly=&quot;Microsoft.BizTalk.Adapter.Wcf.Consuming, Version=3.0.1.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35&quot; Version=&quot;3.5.1.0&quot;&amp;gt;&lt;br&gt;  &amp;lt;Timestamp&amp;gt;2010-09-20T09:53:57.2895-06:00&amp;lt;/Timestamp&amp;gt;&lt;br&gt;  &amp;lt;SendPortCollection&amp;gt;&lt;br&gt;    &amp;lt;SendPort Name=&quot;WcfSendPort_SomeService_BasicHttpBinding_ISomeService&quot; IsStatic=&quot;true&quot; IsTwoWay=&quot;true&quot; BindingOption=&quot;0&quot;&amp;gt;&lt;br&gt;      &amp;lt;Description&amp;gt;service &quot;SomeService&quot; port &quot;BasicHttpBinding_ISomeService&quot;&amp;lt;/Description&amp;gt;&lt;br&gt;      &amp;lt;TransmitPipeline Name=&quot;Microsoft.BizTalk.DefaultPipelines.PassThruTransmit&quot; FullyQualifiedName=&quot;Microsoft.BizTalk.DefaultPipelines.PassThruTransmit, Microsoft.BizTalk.DefaultPipelines, Version=3.0.1.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35&quot; Type=&quot;2&quot; /&amp;gt;&lt;br&gt;      &amp;lt;PrimaryTransport&amp;gt;&lt;br&gt;        &amp;lt;Address&amp;gt;http://localhost/SomeService&amp;lt;/Address&amp;gt;&lt;br&gt;        &amp;lt;TransportType Name=&quot;WCF-BasicHttp&quot; Capabilities=&quot;899&quot; ConfigurationClsid=&quot;467c1a52-373f-4f09-9008-27af6b985f14&quot; /&amp;gt;&lt;br&gt;        &amp;lt;TransportTypeData&amp;gt;&amp;amp;lt;CustomProps&amp;amp;gt;&lt;br&gt;  &amp;amp;lt;MaxReceivedMessageSize vt=&quot;3&quot;&amp;amp;gt;65536&amp;amp;lt;/MaxReceivedMessageSize&amp;amp;gt;&lt;br&gt;  &amp;amp;lt;MessageEncoding vt=&quot;8&quot;&amp;amp;gt;Text&amp;amp;lt;/MessageEncoding&amp;amp;gt;&lt;br&gt;  &amp;amp;lt;TextEncoding vt=&quot;8&quot;&amp;amp;gt;utf-8&amp;amp;lt;/TextEncoding&amp;amp;gt;&lt;br&gt;  &amp;amp;lt;SecurityMode vt=&quot;8&quot;&amp;amp;gt;None&amp;amp;lt;/SecurityMode&amp;amp;gt;&lt;br&gt;  &amp;amp;lt;MessageClientCredentialType vt=&quot;8&quot;&amp;amp;gt;UserName&amp;amp;lt;/MessageClientCredentialType&amp;amp;gt;&lt;br&gt;  &amp;amp;lt;AlgorithmSuite vt=&quot;8&quot;&amp;amp;gt;Basic256&amp;amp;lt;/AlgorithmSuite&amp;amp;gt;&lt;br&gt;  &amp;amp;lt;TransportClientCredentialType vt=&quot;8&quot;&amp;amp;gt;None&amp;amp;lt;/TransportClientCredentialType&amp;amp;gt;&lt;br&gt;  &amp;amp;lt;UseSSO vt=&quot;11&quot;&amp;amp;gt;0&amp;amp;lt;/UseSSO&amp;amp;gt;&lt;br&gt;  &amp;amp;lt;ProxyToUse vt=&quot;8&quot;&amp;amp;gt;Default&amp;amp;lt;/ProxyToUse&amp;amp;gt;&lt;br&gt;  &amp;amp;lt;StaticAction vt=&quot;8&quot;&amp;amp;gt;&amp;amp;amp;lt;BtsActionMapping xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;&amp;amp;amp;gt;&lt;br&gt;  &amp;amp;amp;lt;Operation Name=&quot;Process&quot; Action=&quot;http://tempuri.org/ISomeService/Process&quot; /&amp;amp;amp;gt;&lt;br&gt;&amp;amp;amp;lt;/BtsActionMapping&amp;amp;amp;gt;&amp;amp;lt;/StaticAction&amp;amp;gt;&lt;br&gt;  &amp;amp;lt;InboundBodyLocation vt=&quot;8&quot;&amp;amp;gt;UseBodyElement&amp;amp;lt;/InboundBodyLocation&amp;amp;gt;&lt;br&gt;  &amp;amp;lt;InboundNodeEncoding vt=&quot;8&quot;&amp;amp;gt;Xml&amp;amp;lt;/InboundNodeEncoding&amp;amp;gt;&lt;br&gt;  &amp;amp;lt;OutboundBodyLocation vt=&quot;8&quot;&amp;amp;gt;UseBodyElement&amp;amp;lt;/OutboundBodyLocation&amp;amp;gt;&lt;br&gt;  &amp;amp;lt;OutboundXmlTemplate vt=&quot;8&quot;&amp;amp;gt;&amp;amp;amp;lt;bts-msg-body xmlns=&quot;http://www.microsoft.com/schemas/bts2007&quot; encoding=&quot;xml&quot;/&amp;amp;amp;gt;&amp;amp;lt;/OutboundXmlTemplate&amp;amp;gt;&lt;br&gt;  &amp;amp;lt;PropagateFaultMessage vt=&quot;11&quot;&amp;amp;gt;-1&amp;amp;lt;/PropagateFaultMessage&amp;amp;gt;&lt;br&gt;  &amp;amp;lt;OpenTimeout vt=&quot;8&quot;&amp;amp;gt;00:01:00&amp;amp;lt;/OpenTimeout&amp;amp;gt;&lt;br&gt;  &amp;amp;lt;SendTimeout vt=&quot;8&quot;&amp;amp;gt;00:01:00&amp;amp;lt;/SendTimeout&amp;amp;gt;&lt;br&gt;  &amp;amp;lt;CloseTimeout vt=&quot;8&quot;&amp;amp;gt;00:01:00&amp;amp;lt;/CloseTimeout&amp;amp;gt;&lt;br&gt;&amp;amp;lt;/CustomProps&amp;amp;gt;&amp;lt;/TransportTypeData&amp;gt;&lt;br&gt;        &amp;lt;RetryCount&amp;gt;3&amp;lt;/RetryCount&amp;gt;&lt;br&gt;        &amp;lt;RetryInterval&amp;gt;5&amp;lt;/RetryInterval&amp;gt;&lt;br&gt;        &amp;lt;ServiceWindowEnabled&amp;gt;false&amp;lt;/ServiceWindowEnabled&amp;gt;&lt;br&gt;        &amp;lt;FromTime&amp;gt;2000-01-01T00:00:00&amp;lt;/FromTime&amp;gt;&lt;br&gt;        &amp;lt;ToTime&amp;gt;2000-01-01T23:59:59&amp;lt;/ToTime&amp;gt;&lt;br&gt;        &amp;lt;Primary&amp;gt;true&amp;lt;/Primary&amp;gt;&lt;br&gt;        &amp;lt;OrderedDelivery&amp;gt;false&amp;lt;/OrderedDelivery&amp;gt;&lt;br&gt;        &amp;lt;DeliveryNotification&amp;gt;1&amp;lt;/DeliveryNotification&amp;gt;&lt;br&gt;        &amp;lt;SendHandler xsi:nil=&quot;true&quot; /&amp;gt;&lt;br&gt;      &amp;lt;/PrimaryTransport&amp;gt;&lt;br&gt;      &amp;lt;ReceivePipeline Name=&quot;Microsoft.BizTalk.DefaultPipelines.XMLReceive&quot; FullyQualifiedName=&quot;Microsoft.BizTalk.DefaultPipelines.XMLReceive, Microsoft.BizTalk.DefaultPipelines, Version=3.0.1.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35&quot; Type=&quot;1&quot; /&amp;gt;&lt;br&gt;      &amp;lt;ReceivePipelineData xsi:nil=&quot;true&quot; /&amp;gt;&lt;br&gt;      &amp;lt;Tracking&amp;gt;0&amp;lt;/Tracking&amp;gt;&lt;br&gt;      &amp;lt;Filter /&amp;gt;&lt;br&gt;      &amp;lt;OrderedDelivery&amp;gt;false&amp;lt;/OrderedDelivery&amp;gt;&lt;br&gt;      &amp;lt;Priority&amp;gt;5&amp;lt;/Priority&amp;gt;&lt;br&gt;      &amp;lt;StopSendingOnFailure&amp;gt;false&amp;lt;/StopSendingOnFailure&amp;gt;&lt;br&gt;      &amp;lt;RouteFailedMessage&amp;gt;false&amp;lt;/RouteFailedMessage&amp;gt;&lt;br&gt;      &amp;lt;ApplicationName xsi:nil=&quot;true&quot; /&amp;gt;&lt;br&gt;    &amp;lt;/SendPort&amp;gt;&lt;br&gt;  &amp;lt;/SendPortCollection&amp;gt;&lt;br&gt;&amp;lt;/BindingInfo&amp;gt;&lt;/pre&gt;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;Behind the scenes, BizTalk generates a proxy that is getting deployed along with the BizTalk application. I wish ChannelFactory option would be available with BizTalk as well, so that the contract is enough to spin of a dynamic service proxy. On the flip side, having BizTalk to generate all the schemas is very handy.&lt;/p&gt;&#xA;&#xA;&lt;div style=&quot;margin: 0px; padding: 0px; display: inline; float: none;&quot; id=&quot;scid:F60BB8FA-6F02-4999-8F5E-9DD4E92C4DA7:b7fe522c-4b27-4c64-b9b6-2c34121d06b9&quot; class=&quot;wlWriterEditableSmartContent&quot;&gt;&lt;div&gt;&lt;a href=&quot;http://weblogs.asp.net/blogs/sfeldman/BizTalkInvokeWCF_6CD6EFE2.zip&quot; mce_href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/BizTalkInvokeWCF_6CD6EFE2.zip&quot; target=&quot;_self&quot;&gt;BizTalkInvokeWCF.zip&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&amp;nbsp; is attached.&#xA;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2010-09-22T03:25:00Z" PublishedUtc="2014-04-19T20:31:30.1001179Z" ModifiedUtc="2010-09-22T03:25:00Z" />
      <TagsPart Tags="BizTalk" />
      <AutoroutePart Alias="consuming-wcf-service-from-biztalk" UseCustomPattern="false" />
      <TitlePart Title="Consuming WCF Service from BizTalk" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=safe-commits-delayed-commits" Status="Published">
      <BodyPart Text="&lt;p&gt;I really like the &lt;a href=&quot;http://www.jetbrains.com/teamcity/features/delayed_commit.html&quot; target=&quot;_blank&quot;&gt;concept&lt;/a&gt;. Wish Hudson build server would have this option…&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;http://www.jetbrains.com/&quot; target=&quot;_blank&quot;&gt;JetBrains&lt;/a&gt; has implemented the idea with &lt;a href=&quot;http://www.jetbrains.com/teamcity/&quot; target=&quot;_blank&quot;&gt;TeamCity&lt;/a&gt;.&lt;/p&gt;  &lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;1&quot; width=&quot;600&quot;&gt;&lt;tbody&gt;     &lt;tr&gt;       &lt;td valign=&quot;top&quot; width=&quot;300&quot;&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_13174565.png&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: block; float: none; margin-left: auto; border-top: 0px; margin-right: auto; border-right: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_3BB5B16C.png&quot; width=&quot;333&quot; height=&quot;381&quot; /&gt;&lt;/a&gt; &lt;/td&gt;        &lt;td valign=&quot;top&quot; width=&quot;300&quot;&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_390F866C.png&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: block; float: none; margin-left: auto; border-top: 0px; margin-right: auto; border-right: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_4FD15EA6.png&quot; width=&quot;333&quot; height=&quot;381&quot; /&gt;&lt;/a&gt; &lt;/td&gt;     &lt;/tr&gt;   &lt;/tbody&gt;&lt;/table&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2010-09-15T14:41:00Z" PublishedUtc="2014-04-19T20:31:30.9438564Z" ModifiedUtc="2010-09-15T14:41:00Z" />
      <TagsPart Tags="CI" />
      <AutoroutePart Alias="safe-commits-delayed-commits" UseCustomPattern="false" />
      <TitlePart Title="Safe Commits (Delayed Commits)" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=aop" Status="Published">
      <BodyPart Text="&lt;p&gt;I am looking at the code for Silverlight application and there’s something that just bugs me… INotifyPropertyChanged. This is not the first time, and yet again I see this interface implemented again, and again, and again. This violates several good principles (Single Responsibility and Duplicated Code). It also pollutes the code with cross cutting concerns (change notification). My choice of solution for this is simple – buy, do not build. Yes, it is possible to write a base class that would scan for a custom attribute and will do the wiring. But why? Why not to look into something like &lt;a href=&quot;http://www.sharpcrafters.com/&quot; target=&quot;_blank&quot;&gt;PostSharp&lt;/a&gt; and take advantage of the hard work the author(s) put into it to make it work. &lt;/p&gt;  &lt;p&gt;For myself a lot of times it was the pride – how come I will buy something that I can build myself. Well, satisfy the ego on a spike, and move on. AOP should solve problems, not introduce new ones. Understanding is important, and I will provide a simple example how AOP for simple tracing can be done. But the goal of the post is to encourage people to use dedicated tools to solve business problems, and not pride issues.&lt;/p&gt;  &lt;p&gt;How AOP works? Poor mans’ explanation – IL re-write. Post-processing of the generated IL code. Let’s say I have a code that looks like this:&lt;/p&gt;  &lt;pre class=&quot;code&quot;&gt;&lt;span style=&quot;color: blue&quot;&gt;public sealed class &lt;/span&gt;&lt;span style=&quot;color: #00008b&quot;&gt;Greeting&#xA;&lt;/span&gt;{&#xA;  &lt;span style=&quot;color: blue&quot;&gt;public string &lt;/span&gt;&lt;span style=&quot;color: #008b8b&quot;&gt;SayHello&lt;/span&gt;()&#xA;  {&#xA;    &lt;span style=&quot;color: #00008b&quot;&gt;Console&lt;/span&gt;.&lt;span style=&quot;color: #008b8b&quot;&gt;WriteLine&lt;/span&gt;(&lt;span style=&quot;color: #a31515&quot;&gt;&amp;quot;Inside Greeting::SayHello() method&amp;quot;&lt;/span&gt;);&#xA;    &lt;span style=&quot;color: blue&quot;&gt;return &lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;;&#xA;  }&#xA;}&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;http://11011.net/software/vspaste&quot;&gt;&lt;/a&gt;I would like to trace each time the method SayHello is invoked (when we enter and about to leave it). The original MSIL looks like the following:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;font color=&quot;#808080&quot;&gt;0000:&amp;#160;&amp;#160; nop&#xA;    &lt;br /&gt;0001:&amp;#160;&amp;#160; ldstr&amp;#160;&amp;#160; Inside Greeting::SayHello() method&#xA;&#xA;    &lt;br /&gt;0006:&amp;#160;&amp;#160; call&amp;#160;&amp;#160;&amp;#160; System.Void System.Console::WriteLine(System.String)&#xA;&#xA;    &lt;br /&gt;000B:&amp;#160;&amp;#160; nop&#xA;&#xA;    &lt;br /&gt;000C:&amp;#160;&amp;#160; ldstr&amp;#160;&amp;#160; Hello&#xA;&#xA;    &lt;br /&gt;0011:&amp;#160;&amp;#160; stloc.0&#xA;&#xA;    &lt;br /&gt;0012:&amp;#160;&amp;#160; br.s&amp;#160;&amp;#160;&amp;#160; 0014&#xA;&#xA;    &lt;br /&gt;0014:&amp;#160;&amp;#160; ldloc.0&#xA;&#xA;    &lt;br /&gt;0015:&amp;#160;&amp;#160; ret&lt;/font&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;By using reflection (in my case I used Mono.Cecil) the original code is re-written into this:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;font color=&quot;#808080&quot;&gt;0000:&amp;#160;&amp;#160; ldstr&amp;#160;&amp;#160; [TRACE] Started SayHello&#xA;    &lt;br /&gt;0005:&amp;#160;&amp;#160; call&amp;#160;&amp;#160;&amp;#160; System.Void System.Console::WriteLine(System.String)&#xA;&#xA;    &lt;br /&gt;000A:&amp;#160;&amp;#160; nop&#xA;&#xA;    &lt;br /&gt;000B:&amp;#160;&amp;#160; ldstr&amp;#160;&amp;#160; Inside Greeting::SayHello() method&#xA;&#xA;    &lt;br /&gt;0010:&amp;#160;&amp;#160; call&amp;#160;&amp;#160;&amp;#160; System.Void System.Console::WriteLine(System.String)&#xA;&#xA;    &lt;br /&gt;0015:&amp;#160;&amp;#160; nop&#xA;&#xA;    &lt;br /&gt;0016:&amp;#160;&amp;#160; ldstr&amp;#160;&amp;#160; Hello&#xA;&#xA;    &lt;br /&gt;001B:&amp;#160;&amp;#160; stloc.0&#xA;&#xA;    &lt;br /&gt;001C:&amp;#160;&amp;#160; br.s&amp;#160;&amp;#160;&amp;#160; 001E&#xA;&#xA;    &lt;br /&gt;001E:&amp;#160;&amp;#160; ldloc.0&#xA;&#xA;    &lt;br /&gt;001F:&amp;#160;&amp;#160; ldstr&amp;#160;&amp;#160; [TRACE] Finished SayHello&#xA;&#xA;    &lt;br /&gt;0024:&amp;#160;&amp;#160; call&amp;#160;&amp;#160;&amp;#160; System.Void System.Console::WriteLine(System.String)&#xA;&#xA;    &lt;br /&gt;0029:&amp;#160;&amp;#160; ret&lt;/font&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Which is affectively equivalent to the following C# code:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&amp;#160;&lt;/p&gt;&#xA;&#xA;&lt;pre class=&quot;code&quot;&gt;&lt;span style=&quot;color: blue&quot;&gt;public sealed class &lt;/span&gt;&lt;span style=&quot;color: #00008b&quot;&gt;Greeting&#xA;&lt;/span&gt;{&#xA;  &lt;span style=&quot;color: blue&quot;&gt;public string &lt;/span&gt;&lt;span style=&quot;color: #008b8b&quot;&gt;SayHello&lt;/span&gt;()&#xA;  {&#xA;    &lt;span style=&quot;color: #00008b&quot;&gt;Console&lt;/span&gt;.&lt;span style=&quot;color: #008b8b&quot;&gt;WriteLine&lt;/span&gt;(&lt;span style=&quot;color: #a31515&quot;&gt;&amp;quot;[TRACE] Started SayHello&amp;quot;&lt;/span&gt;);&#xA;&lt;span style=&quot;color: #00008b&quot;&gt;    Console&lt;/span&gt;.&lt;span style=&quot;color: #008b8b&quot;&gt;WriteLine&lt;/span&gt;(&lt;span style=&quot;color: #a31515&quot;&gt;&amp;quot;Inside Greeting::SayHello() method&amp;quot;&lt;/span&gt;);&#xA;&lt;span style=&quot;color: #00008b&quot;&gt;    Console&lt;/span&gt;.&lt;span style=&quot;color: #008b8b&quot;&gt;WriteLine&lt;/span&gt;(&lt;span style=&quot;color: #a31515&quot;&gt;&amp;quot;[TRACE] Finished SayHello&amp;quot;&lt;/span&gt;);&#xA;    &lt;span style=&quot;color: blue&quot;&gt;return &lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;;&#xA;  }&#xA;}&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The output:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;[TRACE] Started SayHello&#xA;  &lt;br /&gt;Inside Greeting::SayHello() method&#xA;&#xA;  &lt;br /&gt;[TRACE] Finished SayHello&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&amp;#160;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The quick and dirty code to re-write the original assembly:&lt;/p&gt;&#xA;&#xA;&lt;pre class=&quot;code&quot;&gt;&lt;span style=&quot;color: blue&quot;&gt;var &lt;/span&gt;var assembly = &lt;span style=&quot;color: #00008b&quot;&gt;AssemblyFactory&lt;/span&gt;.&lt;span style=&quot;color: #008b8b&quot;&gt;GetAssembly&lt;/span&gt;(assemblyFilename);&#xA;&lt;span style=&quot;color: blue&quot;&gt;var &lt;/span&gt;type = assembly.&lt;span style=&quot;color: purple&quot;&gt;MainModule&lt;/span&gt;.&lt;span style=&quot;color: purple&quot;&gt;Types&lt;/span&gt;[&lt;span style=&quot;color: #a31515&quot;&gt;&amp;quot;Library.Greeting&amp;quot;&lt;/span&gt;];&#xA;&lt;span style=&quot;color: blue&quot;&gt;var &lt;/span&gt;method = type.&lt;span style=&quot;color: purple&quot;&gt;Methods&lt;/span&gt;.&lt;span style=&quot;color: #008b8b&quot;&gt;OfType&lt;/span&gt;&amp;lt;&lt;span style=&quot;color: #00008b&quot;&gt;MethodDefinition&lt;/span&gt;&amp;gt;()&#xA;                           .&lt;span style=&quot;color: #008b8b&quot;&gt;Where&lt;/span&gt;(x =&amp;gt; x.&lt;span style=&quot;color: purple&quot;&gt;Name&lt;/span&gt;.&lt;span style=&quot;color: #008b8b&quot;&gt;Equals&lt;/span&gt;(&lt;span style=&quot;color: #a31515&quot;&gt;&amp;quot;SayHello&amp;quot;&lt;/span&gt;) &amp;amp;&amp;amp; x.&lt;span style=&quot;color: purple&quot;&gt;Parameters&lt;/span&gt;.&lt;span style=&quot;color: purple&quot;&gt;Count&lt;/span&gt;.&lt;span style=&quot;color: #008b8b&quot;&gt;Equals&lt;/span&gt;(0))&#xA;                           .&lt;span style=&quot;color: #008b8b&quot;&gt;Single&lt;/span&gt;();&#xA;&#xA;&lt;span style=&quot;color: blue&quot;&gt;var &lt;/span&gt;worker = method.&lt;span style=&quot;color: purple&quot;&gt;Body&lt;/span&gt;.&lt;span style=&quot;color: purple&quot;&gt;CilWorker&lt;/span&gt;;&#xA;&lt;span style=&quot;color: blue&quot;&gt;var &lt;/span&gt;trace = worker.&lt;span style=&quot;color: #008b8b&quot;&gt;Create&lt;/span&gt;(&lt;span style=&quot;color: #00008b&quot;&gt;OpCodes&lt;/span&gt;.&lt;span style=&quot;color: purple&quot;&gt;Ldstr&lt;/span&gt;, &lt;span style=&quot;color: #a31515&quot;&gt;&amp;quot;[TRACE] Started &amp;quot; &lt;/span&gt;+ method.&lt;span style=&quot;color: purple&quot;&gt;Name&lt;/span&gt;);&#xA;&lt;span style=&quot;color: blue&quot;&gt;var &lt;/span&gt;writeLineMethod = assembly.&lt;span style=&quot;color: purple&quot;&gt;MainModule&lt;/span&gt;.&lt;span style=&quot;color: #008b8b&quot;&gt;Import&lt;/span&gt;(&lt;span style=&quot;color: blue&quot;&gt;typeof&lt;/span&gt;(&lt;span style=&quot;color: #00008b&quot;&gt;Console&lt;/span&gt;).&lt;span style=&quot;color: #008b8b&quot;&gt;GetMethod&lt;/span&gt;(&lt;span style=&quot;color: #a31515&quot;&gt;&amp;quot;WriteLine&amp;quot;&lt;/span&gt;, &lt;span style=&quot;color: blue&quot;&gt;new&lt;/span&gt;[] { &lt;span style=&quot;color: blue&quot;&gt;typeof&lt;/span&gt;(&lt;span style=&quot;color: blue&quot;&gt;string&lt;/span&gt;) }));&#xA;worker.&lt;span style=&quot;color: #008b8b&quot;&gt;InsertBefore&lt;/span&gt;(method.&lt;span style=&quot;color: purple&quot;&gt;Body&lt;/span&gt;.&lt;span style=&quot;color: purple&quot;&gt;Instructions&lt;/span&gt;[0], trace);&#xA;worker.&lt;span style=&quot;color: #008b8b&quot;&gt;InsertAfter&lt;/span&gt;(trace, worker.&lt;span style=&quot;color: #008b8b&quot;&gt;Create&lt;/span&gt;(&lt;span style=&quot;color: #00008b&quot;&gt;OpCodes&lt;/span&gt;.&lt;span style=&quot;color: purple&quot;&gt;Call&lt;/span&gt;, writeLineMethod));&#xA;&#xA;trace = worker.&lt;span style=&quot;color: #008b8b&quot;&gt;Create&lt;/span&gt;(&lt;span style=&quot;color: #00008b&quot;&gt;OpCodes&lt;/span&gt;.&lt;span style=&quot;color: purple&quot;&gt;Ldstr&lt;/span&gt;, &lt;span style=&quot;color: #a31515&quot;&gt;&amp;quot;[TRACE] Finished &amp;quot; &lt;/span&gt;+ method.&lt;span style=&quot;color: purple&quot;&gt;Name&lt;/span&gt;);&#xA;worker.&lt;span style=&quot;color: #008b8b&quot;&gt;InsertAfter&lt;/span&gt;(method.&lt;span style=&quot;color: purple&quot;&gt;Body&lt;/span&gt;.&lt;span style=&quot;color: purple&quot;&gt;Instructions&lt;/span&gt;[method.&lt;span style=&quot;color: purple&quot;&gt;Body&lt;/span&gt;.&lt;span style=&quot;color: purple&quot;&gt;Instructions&lt;/span&gt;.&lt;span style=&quot;color: purple&quot;&gt;Count &lt;/span&gt;- 2], trace);&#xA;worker.&lt;span style=&quot;color: #008b8b&quot;&gt;InsertAfter&lt;/span&gt;(trace, worker.&lt;span style=&quot;color: #008b8b&quot;&gt;Create&lt;/span&gt;(&lt;span style=&quot;color: #00008b&quot;&gt;OpCodes&lt;/span&gt;.&lt;span style=&quot;color: purple&quot;&gt;Call&lt;/span&gt;, writeLineMethod));&#xA;&#xA;&lt;span style=&quot;color: #00008b&quot;&gt;AssemblyFactory&lt;/span&gt;.&lt;span style=&quot;color: #008b8b&quot;&gt;SaveAssembly&lt;/span&gt;(assembly, assemblyFilename);&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This is all great, but the true value in leveraging the tools created for this purpose to get the real value – resolve problems unique to your business efficiently. AOP is your friend, leverage it.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2010-09-14T04:11:00Z" PublishedUtc="2014-04-19T20:31:31.3344816Z" ModifiedUtc="2010-09-14T04:11:00Z" />
      <TagsPart Tags=".NET,C#,Silverlight,WPF" />
      <AutoroutePart Alias="aop" UseCustomPattern="false" />
      <TitlePart Title="AOP" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=container-for-silverlight" Status="Published">
      <BodyPart Text="&lt;p&gt;For most of our projects we use StructureMap as a Container. Silverlight seems to change this a little. From preliminary review looks like StructureMap is not yet ready for Silverlight, so we started to look into a different container. The one that looked good was &lt;a href=&quot;http://ninject.org/&quot; target=&quot;_blank&quot;&gt;Ninject.&lt;/a&gt; Simple, straight forward, and elegant.&lt;/p&gt;  &lt;p&gt;Binding module defines components:&lt;/p&gt;  &lt;pre class=&quot;code&quot;&gt;&lt;span style=&quot;color: blue&quot;&gt;public class &lt;/span&gt;&lt;span style=&quot;color: #00008b&quot;&gt;BindingModule &lt;/span&gt;: &lt;span style=&quot;color: #00008b&quot;&gt;NinjectModule&#xA;&lt;/span&gt;{&#xA;  &lt;span style=&quot;color: blue&quot;&gt;public override void &lt;/span&gt;&lt;span style=&quot;color: #008b8b&quot;&gt;Load&lt;/span&gt;()&#xA;  {&#xA;    &lt;span style=&quot;color: #008b8b&quot;&gt;Bind&lt;/span&gt;&amp;lt;&lt;span style=&quot;color: #00008b&quot;&gt;IPrinter&lt;/span&gt;&amp;gt;().&lt;span style=&quot;color: #008b8b&quot;&gt;To&lt;/span&gt;&amp;lt;&lt;span style=&quot;color: #00008b&quot;&gt;ConsolePrinter&lt;/span&gt;&amp;gt;();&#xA;    &lt;span style=&quot;color: #008b8b&quot;&gt;Bind&lt;/span&gt;&amp;lt;&lt;span style=&quot;color: #00008b&quot;&gt;IFooter&lt;/span&gt;&amp;gt;().&lt;span style=&quot;color: #008b8b&quot;&gt;To&lt;/span&gt;&amp;lt;&lt;span style=&quot;color: #00008b&quot;&gt;Footer&lt;/span&gt;&amp;gt;();&#xA;    &lt;span style=&quot;color: #008b8b&quot;&gt;Bind&lt;/span&gt;&amp;lt;&lt;span style=&quot;color: #00008b&quot;&gt;IHeader&lt;/span&gt;&amp;gt;().&lt;span style=&quot;color: #008b8b&quot;&gt;To&lt;/span&gt;&amp;lt;&lt;span style=&quot;color: #00008b&quot;&gt;Header&lt;/span&gt;&amp;gt;();&#xA;  }&#xA;}&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;http://11011.net/software/vspaste&quot;&gt;&lt;/a&gt;(there are ways to define some complex scenarios).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Kernel can load binding module(s) by scanning one or more assemblies:&lt;/p&gt;&#xA;&#xA;&lt;pre class=&quot;code&quot;&gt;&lt;span style=&quot;color: blue&quot;&gt;var &lt;/span&gt;kernel = &lt;span style=&quot;color: blue&quot;&gt;new &lt;/span&gt;&lt;span style=&quot;color: #00008b&quot;&gt;StandardKernel&lt;/span&gt;();&#xA;kernel.&lt;span style=&quot;color: #008b8b&quot;&gt;Load&lt;/span&gt;(&lt;span style=&quot;color: #00008b&quot;&gt;Assembly&lt;/span&gt;.&lt;span style=&quot;color: #008b8b&quot;&gt;GetExecutingAssembly&lt;/span&gt;());&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Ninject has a few extension projects. Among those one that allows scanning with conventions. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;What do I miss from StructureMap? That probably would be the &lt;em&gt;ObjectFactory &lt;/em&gt;singleton. Not a biggie, and can be implemented, but very convenient to have it in place from the beginning.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;And what are you using as a container for Silverlight?&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2010-09-13T13:44:00Z" PublishedUtc="2014-04-19T20:31:32.0532173Z" ModifiedUtc="2010-09-13T13:44:00Z" />
      <TagsPart Tags="Silverlight" />
      <AutoroutePart Alias="container-for-silverlight" UseCustomPattern="false" />
      <TitlePart Title="Container for Silverlight" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=testing-challenge-silverlight" Status="Published">
      <BodyPart Text="&lt;p&gt;I am getting involved in another project, that looks like has its own testing challenges (last project I was involved was a BizTalk based project, quite a few testing challenges!).&lt;/p&gt;  &lt;p&gt;What have I seen so far with Silverlight (version 4.0):&lt;/p&gt;  &lt;ol&gt;   &lt;li&gt;TDD with the toolset we always utilized is no longer possible (Gallio, TestDriven.NET, NCover) partially due to the nature of Silverlight, partially because of the tools support that is not yet in place&lt;/li&gt;    &lt;li&gt;MVVM pattern – developers wrapping around the idea&lt;/li&gt;    &lt;li&gt;Explosion of Microsoft technologies that are just “out of college” and not yet applicable in TDD case&lt;/li&gt;    &lt;li&gt;Limited resources on .NET code detours (I only encountered Moles and TypeMock, but for commercial Silverlight product both are commercial)&lt;/li&gt;    &lt;li&gt;Natural limitations of Silverlight (sandbox, static DependencyObject properties, inheritance from the system)&lt;/li&gt; &lt;/ol&gt;  &lt;p&gt;Looks like this is going to be an interesting journey. Feel free to share your experiences and findings.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2010-09-08T16:43:00Z" PublishedUtc="2014-04-19T20:31:32.4282215Z" ModifiedUtc="2010-09-08T16:43:00Z" />
      <TagsPart Tags="Silverlight,TDD" />
      <AutoroutePart Alias="testing-challenge-silverlight" UseCustomPattern="false" />
      <TitlePart Title="Testing Challenge – Silverlight" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=svn-support-for-github" Status="Published">
      <BodyPart Text="&lt;p&gt;&lt;a href=&quot;http://github.com/blog/626-announcing-svn-support&quot; target=&quot;_blank&quot;&gt;This&lt;/a&gt; might be helpful for those that work with SVN and require (read-only for now) access to code that is under GitHub&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2010-08-24T15:24:00Z" PublishedUtc="2014-04-19T20:31:33.069381Z" ModifiedUtc="2010-08-24T15:24:00Z" />
      <TagsPart Tags="Other" />
      <AutoroutePart Alias="svn-support-for-github" UseCustomPattern="false" />
      <TitlePart Title="SVN Support for GitHub" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=body-message-part-name-in-xlangmessage" Status="Published">
      <BodyPart Text="&lt;p&gt;I was writing a custom component to copy message parts of an untyped message, invoked from orchestration. This message was created in a custom pipeline, and body part name had to have “Body”. For some bizarre reason, when message body part is handled outside of orchestration and passed into .NET code as XLANGMessage, body part name is “part”. ??? The other parts have the original names. I have no idea why this is happening, but thought it could save someone a question or two, especially when writing tests and expecting that the name of the part is “Body”.&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_0C93361B.png&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: block; float: none; margin-left: auto; border-top: 0px; margin-right: auto; border-right: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_1297A66B.png&quot; width=&quot;782&quot; height=&quot;259&quot; /&gt;&lt;/a&gt;&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2010-07-20T14:47:00Z" PublishedUtc="2014-04-19T20:31:33.709447Z" ModifiedUtc="2010-07-20T14:47:00Z" />
      <TagsPart Tags="BizTalk" />
      <AutoroutePart Alias="body-message-part-name-in-xlangmessage" UseCustomPattern="false" />
      <TitlePart Title="Body Message Part Name in XLANGMessage" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=debugging-biztalk-orchestrations" Status="Published">
      <BodyPart Text="&lt;p&gt;Sometimes you have to get to the lower level of debugging (ie debugging auto-generated code) to understand what happens. This is what you can do to achieve it in BizTalk.&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;http://www.businessprocessintegration.net/2009/09/how-to-debug-an-orchestration-in-biztalk-server-2009/&quot; target=&quot;_blank&quot;&gt;Link 1&lt;/a&gt; (Auto-generated code)&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;http://mohammedatef.wordpress.com/2009/06/13/biztalk-2009-orchestration-debugging/&quot; target=&quot;_blank&quot;&gt;Link 2&lt;/a&gt; (MMC)&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2010-07-13T03:59:00Z" PublishedUtc="2014-04-19T20:31:34.2094491Z" ModifiedUtc="2010-07-13T03:59:00Z" />
      <TagsPart Tags=".NET,BizTalk" />
      <AutoroutePart Alias="debugging-biztalk-orchestrations" UseCustomPattern="false" />
      <TitlePart Title="Debugging BizTalk Orchestrations" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=multipart-message-parts-order" Status="Published">
      <BodyPart Text="&lt;p&gt;For the project I work on, processing involves multiple files. Files are packaged in a ZIP archive and it’s BizTalk application that opens the archive and builds a message for processing. In BizTalk terminology, this is a multi-part message. &lt;/p&gt;  &lt;p&gt;Interestingly, if you search for more information, mostly you’ll find how to receive a MIME message that is already multi-part message (i.e. BizTalk can already handle it) or how to do it with Orchestration, by defining a contract (schema) of the multi-part message. But what if you want to construct your multi-part message within a pipeline? And what if you don’t know how many parts you have?&lt;/p&gt;  &lt;p&gt;In my scenario a message is defined as a document with any number of attachments. Document becomes the body part, attachments become additional message parts. So far quite simple. Except that there’s a catch – order of parts at creation time of a multi-part message &lt;strong&gt;matters&lt;/strong&gt;. It is not enough to mart the body part with a boolean flag to indicate that that’s a body part, you also have to insert the body part &lt;strong&gt;first&lt;/strong&gt;, and only after that any additional parts. If that’s not happening, BizTalk throws a nice &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/microsoft.xlangs.basetypes.wrongbodypartexception%28BTS.20%29.aspx&quot; target=&quot;_blank&quot;&gt;WrongBodyPartException&lt;/a&gt;&lt;strong&gt;&lt;/strong&gt; exception. &lt;/p&gt;  &lt;p&gt;From the API point of view, this is a little bit of a smell, since you expect the engine to be smart enough to read first the part that is marked as a body (why would you mark it as a body then). The doubt that I’ll give it is that I am not fully aware how internals are working. So hopefully this will save someone time and efforts of troubleshooting an issue like this.&lt;/p&gt;  &lt;p&gt;For the project I wanted to document it, and again, the best way to document it was tests. First I needed the test to fail to verify the expected issue. Once custom pipeline component was fixed, the test passed, and documentation is a living and breathing code. And code doesn’t lie.&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_21DDCA88.png&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: block; float: none; margin-left: auto; border-top: 0px; margin-right: auto; border-right: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_2D09E583.png&quot; width=&quot;726&quot; height=&quot;187&quot; /&gt;&lt;/a&gt;&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2010-07-09T21:17:00Z" PublishedUtc="2014-04-19T20:31:34.6688535Z" ModifiedUtc="2010-07-09T21:17:00Z" />
      <TagsPart Tags="BizTalk,TDD" />
      <AutoroutePart Alias="multipart-message-parts-order" UseCustomPattern="false" />
      <TitlePart Title="Multi-Part Message Parts Order" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=bizmonade-testing-orchestration-receiving-any-document-type" Status="Published">
      <BodyPart Text="&lt;p&gt;I have &lt;a href=&quot;http://weblogs.asp.net/sfeldman/archive/2010/07/01/bizmonade.aspx&quot; mce_href=&quot;http://weblogs.asp.net/sfeldman/archive/2010/07/01/bizmonade.aspx&quot; target=&quot;_blank&quot;&gt;posted before&lt;/a&gt; about Bizmonade testing library for BizTalk orchestrations testing. Unfortunately, there’s something something that looks like a limitation – testing orchestrations that receive any document type (System.Xml.XmlDocument). I &lt;a href=&quot;http://stackoverflow.com/questions/3191586/bizmonade-testing-orchestration-that-receives-any-document&quot; mce_href=&quot;http://stackoverflow.com/questions/3191586/bizmonade-testing-orchestration-that-receives-any-document&quot; target=&quot;_blank&quot;&gt;posted a question&lt;/a&gt; on StackOverflow and curious to see if get anything at all. How do you test your general schema orchestrations?&lt;/p&gt;&lt;p&gt;Update 2010-07-08: I'm in contact with the main developer of Bizmonade, and he'll be releasing soon an updated version that will allow scenario I am looking for.&amp;nbsp; &lt;br&gt;&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2010-07-07T02:57:00Z" PublishedUtc="2014-04-19T20:31:34.8876019Z" ModifiedUtc="2010-07-07T02:57:00Z" />
      <TagsPart Tags="BizTalk,TDD" />
      <AutoroutePart Alias="bizmonade-testing-orchestration-receiving-any-document-type" UseCustomPattern="false" />
      <TitlePart Title="Bizmonade – Testing Orchestration Receiving Any Document Type" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=assembly-in-gac-and-configuration-file" Status="Published">
      <BodyPart Text="&lt;p&gt;Working with BizTalk pushes the creativity sometimes. This time around, I needed to have an assembly deployed to GAC (so that BizTalk application can easily use it) and at the same time being able to configure this assembly without re-deploying it to GAC again. &lt;/p&gt;  &lt;p&gt;Normally, an assembly has a configuration file (.config) that is bundled with assembly and serve as it name indicates. With GAC it’s different. Regardless of &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ex0ss12c%28VS.80%29.aspx&quot; target=&quot;_blank&quot;&gt;method of deployment&lt;/a&gt; into GAC, it only accepts an assembly file, nothing else. This is where shared knowledge and creativity kick in.&lt;/p&gt;  &lt;p&gt;How assembly is &lt;strong&gt;actually &lt;/strong&gt;deployed?&lt;/p&gt;  &lt;p&gt;GAC is file based structure typically located at &lt;strong&gt;%windir%\assembly&lt;/strong&gt;. If you type the location in Explorer, this is how it looks like:&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_37AA0F98.png&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: block; float: none; margin-left: auto; border-top: 0px; margin-right: auto; border-right: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_60B4AE94.png&quot; width=&quot;458&quot; height=&quot;164&quot; /&gt;&lt;/a&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;You can’t drill in, unless you specify another path that exposes GAC as file system, &lt;strong&gt;%windir%\assembly\gac_msil&lt;/strong&gt;. This opens the actual file structure of GAC, which is structured very logically. &lt;/p&gt;  &lt;p&gt;Assume you have deployed an assembly called zUtility with version 1.0.0.0. Once this assembly is deployed into GAC, a folder is created with named as the assembly, and inside another sub-folder, named accordingly as the version and public key token of the assembly. Inside that folder zUtility assembly is found. This way GAC can contain multiple versions of the same assembly.&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_42D62A93.png&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: block; float: none; margin-left: auto; border-top: 0px; margin-right: auto; border-right: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_652DC00C.png&quot; width=&quot;412&quot; height=&quot;61&quot; /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;This should technically allow us to drop the configuration file and have it loaded by assembly once it’s used. But no, it’s not working that way. Even without GAC, a satellite assembly is always using configuration file of the main assembly. It would be nice if it was using it’s own configuration file first, but it doesn’t. Either way, back to our case. Solution for this problem would be to “force” reading of configuration file through custom code.&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_7293D312.png&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: block; float: none; margin-left: auto; border-top: 0px; margin-right: auto; border-right: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_4676D621.png&quot; width=&quot;620&quot; height=&quot;222&quot; /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;Executing assembly location is full path and name of zUtility.dll. Appended to that .config gives us the configuration file full path and name. The rest is usual. &lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_0A5EA42B.png&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: block; float: none; margin-left: auto; border-top: 0px; margin-right: auto; border-right: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_0C9B2CE7.png&quot; width=&quot;340&quot; height=&quot;78&quot; /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;Now BizTalk can reference a fully configurable assembly deployed to GAC &lt;strong&gt;without&lt;/strong&gt; being redeployed every single time we need to update a connection string, or a URL or some constant value. Hard-coding is bad, so avoid it.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2010-07-03T23:43:00Z" PublishedUtc="2014-04-19T20:31:36.1221635Z" ModifiedUtc="2010-07-03T23:43:00Z" />
      <TagsPart Tags=".NET,BizTalk" />
      <AutoroutePart Alias="assembly-in-gac-and-configuration-file" UseCustomPattern="false" />
      <TitlePart Title="Assembly in GAC and Configuration File" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=bizmonade" Status="Published">
      <BodyPart Text="&lt;p&gt;&lt;a href=&quot;http://bizmonade.matricis.com/&quot; target=&quot;_blank&quot;&gt;Bizmonade&lt;/a&gt; is a project allowing to simulate execution of BizTalk orchestrations without deployment to BizTalk server. What is it good for? Testing. Unit testing. The fact that the logic can be tested without deployment hassle is good. There are a few issues that I have encountered so far, and my experience with the particular tool is less than 24 hours (so excuse me in case I am not accurate – corrections are welcomed always):&lt;/p&gt;  &lt;ol&gt;   &lt;li&gt;You have to use orchestrations that subscribe to a specific schema message. What if I subscribe on any message (System.Xml.XmlDocument) based on receiving port? No documentation on that, neither clear if it’s possible from the samples.&lt;/li&gt;    &lt;li&gt;Default configuration/documentation assumes Bizmonade is GAC-ed. Personally, I don’t like that. For Continuous Integration scenario it is better to be self-contained with-in a project. Good news is that you can do it easily.&lt;/li&gt;    &lt;li&gt;Lack of API documentation. It would be nice to have some sort of documentation. Yes, code should be self descriptive, yet would be nice to have documentation, or at least some hints.&lt;/li&gt;    &lt;li&gt;__Simulated classes. This is not truely Bizmonade issue, maybe more of the ReSharper, but having no intellisense on those is annoying a bit.&lt;/li&gt; &lt;/ol&gt;  &lt;p&gt;Bottom line, from the entire list the only serious one I find #1. I hope there’s an option to achieve what I want. The this library becomes a real gem for my project.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2010-07-02T04:56:00Z" PublishedUtc="2014-04-19T20:31:36.4969631Z" ModifiedUtc="2010-07-02T04:56:00Z" />
      <TagsPart Tags="BizTalk,TDD" />
      <AutoroutePart Alias="bizmonade" UseCustomPattern="false" />
      <TitlePart Title="Bizmonade" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=building-assemblyinfo-for-biztalk-with-nant" Status="Published">
      <BodyPart Text="&lt;p&gt;All assemblies deployed into production are versioned. My personal preference&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_1AB9757B.png&quot;&gt;&lt;img style=&quot;border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; margin-left: 0px; border-left-width: 0px; margin-right: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; align=&quot;right&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_382E5738.png&quot; width=&quot;268&quot; height=&quot;390&quot; /&gt;&lt;/a&gt; is to achieve that with build scripts, ensuring that build number, code revision, minor and major versions are all inserted. AssemblyInfo.cs is the file that normally contains that information. I normally generate a dummy AssemblyInfo file in the build project and reference that from the project(s). This way, when building with scripts, we can generate dynamic AssemblyInfo.cs file and overwrite the link. The link is a one way link, nothing is updated in the build project. And since link is just a reference, nothing is modified from the repository point of view. NAnt has &amp;lt;asmInfo&amp;gt; task that does all the job. Except that for BizTalk its not straight forward process (of course, how could it be).&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;With BizTalk projects, there’s one assembly attribute that doesn’t have an empty constructor, and as a result of that &amp;lt;asmInfo&amp;gt; task fails.&lt;/p&gt;  &lt;p&gt;&lt;em&gt;&amp;lt;attribute type=&amp;quot;Microsoft.XLANGs.BaseTypes.BizTalkAssemblyAttribute&amp;quot; value=&amp;quot;typeof(BTXService)&amp;quot; /&amp;gt;&lt;/em&gt;&lt;/p&gt;  &lt;p&gt;Workaround for this is simple. Use &amp;lt;asmInfo&amp;gt; to generate everything but this attribute. Use &amp;lt;echo&amp;gt; to generate this attribute. No headache, simple and working.&lt;/p&gt;  &lt;blockquote&gt;   &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_1C0ED83F.png&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: block; float: none; margin-left: auto; border-top: 0px; margin-right: auto; border-right: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_16C2823F.png&quot; width=&quot;638&quot; height=&quot;381&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2010-06-30T15:44:00Z" PublishedUtc="2014-04-19T20:31:37.2938216Z" ModifiedUtc="2010-06-30T15:44:00Z" />
      <TagsPart Tags=".NET,BizTalk" />
      <AutoroutePart Alias="building-assemblyinfo-for-biztalk-with-nant" UseCustomPattern="false" />
      <TitlePart Title="Building AssemblyInfo for BizTalk with NAnt" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=when-whiteboard-is-not-available" Status="Published">
      <BodyPart Text="&lt;p&gt;You use wall :)&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/20100625_001_45F9CE47.jpg&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: block; float: none; margin-left: auto; border-top: 0px; margin-right: auto; border-right: 0px&quot; title=&quot;20100625_001&quot; border=&quot;0&quot; alt=&quot;20100625_001&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/20100625_001_thumb_5691C935.jpg&quot; width=&quot;508&quot; height=&quot;480&quot; /&gt;&lt;/a&gt;&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2010-06-27T19:11:00Z" PublishedUtc="2014-04-19T20:31:37.8563132Z" ModifiedUtc="2010-06-27T19:11:00Z" />
      <TagsPart Tags="Agile" />
      <AutoroutePart Alias="when-whiteboard-is-not-available" UseCustomPattern="false" />
      <TitlePart Title="When Whiteboard Is Not Available" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=change-msbuild-script-with-nant-xmlpoke" Status="Published">
      <BodyPart Text="&lt;p&gt;For &lt;a href=&quot;http://weblogs.asp.net/sfeldman/archive/2010/06/22/automated-builds-and-deployment-for-biztalk.aspx&quot; target=&quot;_blank&quot;&gt;automated deployments of BizTalk application&lt;/a&gt;, I am using MsBuild scripts packaged with compiled BizTalk artifacts. Build scripts are in NAnt. I wanted from NAnt build script to update MsBuild deployment script.&lt;/p&gt;  &lt;p&gt;MsBuild deployment script looked like this:&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_63D584AF.png&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: block; float: none; margin-left: auto; border-top: 0px; margin-right: auto; border-right: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_208D0D40.png&quot; width=&quot;842&quot; height=&quot;298&quot; /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;For this task NAnt XmlPoke is the right tool to use, except that this didn’t work, until I realized that I need to use namespace prefix. Once prefix &lt;strong&gt;&lt;em&gt;msb &lt;/em&gt;&lt;/strong&gt;was in place, it worked as charm.&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_5E1CFBBA.png&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: block; float: none; margin-left: auto; border-top: 0px; margin-right: auto; border-right: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_08F7F07E.png&quot; width=&quot;798&quot; height=&quot;305&quot; /&gt;&lt;/a&gt;&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2010-06-26T03:48:00Z" PublishedUtc="2014-04-19T20:31:38.8094351Z" ModifiedUtc="2010-06-26T03:48:00Z" />
      <TagsPart Tags="BizTalk" />
      <AutoroutePart Alias="change-msbuild-script-with-nant-xmlpoke" UseCustomPattern="false" />
      <TitlePart Title="Change MsBuild Script with NAnt XmlPoke" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=testing-biztalk-custom-pipeline" Status="Published">
      <BodyPart Text="&lt;p&gt;There are a few ways to test BizTalk Custom Pipelines out there. If you want automatically execute pipeline on input and verify it’s not exploding, you can leverage &lt;em&gt;TestableSendPipeline&lt;/em&gt; coming along with BT projects.&lt;/p&gt;  &lt;p&gt;A few things that are required for this to work:&lt;/p&gt;  &lt;p&gt;1. Enable unit testing on the BT project&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/000_7ACB970E.png&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: block; float: none; margin-left: auto; border-top: 0px; margin-right: auto; border-right: 0px&quot; title=&quot;000&quot; border=&quot;0&quot; alt=&quot;000&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/000_thumb_49CBE661.png&quot; width=&quot;673&quot; height=&quot;319&quot; /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;2. Include PipelineObjects.dll assembly found at %programfiles%\Microsoft BizTalk Server 2009\SDK\Utilities\PipelineTools into your project and reference it from your test project along with other BT assemblies.&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/001_79898EE0.png&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: block; float: none; margin-left: auto; border-top: 0px; margin-right: auto; border-right: 0px&quot; title=&quot;001&quot; border=&quot;0&quot; alt=&quot;001&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/001_thumb_697D50DA.png&quot; width=&quot;275&quot; height=&quot;282&quot; /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;3. Create your spec (test) that would exercise the pipeline. &lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/002_51E5A367.png&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: block; float: none; margin-left: auto; border-top: 0px; margin-right: auto; border-right: 0px&quot; title=&quot;002&quot; border=&quot;0&quot; alt=&quot;002&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/002_thumb_23FAE160.png&quot; width=&quot;896&quot; height=&quot;290&quot; /&gt;&lt;/a&gt; Note: the funky path thing is because is for loading input file properly when test is executed with TestDriven.NET in Visual Studio .NET, as well as when executed by Gallio as a part of automated build script. File has to be copied to the output for this to work.&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/003_061C5D5F.png&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: block; float: none; margin-left: auto; border-top: 0px; margin-right: auto; border-right: 0px&quot; title=&quot;003&quot; border=&quot;0&quot; alt=&quot;003&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/003_thumb_611E9CE5.png&quot; width=&quot;312&quot; height=&quot;320&quot; /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;As a result – pipeline is testable and any change to an input sample document will re-kick testing that will fail if something is not addressed they way it was designed before the change took place.&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/004_0309FF6A.png&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: block; float: none; margin-left: auto; border-top: 0px; margin-right: auto; border-right: 0px&quot; title=&quot;004&quot; border=&quot;0&quot; alt=&quot;004&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/004_thumb_3AE164EF.png&quot; width=&quot;1076&quot; height=&quot;511&quot; /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;&lt;font color=&quot;#ff0000&quot; size=&quot;3&quot;&gt;&lt;strong&gt;Now, if only I could figure out how in the world to get hold of the output…&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2010-06-23T20:54:00Z" PublishedUtc="2014-04-19T20:31:40.4500295Z" ModifiedUtc="2010-06-23T20:54:00Z" />
      <TagsPart Tags="BizTalk,TDD" />
      <AutoroutePart Alias="testing-biztalk-custom-pipeline" UseCustomPattern="false" />
      <TitlePart Title="Testing BizTalk Custom Pipeline" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=automated-builds-and-deployment-for-biztalk" Status="Published">
      <BodyPart Text="&lt;p&gt;Automated builds are an essential part of Continuous Integration. Definition commonly found is&lt;/p&gt;  &lt;blockquote&gt;   &lt;p&gt;&lt;i&gt;Continuous Integration is a software development practice where members of a team integrate their work frequently, usually each person integrates at least daily - leading to multiple integrations per day. Each integration is verified by an automated build (including test) to detect integration errors as quickly as possible. Many teams find that this approach leads to significantly reduced integration problems and allows a team to develop cohesive software more rapidly.&lt;/i&gt;&lt;/p&gt; &lt;/blockquote&gt;  &lt;p&gt;Continuous Integration can be done on any project. Literally any, including BizTalk. What is interesting, is that getting it running for BizTalk applications is somewhat challenging, especially when the vast majority of resources are using “traditional techniques”. If you are already coming from an environment that exercises CI, just the though of deploying something from within Visual Studio .NET by clicking context menu “Deploy” is making you feel uncomfortable. No one likes black magic. Especially when you’ve seen that there’s a way.&lt;/p&gt;  &lt;p&gt;I searched a lot for how to set up automated builds for BizTalk application and automate deployments to the maximum. Options are various, and probably not everything that is out there, but I’ll demonstrate what I found to be quite efficient for me.&lt;/p&gt;  &lt;h4&gt;Option 1 – Visual Studio .NET&lt;/h4&gt;  &lt;p&gt;A few years ago I would jump on someone even thinking about this option. Yet, for someone who’s not a developer and is more of an integration person stuck with BizTalk all by himself, this might be not such a bad idea. Cons of this approach are multiple, and among them are&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;Installing VS.NET on the test and production environments&lt;/li&gt;    &lt;li&gt;No way to know who/what exactly did what&lt;/li&gt;    &lt;li&gt;Process is not repeatable (in terms of using same artifacts to reproduce installation)&lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;This is not something I would not recommend.&lt;/p&gt;  &lt;h4&gt;Option 2 – MSI Export/Import&lt;/h4&gt;  &lt;p&gt;Once BizTalk application is installed, it can be exported from BizTalk console. The extracted MSI and Bindings XML (both are required to completely “backup” and application) can be used later to install that same application on another machine. The benefit of this is that we no longer rely on VS.NET to exist to deploy straight from the code. The biggest con, in my opinion, is the fact that source code can live in complete independence from the “snapshot” captured by MSI file, i.e. MSI represents a certain version, while it can be completely outdated since a manual deployment and MSI extraction is required to have the right version.&lt;/p&gt;  &lt;h4&gt;Option 3 – Build Server&lt;/h4&gt;  &lt;p&gt;This is the one I prefer. BizTalk projects are nothing but .NET projects. These projects are compiled using MsBuild. The artifacts are assemblies, .NET signed assemblies. These assemblies can be generated every single time there’s an update to the code, and it will be performed by build server upon any code change in repository. I use combination of NAnt scripts with solution (.sln) and project (.csproj) files that are just MsBuild scripts after all. Build artifacts are gathered into an automatically generated MSI installer, created with WiX project. Fully configurable, a 100% automated.&lt;/p&gt;  &lt;p&gt;The caveat is deployment. Deployment is really deployment to the BizTalk and GAC. This can be easily done by either leveraging the updated &lt;a href=&quot;http://nantcontrib.sourceforge.net/release/0.85/help/tasks/btsdeploy.html&quot; target=&quot;_blank&quot;&gt;NAntContrib&lt;/a&gt; library latest version that has support for BizTalk tasks, or by &lt;a href=&quot;http://sdctasks.codeplex.com/&quot; target=&quot;_blank&quot;&gt;SDC Tasks&lt;/a&gt; for MsBuild. Either way, &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/aa559686%28BTS.20%29.aspx&quot; target=&quot;_blank&quot;&gt;btstask.exe&lt;/a&gt; is what is used to deploy and undeploy.&lt;/p&gt;  &lt;p&gt;As a part of MSI installer, I package MsBuild scripts and batch files that invokes those to perform the actual deployment of artifacts into BizTalk. &lt;/p&gt;  &lt;p&gt;Note: bindings are extracted manually from a deployed application, and then packaged with the rest of build artifacts into MSI to allow import of binding during automated deployment (batch file).&lt;/p&gt;  &lt;p&gt;Benefits of this you asking yourself? Lots.&lt;/p&gt;  &lt;ol&gt;   &lt;li&gt;Repeatable&lt;/li&gt;    &lt;li&gt;Automated&lt;/li&gt;    &lt;li&gt;Allows testing&lt;/li&gt;    &lt;li&gt;Brainless deployment&lt;/li&gt;    &lt;li&gt;Process documented in build/deployment scripts&lt;/li&gt; &lt;/ol&gt;  &lt;p&gt;I hope this post is going to help someone to find an option, just like I hoped to find one when was just starting. If something is hard to test, ask yourself, am I doing the right thing. If you can’t positively answer that one, then there’s another way, you just haven’t found it. &lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2010-06-23T04:38:00Z" PublishedUtc="2014-04-19T20:31:40.7625393Z" ModifiedUtc="2010-06-23T04:38:00Z" />
      <TagsPart Tags="Agile,BizTalk" />
      <AutoroutePart Alias="automated-builds-and-deployment-for-biztalk" UseCustomPattern="false" />
      <TitlePart Title="Automated Builds and Deployment for BizTalk" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=digitally-imported" Status="Published">
      <BodyPart Text="&lt;p&gt;If you are a fan of electronic music, and happen to find yourself in a place where there’s not a single radio station playing electronic music – this is the URL to remember: &lt;a title=&quot;http://www.di.fm/&quot; href=&quot;http://www.di.fm/&quot;&gt;http://www.di.fm/&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Thanks goodness there’s internet…&lt;/p&gt;  &lt;p&gt;PS: Yes, I am located in Calgary :) Shash!&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2010-06-17T20:40:00Z" PublishedUtc="2014-04-19T20:31:41.0437833Z" ModifiedUtc="2010-06-17T20:40:00Z" />
      <TagsPart Tags="Personal" />
      <AutoroutePart Alias="digitally-imported" UseCustomPattern="false" />
      <TitlePart Title="Digitally Imported" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=sending-big-files-with-wcf" Status="Published">
      <BodyPart Text="&lt;p&gt;I had to look into a project that submits large files to WCF service. Implementation is based on data chunking. This is a good approach when your client and server are not both based on WCF, bud different technologies. &lt;/p&gt;  &lt;p&gt;The problem with something like this is that chunking (either you wish it or not) complicates the overall solution. Alternative would be streaming. In WCF to WCF scenario, this is a piece of cake. When client is Java, it becomes a bit more challenging (has anyone implemented Java client streaming data to WCF service?).&lt;/p&gt;  &lt;p&gt;What I really liked about .NET implementation with WCF, is that sending header info along with stream was dead simple, and from the developer point of view looked like it’s all a part of the DTO passed into the service.&lt;/p&gt;  &lt;pre class=&quot;code&quot;&gt;[&lt;span style=&quot;color: #00008b&quot;&gt;ServiceContract&lt;/span&gt;]&#xA;&lt;span style=&quot;color: blue&quot;&gt;public interface &lt;/span&gt;&lt;span style=&quot;color: #00008b&quot;&gt;IFileUpload&#xA;&lt;/span&gt;{&#xA;&lt;span style=&quot;color: gray&quot;&gt;  &lt;/span&gt;[&lt;span style=&quot;color: #00008b&quot;&gt;OperationContract&lt;/span&gt;]&#xA;  &lt;span style=&quot;color: blue&quot;&gt;void &lt;/span&gt;&lt;span style=&quot;color: #008b8b&quot;&gt;UploadFile&lt;/span&gt;(&lt;span style=&quot;color: #00008b&quot;&gt;SendFileMessage &lt;/span&gt;message);&#xA;}&lt;/pre&gt;&#xA;&lt;a href=&quot;http://11011.net/software/vspaste&quot;&gt;&lt;/a&gt;&#xA;&#xA;&lt;p&gt;Where &lt;em&gt;SendFileMessage&lt;/em&gt; is&lt;/p&gt;&#xA;&#xA;&lt;pre class=&quot;code&quot;&gt;[&lt;span style=&quot;color: #00008b&quot;&gt;MessageContract&lt;/span&gt;]&#xA;&lt;span style=&quot;color: blue&quot;&gt;public class &lt;/span&gt;&lt;span style=&quot;color: #00008b&quot;&gt;SendFileMessage&#xA;&lt;/span&gt;{&#xA;  [&lt;span style=&quot;color: #00008b&quot;&gt;MessageBodyMember&lt;/span&gt;(&lt;span style=&quot;color: purple&quot;&gt;Order &lt;/span&gt;= 1)]&#xA;  &lt;span style=&quot;color: blue&quot;&gt;public &lt;/span&gt;&lt;span style=&quot;color: #00008b&quot;&gt;Stream &lt;/span&gt;&lt;span style=&quot;color: purple&quot;&gt;FileData&lt;/span&gt;;&#xA;&#xA;  [&lt;span style=&quot;color: #00008b&quot;&gt;MessageHeader&lt;/span&gt;(&lt;span style=&quot;color: purple&quot;&gt;MustUnderstand &lt;/span&gt;= &lt;span style=&quot;color: blue&quot;&gt;true&lt;/span&gt;)]&#xA;  &lt;span style=&quot;color: blue&quot;&gt;public &lt;/span&gt;&lt;span style=&quot;color: #00008b&quot;&gt;FileTransferInfo &lt;/span&gt;&lt;span style=&quot;color: purple&quot;&gt;FileTransferInfo&lt;/span&gt;;&#xA;}&lt;/pre&gt;&#xA;&lt;a href=&quot;http://11011.net/software/vspaste&quot;&gt;&lt;/a&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2010-05-30T23:36:00Z" PublishedUtc="2014-04-19T20:31:41.5437694Z" ModifiedUtc="2010-05-30T23:36:00Z" />
      <TagsPart Tags=".NET,WCF" />
      <AutoroutePart Alias="sending-big-files-with-wcf" UseCustomPattern="false" />
      <TitlePart Title="Sending Big Files with WCF" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=comparing-checksums" Status="Published">
      <BodyPart Text="&lt;p&gt;This is something trivial, yet got me to think for a little. I had two checksums, one received from a client invoking a service, another one calculated once data sent into service is received. Checksums are plain arrays of bytes. I wanted to have comparison to be expressed as simple as possible. Quick google search brought me to a &lt;a href=&quot;http://stackoverflow.com/questions/649444/testing-equality-of-arrays-in-c&quot; target=&quot;_blank&quot;&gt;post&lt;/a&gt; that dealt with the same issue. But linq expression was too chatty and I think the solution was a bit muddy. &lt;/p&gt;  &lt;p&gt;So I looked a bit more into linq options presented in the post, and this is what ended up using:&lt;/p&gt;  &lt;p&gt;&lt;em&gt;var matching = original_checksum.SequenceEqual(new_checksum);&lt;/em&gt;&lt;/p&gt;  &lt;p&gt;Sometimes things are so simple, we tend to overcomplicate them.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2010-05-30T23:24:00Z" PublishedUtc="2014-04-19T20:31:42.1218844Z" ModifiedUtc="2010-05-30T23:24:00Z" />
      <TagsPart Tags="C#" />
      <AutoroutePart Alias="comparing-checksums" UseCustomPattern="false" />
      <TitlePart Title="Comparing Checksums" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=presentation-by-uncle-bob" Status="Published">
      <BodyPart Text="&lt;p&gt;Robert C. Martin gave a nice &lt;a href=&quot;http://www.infoq.com/presentations/Robert-C.-Martin-Bad-Code&quot; target=&quot;_blank&quot;&gt;presentation&lt;/a&gt; on InfoQ, highly recommended.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2010-05-28T02:09:00Z" PublishedUtc="2014-04-19T20:31:42.4031301Z" ModifiedUtc="2010-05-28T02:09:00Z" />
      <TagsPart Tags="Other" />
      <AutoroutePart Alias="presentation-by-uncle-bob" UseCustomPattern="false" />
      <TitlePart Title="Presentation by Uncle Bob" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=food-inc-thoughts" Status="Published">
      <BodyPart Text="&lt;p&gt;Yesterday I watched &lt;a href=&quot;http://www.foodincmovie.com/&quot; target=&quot;_blank&quot;&gt;Food Inc.&lt;/a&gt; documentary movie. And this morning, hours after watching it, on the radio they announce salads recall – &lt;a href=&quot;http://www.inspection.gc.ca/english/corpaffr/recarapp/2010/20100525e.shtml&quot; target=&quot;_blank&quot;&gt;Salmonella bacteria contamination&lt;/a&gt;. Wonderful. Another proof of house mass production (and not just food) can go and goes wrong. The movie is highly recommended.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2010-05-26T22:41:00Z" PublishedUtc="2014-04-19T20:31:42.7156272Z" ModifiedUtc="2010-05-26T22:41:00Z" />
      <TagsPart Tags="Other" />
      <AutoroutePart Alias="food-inc-thoughts" UseCustomPattern="false" />
      <TitlePart Title="Food Inc. – Thoughts" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=bdd-is-spreading" Status="Published">
      <BodyPart Text="&lt;p&gt;Nice to see BDD spreading quickly around. Reminds me how about two ago I wanted to switch our company from ASP.NET web forms to MVC, to allow better introduction into testability. This video just reminded me how correct that assumption was. And these days, with the tools like MSpec and support out of box by R# and VS.NET – it’s a must. Enjoy the &lt;a href=&quot;http://blogs.jetbrains.com/dotnet/2010/05/jetbrains-vendor-session-at-devconnections-now-available/&quot; target=&quot;_blank&quot;&gt;video&lt;/a&gt;.&lt;/p&gt;  &lt;p&gt;PS: one thing I didn’t like in particular, if you talk about mocking, show it, don’t just leave it in words. Otherwise it’s a bad service for novice that want to see it in action.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2010-05-21T01:18:00Z" PublishedUtc="2014-04-19T20:31:43.0749964Z" ModifiedUtc="2010-05-21T01:18:00Z" />
      <TagsPart Tags="TDD" />
      <AutoroutePart Alias="bdd-is-spreading" UseCustomPattern="false" />
      <TitlePart Title="BDD is Spreading" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=learn-before-build" Status="Published">
      <BodyPart Text="&lt;p&gt;Buy vs. Build dilemma is quite common in software development. Based on degree of customization, decisions are made. But is it just degree of customization? As a developer, the urge to build and will to prove that “we can pull it off” is very strong. What I find often is that another dilemma exists, similar to the mentioned one, but rooted in restrictions related to time and will to go above the “regular known” – Learn vs. Build. &lt;/p&gt;  &lt;p&gt;As an example, I can take WiX installer and build-server spawned off builds per environment. If you have multiple environments, normally we’d go with configuration-variables-per-environment (NAnt) file, that would get included during the build process and result in MSI installer preconfigured for that specific environment it was build for. Now, if you have 10 different environments, and about 10 different products you build often, it becomes a burden on build server and a very convoluted way of doing things on a large scale. What are the options? Several. Among those build more or learn about things and then make a decision. &lt;/p&gt;  &lt;p&gt;Gladly, after learning a bit more about WiX, it is presently nice to know that WiX has the concept of parameters and XML poking baked straight in it. Now, making a single build to accommodate different environments became way simple – single installer with a batch/command file per environment (batch just would invoke MSI installer, passing in environment specific parameters).&lt;/p&gt;  &lt;p&gt;To achieve the solution, add a reference to WixUtilExtension.dll and add a namespace for it as a Wix element attribute &lt;a href=&quot;xmlns:util=%22http://schemas.microsoft.com/wix/UtilExtension%22&quot; title=&quot;xmlns:util=&amp;quot;http://schemas.microsoft.com/wix/UtilExtension&amp;quot;&quot; mce_href=&quot;xmlns:util=&amp;quot;http://schemas.microsoft.com/wix/UtilExtension&amp;quot;&quot;&gt;xmlns:util=&quot;http://schemas.microsoft.com/wix/UtilExtension&quot;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;From that point, this is very similar to a standard XML poke (such as NAnt).&lt;/p&gt;  &lt;p&gt;&amp;lt;util:XmlFile Id=&quot;SetKey1&quot;   &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Action=&quot;setValue&quot;    &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ElementPath=&quot;//appSettings/add[\[]@key='Location'[\]]/@value&quot;    &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Value=&quot;&lt;b&gt;[LOCATION]&lt;/b&gt;&quot;    &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; File=&quot;&lt;b&gt;[#AppConfig]&lt;/b&gt;&quot;    &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; SelectionLanguage=&quot;XPath&quot;     &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Sequence=&quot;1&quot; /&amp;gt;&lt;/p&gt;  &lt;p&gt;A few things to explain:&lt;/p&gt;  &lt;p&gt;#AppConfig – reference to the WiX included file ID, with # sign in front where XPath is executed&lt;/p&gt;  &lt;p&gt;LOCATION – parameter passed into WiX MSI when executed&lt;/p&gt;  &lt;p&gt;So if MSI generated by the build is called Product.msi, batch file could contain a line:&lt;/p&gt;  &lt;p&gt;Product.msi LOCATION=C:\bla&lt;/p&gt;  &lt;p&gt;Then result configuration file identified by “AppConfig” ID would contain:&lt;/p&gt;  &lt;p&gt;&amp;lt;appSettings&amp;gt;   &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;add key=&quot;Location&quot; value=&quot;C:\bla&quot; /&amp;gt; &lt;/p&gt;  &lt;p&gt;Note: if no parameters are supplied, empty string is used clearing any default values&lt;/p&gt;  &lt;p&gt;Moral of this post? Invest some time before you rush to build. There’s a high potential that you are re-inventing the wheel. And another one, it is never too late to re-factor, if something just “doesn’t feel right”.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2010-05-13T20:44:00Z" PublishedUtc="2014-04-19T20:31:43.3718766Z" ModifiedUtc="2010-05-13T20:44:00Z" />
      <TagsPart Tags="Other" />
      <AutoroutePart Alias="learn-before-build" UseCustomPattern="false" />
      <TitlePart Title="Learn before Build" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=wave-vs-net" Status="Published">
      <BodyPart Text="&lt;p&gt;This is an &lt;a href=&quot;http://www.wave-vs.net&quot; target=&quot;_blank&quot;&gt;interesting plug-in&lt;/a&gt; for VS.NET 2008/2010 to allow remote pair-programming. I’m a big advocate for pair-programming and collaborative work, so this plug-in has its place in the real world. I used to pair-program with a developer that was remote, and we used VNC/RDC, but this one is way better.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2010-05-13T15:28:00Z" PublishedUtc="2014-04-19T20:31:43.5749885Z" ModifiedUtc="2010-05-13T15:28:00Z" />
      <TagsPart Tags="Agile" />
      <AutoroutePart Alias="wave-vs-net" UseCustomPattern="false" />
      <TitlePart Title="wave-vs.net" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=visual-studio-2008-crashes-when-adding-custom-pipeline-components-to-toolbox" Status="Published">
      <BodyPart Text="&lt;p&gt;I have run into this issue trying to add custom pipeline component to toolbox. The only way (I know about) to add a custom pipeline component to a customized pipeline is using the visual designer. In order to do that you have to have components on toolbox. This was a bit frustrating. Google has brought &lt;a href=&quot;http://connectedthoughts.wordpress.com/2009/07/01/visual-studio-crash-when-trying-to-add-pipeline-components-to-toolbox/&quot; target=&quot;_blank&quot;&gt;one result&lt;/a&gt; which was exactly what I needed. One of the comments had another link, to the similar issue, but this time with a different title: &lt;a href=&quot;http://go2.wordpress.com/?id=725X1342&amp;amp;site=connectedthoughts.wordpress.com&amp;amp;url=http%3A%2F%2Fsupport.microsoft.com%2Fkb%2F977428%2Fen-us&amp;amp;sref=http%3A%2F%2Fconnectedthoughts.wordpress.com%2F2010%2F01%2F25%2Fhotfix-for-biztalk-2009-and-visual-studio-2008-issues-released%2F&quot; target=&quot;_blank&quot;&gt;Hotfix for BizTalk 2009 and Visual Studio 2008&lt;/a&gt;. I followed the link, installed hotfix, and it worked. Oh, yes, you &lt;strong&gt;have &lt;/strong&gt;to reboot your machine for hotfix to work completely (this is where I spent some time pulling my hair out and asking why hotfix didn’t work?!). Once this is done, you are good to go.&lt;/p&gt;  &lt;p&gt;Among other things, this hotfix deals with BizTalk project references to each other and items not being updated (like distinguished fields in schemas project not reflected in orchestrations project). Here’s the full list:&lt;/p&gt;  &lt;p&gt;* The orchestrations in the referenced BizTalk project may show compiler warnings.   &lt;br /&gt;* The changes that are made to the referenced BizTalk project are not propagated on to the referencing project.    &lt;br /&gt;* When you edit the orchestrations of the referenced project, XLANG errors are thrown. These errors may disappear after the orchestrations are saved and recompiled.    &lt;br /&gt;* After you deploy the referencing project, the local copies of the referenced project’s binaries are deleted.    &lt;br /&gt;* After you deploy the referencing project, various errors or warnings occur in Orchestration Designer.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2010-04-24T15:29:00Z" PublishedUtc="2014-04-19T20:31:43.778113Z" ModifiedUtc="2010-04-24T15:29:00Z" />
      <TagsPart Tags="BizTalk" />
      <AutoroutePart Alias="visual-studio-2008-crashes-when-adding-custom-pipeline-components-to-toolbox" UseCustomPattern="false" />
      <TitlePart Title="Visual Studio 2008 Crashes When Adding Custom Pipeline Components to Toolbox" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=biztalk-server-pipeline-component-wizard" Status="Published">
      <BodyPart Text="&lt;p&gt;Time saving project to generate &lt;a href=&quot;http://btsplcw.codeplex.com/Wikipage&quot; target=&quot;_blank&quot;&gt;BizTalk Server Pipeline Components&lt;/a&gt;.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2010-04-23T16:26:00Z" PublishedUtc="2014-04-19T20:31:44.2624804Z" ModifiedUtc="2010-04-23T16:26:00Z" />
      <TagsPart Tags="BizTalk" />
      <AutoroutePart Alias="biztalk-server-pipeline-component-wizard" UseCustomPattern="false" />
      <TitlePart Title="BizTalk Server Pipeline Component Wizard" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=reading-writing-promoted-properties-from-bre" Status="Published">
      <BodyPart Text="&lt;p&gt;&lt;a href=&quot;http://esbextlibrary.codeplex.com/&quot; target=&quot;_blank&quot;&gt;ESB Toolkit Extensions&lt;/a&gt; is an open-source library giving you an extended BRE/BRI provider to read and write promoted properties of a message within business rules engine. I’ve used it to achieve automated process for mapping to canonical schema and then back to destination schema based on receiver ID as a promoted property (will blog on this later). A very useful library!&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: block; float: none; margin-left: auto; border-top: 0px; margin-right: auto; border-right: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_41B1A79E.png&quot; width=&quot;640&quot; height=&quot;372&quot; /&gt;&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2010-04-20T03:44:00Z" PublishedUtc="2014-04-19T20:31:44.5749848Z" ModifiedUtc="2010-04-20T03:44:00Z" />
      <TagsPart Tags="BizTalk" />
      <AutoroutePart Alias="reading-writing-promoted-properties-from-bre" UseCustomPattern="false" />
      <TitlePart Title="Reading/Writing Promoted Properties from BRE" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=looking-for-good-developers-again" Status="Published">
      <BodyPart Text="&lt;p&gt;Here I am shouting again about the fact that we are looking for good &#xA;developers. Our team has matured, and now definition of a “good developer” is &#xA;not what we used to think of it before. Don’t misunderstand me, we are looking &#xA;from smart people, but also rounded people.&lt;/p&gt;&#xA;&lt;p&gt;Our team has shrunk by one developer, whom ironically &lt;a href=&quot;http://weblogs.asp.net/sfeldman/archive/2009/01/08/welcome-a-board-david.aspx&quot; mce_href=&quot;http://weblogs.asp.net/sfeldman/archive/2009/01/08/welcome-a-board-david.aspx&quot; target=&quot;_blank&quot;&gt;I welcomed aboard&lt;/a&gt; a little more than a year ago. Life is life, &#xA;and things are dynamic. I wish him good luck, and hope to see the replacement &#xA;coming soon.&lt;/p&gt;&#xA;&lt;p&gt;So if you are in Calgary area and happened to be .NET / BizTalk / Agile &#xA;developer&amp;nbsp;– drop me a note.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2010-04-20T03:38:00Z" PublishedUtc="2014-04-19T20:31:44.7468948Z" ModifiedUtc="2010-04-20T03:38:00Z" />
      <TagsPart Tags="Other" />
      <AutoroutePart Alias="looking-for-good-developers-again" UseCustomPattern="false" />
      <TitlePart Title="Looking for Good Developers (again)" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=itinerary-designer-and-certificate" Status="Published">
      <BodyPart Text="&lt;blockquote&gt;   &lt;p&gt;A X509 Certificate is required in the model property 'EncryptionCertificate' to encrypt any sensitive property in the designer.&lt;/p&gt; &lt;/blockquote&gt;  &lt;p&gt;By design, Itinerary designer requires a certificate to save a newly created itinerary. This is required to encrypt “sensitive”&amp;#160; data. What if you don’t have that kind of data, or not willing to use certificate? There’s an option to disable designer from requesting the certificate described in &lt;a href=&quot;http://weblogs.asp.net/hernandl/archive/2009/06/29/biztalk-esb-toolkit-all-about-itinerary-designer-security.aspx&quot; target=&quot;_blank&quot;&gt;linked post&lt;/a&gt;, as well as how properly to use one in case it’s needed.&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_7F0E9090.png&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: block; float: none; margin-left: auto; border-top: 0px; margin-right: auto; border-right: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_56068245.png&quot; width=&quot;474&quot; height=&quot;135&quot; /&gt;&lt;/a&gt; Once value is switched to false, error will become a warning, allowing itinerary persistence without certificate.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2010-04-13T20:40:00Z" PublishedUtc="2014-04-19T20:31:45.1999788Z" ModifiedUtc="2010-04-13T20:40:00Z" />
      <TagsPart Tags="ESB" />
      <AutoroutePart Alias="itinerary-designer-and-certificate" UseCustomPattern="false" />
      <TitlePart Title="Itinerary Designer and Certificate" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=esb-toolkit-2-0-new-itinerary-bug" Status="Published">
      <BodyPart Text="&lt;p&gt;I run into something really annoying this morning with Itinerary DSL in VS.NET designer. The only way to create an itinerary is to create it in a project of a library type. This is confusing, since for a simple application, I should be able to achieve the same with a plain BizTalk project. The ironic part is that within BizTalk project creation of itinerary IS an option, but when selected, add a new (standard) BizTalk item dialog shows up, with no itinerary in it. A bug?&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_76F4892B.png&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: block; float: none; margin-left: auto; border-top: 0px; margin-right: auto; border-right: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_65A642F7.png&quot; width=&quot;908&quot; height=&quot;452&quot; /&gt;&lt;/a&gt;&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2010-04-13T15:31:00Z" PublishedUtc="2014-04-19T20:31:45.6999823Z" ModifiedUtc="2010-04-13T15:31:00Z" />
      <TagsPart Tags="ESB" />
      <AutoroutePart Alias="esb-toolkit-2-0-new-itinerary-bug" UseCustomPattern="false" />
      <TitlePart Title="ESB Toolkit 2.0 – New Itinerary Bug?" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=send-port-as-an-itinerary-service-subscriber" Status="Published">
      <BodyPart Text="&lt;p&gt;In order for a send port to subscribe, it has to filter messages dynamically, based on several Itinerary schema properties (as described in documentation). Properties and values are:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;IsRequestResponse = False&lt;/li&gt;    &lt;li&gt;ServiceName = &lt;em&gt;Some_Service_Name&lt;/em&gt;&lt;/li&gt;    &lt;li&gt;ServiceState = Pending&lt;/li&gt;    &lt;li&gt;ServiceType = Messaging&lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;Filtering is done on promoted property from Microsoft.Practices.ESB application. In order to use those promoted properties, first Microsoft.Practices.ESB application should be referenced. Basic knowledge for an experienced BizTalk developer, but wheel spinning time for someone new. &lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2010-04-12T18:15:00Z" PublishedUtc="2014-04-19T20:31:45.9030848Z" ModifiedUtc="2010-04-12T18:15:00Z" />
      <TagsPart Tags="ESB" />
      <AutoroutePart Alias="send-port-as-an-itinerary-service-subscriber" UseCustomPattern="false" />
      <TitlePart Title="Send Port as an Itinerary Service Subscriber" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=nokia-n900" Status="Published">
      <BodyPart Text="&lt;p&gt;This is history repeating itself, so I wanted to share the story in case it will help someone.&lt;/p&gt;  &lt;p&gt;For my cell phones I use Nokia. My next phone I wanted was N900 model. I was waiting for it, but it’s coming too slow to N. American market. So about a month ago I bought one on eBay, making sure it’s not a fake (asking the seller all kind of questions). The guy was a total jerk and lied all about it. I ended up getting a fake, which I complained about and got my money back (by PayPal) as a part of buyers protection plan which is great. Either way, this is not story about how I get tricked every time I buy a Nokia on eBay (yeap, it happened with previous models as well), but more to highlight the differences in case you buying one or planning, so that you don’t have to go through the same.&lt;/p&gt;  &lt;p&gt;Packaging – amazing. From outside it is &lt;em&gt;almost&lt;/em&gt; identical.&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/20100407_011_2CE5D580.jpg&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px&quot; title=&quot;20100407_011&quot; border=&quot;0&quot; alt=&quot;20100407_011&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/20100407_011_thumb_30F2B403.jpg&quot; width=&quot;512&quot; height=&quot;256&quot; /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;The only difference is Chinese ignorance to multiple European languages Nokia traditionally supports out of box&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/20100407_012_5271E392.jpg&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px&quot; title=&quot;20100407_012&quot; border=&quot;0&quot; alt=&quot;20100407_012&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/20100407_012_thumb_26C3AA47.jpg&quot; width=&quot;521&quot; height=&quot;265&quot; /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;But that’s not something a lot of people would pay attention to. Weird thing is that inside, the box says Nokia-Asia. That’s not typical for Nokia either.&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/20100407_013_2345195D.jpg&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px&quot; title=&quot;20100407_013&quot; border=&quot;0&quot; alt=&quot;20100407_013&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/20100407_013_thumb_74EE2460.jpg&quot; width=&quot;526&quot; height=&quot;204&quot; /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;But who knows, times change, things change. Once I opened it to get the phone out, it was obvious – this is a fake. The packaging was… well, sloppy and really bad.&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/20100407_014_2E079214.jpg&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px&quot; title=&quot;20100407_014&quot; border=&quot;0&quot; alt=&quot;20100407_014&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/20100407_014_thumb_1D22EE24.jpg&quot; width=&quot;245&quot; height=&quot;389&quot; /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;Seriously? Do you sell a $500 phone packaged like that? I don’t think so. You thought packaging was bad? Look at the phone itself!&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/20100407_016_414AD964.jpg&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px&quot; title=&quot;20100407_016&quot; border=&quot;0&quot; alt=&quot;20100407_016&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/20100407_016_thumb_39C1FAA8.jpg&quot; width=&quot;547&quot; height=&quot;332&quot; /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;Something to keep in mind – Nokia phones come with dark screen protector, the one that allows to see that phone is turned on/off, but annoying to be used extensively with it. And yes, it’s done on purpose. Then you look at it and WTF?! Two speakers? Why? Later I figured out that one is actually for the phone, another one to yell annoying sounds.&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/20100407_017_76E5B62D.jpg&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px&quot; title=&quot;20100407_017&quot; border=&quot;0&quot; alt=&quot;20100407_017&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/20100407_017_thumb_4FADFDA9.jpg&quot; width=&quot;439&quot; height=&quot;214&quot; /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;The back of the phone was… funny. Quality is not something fakers think about. So what if the logo is misaligned (BTW, Nokia embeds logo within the plastic, not just prints it on it).&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/20100407_019_1867766E.jpg&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px&quot; title=&quot;20100407_019&quot; border=&quot;0&quot; alt=&quot;20100407_019&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/20100407_019_thumb_2A469AEC.jpg&quot; width=&quot;504&quot; height=&quot;277&quot; /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;Anyways. Camera is suppose to be 5MP with dual flash – good luck on that. Flash was completely missing. And the stand helper (is up on the image) is not snapping to the body, but has to be forced in – horrible idea.&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/20100407_020_12AEED79.jpg&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px&quot; title=&quot;20100407_020&quot; border=&quot;0&quot; alt=&quot;20100407_020&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/20100407_020_thumb_38A72E80.jpg&quot; width=&quot;437&quot; height=&quot;302&quot; /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;Oh well, I decided to see what accessories would look like. Boy there was a real surprise.&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/20100407_022_63822343.jpg&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px&quot; title=&quot;20100407_022&quot; border=&quot;0&quot; alt=&quot;20100407_022&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/20100407_022_thumb_73274FB6.jpg&quot; width=&quot;522&quot; height=&quot;360&quot; /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;You got to be kidding me. A plastic bag chewed up and stuffed into box so that “accessories won’t move around” (I presume so)? Well, at least I know what grocery store they go to… :)&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/20100407_025_1D961185.jpg&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px&quot; title=&quot;20100407_025&quot; border=&quot;0&quot; alt=&quot;20100407_025&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/20100407_025_thumb_1CC03C4C.jpg&quot; width=&quot;493&quot; height=&quot;469&quot; /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;Cool. Accessories. Hmmm, wall charger, really ugly headphones, USB cable that is not wrapped, nothing for standard TV connector, nothing for non-USB charger (compliance with chargers from models like N95), and 2 batteries. Wait a second, 2 batteries?! &lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/20100407_026_2B8D02D5.jpg&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px&quot; title=&quot;20100407_026&quot; border=&quot;0&quot; alt=&quot;20100407_026&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/20100407_026_thumb_11BB5D57.jpg&quot; width=&quot;490&quot; height=&quot;316&quot; /&gt;&lt;/a&gt;&amp;#160; &lt;/p&gt;  &lt;p&gt;Yeap. Well, then you lucky then. Extra battery. Great. But which one is the right one?… The one that is &lt;em&gt;made in China &lt;/em&gt;and &lt;em&gt;further processed in China &lt;/em&gt;or the one that is &lt;em&gt;made in Korea &lt;/em&gt;and &lt;em&gt;further processed in China&lt;/em&gt;. To make it even more confusing, the are not the same size (physical size)!&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/20100407_026_b_310094DB.jpg&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px&quot; title=&quot;20100407_026_b&quot; border=&quot;0&quot; alt=&quot;20100407_026_b&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/20100407_026_b_thumb_59355E9E.jpg&quot; width=&quot;497&quot; height=&quot;407&quot; /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;Let’s see what manual says.&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/20100407_027_6631CF60.jpg&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px&quot; title=&quot;20100407_027&quot; border=&quot;0&quot; alt=&quot;20100407_027&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/20100407_027_thumb_2A089469.jpg&quot; width=&quot;498&quot; height=&quot;358&quot; /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;Thanks goodness it’s in English. Not only you’ll get start using the phone, but also will get introduced to new N900. Oh, wait, shouldn’t it be vice versa? Just lets start reading. Ops.&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/20100407_029_672C4FEE.jpg&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px&quot; title=&quot;20100407_029&quot; border=&quot;0&quot; alt=&quot;20100407_029&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/20100407_029_thumb_790B746C.jpg&quot; width=&quot;565&quot; height=&quot;383&quot; /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;Ok. Lets get to table of contents, it will have English section there. Well, maybe&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/20100407_031_439542F8.jpg&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px&quot; title=&quot;20100407_031&quot; border=&quot;0&quot; alt=&quot;20100407_031&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/20100407_031_thumb_5091B3BA.jpg&quot; width=&quot;574&quot; height=&quot;434&quot; /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;Hmm, I know! I come from a place where you read from right-to-left, and books are opening on the opposite side. Who knows, maybe. &lt;/p&gt;  &lt;p&gt;Wow, surprise, surprise. How nice… environmentally friendly. Sure. I think RPC waste way more natural resources than it protects, but that’s another story.&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/20100407_032_35EA3903.jpg&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px&quot; title=&quot;20100407_032&quot; border=&quot;0&quot; alt=&quot;20100407_032&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/20100407_032_thumb_6BF148C1.jpg&quot; width=&quot;576&quot; height=&quot;347&quot; /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;Note that URL – it’s a real link, the only catch – N900 is not found there! Well, who needs a manual anyways, right? Lets pop the hardware!&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/20100407_036_2AE55A0E.jpg&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px&quot; title=&quot;20100407_036&quot; border=&quot;0&quot; alt=&quot;20100407_036&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/20100407_036_thumb_3CC47E8C.jpg&quot; width=&quot;569&quot; height=&quot;319&quot; /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;Wow, so many stickers to show it was tested for quality, yet nothing looks quality. Memory card reader looks really outdated, and sim card compartment, well, the door doesn’t actually holds the sim (normally done on cell phones), but only covers it. Let me see where the phone is made… hmm. Nowhere. I see.&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/20100407_037_0514550D.jpg&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px&quot; title=&quot;20100407_037&quot; border=&quot;0&quot; alt=&quot;20100407_037&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/20100407_037_thumb_026E2A0D.jpg&quot; width=&quot;244&quot; height=&quot;85&quot; /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;Let’s turn it on. Horrible experience. Yes, the image matches Nokia, but it is so lamely copied. Sound that came out of that “thing” was just shocking.&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/20100407_038_56512D1B.jpg&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px&quot; title=&quot;20100407_038&quot; border=&quot;0&quot; alt=&quot;20100407_038&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/20100407_038_thumb_488177D1.jpg&quot; width=&quot;521&quot; height=&quot;286&quot; /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;Alright. Lets see it in action. Wait a sec, why everything is looking wrong?&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/20100407_039_05390062.jpg&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px&quot; title=&quot;20100407_039&quot; border=&quot;0&quot; alt=&quot;20100407_039&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/20100407_039_thumb_692AD227.jpg&quot; width=&quot;532&quot; height=&quot;286&quot; /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;No sensor. Not that touch screen and resolution are that great.&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/20100407_040_78CFFE9A.jpg&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px&quot; title=&quot;20100407_040&quot; border=&quot;0&quot; alt=&quot;20100407_040&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/20100407_040_thumb_6F0A9722.jpg&quot; width=&quot;524&quot; height=&quot;281&quot; /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;Aha, that’s the trick. You have to open the phone, only then it rotates the content. Dumb. Really dumb. And UI/UX are HORRABLE. &lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/20100407_041_05603C68.jpg&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px&quot; title=&quot;20100407_041&quot; border=&quot;0&quot; alt=&quot;20100407_041&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/20100407_041_thumb_5292C6A4.jpg&quot; width=&quot;524&quot; height=&quot;405&quot; /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;Ok. So far I was making fun of it. Yet this is not funny. I wonder how many people are out there, thinking they are using real thing, but instead using a hazardous device? (I am sure this will fail any health test). And it’s not only phones these days. &lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2010-04-10T01:46:00Z" PublishedUtc="2014-04-19T20:31:52.314748Z" ModifiedUtc="2010-04-10T01:46:00Z" />
      <TagsPart Tags="Other" />
      <AutoroutePart Alias="nokia-n900" UseCustomPattern="false" />
      <TitlePart Title="Nokia N900" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=developer-computers" Status="Published">
      <BodyPart Text="&lt;p&gt;This is a thought I had to a &lt;a href=&quot;http://dougwagner.typepad.com/weblog/2010/04/new-developer-computers.html&quot; target=&quot;_blank&quot;&gt;post&lt;/a&gt; I read this morning. Doug, who’s running a company that does software development, has published a post about Developer Computers. It is interesting to observe developers position vs. business people position. Yes, developers want the latest and the greatest, and if possible, something that will be still up-to-date tomorrow. Business people often do the opposite; especially highlighting the fact that developer’s appetite for new hardware is not justifiable. Being developer myself, I’d like to show a few things, material for a thought.&lt;/p&gt;  &lt;p&gt;Developers are often (if not always) required to be highly efficient, productive, and make ROI as quick as possible. What developers use as a tool to create software? They use computers. Hardware it is. Now, imagine Formula 1 race driver to be expected to win a race with a “decent hardware”. Sounds ironic, doesn’t it? Well, let’s have a pick look at what (most of) developers run these days on the hardware to create software efficiently and with higher quality.&lt;/p&gt;  &lt;p&gt;At a company where CI is practiced, running build, unit tests, and code coverage is a normal thing. So it’s no longer “a single window you should stick to”, i.e. IDE. Here a question of a single monitor is arriving – do developers really need multiple monitors? Well, context switching is proved to be counter-productive. How about context switching with windows switching? Reading failed test message AND being able to see the source code that caused the test to fail is helpful. Less switching.&lt;/p&gt;  &lt;p&gt;How about the tools that we run? I cannot imagine developer working without tools for refactoring (Resharper or an equivalent tool). &lt;a href=&quot;http://www.jetbrains.com/resharper/download/&quot; target=&quot;_blank&quot;&gt;Resharper requirements&lt;/a&gt;, for instance, state it very clear:&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_062AFF1E.png&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: block; float: none; margin-left: auto; border-top: 0px; margin-right: auto; border-right: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_01484B62.png&quot; width=&quot;468&quot; height=&quot;136&quot; /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;http://www.microsoft.com/downloads/details.aspx?FamilyID=dc333ac8-596d-41e3-ba6c-84264e761b81&amp;amp;displaylang=en&quot; target=&quot;_blank&quot;&gt;Visual Studio .NET 2010 Beta 2&lt;/a&gt;:&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_4A01C426.png&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: block; float: none; margin-left: auto; border-top: 0px; margin-right: auto; border-right: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_2C234025.png&quot; width=&quot;559&quot; height=&quot;152&quot; /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;If you ever played a game on PC, you know that minimum requirements are never enough. And these are not games, but tools. If you use IDE and applying good practices (like a class per file, proper projects/solution structure, etc.) then number of files is quite significant. That means a lot of work OS has to do with files being consistently moved around, updated, created, deleted. I am not saying developers should take a coffee break they rename a widely used class in solution, but I do see the frustration they experience when such a logically trivial operation takes more than just a few seconds. Would you expect business folks to patiently wait for a web site page to load within just 10 minutes? Barely can imagine that. &lt;/p&gt;  &lt;p&gt;The bottom line is simple. If you want developers to be productive, allow them to concentrate on work by removing hardware impediments. &lt;a href=&quot;http://en.wikipedia.org/wiki/Moore%27s_law&quot; target=&quot;_blank&quot;&gt;Hardware is not as expensive as it used to be and is becoming cheaper and cheaper&lt;/a&gt;. Monitors, memory, hard disks, they are way cheaper than the valuable time it can save. Always consider if saving a buck today will cause you to pay ten tomorrow.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2010-04-03T18:01:00Z" PublishedUtc="2014-04-19T20:31:53.2678661Z" ModifiedUtc="2010-04-03T18:01:00Z" />
      <TagsPart Tags="Other" />
      <AutoroutePart Alias="developer-computers" UseCustomPattern="false" />
      <TitlePart Title="Developer Computers" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=pro-biztalk-2009" Status="Published">
      <BodyPart Text="&lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_78B35275.png&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: inline; margin-left: 0px; border-top: 0px; margin-right: 0px; border-right: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; align=&quot;right&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_01A2E4B5.png&quot; width=&quot;125&quot; height=&quot;164&quot; /&gt;&lt;/a&gt;I have finished reading &lt;a href=&quot;http://www.apress.com/book/view/9781430219811&quot; target=&quot;_blank&quot;&gt;Pro BizTalk 2009&lt;/a&gt; book from APress. This is a great book&amp;#160; if you’ve never dealt with BizTalk in the past and want to have a quick “on-ramp”. Although the book is very concerned about right way of building traditional BizTalk applications, it also dedicates a chapter to ESB Toolkit and does a good job in analyzing it. The fact that authors were concerned with subject such as coupling, hard-coding, automation, etc. makes it very interesting.&lt;/p&gt;  &lt;p&gt;One warning, if you are expecting to have a book that will guide you how to apply step by step examples, forget it. Nor this book does it, neither it’s possible due to multiple erratas found in it. I really was disappointed by the number of typos, inaccuracies, and technical mistakes. These kind of things turn readers away, especially when they had no experience with BT in the past. But this is the only bad thing about it. As for the rest – great content.&lt;/p&gt;  &lt;p&gt;Next week I am taking a deep dive course on BizTalk 2009. I really feel that this book has helped me a lot to get my feet wet. Next target will be ESB Tookit. To get to that, I will use what the book authors wrote “you have to understand how BizTalk as an engine works”. &lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2010-04-03T04:09:00Z" PublishedUtc="2014-04-19T20:31:54.0490992Z" ModifiedUtc="2010-04-03T04:09:00Z" />
      <TagsPart Tags="BizTalk,Books" />
      <AutoroutePart Alias="pro-biztalk-2009" UseCustomPattern="false" />
      <TitlePart Title="Pro BizTalk 2009" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=code-coverage-tool-new-kid-on-the-block" Status="Published">
      <BodyPart Text="&lt;p&gt;We are utilizing NCover to perform code coverage as a part of CI process on the build server. On development machines, at least for now, we don’t have it (which is a bummer). PartCover (a free alternative to NCover) is not there yet, so we waited till the right time would come to buy workstation licenses. It looks like the time is almost right. JetBrains has announced they will release &lt;a href=&quot;http://www.jetbrains.com/dotcover/&quot; target=&quot;_blank&quot;&gt;dotCover tool&lt;/a&gt; starting with the traditional EAP program (which is well known from R#). &lt;/p&gt;  &lt;p&gt;Personally, I am excited. Pretty sure the tool will rock and will give NCover some competition. Looking forward it!&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2010-03-31T01:40:00Z" PublishedUtc="2014-04-19T20:31:54.3772275Z" ModifiedUtc="2010-03-31T01:40:00Z" />
      <TagsPart Tags="Personal,TDD" />
      <AutoroutePart Alias="code-coverage-tool-new-kid-on-the-block" UseCustomPattern="false" />
      <TitlePart Title="Code Coverage Tool – New Kid on the Block" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=reminder-true-wcf-asynchronous-operation" Status="Published">
      <BodyPart Text="&lt;p&gt;A true asynchronous service operation is not the one that returns void, but the one that is &lt;strike&gt;marked as &lt;em&gt;IsOneWay=true &lt;/em&gt;&lt;/strike&gt;using BeginX/EndX asynchronous operations (thanks Krzysztof).&lt;/p&gt;  &lt;blockquote&gt;   &lt;p&gt;To support this sort of fire-and-forget invocation, Windows Communication Foundation offers one-way operations. After the client issues the call, Windows Communication Foundation generates a request message, but no correlated reply message will ever return to the client. As a result, one-way operations can't return values, and any exception thrown on the service side will not make its way to the client. &lt;strong&gt;One-way calls do not equate to asynchronous calls.&lt;/strong&gt; When one-way calls reach the service, they may not be dispatched all at once and may be queued up on the service side to be dispatched one at a time, all according to the service configured concurrency mode behavior and session mode. How many messages (whether one-way or request-reply) the service is willing to queue up is a product of the configured channel and the reliability mode. If the number of queued messages has exceeded the queue's capacity, then the client will block, even when issuing a one-way call. However, once the call is queued, the client is unblocked and can continue executing while the service processes the operation in the background. This usually gives the appearance of asynchronous calls.&lt;/p&gt;&lt;/blockquote&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2010-03-17T15:22:00Z" PublishedUtc="2014-04-19T20:31:54.6272597Z" ModifiedUtc="2010-03-17T15:22:00Z" />
      <TagsPart Tags="WCF" />
      <AutoroutePart Alias="reminder-true-wcf-asynchronous-operation" UseCustomPattern="false" />
      <TitlePart Title="Reminder: True WCF Asynchronous Operation" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=testdriven-net-gallio-moles" Status="Published">
      <BodyPart Text="&lt;p&gt;Can’t figure out how to run this combination. Anyone has it going?&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2010-03-17T04:59:00Z" PublishedUtc="2014-04-19T20:31:55.0334696Z" ModifiedUtc="2010-03-17T04:59:00Z" />
      <TagsPart Tags="TDD" />
      <AutoroutePart Alias="testdriven-net-gallio-moles" UseCustomPattern="false" />
      <TitlePart Title="TestDriven.NET+Gallio+Moles" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=biztalk-project-assemblyinfo-issue" Status="Published">
      <BodyPart Text="&lt;p&gt;Every new BizTalk project has the next line in AssemblyInfo.cs file:&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_5C555633.png&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: block; float: none; margin-left: auto; border-top: 0px; margin-right: auto; border-right: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_30385942.png&quot; width=&quot;772&quot; height=&quot;44&quot; /&gt;&lt;/a&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;The only way I could solve it was to instruct R# to ignore this error. &lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_3927EB81.png&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: block; float: none; margin-left: auto; border-top: 0px; margin-right: auto; border-right: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_42177DC0.png&quot; width=&quot;465&quot; height=&quot;158&quot; /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;Has anyone dealt with it differently?&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2010-03-16T17:37:00Z" PublishedUtc="2014-04-19T20:31:56.236571Z" ModifiedUtc="2010-03-16T17:37:00Z" />
      <TagsPart Tags="BizTalk" />
      <AutoroutePart Alias="biztalk-project-assemblyinfo-issue" UseCustomPattern="false" />
      <TitlePart Title="BizTalk Project: AssemblyInfo Issue" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=specflow" Status="Published">
      <BodyPart Text="&lt;p&gt;Specification based testing is kind of testing I prefer. Once in a while I like to see what’s available. This time, it was &lt;a href=&quot;http://specflow.org&quot; target=&quot;_blank&quot;&gt;SpecFlow&lt;/a&gt; framework. Based on &lt;a href=&quot;http://wiki.github.com/aslakhellesoy/cucumber/gherkin&quot; target=&quot;_blank&quot;&gt;Gherkin&lt;/a&gt; style specification, it creates your specs, nicely integrating with Visual Studio .NET (I used 2008). This is what an output of a test written with SpecFlow looks like in VS2008 (used R# 5 Beta 2 for as a test runner).&lt;/p&gt;  &lt;pre class=&quot;brush: text;&quot;&gt;Given I have entered 50 and 70 into the calculator&#xA;-&amp;gt; done: CalculatorStepDefinition.GivenIHaveEntered50And70IntoTheCalculator() (0.0s)&#xA;When I press add&#xA;-&amp;gt; done: CalculatorStepDefinition.WhenIPressAdd() (0.0s)&#xA;Then the result should be 120 on the screen&#xA;-&amp;gt; done: CalculatorStepDefinition.ThenTheResultShouldBe120OnTheScreen() (0.0s)&#xA;&#xA;1 passed, 0 failed, 0 skipped, took 1.75 seconds (NUnit 2.5.3).&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;(-&amp;gt; done lines are an ugly addition that looked like o&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_19CE93DA.png&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: inline; margin-left: 0px; border-top: 0px; margin-right: 0px; border-right: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; align=&quot;right&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_22BE2619.png&quot; width=&quot;269&quot; height=&quot;140&quot; /&gt;&lt;/a&gt;thers didn’t have. Either it was the new R# or something else). In overall, it’s a nice attempt to bring pure specification, readable and meaningful into code. I didn’t like the fact that there were so many artifacts to manage around though. On top of that, refactoring scenarios is not the most pleasant thing in the world, as technically I had to regenerate CalculatorStepDefinition.cs file. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Currently, out of box, SpecFlow is coupled to NUnit, but this is probably something that is just matter of templates re-configuration. I like the attempt, though would not use it on a project that is entirely developed with TDD and is frequently reworked. &lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2010-03-08T04:15:00Z" PublishedUtc="2014-04-19T20:31:56.8773466Z" ModifiedUtc="2010-03-08T04:15:00Z" />
      <TagsPart Tags="TDD" />
      <AutoroutePart Alias="specflow" UseCustomPattern="false" />
      <TitlePart Title="SpecFlow" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=reporting-with-nhibernate" Status="Published">
      <BodyPart Text="&lt;p&gt;About over a year+ we had a little application that was leveraging NHibernate for a simple domain. Along all the requirements, one was to generate a pre-defined report with a few simple filters on it. Initial thought was to leverage the same domain we’ve worked out and build report based on that. It was obviously not the best solution there, but once we got the profiling, it was obviously the worse one we could come up with. Re-hydrating entities for reporting was a little bit of a waste. So what would be an alternative without re-investing a lot? We ended up re-using same NHibernate, but in a slightly different manner.&lt;/p&gt;  &lt;p&gt;NHibernate has an option to execute raw SQL queries, option exposed through &lt;em&gt;ISession.CreateSQLQuery(sql_statement)&lt;/em&gt;. The returned &lt;em&gt;ISQLQuery &lt;/em&gt;object exposes functionality &lt;em&gt;SetResultTransformer(IResultTransformer) &lt;/em&gt;that can be used to (quoting NHibernate documentation) “”change” the shape of query result”. Let’s look into it.&lt;/p&gt;  &lt;p&gt;To start-off, we’ll define our Report Data transformer, based on the ReportDataDto&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_40D442B7.png&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_22F5BEB6.png&quot; width=&quot;490&quot; height=&quot;112&quot; /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;This DTO is going to present what the report has to show – post ID, post title, and first 50 characters for a post body as a preview, followed by ellipsis. ERD derived from the domain entities is a bit more reach with attributes, and has association, which for the given report we intentionally want to remove.&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_423AF63A.png&quot;&gt;&lt;img style=&quot;border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_4B2A8879.png&quot; width=&quot;560&quot; height=&quot;165&quot; /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;Also, we want to have a meaningful name for body preview in the DTO, and that will be an alias change, that we’ll have to capture in result transformer.&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;&amp;#160; &lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_185A8205.png&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_32BD05CD.png&quot; width=&quot;856&quot; height=&quot;560&quot; /&gt;&lt;/a&gt;   &lt;p&gt;&lt;/p&gt;  &lt;p&gt;(&lt;em&gt;IReportDataDtoTransformer &lt;/em&gt;is extending NHibernate’s &lt;em&gt;IResultTransformer&lt;/em&gt;)&lt;/p&gt;  &lt;p&gt;At this point we are done with &amp;quot;“changing” the shape of results&amp;quot;. All we need is to get the results. This is a sample only, therefore query will be embedded within the code, where normally it would be externalized with or without parameters, depends on requirements.&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_02298815.png&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_43C65512.png&quot; width=&quot;928&quot; height=&quot;448&quot; /&gt;&lt;/a&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;Execution of this query is literally execution of the SELECT statement defined in SQL statement. No entities are created, but simple dumb DTOs. No state management, no overheads, plain data in objects form for reporting purpose.&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_5368F0D4.png&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_50C2C5D4.png&quot; width=&quot;703&quot; height=&quot;134&quot; /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;This is definitely one of the ways to accomplish the task, and not the only. It is not suitable for complex and dynamic report, but efficient and quick for static ones. Our new college, Dragosh, has proposed to look into read-only NHibernate session and leverage LINQ 2 NHibernate to accomplish the same result, but using entities. I haven’t looked into that, but definitely worth experimenting. &lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2010-02-25T07:51:00Z" PublishedUtc="2014-04-19T20:31:58.7990469Z" ModifiedUtc="2010-02-25T07:51:00Z" />
      <TagsPart Tags="NHibernate" />
      <AutoroutePart Alias="reporting-with-nhibernate" UseCustomPattern="false" />
      <TitlePart Title="Reporting with NHibernate?…" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=asp-net-webformsmvp" Status="Published">
      <BodyPart Text="&lt;p&gt;First it was classic ASP, then ASP.NET with WebForms. At the previous company I used to work with it implementing Model-View-Presenter. Since then, I have not touched web development a lot. A lot has changed, and the biggest addition was ASP.NET MVC Framework. Now, there’s a new kid on the blog, that gives ASP.NET WebForms a second change – &lt;a href=&quot;http://webformsmvp.com/&quot; target=&quot;_blank&quot;&gt;WebFormsMVP&lt;/a&gt;. Check it out.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2010-02-22T04:22:00Z" PublishedUtc="2014-04-19T20:31:59.0959107Z" ModifiedUtc="2010-02-22T04:22:00Z" />
      <TagsPart Tags="ASP.NET" />
      <AutoroutePart Alias="asp-net-webformsmvp" UseCustomPattern="false" />
      <TitlePart Title="ASP.NET WebFormsMVP" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=cortex-bdd-test-framework" Status="Published">
      <BodyPart Text="&lt;p&gt;Back in 2008 I joined &lt;a href=&quot;http://www.cortex.net&quot; target=&quot;_blank&quot;&gt;Cortex&lt;/a&gt;. I was lucky to join a dynamic and growing development team, not afraid of experimenting and pushing the boundaries of Test-driven development. We were on the learning curve from classical state and interaction-based testing to something bigger. &lt;a href=&quot;http://www.connicus.com/&quot; target=&quot;_blank&quot;&gt;Terry&lt;/a&gt; and I started to look into ways to reduce the friction and repetition of test initialization and mocking framework usage (RhinoMocks at that time). This was the beginning of the BDD (behavior-driven development) test framework at Cortex that has since evolved into our standard for all of the projects.&lt;/p&gt;  &lt;p&gt;Over time, the Cortex BDD test framework had evolved and grown, thanks to the entire team consistently improving upon the initial designs. I am excited to see it going public at the &lt;a href=&quot;http://www.dotnetcalgary.com/&quot; target=&quot;_blank&quot;&gt;Calgary .NET user group&lt;/a&gt; presentation that will take on February 25&lt;sup&gt;th&lt;/sup&gt;, presented by our colleague, &lt;a href=&quot;http://davidmorgantini.blogspot.com/&quot; target=&quot;_blank&quot;&gt;David&lt;/a&gt;. &lt;/p&gt;  &lt;p&gt;If you are doing classic TDD or looking into BDD, I encourage you to attend the presentation to see what we are doing. &lt;/p&gt;  &lt;p&gt;See you all there!&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2010-02-19T16:49:00Z" PublishedUtc="2014-04-19T20:31:59.5959025Z" ModifiedUtc="2010-02-19T16:49:00Z" />
      <TagsPart Tags=".NET,Other,TDD" />
      <AutoroutePart Alias="cortex-bdd-test-framework" UseCustomPattern="false" />
      <TitlePart Title="Cortex BDD Test Framework" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=software-quality" Status="Published">
      <BodyPart Text="&lt;p&gt;Lately I’m involved in a side project for my son’s school web site. It is a simply &lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_341A311E.png&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: inline; margin-left: 0px; border-top: 0px; margin-right: 0px; border-right: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; align=&quot;right&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_7A2D7EE2.png&quot; width=&quot;317&quot; height=&quot;686&quot; /&gt;&lt;/a&gt;basic thing and my part was to observe that the school gets a final result that is possibly to maintain and grow when needed. Decision was made to go with a specific “service provider” that would create the solution. It was agreed on ASP.NET 3.5 – simple.&lt;/p&gt;  &lt;p&gt;Boy was I surprised by incompetence and, what’s worse, by unbelievable lies, the school was fed during some 4 weeks of the project. &lt;/p&gt;  &lt;p&gt;Project was running on &lt;a href=&quot;www.assembla.com&quot; target=&quot;_blank&quot;&gt;Assembla&lt;/a&gt; (for Subversion repository). “Service provider” has provided us with the following final result, where a quite a few files were just plain missing… The cool part was the answers from the “service provider” for a few questions I threw out there to question there credibility. For example, the awesome answer to my question “how come files were missing” and Default.aspx as a concrete example, the answer was: &lt;/p&gt;  &lt;p&gt;&lt;em&gt;“The Default page is not being used so we have not committed to the repository.”&lt;/em&gt;&lt;/p&gt;  &lt;p&gt;Amazing. Now these people claim to have “hundreds of successfully delivered projects”. Right…&lt;/p&gt;  &lt;p&gt;Bottom line – software business is one of those where a nice wrapper can deceive a client about the quality of solution sold. Looks like some “solution providers” are taking advantage of that, completely ruining opinion about software development in general.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2010-02-19T07:52:00Z" PublishedUtc="2014-04-19T20:32:00.189654Z" ModifiedUtc="2010-02-19T07:52:00Z" />
      <TagsPart Tags="Other" />
      <AutoroutePart Alias="software-quality" UseCustomPattern="false" />
      <TitlePart Title="Software Quality" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=automate-it" Status="Published">
      <BodyPart Text="&lt;p&gt;Development, QA, Deployment, Production Support, Infrastructure,… it doesn’t matter what aspect of software you are affiliated with. Automation is your best friend. And if it is not, you are living a worse nightmare without yet realizing it.&lt;/p&gt;  &lt;p&gt;Our team is striving to as much automation as possible, where possible. But how much automation you can be satisfied with? The sky is the limit. You start seeing ROI of automation a little down the road, probably 3 to 6 months after you’ve committed to apply it no matter how difficult it is.&lt;/p&gt;  &lt;p&gt;Automating development is somewhat simple. You can follow principles applied in the code (SRP, No-Duplication, etc) and way you go. Build scripts to automate compilation, right tools to avoid re-inventing a wheel, and so forth. &lt;/p&gt;  &lt;p&gt;Deployment can be automated fluently with development. CI helps that a lot. Build server can be an initial trigger and the appetite kicks in, where you want more and more of that ‘great stuff’.&lt;/p&gt;  &lt;p&gt;Production support IMHO is a bit trickier. There you need to satisfy your hidden customer that support the applications. A good way is to become partners. They have to live on a daily basis with what we create, so they need to be a part of equation, not ignored.&amp;#160; Once they are, they can be given tools and ways to automate and streamline their work, causing in overall product line to improve.&lt;/p&gt;  &lt;p&gt;Infrastructure does not live in a separate universe. It’s a part of the same game. Proper infrastructure vital for proper QA and quick development. After all, if you spin your wheels on something that not even a bug, what good does it make?&lt;/p&gt;  &lt;p&gt;QA automation IMO is as possible and important as development. After all, QAs are trying to verify that application is working as expected by customers and developers both. Therefore, they need as effective ways to perform their tasks as developers. They also need to be able to do it in a timely fashioned manner, which with growing complexity of user requested features cannot be achieved without automation.&lt;/p&gt;  &lt;p&gt;Button line – if you are in software business and have no automation on you radar, you are either living last days of your prehistoric existence, or excessively wasting your clients money and trust. Adopt the change, automate it!&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2010-02-15T02:36:00Z" PublishedUtc="2014-04-19T20:32:00.5493194Z" ModifiedUtc="2010-02-15T02:36:00Z" />
      <TagsPart Tags="Agile" />
      <AutoroutePart Alias="automate-it" UseCustomPattern="false" />
      <TitlePart Title="Automate It!" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=nosql-is-gaining-weight" Status="Published">
      <BodyPart Text="&lt;p&gt;Looks like more people are looking into OODB. &lt;a href=&quot;http://blog.wekeroad.com/2010/02/06/nosql-a-practical-approach-part-1&quot; target=&quot;_blank&quot;&gt;This post&lt;/a&gt; I found recently is experimenting with db4o, as well as has a healthy discussion in the comments section. This is ties into what I &lt;a href=&quot;http://weblogs.asp.net/sfeldman/archive/2009/04/23/sick-of-relational-databases.aspx&quot; target=&quot;_blank&quot;&gt;felt&lt;/a&gt; and &lt;a href=&quot;http://weblogs.asp.net/sfeldman/archive/2009/04/25/db4o.aspx&quot; target=&quot;_blank&quot;&gt;thought&lt;/a&gt; a while ago after reading a book on &lt;a href=&quot;http://weblogs.asp.net/sfeldman/archive/2009/04/25/db4o.aspx&quot; target=&quot;_blank&quot;&gt;db4o&lt;/a&gt;.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2010-02-15T02:19:00Z" PublishedUtc="2014-04-19T20:32:00.8305926Z" ModifiedUtc="2010-02-15T02:19:00Z" />
      <TagsPart Tags="OO,Other" />
      <AutoroutePart Alias="nosql-is-gaining-weight" UseCustomPattern="false" />
      <TitlePart Title="NoSQL is Gaining Weight" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=armada" Status="Published">
      <BodyPart Text="&lt;p&gt;If you are into trance music, check &lt;a href=&quot;http://www.armadamusic.com/&quot; target=&quot;_blank&quot;&gt;armadamusic&lt;/a&gt; out.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2010-02-10T14:53:00Z" PublishedUtc="2014-04-19T20:32:01.0646334Z" ModifiedUtc="2010-02-10T14:53:00Z" />
      <TagsPart Tags="Personal" />
      <AutoroutePart Alias="armada" UseCustomPattern="false" />
      <TitlePart Title="armada" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=educating-kids" Status="Published">
      <BodyPart Text="&lt;p&gt;This is a &lt;a href=&quot;http://vimeo.com/8550868&quot; target=&quot;_blank&quot;&gt;good joke&lt;/a&gt;. As always, in every joke, there’s a lot of truth.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2010-02-02T14:34:00Z" PublishedUtc="2014-04-19T20:32:01.283388Z" ModifiedUtc="2010-02-02T14:34:00Z" />
      <TagsPart Tags="Personal" />
      <AutoroutePart Alias="educating-kids" UseCustomPattern="false" />
      <TitlePart Title="Educating Kids" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=what-s-wrong-with-this-clock" Status="Published">
      <BodyPart Text="&lt;p&gt;The question came from my son… and he was right. There’s something wrong with it.&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/clock_76B00276.png&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: block; float: none; margin-left: auto; border-top: 0px; margin-right: auto; border-right: 0px&quot; title=&quot;clock&quot; border=&quot;0&quot; alt=&quot;clock&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/clock_thumb_3F39CB7B.png&quot; width=&quot;240&quot; height=&quot;240&quot; /&gt;&lt;/a&gt;&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2010-01-24T23:03:00Z" PublishedUtc="2014-04-19T20:32:01.7208796Z" ModifiedUtc="2010-01-24T23:03:00Z" />
      <TagsPart Tags="Other" />
      <AutoroutePart Alias="what-s-wrong-with-this-clock" UseCustomPattern="false" />
      <TitlePart Title="What’s Wrong With This Clock?" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=knowledge-of-the-past" Status="Published">
      <BodyPart Text="&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;2&quot; width=&quot;538&quot;&gt;&lt;tbody&gt;     &lt;tr&gt;       &lt;td valign=&quot;top&quot; width=&quot;290&quot;&gt;I just got rid of all old DVDs with interactive learning. Funny how fast technology becomes outdated, yet principles never change. I also stopped using interactive courses long time ago, as they become a bit useless – a contemporary tech. books, blogs and webinars are definitely enough to get your feet wet in new technologies.&amp;#160; &lt;/td&gt;        &lt;td valign=&quot;top&quot; width=&quot;246&quot;&gt;         &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/learningcds_6E241769.jpg&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: inline; margin-left: 0px; border-top: 0px; margin-right: 0px; border-right: 0px&quot; title=&quot;OLYMPUS DIGITAL CAMERA         &quot; border=&quot;0&quot; alt=&quot;OLYMPUS DIGITAL CAMERA         &quot; align=&quot;right&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/learningcds_thumb_0BB5F269.jpg&quot; width=&quot;240&quot; height=&quot;240&quot; /&gt;&lt;/a&gt; &lt;/p&gt;       &lt;/td&gt;     &lt;/tr&gt;   &lt;/tbody&gt;&lt;/table&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2010-01-23T19:21:00Z" PublishedUtc="2014-04-19T20:32:02.7677478Z" ModifiedUtc="2010-01-23T19:21:00Z" />
      <TagsPart Tags="Other" />
      <AutoroutePart Alias="knowledge-of-the-past" UseCustomPattern="false" />
      <TitlePart Title="Knowledge of the Past" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=generating-assemblyinfo-with-nant-gotha" Status="Published">
      <BodyPart Text="&lt;p&gt;As a part of the build script I tend to generate AssemblyInfo.cs in order to inject assembly information dynamically, such as version, name, etc. One gotcha I ran into lately, is when you have internals that are testable and need to generate that information from NAnt as well.&lt;/p&gt;  &lt;p&gt;Normally, the code in AssemblyInfo.cs wood look like this:&lt;/p&gt;  &lt;div id=&quot;codeSnippetWrapper&quot;&gt;   &lt;div style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot; id=&quot;codeSnippet&quot;&gt;     &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;[assembly: InternalsVisibleTo(&lt;span style=&quot;color: #006080&quot;&gt;&amp;quot;Project.Test&amp;quot;&lt;/span&gt;)]&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;NAnt fails. Reason - NAnt is requires full class name, which is &lt;em&gt;InternalsVisibleToAttribute&lt;/em&gt;, so that the line of code showed above looks like this:&lt;/p&gt;&#xA;&#xA;&lt;div id=&quot;codeSnippetWrapper&quot;&gt;&#xA;  &lt;div style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot; id=&quot;codeSnippet&quot;&gt;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;[assembly: InternalsVisibleToAttribute(&lt;span style=&quot;color: #006080&quot;&gt;&amp;quot;Project.Test&amp;quot;&lt;/span&gt;)]&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&lt;/div&gt;&#xA;&lt;/div&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2010-01-23T03:41:00Z" PublishedUtc="2014-04-19T20:32:03.0489836Z" ModifiedUtc="2010-01-23T03:41:00Z" />
      <TagsPart Tags=".NET,CI" />
      <AutoroutePart Alias="generating-assemblyinfo-with-nant-gotha" UseCustomPattern="false" />
      <TitlePart Title="Generating AssemblyInfo with NAnt Gotcha" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=nhibernate-session-factory" Status="Published">
      <BodyPart Text="&lt;p&gt;Each time we use NHibernate, we have to share production and semi-production code for NHibernate &lt;em&gt;SessionFactory&lt;/em&gt;. Production code is the portion that is actually responsible to generate the &lt;em&gt;SessionFactory &lt;/em&gt;on startup. Semi-production code, is the code that generates &lt;em&gt;SessionFactory &lt;/em&gt;for purpose of schema extraction (SQL statements we use to generate DB). This time around, the smell had to be removed. Having identical code duplicated not only risky, but also becomes intolerable once it grows beyond a single line. This is our new SessionBuilder, that leverages the same code to generate &lt;strong&gt;SessionFactory &lt;/strong&gt;for run-time purpose and schema generation at “design” time.&lt;/p&gt;  &lt;div id=&quot;codeSnippetWrapper&quot;&gt;   &lt;div style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot; id=&quot;codeSnippet&quot;&gt;     &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;static&lt;/span&gt; ISessionFactory sessionFactory;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;private&lt;/span&gt; ISession session;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&amp;#160;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;public&lt;/span&gt; ISession GetSession()&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;{&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;  Initialize();&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;  &lt;span style=&quot;color: #0000ff&quot;&gt;if&lt;/span&gt; (session == &lt;span style=&quot;color: #0000ff&quot;&gt;null&lt;/span&gt;)&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;    session = sessionFactory.OpenSession();&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&amp;#160;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;  &lt;span style=&quot;color: #0000ff&quot;&gt;return&lt;/span&gt; session;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;}&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&amp;#160;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;void&lt;/span&gt; CloseSession()&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;{&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;  &lt;span style=&quot;color: #0000ff&quot;&gt;if&lt;/span&gt; (session.IsNull())&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;    &lt;span style=&quot;color: #0000ff&quot;&gt;return&lt;/span&gt;;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&amp;#160;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;  session.Close();&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;  session.Dispose();&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;  session = &lt;span style=&quot;color: #0000ff&quot;&gt;null&lt;/span&gt;;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;}&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&amp;#160;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;void&lt;/span&gt; Initialize()&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;{&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;  &lt;span style=&quot;color: #0000ff&quot;&gt;if&lt;/span&gt; (sessionFactory.IsNull())&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;    sessionFactory = GetProjectNHibernateConfiguraton().BuildSessionFactory();&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;}&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&amp;#160;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;static&lt;/span&gt; FluentConfiguration GetProjectNHibernateConfiguraton()&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;{&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;  var nhibernateConfiguration = &lt;span style=&quot;color: #0000ff&quot;&gt;new&lt;/span&gt; Configuration().Configure();&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&amp;#160;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;  var model = AutoMap.AssemblyOf&amp;lt;Entity&amp;gt;().IgnoreBase&amp;lt;Entity&amp;gt;()&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;    .Where(type =&amp;gt; &lt;span style=&quot;color: #0000ff&quot;&gt;typeof&lt;/span&gt; (Entity).IsAssignableFrom(type))&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;    .Conventions.AddFromAssemblyOf&amp;lt;Entity&amp;gt;()&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;    .UseOverridesFromAssemblyOf&amp;lt;Entity&amp;gt;();&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&amp;#160;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;  &lt;span style=&quot;color: #0000ff&quot;&gt;return&lt;/span&gt; Fluently.Configure(nhibernateConfiguration)&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;    .Mappings(mappingConfiguration =&amp;gt; mappingConfiguration.AutoMappings.Add(model));&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;}&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&amp;#160;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #cc6633&quot;&gt;#region&lt;/span&gt; Manually used to generate DB schema SQL scripts&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&amp;#160;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;p&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;internal&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;string&lt;/span&gt; DROP_SCHEMA_SQL_SCRIPT_NAME = &lt;/p&gt;&lt;p&gt;  &lt;span style=&quot;color: #0000ff&quot;&gt;new&lt;/span&gt; FileInfo(Path.Combine(Path.GetTempPath(), &lt;span style=&quot;color: #006080&quot;&gt;&amp;quot;Schema_Drop.sql&amp;quot;&lt;/span&gt;)).FullName;&lt;/p&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;p&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;internal&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;string&lt;/span&gt; CREATE_SCHEMA_SQL_SCRIPT_NAME = &lt;/p&gt;&lt;p&gt;  &lt;span style=&quot;color: #0000ff&quot;&gt;new&lt;/span&gt; FileInfo(Path.Combine(Path.GetTempPath(), &lt;span style=&quot;color: #006080&quot;&gt;&amp;quot;Schema_Create.sql&amp;quot;&lt;/span&gt;)).FullName;&lt;/p&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&amp;#160;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #008000&quot;&gt;/// &amp;lt;summary&amp;gt;Use TestDriven.Net to run this method as a test to generate SQL scripts and their files.&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;internal&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;void&lt;/span&gt; Generate_Database_Schema_and_Create_SQL_script_files()&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;{&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;  GetProjectNHibernateConfiguraton()&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;    .ExposeConfiguration(SchemaGenerator)&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;    .BuildSessionFactory();&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;}&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&amp;#160;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;void&lt;/span&gt; SchemaGenerator(Configuration configuration)&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;{&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;  var schemaExport = &lt;span style=&quot;color: #0000ff&quot;&gt;new&lt;/span&gt; SchemaExport(configuration);&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;  schemaExport.SetOutputFile(DROP_SCHEMA_SQL_SCRIPT_NAME).Drop(&lt;span style=&quot;color: #0000ff&quot;&gt;true&lt;/span&gt;, &lt;span style=&quot;color: #0000ff&quot;&gt;false&lt;/span&gt;);&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;  schemaExport.SetOutputFile(CREATE_SCHEMA_SQL_SCRIPT_NAME).Create(&lt;span style=&quot;color: #0000ff&quot;&gt;true&lt;/span&gt;, &lt;span style=&quot;color: #0000ff&quot;&gt;false&lt;/span&gt;);&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;}&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&amp;#160;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #cc6633&quot;&gt;#endregion&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;Region represents the “design-time” code. And I was using Fluent NHibernate with auto-mapping to generate the entities.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2010-01-23T03:39:00Z" PublishedUtc="2014-04-19T20:32:03.3927297Z" ModifiedUtc="2010-01-23T03:39:00Z" />
      <TagsPart Tags="NHibernate" />
      <AutoroutePart Alias="nhibernate-session-factory" UseCustomPattern="false" />
      <TitlePart Title="NHibernate Session Factory" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=blogging-as-a-recruiting-tool" Status="Published">
      <BodyPart Text="&lt;p&gt;We got two good developers applied and accepted to the company from what it looks through my blog. I have posted about 2 weeks ago that we are looking for developers. This is great! We need more people. &lt;a href=&quot;http://weblogs.asp.net/sfeldman/archive/2010/01/08/looking-for-good-developers.aspx&quot; target=&quot;_blank&quot;&gt;Same call&lt;/a&gt; is still active.&lt;/p&gt;  &lt;p&gt;Oh, and it tells me someone out there is actually reading the blog :)&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2010-01-22T04:51:00Z" PublishedUtc="2014-04-19T20:32:03.8927315Z" ModifiedUtc="2010-01-22T04:51:00Z" />
      <TagsPart Tags="Other" />
      <AutoroutePart Alias="blogging-as-a-recruiting-tool" UseCustomPattern="false" />
      <TitlePart Title="Blogging as a Recruiting Tool" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=clipboard-on-the-net" Status="Published">
      <BodyPart Text="&lt;p&gt;I like the idea of being able to copy something and paste it on the net. It’s handy, no registration is required, and it’s temporary, just as clipboard supposed to be.&lt;/p&gt;  &lt;p&gt;I use &lt;a href=&quot;http://www.imgplace.com/&quot; target=&quot;_blank&quot;&gt;imbPlace.com&lt;/a&gt; for images. Does anyone knows similar service for C# code snippets? &lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2010-01-14T15:00:00Z" PublishedUtc="2014-04-19T20:32:04.1583495Z" ModifiedUtc="2010-01-14T15:00:00Z" />
      <TagsPart Tags="Other" />
      <AutoroutePart Alias="clipboard-on-the-net" UseCustomPattern="false" />
      <TitlePart Title="Clipboard on the Net" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=creative-wedding-ceremony" Status="Published">
      <BodyPart Text="&lt;p&gt;Another case of creativity that makes you smile.&lt;/p&gt;  &lt;div style=&quot;padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px&quot; id=&quot;scid:5737277B-5D6D-4f48-ABFC-DD9C333F4C5D:5ee8b798-015a-4981-865e-86528b814d0f&quot; class=&quot;wlWriterEditableSmartContent&quot;&gt;&lt;div&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=4-94JhLEiN0&quot; target=&quot;_new&quot;&gt;&lt;img src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/video7af65db693c8_60534789.jpg&quot; style=&quot;border-style: none&quot; galleryimg=&quot;no&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;  &lt;p&gt;And well, for every good start, there’s more to come :D&lt;/p&gt;  &lt;div style=&quot;padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px&quot; id=&quot;scid:5737277B-5D6D-4f48-ABFC-DD9C333F4C5D:191864f3-d987-49d3-8d77-9d32ccce7873&quot; class=&quot;wlWriterEditableSmartContent&quot;&gt;&lt;div&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=zbr2ao86ww0&amp;amp;NR=1&quot; target=&quot;_new&quot;&gt;&lt;img src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/videob2644dbbbd37_568DE011.jpg&quot; style=&quot;border-style: none&quot; galleryimg=&quot;no&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2010-01-11T00:05:00Z" PublishedUtc="2014-04-19T20:32:04.8302112Z" ModifiedUtc="2010-01-11T00:05:00Z" />
      <TagsPart Tags="Other" />
      <AutoroutePart Alias="creative-wedding-ceremony" UseCustomPattern="false" />
      <TitlePart Title="Creative Wedding Ceremony" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=net-free-obfuscation-tool" Status="Published">
      <BodyPart Text="&lt;p&gt;Looking for help. I am trying to select a good .NET obfuscator tool that has to be:&lt;/p&gt;  &lt;ol&gt;   &lt;li&gt;Free&lt;/li&gt;&lt;li&gt;Supported (still developed)&lt;br&gt;&lt;/li&gt;    &lt;li&gt;Work well with command line (for automated build script)&lt;/li&gt;    &lt;li&gt;Be flexible enough (configurable for options)&lt;/li&gt; &lt;/ol&gt;  &lt;p&gt;Right now &lt;a href=&quot;http://code.google.com/p/babelobfuscator/&quot; mce_href=&quot;http://code.google.com/p/babelobfuscator/&quot; target=&quot;_blank&quot;&gt;Babel Obfuscator&lt;/a&gt; looks good. My decision was based on analysis of possible tools listed on &lt;a href=&quot;http://en.wikipedia.org/wiki/Comparison_of_.net_obfuscators&quot; mce_href=&quot;http://en.wikipedia.org/wiki/Comparison_of_.net_obfuscators&quot; target=&quot;_blank&quot;&gt;this wiki&lt;/a&gt;. In case you have some input that can help me to do a better choice, feel free to leave comments. Appreciated.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2010-01-10T18:34:00Z" PublishedUtc="2014-04-19T20:32:05.3927027Z" ModifiedUtc="2010-01-10T18:34:00Z" />
      <TagsPart Tags=".NET" />
      <AutoroutePart Alias="net-free-obfuscation-tool" UseCustomPattern="false" />
      <TitlePart Title=".NET Free Obfuscation Tool" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=httplistener-and-iis-to-listen-to-https-traffic-connections-simultaneously" Status="Published">
      <BodyPart Text="&lt;p&gt;HttpListener provided with .NET version 2.0 and up allow to build a custom HTTP server based application without need to have IIS installed on machine. This can be handy in some scenarios, where IIS cannot fit it. HttpListener can handle normal HTTP traffic, as well as HTTPS (secure). Once details that is hard to find online, is the fact that there’s a conflict between IIS and HttpListener to listen simultaneously to port 443 despite &lt;strong&gt;different &lt;/strong&gt;prefixes being used. After digging for a while, the answer was found. Apparently, Windows 2003 is coming with IIS 6.0 and Windows XP comes with IIS 5.1. That little details does the difference (underlying implementation in HTTP.SYS looks like).&lt;/p&gt;  &lt;p&gt;Hopefully this saves time to those that ran into case.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2010-01-09T18:27:00Z" PublishedUtc="2014-04-19T20:32:06.5653535Z" ModifiedUtc="2010-01-09T18:27:00Z" />
      <TagsPart Tags=".NET" />
      <AutoroutePart Alias="httplistener-and-iis-to-listen-to-https-traffic-connections-simultaneously" UseCustomPattern="false" />
      <TitlePart Title="HttpListener and IIS to Listen to HTTPS Traffic Connections Simultaneously" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=2-5" Status="Published">
      <BodyPart Text="&lt;p&gt;&lt;em&gt;This is personal content post.&lt;/em&gt;&lt;/p&gt;  &lt;p&gt;Yesterday I celebrated my birthday. My son, who’s almost six and is discovering the beauty of math, asked me how old I will be this birthday. On what I decided to puzzle him a bit and answered “two in power of five” (he knows plus, minus, multiplication and that’s it). To my surprise, he had an answer figured for himself quite fast. “Dad, so you are really young! 25 only, cool.”&lt;/p&gt;  &lt;p&gt;I never had a chance to reflect back, but looking at things now, Liam and Liz were the best gifts I got from my wife. &lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2010-01-09T18:20:00Z" PublishedUtc="2014-04-19T20:32:06.8926839Z" ModifiedUtc="2010-01-09T18:20:00Z" />
      <TagsPart Tags="Personal" />
      <AutoroutePart Alias="2-5" UseCustomPattern="false" />
      <TitlePart Title="2^5" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=looking-for-good-developers" Status="Published">
      <BodyPart Text="&lt;p&gt;If you are from Calgary area, and willing to join .NET team for &lt;a href=&quot;http://www.cortex.net&quot; target=&quot;_blank&quot;&gt;enterprise development&lt;/a&gt; – let me know. We are using .NET, BDD development style, not bleeding, but quite on the edge. If you like to develop quality software, and agile process is what you want, send me your resume at feldman [dot] sean [dot] work [at] gmail [dot] com. &lt;/p&gt;  &lt;p&gt;On this note, we are also looking for a great system administrator that would rock virtualization.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2010-01-09T03:19:00Z" PublishedUtc="2014-04-19T20:32:07.7207987Z" ModifiedUtc="2010-01-09T03:19:00Z" />
      <TagsPart Tags="Other" />
      <AutoroutePart Alias="looking-for-good-developers" UseCustomPattern="false" />
      <TitlePart Title="Looking for Good Developers" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=windows-7-god-mode" Status="Published">
      <BodyPart Text="&lt;p&gt;This is really funny. A friend of mine forwarded a link, where a little Windows 7 trick is described to get management links in one folder for Windows 7 system. Steps to reproduce are simple:&lt;/p&gt;  &lt;p&gt;Create a folder with name &lt;b&gt;GodMode.{ED7BA470-8E54-465E-825C-99712043E01C}&lt;/b&gt;&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_49B69374.png&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: block; float: none; margin-left: auto; border-top: 0px; margin-right: auto; border-right: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_4DC371F7.png&quot; width=&quot;379&quot; height=&quot;137&quot; /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;This is what the folder looks like inside and the list was quite long (274 items):&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_3DB733F1.png&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: block; float: none; margin-left: auto; border-top: 0px; margin-right: auto; border-right: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_45D0F0F7.png&quot; width=&quot;579&quot; height=&quot;772&quot; /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;That can be handy :)&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2010-01-07T01:02:00Z" PublishedUtc="2014-04-19T20:32:08.7989137Z" ModifiedUtc="2010-01-07T01:02:00Z" />
      <TagsPart Tags="Other" />
      <AutoroutePart Alias="windows-7-god-mode" UseCustomPattern="false" />
      <TitlePart Title="Windows 7 – God Mode?" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=log4net-configurable-custom-properties" Status="Published">
      <BodyPart Text="&lt;p&gt;log4net is a great facility to create logs. When it comes to extending it, it’s good as well. To add a custom property to a custom appender that can be configured from configuration XML file is so simple, that it even looks suspicious. &lt;/p&gt;  &lt;p&gt;Custom appender class has to define a read/write property publicly exposed. That’s it. Let’s say that property name is “ApplicationVersion”. To configuration looks like this:&lt;/p&gt;  &lt;div style=&quot;border-bottom: silver 1px solid; text-align: left; border-left: silver 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; max-height: 200px; font-size: 8pt; overflow: auto; border-top: silver 1px solid; cursor: text; border-right: silver 1px solid; padding-top: 4px&quot; id=&quot;codeSnippetWrapper&quot;&gt;   &lt;div style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot; id=&quot;codeSnippet&quot;&gt;     &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;ApplicationVersion&lt;/span&gt; &lt;span style=&quot;color: #ff0000&quot;&gt;value&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;=&amp;quot;1.2.0.0&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;&lt;/p&gt;&#xA;Simple, isn’t it?" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2010-01-06T14:20:00Z" PublishedUtc="2014-04-19T20:32:09.5176542Z" ModifiedUtc="2010-01-06T14:20:00Z" />
      <TagsPart Tags="C#" />
      <AutoroutePart Alias="log4net-configurable-custom-properties" UseCustomPattern="false" />
      <TitlePart Title="log4net Configurable Custom Properties" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=code-coverage" Status="Published">
      <BodyPart Text="&lt;p&gt;We are a TDD shop, or BDD to be more accurate. Normally we leverage Hudson Test Result Trend to see how things are doing. The project is a Windows NT Service. This is how Test trend looks like:&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;http://weblogs.asp.net/blogs/sfeldman/image_749BDA3F.png&quot; mce_href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_749BDA3F.png&quot;&gt;&lt;img src=&quot;http://weblogs.asp.net/blogs/sfeldman/image_thumb_36A24981.png&quot; style=&quot;border: 0px none ; display: block; float: none; margin-left: auto; margin-right: auto;&quot; title=&quot;image&quot; alt=&quot;image&quot; mce_src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_36A24981.png&quot; border=&quot;0&quot; height=&quot;239&quot; width=&quot;522&quot;&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;I wanted to take the current project and to run code coverage on it, to see if our approach is still holding and how things look like. It was around 90%, and with a few missing specs results were quite good:&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;http://weblogs.asp.net/blogs/sfeldman/image_71897C4A.png&quot; mce_href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_71897C4A.png&quot;&gt;&lt;img src=&quot;http://weblogs.asp.net/blogs/sfeldman/image_thumb_67C414D2.png&quot; style=&quot;border: 0px none ; display: block; float: none; margin-left: auto; margin-right: auto;&quot; title=&quot;image&quot; alt=&quot;image&quot; mce_src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_67C414D2.png&quot; border=&quot;0&quot; height=&quot;253&quot; width=&quot;496&quot;&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;A few things that I have observed and have to be mentioned:&lt;/p&gt;  &lt;p&gt;1. Small projects are easy to keep under control.&lt;/p&gt;  &lt;p&gt;2. It is difficult to get to 100% – is there a need at all? Don’t think so.&lt;/p&gt;  &lt;p&gt;3. Having no UI to test does make things look a lot better.&lt;/p&gt;  &lt;p&gt;4. Without code coverage things still can be done properly. Yet, it is nice to have statistics.&lt;/p&gt;  &lt;p&gt;5. Some of the web stuff .NET has is too kinky to test properly, but it’s possible.&lt;/p&gt;  &lt;p&gt;&amp;nbsp;&lt;/p&gt;  &lt;p&gt;As for the Coverage tools – I’ve used trial version of &lt;a href=&quot;http://www.ncover.com/&quot; mce_href=&quot;http://www.ncover.com/&quot; target=&quot;_blank&quot;&gt;NCover&lt;/a&gt; and a college of mine used &lt;a href=&quot;http://sourceforge.net/projects/partcover&quot; mce_href=&quot;http://sourceforge.net/projects/partcover&quot; target=&quot;_blank&quot;&gt;PartCover&lt;/a&gt;. Are there any alternatives? Recommendations?&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2010-01-04T06:36:00Z" PublishedUtc="2014-04-19T20:32:10.2363937Z" ModifiedUtc="2010-01-04T06:36:00Z" />
      <TagsPart Tags="TDD" />
      <AutoroutePart Alias="code-coverage" UseCustomPattern="false" />
      <TitlePart Title="Code Coverage" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=regex-with-comments" Status="Published">
      <BodyPart Text="&lt;p&gt;While working on a specific task that required a lot of parsing, I came to conclusion that comments for Regex expressions are quite useful. The way I usually write code allows to look at specifications and determine what each component can do. But with Regex it’s not quite transparent, as you might use expressions to achieve the goal, but not necessarily expose the usage through specs.&lt;/p&gt;  &lt;p&gt;Just to make it a bit more self-evident, here’s a Regex pattern without and with comments.&lt;/p&gt;  &lt;div style=&quot;border-bottom: silver 1px solid; text-align: left; border-left: silver 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; max-height: 200px; font-size: 8pt; overflow: auto; border-top: silver 1px solid; cursor: text; border-right: silver 1px solid; padding-top: 4px&quot; id=&quot;codeSnippetWrapper&quot;&gt;   &lt;div style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot; id=&quot;codeSnippet&quot;&gt;     &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;const&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;string&lt;/span&gt; pattern = &lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;  &lt;span style=&quot;color: #006080&quot;&gt;@&amp;quot;(\r\n)*(?&amp;lt;headers&amp;gt;(?:[^\r\n]+\r\n)*)[\r\n]*(?&amp;lt;body&amp;gt;[^Content-][\s\S]*[^\r\n])[\r\n]&amp;quot;&lt;/span&gt;;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;vs.&lt;/p&gt;&#xA;&#xA;&lt;div style=&quot;border-bottom: silver 1px solid; text-align: left; border-left: silver 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; max-height: 200px; font-size: 8pt; overflow: auto; border-top: silver 1px solid; cursor: text; border-right: silver 1px solid; padding-top: 4px&quot; id=&quot;codeSnippetWrapper&quot;&gt;&#xA;  &lt;div style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot; id=&quot;codeSnippet&quot;&gt;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;const&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;string&lt;/span&gt; pattern = &lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;  &lt;span style=&quot;color: #006080&quot;&gt;@&amp;quot;(\r\n)*(?&amp;lt;headers&amp;gt;(?:[^\r\n]+\r\n)*)             #headers group (Content-* like)&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&amp;#160;&amp;#160; [\r\n]*(?&amp;lt;body&amp;gt;[^Content-][\s\S]*[^\r\n])[\r\n]  #body group (actual data)&amp;quot;&lt;/span&gt;;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;Reminds me a bit of old-days assembly code I used to write…&lt;/p&gt;&#xA;&#xA;&lt;p&gt;To make it work, Regular Expression options has to &lt;em&gt;RegexOptions.Multiline | RegexOptions.IgnorePatternWhitespace&lt;/em&gt; have options on.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2010-01-01T21:51:00Z" PublishedUtc="2014-04-19T20:32:10.4395159Z" ModifiedUtc="2010-01-01T21:51:00Z" />
      <TagsPart Tags="C#" />
      <AutoroutePart Alias="regex-with-comments" UseCustomPattern="false" />
      <TitlePart Title="Regex With Comments" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=mocking-extension-methods" Status="Published">
      <BodyPart Text="&lt;p&gt;Daniel Cazzulino had a very helpful post about &lt;a href=&quot;http://www.clariusconsulting.net/blogs/kzu/archive/2009/02/19/Makingextensionmethodsamenabletomocking.aspx&quot; target=&quot;_blank&quot;&gt;how to mock extension methods&lt;/a&gt;. The only part I don’t like about this method is the fact you have to make internals visible to the test assembly using an assembly directive:&lt;/p&gt;  &lt;div id=&quot;codeSnippetWrapper&quot;&gt;   &lt;div style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot; id=&quot;codeSnippet&quot;&gt;     &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;[assembly: InternalsVisibleTo(&lt;span style=&quot;color: #006080&quot;&gt;&amp;quot;Project.Test&amp;quot;&lt;/span&gt;)]&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;This is not really bad, since test projects are not deployed. One possible issue with it is assemblies renaming, but that doesn’t happen very often and also relatively easy to track down once things break.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Thanks to Daniel.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-12-26T01:27:00Z" PublishedUtc="2014-04-19T20:32:11.0181434Z" ModifiedUtc="2009-12-26T01:27:00Z" />
      <TagsPart Tags=".NET,TDD,VS.NET" />
      <AutoroutePart Alias="mocking-extension-methods" UseCustomPattern="false" />
      <TitlePart Title="Mocking Extension Methods" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=mock-implementing-multiple-interfaces" Status="Published">
      <BodyPart Text="&lt;p&gt;One of the recent tests I had, I had to deal with the fact that a dependency object injected into &lt;em&gt;system under test &lt;/em&gt;object will be casted to some other interface (known to be implemented) and used. &lt;a href=&quot;http://code.google.com/&quot; target=&quot;_blank&quot;&gt;Moq&lt;/a&gt; has some documentation on it, but it was a bit misleading. QuickStart wiki showed an example below:&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_2B96CFA0.png&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: block; float: none; margin-left: auto; border-top: 0px; margin-right: auto; border-right: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_3B396B62.png&quot; width=&quot;371&quot; height=&quot;84&quot; /&gt;&lt;/a&gt; From example it is a bit difficult to see that once &lt;em&gt;foo &lt;/em&gt;is marked &lt;em&gt;As&amp;lt;IDisposable&amp;gt;&lt;/em&gt;, it can be casted in production code to &lt;em&gt;IDisposable&lt;/em&gt;. This is a &lt;strong&gt;very &lt;/strong&gt;helpful feature in Moq.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-12-26T01:16:00Z" PublishedUtc="2014-04-19T20:32:11.5801353Z" ModifiedUtc="2009-12-26T01:16:00Z" />
      <TagsPart Tags="TDD" />
      <AutoroutePart Alias="mock-implementing-multiple-interfaces" UseCustomPattern="false" />
      <TitlePart Title="Mock Implementing Multiple Interfaces" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=uml-and-sequence-diagrams-online-generators" Status="Published">
      <BodyPart Text="&lt;p&gt;I am a fan of quick tools that help you sketch out thoughts. These two do exact that type of work.&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;http://yuml.me/diagram/scruffy/class/draw2&quot; target=&quot;_blank&quot;&gt;UML generator&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;http://www.websequencediagrams.com/&quot; target=&quot;_blank&quot;&gt;Sequence Diagram generator&lt;/a&gt;&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-12-24T15:53:00Z" PublishedUtc="2014-04-19T20:32:11.9082553Z" ModifiedUtc="2009-12-24T15:53:00Z" />
      <TagsPart Tags="OO,Other" />
      <AutoroutePart Alias="uml-and-sequence-diagrams-online-generators" UseCustomPattern="false" />
      <TitlePart Title="UML and Sequence Diagrams Online Generators" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=troubleshooting-ssl-connectivity" Status="Published">
      <BodyPart Text="&lt;p&gt;While integrating two clients and working on two way authentication, I had to troubleshoot SSL connectivity. Configuration file was my best tool I could use. There are a couple of things I used, and probably there’s a lot more I am not aware of. &lt;/p&gt;  &lt;h4&gt;ServicePointManager&lt;/h4&gt;  &lt;p&gt;&lt;em&gt;ServicePointManager &lt;/em&gt;helps especially when validating server certificate, by allowing to review what are the errors and make a decision either to proceed or not. This is achieved through &lt;em&gt;ServerCertificateValidationCallback&lt;/em&gt; event.&lt;/p&gt;  &lt;p&gt;As well, I used configuration file to tweak a few things:&lt;/p&gt;  &lt;div id=&quot;codeSnippetWrapper&quot;&gt;   &lt;div style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot; id=&quot;codeSnippet&quot;&gt;     &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;servicePointManager&lt;/span&gt; &lt;span style=&quot;color: #ff0000&quot;&gt;checkCertificateRevocationList&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;=&amp;quot;false&amp;quot;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;                     &lt;span style=&quot;color: #ff0000&quot;&gt;checkCertificateName&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;=&amp;quot;false&amp;quot;&lt;/span&gt; &lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;                     &lt;span style=&quot;color: #ff0000&quot;&gt;expect100Continue&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;=&amp;quot;true&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;Same thing can be done through code (either on &lt;em&gt;ServicePointManager &lt;/em&gt;directly, or on request object, ServicePoint property).&lt;/p&gt;&#xA;&#xA;&lt;h4&gt;System.Diagnostics&lt;/h4&gt;&#xA;&#xA;&lt;p&gt;Logging is an absolute must when you get an exception, and details of exception are not sufficient enough. Luckily, System.Net (and more nested namespaces) support &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ty48b824.aspx&quot; target=&quot;_blank&quot;&gt;logging that can be enabled&lt;/a&gt; (which reminds me to look under my nose and not to re-invent a wheel). After enabling these logs, I could get detailed trace of SSL communication which helped me a lot. To enable logs:&lt;/p&gt;&#xA;&#xA;&lt;div id=&quot;codeSnippetWrapper&quot;&gt;&#xA;  &lt;div style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot; id=&quot;codeSnippet&quot;&gt;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;system.diagnostics&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;    &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;sources&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;      &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;source&lt;/span&gt; &lt;span style=&quot;color: #ff0000&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;=&amp;quot;System.Net&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #ff0000&quot;&gt;tracemode&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;=&amp;quot;includehex&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #ff0000&quot;&gt;maxdatasize&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;=&amp;quot;1024&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;        &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;listeners&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;          &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;add&lt;/span&gt; &lt;span style=&quot;color: #ff0000&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;=&amp;quot;System.Net&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;        &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;listeners&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;      &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;source&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;      &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;source&lt;/span&gt; &lt;span style=&quot;color: #ff0000&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;=&amp;quot;System.Net.Sockets&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;        &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;listeners&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;          &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;add&lt;/span&gt; &lt;span style=&quot;color: #ff0000&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;=&amp;quot;System.Net&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;        &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;listeners&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;      &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;source&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;      &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;source&lt;/span&gt; &lt;span style=&quot;color: #ff0000&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;=&amp;quot;System.Net.Cache&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;        &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;listeners&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;          &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;add&lt;/span&gt; &lt;span style=&quot;color: #ff0000&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;=&amp;quot;System.Net&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;        &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;listeners&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;      &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;source&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;    &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;sources&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;    &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;switches&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;      &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;add&lt;/span&gt; &lt;span style=&quot;color: #ff0000&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;=&amp;quot;System.Net&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #ff0000&quot;&gt;value&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;=&amp;quot;Verbose&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;      &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;add&lt;/span&gt; &lt;span style=&quot;color: #ff0000&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;=&amp;quot;System.Net.Sockets&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #ff0000&quot;&gt;value&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;=&amp;quot;Verbose&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;      &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;add&lt;/span&gt; &lt;span style=&quot;color: #ff0000&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;=&amp;quot;System.Net.Cache&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #ff0000&quot;&gt;value&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;=&amp;quot;Verbose&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;    &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;switches&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;    &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;sharedListeners&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;      &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;add&lt;/span&gt; &lt;span style=&quot;color: #ff0000&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;=&amp;quot;System.Net&amp;quot;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;           &lt;span style=&quot;color: #ff0000&quot;&gt;type&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;=&amp;quot;System.Diagnostics.TextWriterTraceListener&amp;quot;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;           &lt;span style=&quot;color: #ff0000&quot;&gt;initializeData&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;=&amp;quot;network.log&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;    &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;sharedListeners&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;    &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;trace&lt;/span&gt; &lt;span style=&quot;color: #ff0000&quot;&gt;autoflush&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;=&amp;quot;true&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;  &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;system.diagnostics&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;&amp;#160;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Hopefully, this helps someone as it helped me.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-12-22T15:02:00Z" PublishedUtc="2014-04-19T20:32:12.1586084Z" ModifiedUtc="2009-12-22T15:02:00Z" />
      <TagsPart Tags="" />
      <AutoroutePart Alias="troubleshooting-ssl-connectivity" UseCustomPattern="false" />
      <TitlePart Title="Troubleshooting SSL Connectivity" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=syntactic-sugar" Status="Published">
      <BodyPart Text="&lt;p&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: block; float: none; margin-left: auto; border-top: 0px; margin-right: auto; border-right: 0px&quot; title=&quot;clip_image002&quot; border=&quot;0&quot; alt=&quot;clip_image002&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/clip_image002_thumb_1E523610.jpg&quot; width=&quot;917&quot; height=&quot;171&quot; /&gt;&lt;/p&gt;  &lt;p&gt;Well, I wish there was a way of getting away from &lt;em&gt;SyntaticSugar&lt;/em&gt; static class initial point, and be able just to do plain code&lt;/p&gt;  &lt;div id=&quot;codeSnippetWrapper&quot;&gt;   &lt;div style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot; id=&quot;codeSnippet&quot;&gt;     &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;Do(() =&amp;gt; request.Headers = Headers).If(HeadersExist);&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Or even better, this&lt;/p&gt;&#xA;&#xA;&lt;div id=&quot;codeSnippetWrapper&quot;&gt;&#xA;  &lt;div style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot; id=&quot;codeSnippet&quot;&gt;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;(request.Headers = Headers).If(HeadersExist);&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;&lt;/p&gt;&#xA;There’s always hope for next version of C# ;)" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-12-07T04:44:00Z" PublishedUtc="2014-04-19T20:32:12.5644887Z" ModifiedUtc="2009-12-07T04:44:00Z" />
      <TagsPart Tags=".NET,C#" />
      <AutoroutePart Alias="syntactic-sugar" UseCustomPattern="false" />
      <TitlePart Title="Syntactic Sugar" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=structuremap-amp-mocking" Status="Published">
      <BodyPart Text="&lt;p&gt;I really like working with StructureMap. Today I had to write a quick Factory that would leverage StructureMap to create returned instances. The Factory would look like this:&lt;/p&gt;  &lt;div style=&quot;border-bottom: silver 1px solid; text-align: left; border-left: silver 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; max-height: 200px; font-size: 8pt; overflow: auto; border-top: silver 1px solid; cursor: text; border-right: silver 1px solid; padding-top: 4px&quot; id=&quot;codeSnippetWrapper&quot;&gt;   &lt;div style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot; id=&quot;codeSnippet&quot;&gt;     &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;class&lt;/span&gt; HttpListenerFactory : IHttpListenerFactory&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;{&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;  &lt;span style=&quot;color: #0000ff&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;readonly&lt;/span&gt; IConfigurationManager configurationManager;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&amp;#160;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;  &lt;span style=&quot;color: #0000ff&quot;&gt;public&lt;/span&gt; HttpListenerFactory(IConfigurationManager configurationManager)&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;  {&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;    &lt;span style=&quot;color: #0000ff&quot;&gt;this&lt;/span&gt;.configurationManager = configurationManager;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;  }&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&amp;#160;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;  &lt;span style=&quot;color: #0000ff&quot;&gt;public&lt;/span&gt; ICustomHttpListener CreateListenerForMessagesComingFromX()&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;  {&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;    var listener = ObjectFactory.GetInstance&amp;lt;ICustomHttpListener&amp;gt;();&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;    listener.Prefix = configurationManager.GetListenerPrefixForMessagesComingFromX();&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;    &lt;span style=&quot;color: #0000ff&quot;&gt;return&lt;/span&gt; listener;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;  }&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&amp;#160;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;  &lt;span style=&quot;color: #0000ff&quot;&gt;public&lt;/span&gt; ICustomHttpListener CreateListenerForMessagesComingFromY()&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;  {&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;    var listener = ObjectFactory.GetInstance&amp;lt;ICustomHttpListener&amp;gt;();&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;    listener.Prefix = configurationManager.GetListenerPrefixForMessagesComingFromY();&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;    &lt;span style=&quot;color: #0000ff&quot;&gt;return&lt;/span&gt; listener;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;  }&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;}&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;Factory has no parameterized constructor and it’s heavily relies on &lt;em&gt;ObjectFactory &lt;/em&gt;provided by StructureMap. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;I wanted during testing to keep it as a spec (unit test) and not integration test, heaving all interfaces and implementers hooked up, so bootstrapping StructureMap was not an option. What I could do, is inject mocked implementation in conjunction with the interface. That worked really slick.&lt;/p&gt;&#xA;&#xA;&lt;div style=&quot;border-bottom: silver 1px solid; text-align: left; border-left: silver 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; max-height: 200px; font-size: 8pt; overflow: auto; border-top: silver 1px solid; cursor: text; border-right: silver 1px solid; padding-top: 4px&quot; id=&quot;codeSnippetWrapper&quot;&gt;&#xA;  &lt;div style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot; id=&quot;codeSnippet&quot;&gt;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;protected&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;readonly&lt;/span&gt; Mock&amp;lt;ICustomHttpListener&amp;gt; listener;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&amp;#160;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #008000&quot;&gt;// Arrangement stage&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;ObjectFactory.Inject(&lt;span style=&quot;color: #0000ff&quot;&gt;typeof&lt;/span&gt;(ICustomHttpListener), listener.Object);&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&amp;#160;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #008000&quot;&gt;// Tear down stage&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;ObjectFactory.ResetDefaults();&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Clean and simple.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-11-19T04:36:00Z" PublishedUtc="2014-04-19T20:32:13.4394773Z" ModifiedUtc="2009-11-19T04:36:00Z" />
      <TagsPart Tags="TDD" />
      <AutoroutePart Alias="structuremap-amp-mocking" UseCustomPattern="false" />
      <TitlePart Title="StructureMap &amp; Mocking" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=ilmerge-as-nant-task" Status="Published">
      <BodyPart Text="&lt;p&gt;I needed to merge a few a few assemblies into one, and tried pretty much what the author of &lt;a href=&quot;http://esuyer.blogspot.com/2009/07/custom-nant-ilmerge-task-no-assembly.html&quot; target=&quot;_blank&quot;&gt;this blog&lt;/a&gt; did. I also wanted to be able to “hide” the namespaces merged into main assembly, so that in case there are 2 identical classes in final assembly, only the class from the primarily assembly would be showed by Visual Studio. In my case, it was custom Logger vs. log4net Logger, which I wanted to “hide”.&lt;/p&gt;  &lt;p&gt;ILMerge does support it, but providing /internalize switch. Official documentation explains it better:&lt;/p&gt;  &lt;blockquote&gt;   &lt;p&gt;This controls whether types in assemblies &lt;i&gt;other than &lt;/i&gt;the primary assembly have their visibility modified. When it is true, then all non-exempt types that are visible outside of their assembly have their visibility modified so that they are not visible from outside of the merged assembly. &lt;/p&gt; &lt;/blockquote&gt;  &lt;p&gt;The version of NAnt task I ended up is slightly different:&lt;/p&gt;  &lt;div style=&quot;border-bottom: silver 1px solid; text-align: left; border-left: silver 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; max-height: 200px; font-size: 8pt; overflow: auto; border-top: silver 1px solid; cursor: text; border-right: silver 1px solid; padding-top: 4px&quot; id=&quot;codeSnippetWrapper&quot;&gt;   &lt;div style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot; id=&quot;codeSnippet&quot;&gt;     &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;[TaskName(&lt;span style=&quot;color: #006080&quot;&gt;&amp;quot;ilmerge&amp;quot;&lt;/span&gt;)]&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;class&lt;/span&gt; ILMergeTask : ExternalProgramBase &lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;{&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;  &lt;span style=&quot;color: #0000ff&quot;&gt;private&lt;/span&gt; FileSet m_assemblies;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;  &lt;span style=&quot;color: #0000ff&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;string&lt;/span&gt; m_logFile;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;  &lt;span style=&quot;color: #0000ff&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;string&lt;/span&gt; m_outputFile;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;  &lt;span style=&quot;color: #0000ff&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;string&lt;/span&gt; m_primaryFile;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;  &lt;span style=&quot;color: #0000ff&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;bool&lt;/span&gt; internalize;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;  &lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;  &lt;strong&gt;[TaskAttribute(&lt;span style=&quot;color: #006080&quot;&gt;&amp;quot;internalize&amp;quot;&lt;/span&gt;)]&lt;/strong&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;strong&gt;  [BooleanValidator()]&lt;/strong&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;  &lt;strong&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;virtual&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;bool&lt;/span&gt; Internalize&lt;/strong&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;  {&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;strong&gt;    get { &lt;span style=&quot;color: #0000ff&quot;&gt;return&lt;/span&gt; internalize;}&lt;/strong&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;strong&gt;    set { internalize = &lt;span style=&quot;color: #0000ff&quot;&gt;value&lt;/span&gt;;}&lt;/strong&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;  }&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&amp;#160;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&amp;#160;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;  [TaskAttribute(&lt;span style=&quot;color: #006080&quot;&gt;&amp;quot;program&amp;quot;&lt;/span&gt;, Required = &lt;span style=&quot;color: #0000ff&quot;&gt;true&lt;/span&gt;)]&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;  [StringValidator(AllowEmpty = &lt;span style=&quot;color: #0000ff&quot;&gt;false&lt;/span&gt;)]&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;  &lt;span style=&quot;color: #0000ff&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;override&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;string&lt;/span&gt; ExeName&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;  {&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;      get { &lt;span style=&quot;color: #0000ff&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;base&lt;/span&gt;.ExeName; }&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;      set { &lt;span style=&quot;color: #0000ff&quot;&gt;base&lt;/span&gt;.ExeName = &lt;span style=&quot;color: #0000ff&quot;&gt;value&lt;/span&gt;; }&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;  }&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&amp;#160;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&amp;#160;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;  &lt;span style=&quot;color: #0000ff&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;override&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;string&lt;/span&gt; ProgramArguments&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;  {&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;      get { &lt;span style=&quot;color: #0000ff&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;string&lt;/span&gt;.Empty; }&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;  }&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&amp;#160;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;  [BuildElement(&lt;span style=&quot;color: #006080&quot;&gt;&amp;quot;assemblies&amp;quot;&lt;/span&gt;, Required=&lt;span style=&quot;color: #0000ff&quot;&gt;true&lt;/span&gt;)]&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;  &lt;span style=&quot;color: #0000ff&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;virtual&lt;/span&gt; FileSet InputAssemblies&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;  {&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;        get&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;        {&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;            &lt;span style=&quot;color: #0000ff&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;this&lt;/span&gt;.m_assemblies;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;        }&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;        set&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;        {&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;            &lt;span style=&quot;color: #0000ff&quot;&gt;this&lt;/span&gt;.m_assemblies = &lt;span style=&quot;color: #0000ff&quot;&gt;value&lt;/span&gt;;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;        }&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;  }&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt; &lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;  [TaskAttribute(&lt;span style=&quot;color: #006080&quot;&gt;&amp;quot;logfile&amp;quot;&lt;/span&gt;)]&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;  &lt;span style=&quot;color: #0000ff&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;virtual&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;string&lt;/span&gt; LogFile&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;  {&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;        get&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;        {&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;            &lt;span style=&quot;color: #0000ff&quot;&gt;if&lt;/span&gt; (&lt;span style=&quot;color: #0000ff&quot;&gt;this&lt;/span&gt;.m_logFile == &lt;span style=&quot;color: #0000ff&quot;&gt;null&lt;/span&gt;)&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;            {&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;                &lt;span style=&quot;color: #0000ff&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;null&lt;/span&gt;;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;            }&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;            &lt;span style=&quot;color: #0000ff&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;this&lt;/span&gt;.Project.GetFullPath(&lt;span style=&quot;color: #0000ff&quot;&gt;this&lt;/span&gt;.m_logFile);&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;        }&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;        set&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;        {&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;            &lt;span style=&quot;color: #0000ff&quot;&gt;this&lt;/span&gt;.m_logFile = StringUtils.ConvertEmptyToNull(&lt;span style=&quot;color: #0000ff&quot;&gt;value&lt;/span&gt;);&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;        }&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;  }     &lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&amp;#160;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;  [TaskAttribute(&lt;span style=&quot;color: #006080&quot;&gt;&amp;quot;primary&amp;quot;&lt;/span&gt;, Required=&lt;span style=&quot;color: #0000ff&quot;&gt;true&lt;/span&gt;), StringValidator(AllowEmpty=&lt;span style=&quot;color: #0000ff&quot;&gt;false&lt;/span&gt;)]&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;  &lt;span style=&quot;color: #0000ff&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;virtual&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;string&lt;/span&gt; PrimaryFile&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;  {&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;      get&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;      {&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;          &lt;span style=&quot;color: #0000ff&quot;&gt;if&lt;/span&gt; (&lt;span style=&quot;color: #0000ff&quot;&gt;this&lt;/span&gt;.m_primaryFile == &lt;span style=&quot;color: #0000ff&quot;&gt;null&lt;/span&gt;)&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;          {&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;              &lt;span style=&quot;color: #0000ff&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;null&lt;/span&gt;;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;          }&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;          &lt;span style=&quot;color: #0000ff&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;this&lt;/span&gt;.Project.GetFullPath(&lt;span style=&quot;color: #0000ff&quot;&gt;this&lt;/span&gt;.m_primaryFile);&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;      }&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;      set&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;      {&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;          &lt;span style=&quot;color: #0000ff&quot;&gt;this&lt;/span&gt;.m_primaryFile = StringUtils.ConvertEmptyToNull(&lt;span style=&quot;color: #0000ff&quot;&gt;value&lt;/span&gt;);&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;      }&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;  }                 &lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&amp;#160;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;  [TaskAttribute(&lt;span style=&quot;color: #006080&quot;&gt;&amp;quot;outputfile&amp;quot;&lt;/span&gt;, Required=&lt;span style=&quot;color: #0000ff&quot;&gt;true&lt;/span&gt;), StringValidator(AllowEmpty=&lt;span style=&quot;color: #0000ff&quot;&gt;false&lt;/span&gt;)]&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;  &lt;span style=&quot;color: #0000ff&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;virtual&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;string&lt;/span&gt; OutputFile&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;  {&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;      get&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;      {&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;          &lt;span style=&quot;color: #0000ff&quot;&gt;if&lt;/span&gt; (&lt;span style=&quot;color: #0000ff&quot;&gt;this&lt;/span&gt;.m_outputFile == &lt;span style=&quot;color: #0000ff&quot;&gt;null&lt;/span&gt;)&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;          {&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;              &lt;span style=&quot;color: #0000ff&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;null&lt;/span&gt;;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;          }&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;          &lt;span style=&quot;color: #0000ff&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;this&lt;/span&gt;.Project.GetFullPath(&lt;span style=&quot;color: #0000ff&quot;&gt;this&lt;/span&gt;.m_outputFile);&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;      }&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;      set&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;      {&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;          &lt;span style=&quot;color: #0000ff&quot;&gt;this&lt;/span&gt;.m_outputFile = StringUtils.ConvertEmptyToNull(&lt;span style=&quot;color: #0000ff&quot;&gt;value&lt;/span&gt;);&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;      }&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;  }                 &lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&amp;#160;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&amp;#160;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;  &lt;span style=&quot;color: #0000ff&quot;&gt;protected&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;override&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;void&lt;/span&gt; ExecuteTask()&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;  {&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;      &lt;span style=&quot;color: #0000ff&quot;&gt;try&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;      {&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;          Log(Level.Info, &lt;span style=&quot;color: #006080&quot;&gt;&amp;quot;Executing ILMerge.exe&amp;quot;&lt;/span&gt;);&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;          Log(Level.Info, &lt;span style=&quot;color: #0000ff&quot;&gt;string&lt;/span&gt;.Format(&lt;span style=&quot;color: #006080&quot;&gt;&amp;quot;/out:\&amp;quot;{0}\&amp;quot;&amp;quot;&lt;/span&gt;, m_outputFile));&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;          Log(Level.Info, &lt;span style=&quot;color: #0000ff&quot;&gt;string&lt;/span&gt;.Format(&lt;span style=&quot;color: #006080&quot;&gt;&amp;quot;/log:\&amp;quot;{0}\&amp;quot;&amp;quot;&lt;/span&gt;, m_logFile));&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;          Arguments.Add(&lt;span style=&quot;color: #0000ff&quot;&gt;new&lt;/span&gt; Argument(&lt;span style=&quot;color: #0000ff&quot;&gt;string&lt;/span&gt;.Format(&lt;span style=&quot;color: #006080&quot;&gt;&amp;quot;/out:\&amp;quot;{0}\&amp;quot;&amp;quot;&lt;/span&gt;, m_outputFile)));&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&amp;#160;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;          Log(Level.Info, &lt;span style=&quot;color: #0000ff&quot;&gt;string&lt;/span&gt;.Format(&lt;span style=&quot;color: #006080&quot;&gt;&amp;quot;assembly[{0}]: {1}&amp;quot;&lt;/span&gt;, &lt;span style=&quot;color: #006080&quot;&gt;&amp;quot;primary&amp;quot;&lt;/span&gt;, m_primaryFile));&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;          Arguments.Add(&lt;span style=&quot;color: #0000ff&quot;&gt;new&lt;/span&gt; Argument(&lt;span style=&quot;color: #0000ff&quot;&gt;string&lt;/span&gt;.Format(&lt;span style=&quot;color: #006080&quot;&gt;&amp;quot;\&amp;quot;{0}\&amp;quot;&amp;quot;&lt;/span&gt;, m_primaryFile)));&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&amp;#160;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;          &lt;span style=&quot;color: #0000ff&quot;&gt;for&lt;/span&gt; (&lt;span style=&quot;color: #0000ff&quot;&gt;int&lt;/span&gt; i = 0; i &amp;lt; m_assemblies.FileNames.Count; i++)&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;          {&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;              Log(Level.Info, &lt;span style=&quot;color: #0000ff&quot;&gt;string&lt;/span&gt;.Format(&lt;span style=&quot;color: #006080&quot;&gt;&amp;quot;assembly[{0}]: {1}&amp;quot;&lt;/span&gt;, i, m_assemblies.FileNames[i]));&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;              Arguments.Add(&lt;span style=&quot;color: #0000ff&quot;&gt;new&lt;/span&gt; Argument(&lt;span style=&quot;color: #0000ff&quot;&gt;string&lt;/span&gt;.Format(&lt;span style=&quot;color: #006080&quot;&gt;&amp;quot;\&amp;quot;{0}\&amp;quot;&amp;quot;&lt;/span&gt;, m_assemblies.FileNames[i])));&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;          }&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&amp;#160;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;          Arguments.Add(&lt;span style=&quot;color: #0000ff&quot;&gt;new&lt;/span&gt; Argument(&lt;span style=&quot;color: #0000ff&quot;&gt;string&lt;/span&gt;.Format(&lt;span style=&quot;color: #006080&quot;&gt;&amp;quot;/log:\&amp;quot;{0}\&amp;quot;&amp;quot;&lt;/span&gt;, m_logFile)));&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;          &lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;          &lt;span style=&quot;color: #0000ff&quot;&gt;if&lt;/span&gt; (Internalize)&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;          {&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;            Log(Level.Info, &lt;span style=&quot;color: #006080&quot;&gt;&amp;quot;/internalize&amp;quot;&lt;/span&gt;);&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;            Arguments.Add(&lt;span style=&quot;color: #0000ff&quot;&gt;new&lt;/span&gt; Argument(&lt;span style=&quot;color: #006080&quot;&gt;&amp;quot;/internalize&amp;quot;&lt;/span&gt;));&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;          }&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&amp;#160;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;          &lt;span style=&quot;color: #0000ff&quot;&gt;base&lt;/span&gt;.FailOnError = &lt;span style=&quot;color: #0000ff&quot;&gt;false&lt;/span&gt;;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;          &lt;span style=&quot;color: #0000ff&quot;&gt;base&lt;/span&gt;.ExecuteTask();&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;      }&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;      &lt;span style=&quot;color: #0000ff&quot;&gt;catch&lt;/span&gt; (Exception ex)&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;      {&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;          &lt;span style=&quot;color: #0000ff&quot;&gt;throw&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;new&lt;/span&gt; BuildException(&lt;span style=&quot;color: #0000ff&quot;&gt;string&lt;/span&gt;.Format(&lt;span style=&quot;color: #006080&quot;&gt;&amp;quot;Error executing ILMerge {0}&amp;quot;&lt;/span&gt;, &lt;span style=&quot;color: #006080&quot;&gt;&amp;quot;test&amp;quot;&lt;/span&gt;), Location, ex);&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;      }&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;  }&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;}&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;Now Internalized property can be utilized:&lt;/p&gt;&#xA;&#xA;&lt;div style=&quot;border-bottom: silver 1px solid; text-align: left; border-left: silver 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; max-height: 200px; font-size: 8pt; overflow: auto; border-top: silver 1px solid; cursor: text; border-right: silver 1px solid; padding-top: 4px&quot; id=&quot;codeSnippetWrapper&quot;&gt;&#xA;  &lt;div style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot; id=&quot;codeSnippet&quot;&gt;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;ilmerge&lt;/span&gt; &lt;span style=&quot;color: #ff0000&quot;&gt;outputfile&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;=&amp;quot;${main.assembly.name}&amp;quot;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;         &lt;span style=&quot;color: #ff0000&quot;&gt;primary&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;=&amp;quot;${temp.assembly.name}&amp;quot;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;         &lt;span style=&quot;color: #ff0000&quot;&gt;program&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;=&amp;quot;${ilmerge.dir}\ilmerge.exe&amp;quot;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;         &lt;span style=&quot;color: #ff0000&quot;&gt;logfile&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;=&amp;quot;${log.file}&amp;quot;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;         &lt;strong&gt;&lt;span style=&quot;color: #ff0000&quot;&gt;internalize&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;=&amp;quot;true&amp;quot;&lt;/span&gt;&lt;/strong&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;  &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;assemblies&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;    &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;include&lt;/span&gt; &lt;span style=&quot;color: #ff0000&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;=&amp;quot;${build.compile.dir}\log4net.dll&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;  &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;assemblies&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;ilmerge&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;&amp;#160;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I was quiet surprised to learn that C#2.0 is used to compile an inline NAnt task, and not 3.0 (auto property did not work).&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-11-12T02:42:00Z" PublishedUtc="2014-04-19T20:32:13.7363462Z" ModifiedUtc="2009-11-12T02:42:00Z" />
      <TagsPart Tags=".NET" />
      <AutoroutePart Alias="ilmerge-as-nant-task" UseCustomPattern="false" />
      <TitlePart Title="ILMerge as NAnt Task" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=working-in-sandbox" Status="Published">
      <BodyPart Text="&lt;p&gt;As I have already mentioned, I am involved in a project that uses BizTalk 2009. With this beast, you have to develop on the machine that has BizTalk installed and configured. This is vey unfortunate, especially when so many things can go wrong. From &lt;a href=&quot;http://weblogs.asp.net/sfeldman/archive/2008/09/02/sp1.aspx&quot; target=&quot;_blank&quot;&gt;my experience in the past&lt;/a&gt; I have decided to work in virtual machine. Boy that paid off back so quick. While working on a custom adaptor, something went wrong during deployment and BizTalk 2009 was not responsive anymore. But I had nothing to worry about – I had a snapshot I could go back to.&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_61B0743D.png&quot;&gt;&lt;img style=&quot;border-right-width: 0px; display: block; float: none; border-top-width: 0px; border-bottom-width: 0px; margin-left: auto; border-left-width: 0px; margin-right: auto&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_3189297A.png&quot; width=&quot;265&quot; height=&quot;144&quot; /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Now the real question I am asking myself – why don’t I do entire development on VM? WPF is not something I do, so no worries about hardware acceleration. VMWare workstation supports mode that will lock you in VM and prevent keystrokes to get out of sandbox. Devices are all recognizable and easily connecting. And with Windows 7 (which has less RAM/CPU requirements than the fabulous Windows XP) it’s even simpler. Another option is to use Windows 7 bootable VHD. Either way, developing on host machine is just not worth it.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-11-07T19:10:00Z" PublishedUtc="2014-04-19T20:32:14.3926012Z" ModifiedUtc="2009-11-07T19:10:00Z" />
      <TagsPart Tags=".NET,BizTalk" />
      <AutoroutePart Alias="working-in-sandbox" UseCustomPattern="false" />
      <TitlePart Title="Working in Sandbox" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=biztalk-custom-pipeline" Status="Published">
      <BodyPart Text="&lt;p&gt;I am starting a project that involves a lot BizTalk 2009. Since this is a completely new territory for myself, I decided to blog about it. There a lot of resources available out there, especially from &lt;a href=&quot;http://msdn.microsoft.com/en-us/biztalk/default.aspx&quot; target=&quot;_blank&quot;&gt;MSDN&lt;/a&gt;. &lt;/p&gt;  &lt;p&gt;First thing I decided to look at was a Custom pipeline. Two types of pipeline exist – sending and receiving. To understand better pipelines, I read &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms935116%28BTS.10%29.aspx&quot; target=&quot;_blank&quot;&gt;BizTalk 2004: A Message Engine Overview&lt;/a&gt; on MSDN. It provides more information than just pipelines that is very useful for general BizTalk understanding (which I find a vital if you plan to develop for BizTalk). &lt;/p&gt;  &lt;p&gt;A typical receive pipeline has 4 sections (or “component areas”) and send pipeline 3.&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_1ECB906C.png&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_02BD6232.png&quot; width=&quot;389&quot; height=&quot;90&quot; /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_6B91E7B3.png&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_3B6A9CF0.png&quot; width=&quot;325&quot; height=&quot;89&quot; /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;In BizTalk project these pipelines are presented as a flow, with designated areas where you can drop&amp;#160; components designed especially for any given stage in a pipeline of a certain type. &lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_445A2F2F.png&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: inline; margin-left: 0px; border-top: 0px; margin-right: 0px; border-right: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; align=&quot;right&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_539097FC.png&quot; width=&quot;227&quot; height=&quot;623&quot; /&gt;&lt;/a&gt; You can develop pipeline custom components in managed code, but you have to link it to the designer. How that is done? Each component has to be marked with a &lt;em&gt;ComponentCategory&lt;/em&gt; attribute to indicate where in pipeline it can be assigned. A component that should be only assigned to Decoding section would be marked as:&lt;/p&gt;  &lt;div style=&quot;border-bottom: silver 1px solid; text-align: left; border-left: silver 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 59.63%; padding-right: 4px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; height: 86px; max-height: 200px; font-size: 8pt; overflow: auto; border-top: silver 1px solid; cursor: text; border-right: silver 1px solid; padding-top: 4px&quot; id=&quot;codeSnippetWrapper&quot;&gt;   &lt;div style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot; id=&quot;codeSnippet&quot;&gt;     &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;[ComponentCategory(CategoryTypes.CATID_PipelineComponent)]&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;[ComponentCategory(CategoryTypes.CATID_Decoder)]&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;[System.Runtime.InteropServices.Guid(&lt;span style=&quot;color: #006080&quot;&gt;&amp;quot;9D0E4103-4CCE-4536-83FA-4A5040674AD6&amp;quot;&lt;/span&gt;)]&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;The interoperability GUID 9D0E4103-4CCE-4536-83FA-4A5040674AD6 stands for “receive pipeline, decode section” and it is used to indicate to Visual Studio designer where the component can be dropped. For this purpose, I have create a component called “CustomPipelineComponent” and decorated with these attributes. Dragged and dropped the component and this is how the BizTalk pipeline looks like after that (XML view):&lt;/p&gt;&#xA;&#xA;&lt;div style=&quot;border-bottom: silver 1px solid; text-align: left; border-left: silver 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 59.84%; padding-right: 4px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; height: 210px; max-height: 200px; font-size: 8pt; overflow: auto; border-top: silver 1px solid; cursor: text; border-right: silver 1px solid; padding-top: 4px&quot; id=&quot;codeSnippetWrapper&quot;&gt;&#xA;  &lt;div style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot; id=&quot;codeSnippet&quot;&gt;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;?&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;xml&lt;/span&gt; &lt;span style=&quot;color: #ff0000&quot;&gt;version&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;=&amp;quot;1.0&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #ff0000&quot;&gt;encoding&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;=&amp;quot;utf-16&amp;quot;&lt;/span&gt;?&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;Document&lt;/span&gt; &lt;span style=&quot;color: #ff0000&quot;&gt;xmlns:xsi&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #ff0000&quot;&gt;xmlns:xsd&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;=&amp;quot;http://www.w3.org/2001/XMLSchema&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #ff0000&quot;&gt;PolicyFilePath&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;=&amp;quot;BTSReceivePolicy.xml&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #ff0000&quot;&gt;MajorVersion&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;=&amp;quot;1&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #ff0000&quot;&gt;MinorVersion&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;=&amp;quot;0&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;  &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;Description&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;  &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;Stages&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;    &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;Stage&lt;/span&gt; &lt;span style=&quot;color: #ff0000&quot;&gt;CategoryId&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;=&amp;quot;&lt;u&gt;&lt;strong&gt;9d0e4103-4cce-4536-83fa-4a5040674ad6&lt;/strong&gt;&lt;/u&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;      &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;Components&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;        &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;Component&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;          &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;Name&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;SimplePipeline.CustomPipelineComponent&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;Name&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;          &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;ComponentName&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;SIMPLE Pipeline component&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;ComponentName&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;          &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;Description&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;CustomPipelineComponent&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;Description&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;          &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;Version&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;1.0.0.0&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;Version&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;          &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;CachedIsManaged&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;true&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;CachedIsManaged&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;        &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;Component&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;      &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;Components&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;    &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;Stage&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;    &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;Stage&lt;/span&gt; &lt;span style=&quot;color: #ff0000&quot;&gt;CategoryId&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;=&amp;quot;9d0e4105-4cce-4536-83fa-4a5040674ad6&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;      &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;Components&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;    &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;Stage&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;    &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;Stage&lt;/span&gt; &lt;span style=&quot;color: #ff0000&quot;&gt;CategoryId&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;=&amp;quot;9d0e410d-4cce-4536-83fa-4a5040674ad6&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;      &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;Components&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;    &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;Stage&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;    &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;Stage&lt;/span&gt; &lt;span style=&quot;color: #ff0000&quot;&gt;CategoryId&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;=&amp;quot;9d0e410e-4cce-4536-83fa-4a5040674ad6&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;      &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;Components&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;    &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;Stage&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;  &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;Stages&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;Document&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;If you look close, each section in pipeline (or Stage) has a designated GUID. Decoder has 9D0E4103-4CCE-4536-83FA-4A5040674AD6, same as we used to decorate our component with.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Now the saucy part – how do I debug and test it?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;To debug (which is &lt;strong&gt;NOT&lt;/strong&gt; testing) I used BizTalk 2009 SDK utility called Pipeline.exe and located in %ProgramFiles%\Microsoft BizTalk Server 2009\SDK\Utilities\PipelineTools. One disadvantage I found with this utility is the fact that you have to deploy your custom pipeline component assembly to BizTalk 2009 designated location (%ProgramFiles%\Microsoft BizTalk Server 2009\Pipeline Components). Well, at least you can debug your custom component. For that I had to update the project settings of my custom pipeline component project and setup 3 things:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;  &lt;li&gt;Specify &lt;strong&gt;Output&lt;/strong&gt; for build artifact (Figure 1)&lt;/li&gt;&#xA;&#xA;  &lt;li&gt;Set &lt;strong&gt;Start Action &lt;/strong&gt;to Pipeline.exe (Figure 2)&lt;/li&gt;&#xA;&#xA;  &lt;li&gt;Specify &lt;strong&gt;Command Line Arguments&lt;/strong&gt; to use pipeline that contains custom component&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_50EA6CFC.png&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: block; float: none; margin-left: auto; border-top: 0px; margin-right: auto; border-right: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_41D8AF84.png&quot; width=&quot;694&quot; height=&quot;496&quot; /&gt;&lt;/a&gt; Figure 1&lt;/p&gt;&#xA;&#xA;&lt;p align=&quot;left&quot;&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_1EAB44D2.png&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: block; float: none; margin-left: auto; border-top: 0px; margin-right: auto; border-right: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_5111A902.png&quot; width=&quot;561&quot; height=&quot;272&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p align=&quot;center&quot;&gt;Figure 2&lt;/p&gt;&#xA;&#xA;&lt;p align=&quot;left&quot;&gt;When a new instance of Debugger is invoked on component project, debugger will kick in and stop at breakpoints. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_5995084C.png&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: block; float: none; margin-left: auto; border-top: 0px; margin-right: auto; border-right: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_678BF99C.png&quot; width=&quot;831&quot; height=&quot;434&quot; /&gt;&lt;/a&gt; &lt;/p&gt;&#xA;&#xA;&lt;p&gt;&amp;#160;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;To test a custom component you will have to dig dipper. I have figured a few things:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;  &lt;li&gt;You cannot do unit testing. BizTalk has &lt;strong&gt;integration testing baked in&lt;/strong&gt;.&lt;/li&gt;&#xA;&#xA;  &lt;li&gt;You have to include BizTalk test assemblies, located in &lt;strong&gt;%ProgramFiles%\Microsoft BizTalk Server 2009\Developer Tools&lt;/strong&gt; (I wish other blogs would mentions this folder!)&lt;/li&gt;&#xA;&#xA;  &lt;li&gt;You will have to &lt;strong&gt;cast your objects to BizTalk base classes&lt;/strong&gt; (the ones your maps/pipelines/schemas) in order to invoke testing methods (such as map.TestMap(…), schema.ValidateInstance(…), and pipeline.TestPipeline(…) accordingly) &lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;I found &lt;a href=&quot;http://geekswithblogs.net/michaelstephenson/archive/2008/12/12/127827.aspx&quot; target=&quot;_blank&quot;&gt;one good blog post&lt;/a&gt; about how actually to write a state based testing, so I will not reproduce it here.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;PS: an attempt to test pipeline components as unit testing is showed in &lt;a href=&quot;http://geekswithblogs.net/michaelstephenson/archive/2008/03/30/120852.aspx&quot; target=&quot;_blank&quot;&gt;this blog&lt;/a&gt;.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-11-05T14:17:00Z" PublishedUtc="2014-04-19T20:32:16.5175632Z" ModifiedUtc="2009-11-05T14:17:00Z" />
      <TagsPart Tags="BizTalk" />
      <AutoroutePart Alias="biztalk-custom-pipeline" UseCustomPattern="false" />
      <TitlePart Title="BizTalk Custom Pipeline" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=lost-generation-really-good" Status="Published">
      <BodyPart Text="&lt;div style=&quot;padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px&quot; id=&quot;scid:5737277B-5D6D-4f48-ABFC-DD9C333F4C5D:d919dc37-1c95-4882-ac2a-9cd600530549&quot; class=&quot;wlWriterEditableSmartContent&quot;&gt;&lt;div&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=Hds3jvjZY-Y&quot; target=&quot;_new&quot;&gt;&lt;img src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/video51b125601347_194ED9F9.jpg&quot; style=&quot;border-style: none&quot; galleryimg=&quot;no&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-10-28T20:36:00Z" PublishedUtc="2014-04-19T20:32:17.0019387Z" ModifiedUtc="2009-10-28T20:36:00Z" />
      <TagsPart Tags="Personal" />
      <AutoroutePart Alias="lost-generation-really-good" UseCustomPattern="false" />
      <TitlePart Title="Lost Generation – Really Good" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=creativity" Status="Published">
      <BodyPart Text="&lt;p&gt;One picture is worth a thousand words :)&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/PA269561_13E163A3.jpg&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: block; float: none; margin-left: auto; border-top: 0px; margin-right: auto; border-right: 0px&quot; title=&quot;PA269561&quot; border=&quot;0&quot; alt=&quot;PA269561&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/PA269561_thumb_55989931.jpg&quot; width=&quot;1028&quot; height=&quot;772&quot; /&gt;&lt;/a&gt;&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-10-27T03:02:00Z" PublishedUtc="2014-04-19T20:32:17.9081685Z" ModifiedUtc="2009-10-27T03:02:00Z" />
      <TagsPart Tags="Personal" />
      <AutoroutePart Alias="creativity" UseCustomPattern="false" />
      <TitlePart Title="Creativity" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=presentation-from-good-to-great-developer" Status="Published">
      <BodyPart Text="&lt;p&gt;I really liked &lt;a href=&quot;http://www.infoq.com/presentations/Good-to-Great-Developer-Chris-Hedgate&quot; target=&quot;_blank&quot;&gt;this presentation&lt;/a&gt;. Highly recommended.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-10-23T01:52:00Z" PublishedUtc="2014-04-19T20:32:18.2987909Z" ModifiedUtc="2009-10-23T01:52:00Z" />
      <TagsPart Tags="Other" />
      <AutoroutePart Alias="presentation-from-good-to-great-developer" UseCustomPattern="false" />
      <TitlePart Title="Presentation: From Good to Great Developer" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=linq-to-xml-for-better-maintainability" Status="Published">
      <BodyPart Text="&lt;p&gt;Today I was trying to solve a simple technical problem. Given a specific XML, needed to clean it up by removing any elements of a particular type.&lt;/p&gt;  &lt;div id=&quot;codeSnippetWrapper&quot;&gt;   &lt;div style=&quot;border-style: none; padding: 0px; overflow: visible; text-align: left; line-height: 12pt; background-color: rgb(244, 244, 244); width: 100%; font-family: 'Courier New',courier,monospace; direction: ltr; color: black; font-size: 8pt;&quot; id=&quot;codeSnippet&quot;&gt;     &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; text-align: left; line-height: 12pt; background-color: white; width: 100%; font-family: 'Courier New',courier,monospace; direction: ltr; color: black; font-size: 8pt;&quot;&gt;&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: rgb(128, 0, 0);&quot;&gt;Attachment&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; text-align: left; line-height: 12pt; background-color: rgb(244, 244, 244); width: 100%; font-family: 'Courier New',courier,monospace; direction: ltr; color: black; font-size: 8pt;&quot;&gt;  &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: rgb(128, 0, 0);&quot;&gt;Name&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;gt;&lt;/span&gt;file1.pdf&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: rgb(128, 0, 0);&quot;&gt;Name&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; text-align: left; line-height: 12pt; background-color: white; width: 100%; font-family: 'Courier New',courier,monospace; direction: ltr; color: black; font-size: 8pt;&quot;&gt;  &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: rgb(128, 0, 0);&quot;&gt;Id&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;gt;&lt;/span&gt;1&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: rgb(128, 0, 0);&quot;&gt;Id&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; text-align: left; line-height: 12pt; background-color: rgb(244, 244, 244); width: 100%; font-family: 'Courier New',courier,monospace; direction: ltr; color: black; font-size: 8pt;&quot;&gt;&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: rgb(128, 0, 0);&quot;&gt;Attachment&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; text-align: left; line-height: 12pt; background-color: white; width: 100%; font-family: 'Courier New',courier,monospace; direction: ltr; color: black; font-size: 8pt;&quot;&gt;&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: rgb(128, 0, 0);&quot;&gt;Attachment&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; text-align: left; line-height: 12pt; background-color: rgb(244, 244, 244); width: 100%; font-family: 'Courier New',courier,monospace; direction: ltr; color: black; font-size: 8pt;&quot;&gt;  &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: rgb(128, 0, 0);&quot;&gt;Name&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;gt;&lt;/span&gt;file2.pdf&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: rgb(128, 0, 0);&quot;&gt;Name&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; text-align: left; line-height: 12pt; background-color: white; width: 100%; font-family: 'Courier New',courier,monospace; direction: ltr; color: black; font-size: 8pt;&quot;&gt;  &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: rgb(128, 0, 0);&quot;&gt;Id&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;gt;&lt;/span&gt;2&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: rgb(128, 0, 0);&quot;&gt;Id&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; text-align: left; line-height: 12pt; background-color: rgb(244, 244, 244); width: 100%; font-family: 'Courier New',courier,monospace; direction: ltr; color: black; font-size: 8pt;&quot;&gt;&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: rgb(128, 0, 0);&quot;&gt;Attachment&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;Result had to be without Id elements&lt;/p&gt;&#xA;&#xA;&lt;div id=&quot;codeSnippetWrapper&quot;&gt;&#xA;  &lt;div style=&quot;border-style: none; padding: 0px; overflow: visible; text-align: left; line-height: 12pt; background-color: rgb(244, 244, 244); width: 100%; font-family: 'Courier New',courier,monospace; direction: ltr; color: black; font-size: 8pt;&quot; id=&quot;codeSnippet&quot;&gt;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; text-align: left; line-height: 12pt; background-color: white; width: 100%; font-family: 'Courier New',courier,monospace; direction: ltr; color: black; font-size: 8pt;&quot;&gt;&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: rgb(128, 0, 0);&quot;&gt;Attachment&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; text-align: left; line-height: 12pt; background-color: rgb(244, 244, 244); width: 100%; font-family: 'Courier New',courier,monospace; direction: ltr; color: black; font-size: 8pt;&quot;&gt;  &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: rgb(128, 0, 0);&quot;&gt;Name&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;gt;&lt;/span&gt;file1.pdf&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: rgb(128, 0, 0);&quot;&gt;Name&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; text-align: left; line-height: 12pt; background-color: white; width: 100%; font-family: 'Courier New',courier,monospace; direction: ltr; color: black; font-size: 8pt;&quot;&gt;&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: rgb(128, 0, 0);&quot;&gt;Attachment&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; text-align: left; line-height: 12pt; background-color: rgb(244, 244, 244); width: 100%; font-family: 'Courier New',courier,monospace; direction: ltr; color: black; font-size: 8pt;&quot;&gt;&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: rgb(128, 0, 0);&quot;&gt;Attachment&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; text-align: left; line-height: 12pt; background-color: white; width: 100%; font-family: 'Courier New',courier,monospace; direction: ltr; color: black; font-size: 8pt;&quot;&gt;  &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: rgb(128, 0, 0);&quot;&gt;Name&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;gt;&lt;/span&gt;file2.pdf&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: rgb(128, 0, 0);&quot;&gt;Name&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; text-align: left; line-height: 12pt; background-color: rgb(244, 244, 244); width: 100%; font-family: 'Courier New',courier,monospace; direction: ltr; color: black; font-size: 8pt;&quot;&gt;&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: rgb(128, 0, 0);&quot;&gt;Attachment&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;A few choices for implementation:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;  &lt;li&gt;Regex&lt;/li&gt;&#xA;&#xA;  &lt;li&gt;XmlDocument&lt;/li&gt;&#xA;&#xA;  &lt;li&gt;LINQ to XML&lt;/li&gt;&lt;li&gt;XSLT &lt;i&gt;&lt;font color=&quot;#cc6633&quot;&gt;(as suggested in comments)&lt;/font&gt;&lt;/i&gt;&lt;br&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;Regex option is probably the most efficient, but not the most maintainable. Myself, looking sometimes at the solutions with Regex I ask “what the heck did I try to do here”. So much for “code doesn’t lie”.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;XmlDocument is more expressive than Regex option, but way too chatty.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;LINQ to XML same as XmlDocument, expressive. As well as very clear and fluent. I picked this option not for performance, but for maintainability sake. I know it will take less developer type to understand and/or modify code when it’s time to change it. And it documents itself very well, with no need to write any comments.&lt;/p&gt;&#xA;&#xA;&lt;div id=&quot;codeSnippetWrapper&quot;&gt;&#xA;  &lt;div style=&quot;border-style: none; padding: 0px; overflow: visible; text-align: left; line-height: 12pt; background-color: rgb(244, 244, 244); width: 100%; font-family: 'Courier New',courier,monospace; direction: ltr; color: black; font-size: 8pt;&quot; id=&quot;codeSnippet&quot;&gt;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; text-align: left; line-height: 12pt; background-color: white; width: 100%; font-family: 'Courier New',courier,monospace; direction: ltr; color: black; font-size: 8pt;&quot;&gt;var xdoc = XDocument.Load(&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;new&lt;/span&gt; StringReader(received_content));&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; text-align: left; line-height: 12pt; background-color: rgb(244, 244, 244); width: 100%; font-family: 'Courier New',courier,monospace; direction: ltr; color: black; font-size: 8pt;&quot;&gt;&lt;b&gt;xdoc.Descendants().Where(element =&amp;gt; element.Name == &lt;span style=&quot;color: rgb(0, 96, 128);&quot;&gt;&quot;Id&quot;&lt;/span&gt;).Remove();&lt;/b&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; text-align: left; line-height: 12pt; background-color: white; width: 100%; font-family: 'Courier New',courier,monospace; direction: ltr; color: black; font-size: 8pt;&quot;&gt;&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;return&lt;/span&gt; xdoc.ToString();&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Note: this is a very specific case, which does not indicate it’s a solution to all kinds of problems. Regex / XmlDocument are valid tools for all sorts of other problems.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-10-09T03:28:00Z" PublishedUtc="2014-04-19T20:32:18.7987822Z" ModifiedUtc="2009-10-09T03:28:00Z" />
      <TagsPart Tags=".NET" />
      <AutoroutePart Alias="linq-to-xml-for-better-maintainability" UseCustomPattern="false" />
      <TitlePart Title="LINQ to XML for Better Maintainability" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=too-loosely-coupled-code-one-year-later" Status="Published">
      <BodyPart Text="&lt;p&gt;More than a year ago, I have posted a &lt;a href=&quot;http://weblogs.asp.net/sfeldman/archive/2008/06/09/too-loosely-coupled-code.aspx&quot; target=&quot;_blank&quot;&gt;blog entry&lt;/a&gt; related to what I was trying to implement in one of the projects. Unfortunately, not my team could understand what I was trying to do, neither I was able to make myself clear. Either way, I ended up closing the blog with a question “&lt;em&gt;can code be too loosely (coupled), or your code is so coupled, that anything else is difficult to digest?&lt;/em&gt;”. Now I can answer my own question question.&lt;/p&gt;  &lt;p&gt;Today, my current team had a team learning session, when the latest project demonstration showed what are we doing with a &lt;a href=&quot;http://weblogs.asp.net/sfeldman/archive/2008/02/14/understanding-ioc-container.aspx&quot; target=&quot;_blank&quot;&gt;IoC&lt;/a&gt; container we started to leverage (&lt;a href=&quot;http://structuremap.sourceforge.net/Default.htm&quot; target=&quot;_blank&quot;&gt;StructureMap&lt;/a&gt;). The team is not the same one I had back a year+ ago. This team has also had &lt;strong&gt;same&lt;/strong&gt; difficulty in the beginning – code that was too coupled. We have started from “Poor mans’ injection”,&amp;#160; moved to home-grown Dependency Resolver with a typical Startup Task, and now have reached the point, where a third party open-source IoC container is used. I think that could be achieved because:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;We worked on decoupling code, learning the pros and cons&lt;/li&gt;    &lt;li&gt;We got to the point were &lt;a href=&quot;http://en.wikipedia.org/wiki/Single_responsibility_principle&quot; target=&quot;_blank&quot;&gt;SRP&lt;/a&gt; is followed&lt;/li&gt;    &lt;li&gt;We have got to the point were &lt;a href=&quot;http://en.wikipedia.org/wiki/Design_by_contract&quot; target=&quot;_blank&quot;&gt;Design by Contract&lt;/a&gt; is almost entirely how we develop&lt;/li&gt;    &lt;li&gt;We have a complete &lt;a href=&quot;http://en.wikipedia.org/wiki/Test_driven_development&quot; target=&quot;_blank&quot;&gt;TDD&lt;/a&gt; development in place&lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;So why I could not root the idea in my previous team? Because it was way too early for my team mates and I was not ready to wait. &lt;/p&gt;  &lt;p&gt;Oh, and how the code looks now? Even better than before ;)&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;div id=&quot;codeSnippetWrapper&quot;&gt;   &lt;div style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot; id=&quot;codeSnippet&quot;&gt;     &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;class&lt;/span&gt; ComponentB : IComponentB   &lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;{&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;  &lt;span style=&quot;color: #0000ff&quot;&gt;private&lt;/span&gt; IComponentA dependency;   &lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&amp;#160;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;  &lt;strong&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;public&lt;/span&gt; ComponentB(IComponentA dependency)&lt;/strong&gt;    &lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;  {   &lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;    &lt;span style=&quot;color: #0000ff&quot;&gt;this&lt;/span&gt;.dependency = dependency;  &lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;  } &lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&amp;#160;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;  &lt;span style=&quot;color: #0000ff&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;void&lt;/span&gt; SomeFunctionality(&lt;span style=&quot;color: #0000ff&quot;&gt;string&lt;/span&gt; param)&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;  {&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;    var result = dependency.OperationDefinedByDependencyContract(param);  &lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;    &lt;span style=&quot;color: #0000ff&quot;&gt;return&lt;/span&gt; DoSomethingWith(result);   &lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;  }&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;}&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Benefits:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;  &lt;li&gt;&lt;a href=&quot;http://weblogs.asp.net/sfeldman/archive/2008/12/12/quot-hello-world-quot-tdd-style.aspx&quot; target=&quot;_blank&quot;&gt;TDD/BDD&lt;/a&gt; development style is enforced better when there’s no default constructor with Dependency Resolver or Poor’s man injection&lt;/li&gt;&#xA;&#xA;  &lt;li&gt;No messy Startup Task that is a must when doing Dependency Resolver&lt;/li&gt;&#xA;&#xA;  &lt;li&gt;Can leverage smarts of IoC container to perform tasks on a massive scale (interceptors, events, etc)&lt;/li&gt;&#xA;&#xA;  &lt;li&gt;Easy way to verify if all dependencies are wired or not (contract based dependencies)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;And as one commenter of the original blog post has asked correctly: “&lt;em&gt;The question might be more appropriately be, is the code self-documenting? Can someone who did not write the original code follow the logic and modify and maintain it?&lt;/em&gt;”. The answer is: &lt;strong&gt;it depends&lt;/strong&gt;. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;You have to get to a certain level to answer Yes. Until you get to that level, the answer will always be No. In order for code to be self-documenting, it needs to be of high quality and accompanied with tests/specifications. In order to be modified, maintained, and logic followed by a person who did not write it, it has to have the listed above &lt;strong&gt;AND&lt;/strong&gt; have the person to be at a certain level of skills.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-10-07T02:00:00Z" PublishedUtc="2014-04-19T20:32:19.5175231Z" ModifiedUtc="2009-10-07T02:00:00Z" />
      <TagsPart Tags="OO,Patterns,TDD" />
      <AutoroutePart Alias="too-loosely-coupled-code-one-year-later" UseCustomPattern="false" />
      <TitlePart Title="Too Loosely Coupled Code – One Year Later" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=consuming-asmx-web-service-with-wcf" Status="Published">
      <BodyPart Text="&lt;p&gt;ASMX web services were a breakthrough when appeared on .NET platform. A lot of services were created to take advantage of web services technology.&lt;/p&gt;  &lt;p&gt;Now, that WCF is replacing legacy web services, we still have a lot of legacy web services running and being used. Connecting to legacy web services from WCF can be achieved either by leveraging Visual Studio .NET auto-generated proxies, or by &lt;a href=&quot;http://weblogs.asp.net/sfeldman/archive/2009/09/22/dynamic-wcf-proxy.aspx&quot; mce_href=&quot;http://weblogs.asp.net/sfeldman/archive/2009/09/22/dynamic-wcf-proxy.aspx&quot; target=&quot;_blank&quot;&gt;creating dynamic channel&lt;/a&gt; I talked about before. Creating dynamic channel looks like a cleaner solution, but there are a few caveats:&lt;/p&gt;  &lt;p&gt;1. Legacy web service does not always expose a known/published interface (quiet often just implementation and no contracts);&lt;/p&gt;  &lt;p&gt;2. Configuration might be a little tweaky;&lt;/p&gt;  &lt;p&gt;In order to overcome the 1st issue, we can “re-invent” the contract that a legacy web service “would” implement.&lt;/p&gt;  &lt;div style=&quot;border: 1px solid silver; margin: 20px 0px 10px; padding: 4px; overflow: auto; text-align: left; line-height: 12pt; background-color: rgb(244, 244, 244); width: 97.5%; font-family: 'Courier New',courier,monospace; direction: ltr; max-height: 200px; font-size: 8pt; cursor: text;&quot; id=&quot;codeSnippetWrapper&quot;&gt;   &lt;div style=&quot;border-style: none; padding: 0px; overflow: visible; text-align: left; line-height: 12pt; background-color: rgb(244, 244, 244); width: 100%; font-family: 'Courier New',courier,monospace; direction: ltr; color: black; font-size: 8pt;&quot; id=&quot;codeSnippet&quot;&gt;     &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; text-align: left; line-height: 12pt; background-color: white; width: 100%; font-family: 'Courier New',courier,monospace; direction: ltr; color: black; font-size: 8pt;&quot;&gt;[XmlSerializerFormat]&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; text-align: left; line-height: 12pt; background-color: rgb(244, 244, 244); width: 100%; font-family: 'Courier New',courier,monospace; direction: ltr; color: black; font-size: 8pt;&quot;&gt;public interface ILegacyService&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; text-align: left; line-height: 12pt; background-color: white; width: 100%; font-family: 'Courier New',courier,monospace; direction: ltr; color: black; font-size: 8pt;&quot;&gt;{&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; text-align: left; line-height: 12pt; background-color: rgb(244, 244, 244); width: 100%; font-family: 'Courier New',courier,monospace; direction: ltr; color: black; font-size: 8pt;&quot;&gt;  [OperationContract]&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; text-align: left; line-height: 12pt; background-color: white; width: 100%; font-family: 'Courier New',courier,monospace; direction: ltr; color: black; font-size: 8pt;&quot;&gt;  Version GetVersion();&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; text-align: left; line-height: 12pt; background-color: rgb(244, 244, 244); width: 100%; font-family: 'Courier New',courier,monospace; direction: ltr; color: black; font-size: 8pt;&quot;&gt;}&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;Next we can generate a dynamic channel&lt;/p&gt;&#xA;&#xA;&lt;div style=&quot;border: 1px solid silver; margin: 20px 0px 10px; padding: 4px; overflow: auto; text-align: left; line-height: 12pt; background-color: rgb(244, 244, 244); width: 97.5%; font-family: 'Courier New',courier,monospace; direction: ltr; max-height: 200px; font-size: 8pt; cursor: text;&quot; id=&quot;codeSnippetWrapper&quot;&gt;&#xA;  &lt;div style=&quot;border-style: none; padding: 0px; overflow: visible; text-align: left; line-height: 12pt; background-color: rgb(244, 244, 244); width: 100%; font-family: 'Courier New',courier,monospace; direction: ltr; color: black; font-size: 8pt;&quot; id=&quot;codeSnippet&quot;&gt;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; text-align: left; line-height: 12pt; background-color: white; width: 100%; font-family: 'Courier New',courier,monospace; direction: ltr; color: black; font-size: 8pt;&quot;&gt;var channel = &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;new&lt;/span&gt; ChannelFactory&amp;lt;ILegacyService&amp;gt;().CreateChannel();&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; text-align: left; line-height: 12pt; background-color: rgb(244, 244, 244); width: 100%; font-family: 'Courier New',courier,monospace; direction: ltr; color: black; font-size: 8pt;&quot;&gt;&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;using&lt;/span&gt; (channel &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;as&lt;/span&gt; IDisposable)&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; text-align: left; line-height: 12pt; background-color: white; width: 100%; font-family: 'Courier New',courier,monospace; direction: ltr; color: black; font-size: 8pt;&quot;&gt;  &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;return&lt;/span&gt; channel.GetVersion();&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;Once we have channel – time to configure &lt;/p&gt;&#xA;&#xA;&lt;div style=&quot;border: 1px solid silver; margin: 20px 0px 10px; padding: 4px; overflow: auto; text-align: left; line-height: 12pt; background-color: rgb(244, 244, 244); width: 97.5%; font-family: 'Courier New',courier,monospace; direction: ltr; max-height: 200px; font-size: 8pt; cursor: text;&quot; id=&quot;codeSnippetWrapper&quot;&gt;&#xA;  &lt;div style=&quot;border-style: none; padding: 0px; overflow: visible; text-align: left; line-height: 12pt; background-color: rgb(244, 244, 244); width: 100%; font-family: 'Courier New',courier,monospace; direction: ltr; color: black; font-size: 8pt;&quot; id=&quot;codeSnippet&quot;&gt;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; text-align: left; line-height: 12pt; background-color: white; width: 100%; font-family: 'Courier New',courier,monospace; direction: ltr; color: black; font-size: 8pt;&quot;&gt;&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: rgb(128, 0, 0);&quot;&gt;system.serviceModel&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; text-align: left; line-height: 12pt; background-color: rgb(244, 244, 244); width: 100%; font-family: 'Courier New',courier,monospace; direction: ltr; color: black; font-size: 8pt;&quot;&gt;  &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: rgb(128, 0, 0);&quot;&gt;client&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; text-align: left; line-height: 12pt; background-color: white; width: 100%; font-family: 'Courier New',courier,monospace; direction: ltr; color: black; font-size: 8pt;&quot;&gt;    &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: rgb(128, 0, 0);&quot;&gt;endpoint&lt;/span&gt; &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;=&quot;SomeServiceEndPoint&quot;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; text-align: left; line-height: 12pt; background-color: rgb(244, 244, 244); width: 100%; font-family: 'Courier New',courier,monospace; direction: ltr; color: black; font-size: 8pt;&quot;&gt;              &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;address&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;=&quot;http://some.where.com/LegacyService/LegacyService.asmx&quot;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; text-align: left; line-height: 12pt; background-color: white; width: 100%; font-family: 'Courier New',courier,monospace; direction: ltr; color: black; font-size: 8pt;&quot;&gt;              &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;binding&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;=&quot;customBinding&quot;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; text-align: left; line-height: 12pt; background-color: rgb(244, 244, 244); width: 100%; font-family: 'Courier New',courier,monospace; direction: ltr; color: black; font-size: 8pt;&quot;&gt;              &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;contract&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;=&quot;ILegacyService&quot;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; text-align: left; line-height: 12pt; background-color: white; width: 100%; font-family: 'Courier New',courier,monospace; direction: ltr; color: black; font-size: 8pt;&quot;&gt;              &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;bindingConfiguration&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;=&quot;custom.binding.for.SomeService&quot;&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; text-align: left; line-height: 12pt; background-color: rgb(244, 244, 244); width: 100%; font-family: 'Courier New',courier,monospace; direction: ltr; color: black; font-size: 8pt;&quot;&gt;    &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: rgb(128, 0, 0);&quot;&gt;endpoint&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; text-align: left; line-height: 12pt; background-color: white; width: 100%; font-family: 'Courier New',courier,monospace; direction: ltr; color: black; font-size: 8pt;&quot;&gt;  &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: rgb(128, 0, 0);&quot;&gt;client&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; text-align: left; line-height: 12pt; background-color: rgb(244, 244, 244); width: 100%; font-family: 'Courier New',courier,monospace; direction: ltr; color: black; font-size: 8pt;&quot;&gt;  &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: rgb(128, 0, 0);&quot;&gt;bindings&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; text-align: left; line-height: 12pt; background-color: white; width: 100%; font-family: 'Courier New',courier,monospace; direction: ltr; color: black; font-size: 8pt;&quot;&gt;    &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: rgb(128, 0, 0);&quot;&gt;customBinding&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; text-align: left; line-height: 12pt; background-color: rgb(244, 244, 244); width: 100%; font-family: 'Courier New',courier,monospace; direction: ltr; color: black; font-size: 8pt;&quot;&gt;      &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: rgb(128, 0, 0);&quot;&gt;binding&lt;/span&gt; &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;=&quot;custom.binding.for.SomeService&quot;&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; text-align: left; line-height: 12pt; background-color: white; width: 100%; font-family: 'Courier New',courier,monospace; direction: ltr; color: black; font-size: 8pt;&quot;&gt;        &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: rgb(128, 0, 0);&quot;&gt;textMessageEncoding&lt;/span&gt; &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;messageVersion&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;=&quot;Soap12&quot;&lt;/span&gt; &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;writeEncoding&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;=&quot;utf-8&quot;&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; text-align: left; line-height: 12pt; background-color: rgb(244, 244, 244); width: 100%; font-family: 'Courier New',courier,monospace; direction: ltr; color: black; font-size: 8pt;&quot;&gt;        &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: rgb(128, 0, 0);&quot;&gt;httpTransport&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; text-align: left; line-height: 12pt; background-color: white; width: 100%; font-family: 'Courier New',courier,monospace; direction: ltr; color: black; font-size: 8pt;&quot;&gt;      &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: rgb(128, 0, 0);&quot;&gt;binding&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; text-align: left; line-height: 12pt; background-color: rgb(244, 244, 244); width: 100%; font-family: 'Courier New',courier,monospace; direction: ltr; color: black; font-size: 8pt;&quot;&gt;    &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: rgb(128, 0, 0);&quot;&gt;customBinding&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; text-align: left; line-height: 12pt; background-color: white; width: 100%; font-family: 'Courier New',courier,monospace; direction: ltr; color: black; font-size: 8pt;&quot;&gt;  &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: rgb(128, 0, 0);&quot;&gt;bindings&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; text-align: left; line-height: 12pt; background-color: rgb(244, 244, 244); width: 100%; font-family: 'Courier New',courier,monospace; direction: ltr; color: black; font-size: 8pt;&quot;&gt;&amp;nbsp;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; text-align: left; line-height: 12pt; background-color: white; width: 100%; font-family: 'Courier New',courier,monospace; direction: ltr; color: black; font-size: 8pt;&quot;&gt;&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: rgb(128, 0, 0);&quot;&gt;system.serviceModel&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;One comment about ServiceContract attribute. When consuming a legacy web service, and it has a pre-defined namespace. Modification to “re-invented” service will include the required information (such as Namespace)&lt;/p&gt;&#xA;&#xA;&lt;div style=&quot;border: 1px solid silver; margin: 20px 0px 10px; padding: 4px; overflow: auto; text-align: left; line-height: 12pt; background-color: rgb(244, 244, 244); width: 97.5%; font-family: 'Courier New',courier,monospace; direction: ltr; max-height: 200px; font-size: 8pt; cursor: text;&quot; id=&quot;codeSnippetWrapper&quot;&gt;&#xA;  &lt;div style=&quot;border-style: none; padding: 0px; overflow: visible; text-align: left; line-height: 12pt; background-color: rgb(244, 244, 244); width: 100%; font-family: 'Courier New',courier,monospace; direction: ltr; color: black; font-size: 8pt;&quot; id=&quot;codeSnippet&quot;&gt;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; text-align: left; line-height: 12pt; background-color: white; width: 100%; font-family: 'Courier New',courier,monospace; direction: ltr; color: black; font-size: 8pt;&quot;&gt;[XmlSerializerFormat]&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; text-align: left; line-height: 12pt; background-color: rgb(244, 244, 244); width: 100%; font-family: 'Courier New',courier,monospace; direction: ltr; color: black; font-size: 8pt;&quot;&gt;  [ServiceContract(Namespace = &lt;a href=&quot;http://some.where.com/LegacyService&quot; mce_href=&quot;http://some.where.com/LegacyService&quot;&gt;http://some.where.com/LegacyService&lt;/a&gt;)]&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; text-align: left; line-height: 12pt; background-color: white; width: 100%; font-family: 'Courier New',courier,monospace; direction: ltr; color: black; font-size: 8pt;&quot;&gt;  public interface ILegacyService &lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; text-align: left; line-height: 12pt; background-color: rgb(244, 244, 244); width: 100%; font-family: 'Courier New',courier,monospace; direction: ltr; color: black; font-size: 8pt;&quot;&gt;  {&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; text-align: left; line-height: 12pt; background-color: white; width: 100%; font-family: 'Courier New',courier,monospace; direction: ltr; color: black; font-size: 8pt;&quot;&gt;    [OperationContract]&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; text-align: left; line-height: 12pt; background-color: rgb(244, 244, 244); width: 100%; font-family: 'Courier New',courier,monospace; direction: ltr; color: black; font-size: 8pt;&quot;&gt;    Version GetVersion();&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; text-align: left; line-height: 12pt; background-color: white; width: 100%; font-family: 'Courier New',courier,monospace; direction: ltr; color: black; font-size: 8pt;&quot;&gt;  }&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&lt;/div&gt;&#xA;&lt;/div&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-10-02T06:23:00Z" PublishedUtc="2014-04-19T20:32:20.1581403Z" ModifiedUtc="2009-10-02T06:23:00Z" />
      <TagsPart Tags=".NET" />
      <AutoroutePart Alias="consuming-asmx-web-service-with-wcf" UseCustomPattern="false" />
      <TitlePart Title="Consuming ASMX Web Service With WCF" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=to-test-or-not-to-test-not-a-question" Status="Published">
      <BodyPart Text="&lt;p&gt;&lt;a href=&quot;http://weblogs.asp.net/blogs/sfeldman/image_168DD4B9.png&quot; mce_href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_168DD4B9.png&quot;&gt;&lt;img src=&quot;http://weblogs.asp.net/blogs/sfeldman/image_thumb_3879373D.png&quot; style=&quot;border: 0px none ; display: inline; margin-left: 0px; margin-right: 0px;&quot; title=&quot;image&quot; alt=&quot;image&quot; mce_src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_3879373D.png&quot; align=&quot;right&quot; border=&quot;0&quot; height=&quot;108&quot; width=&quot;244&quot;&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;There was a lot of noise generated by a blog &lt;a href=&quot;http://www.joelonsoftware.com/items/2009/09/23.html&quot; mce_href=&quot;http://www.joelonsoftware.com/items/2009/09/23.html&quot; target=&quot;_blank&quot;&gt;“The Duct Tape Programmer”&lt;/a&gt;. There were lots of responses as well (&lt;a href=&quot;http://blog.objectmentor.com/articles/2009/09/24/the-duct-tape-programmer&quot; mce_href=&quot;http://blog.objectmentor.com/articles/2009/09/24/the-duct-tape-programmer&quot; target=&quot;_blank&quot;&gt;link&lt;/a&gt;, &lt;a href=&quot;http://jeffreypalermo.com/blog/debunking-the-duct-tape-programmer/&quot; mce_href=&quot;http://jeffreypalermo.com/blog/debunking-the-duct-tape-programmer/&quot; target=&quot;_blank&quot;&gt;link&lt;/a&gt;, &lt;a href=&quot;http://devlicio.us/blogs/casey/archive/2009/09/25/ship-it-or-ship-out.aspx&quot; mce_href=&quot;http://devlicio.us/blogs/casey/archive/2009/09/25/ship-it-or-ship-out.aspx&quot; target=&quot;_blank&quot;&gt;link&lt;/a&gt;, &lt;a href=&quot;http://www.markhneedham.com/blog/2009/09/26/the-duct-tape-programmer-some-thoughts/&quot; mce_href=&quot;http://www.markhneedham.com/blog/2009/09/26/the-duct-tape-programmer-some-thoughts/&quot; target=&quot;_blank&quot;&gt;link&lt;/a&gt;, &lt;a href=&quot;http://geekswithblogs.net/leesblog/archive/2009/09/26/the-backyard-mechanic.aspx&quot; mce_href=&quot;http://geekswithblogs.net/leesblog/archive/2009/09/26/the-backyard-mechanic.aspx&quot; target=&quot;_blank&quot;&gt;link&lt;/a&gt;, &lt;a href=&quot;http://www.rgoarchitects.com/nblog/2009/09/25/TheDuctTapeProgrammer.aspx&quot; mce_href=&quot;http://www.rgoarchitects.com/nblog/2009/09/25/TheDuctTapeProgrammer.aspx&quot; target=&quot;_blank&quot;&gt;link&lt;/a&gt;, &lt;a href=&quot;http://codebetter.com/blogs/ian_cooper/archive/2009/09/28/beating-the-duct-programmer-with-generic-domains-subdomains-and-core-domains.aspx&quot; mce_href=&quot;http://codebetter.com/blogs/ian_cooper/archive/2009/09/28/beating-the-duct-programmer-with-generic-domains-subdomains-and-core-domains.aspx&quot; target=&quot;_blank&quot;&gt;link,&lt;/a&gt; &lt;a href=&quot;http://www.lostechies.com/blogs/scottcreynolds/archive/2009/09/29/smart-and-gets-things-done-right.aspx&quot; target=&quot;_blank&quot; mce_href=&quot;http://www.lostechies.com/blogs/scottcreynolds/archive/2009/09/29/smart-and-gets-things-done-right.aspx&quot;&gt;link&lt;/a&gt;…). The last one I read was from &lt;a href=&quot;http://ayende.com/Blog/archive/2009/09/30/duct-tape-programmers.aspx&quot; mce_href=&quot;http://ayende.com/Blog/archive/2009/09/30/duct-tape-programmers.aspx&quot; target=&quot;_blank&quot;&gt;Oren&lt;/a&gt;, where he puts it plain – just don’t do it. &lt;/p&gt;  &lt;p&gt;I have my reasons to disagree with the statement(s) Joel wrote in his blog, but probably the most important one is about testing. Probably the reason for that is because &lt;b&gt;I was&lt;/b&gt; developing without TDD for quiet a while, and I saw the difference. To me tests are design, and if you drop them, well, hell with design. A good project has to have a good design, and design starts from code, expressed first in tests, and after that in production code.&lt;/p&gt;  &lt;p&gt;PS: if you disagree, the trash bin in on your desktop, not at my blog comments. 10x&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-09-30T03:55:00Z" PublishedUtc="2014-04-19T20:32:20.9237554Z" ModifiedUtc="2009-09-30T03:55:00Z" />
      <TagsPart Tags="TDD" />
      <AutoroutePart Alias="to-test-or-not-to-test-not-a-question" UseCustomPattern="false" />
      <TitlePart Title="To Test or Not To Test: Not a Question!" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=dynamic-wcf-proxy" Status="Published">
      <BodyPart Text="&lt;p&gt;Our new system is entirely based of services (SOA solution). From the day one we had an issue with Visual Studio auto-magically generated proxies and management of those as system grew. Solution at that time was to create clients of the services dynamically, but the knowledge of WCF we had was a minimal. Now, 6+ months later, we finally getting to the point where I am comfortable and pleased with the solution. The interesting part is that WCF had that option all the time, we were not just educated enough to see it. Now we are.&lt;/p&gt;  &lt;p&gt;The solution is to leverage &lt;i&gt;ChannelFactory &lt;/i&gt;provided by WCF and create a client proxy from an end point defined in configuration file. Let me show the process from the client perspective:&lt;/p&gt;  &lt;div style=&quot;border: 1px solid silver; margin: 20px 0px 10px; padding: 4px; overflow: auto; text-align: left; line-height: 12pt; background-color: rgb(244, 244, 244); width: 97.5%; font-family: 'Courier New',courier,monospace; direction: ltr; max-height: 200px; font-size: 8pt; cursor: text;&quot; id=&quot;codeSnippetWrapper&quot;&gt;   &lt;div style=&quot;border-style: none; padding: 0px; overflow: visible; text-align: left; line-height: 12pt; background-color: rgb(244, 244, 244); width: 100%; font-family: 'Courier New',courier,monospace; direction: ltr; color: black; font-size: 8pt;&quot; id=&quot;codeSnippet&quot;&gt;     &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; text-align: left; line-height: 12pt; background-color: white; width: 100%; font-family: 'Courier New',courier,monospace; direction: ltr; color: black; font-size: 8pt;&quot;&gt;var channel = &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;new&lt;/span&gt; ChannelFactory&amp;lt;IWcfAppenderService&amp;gt;(&quot;WcfAppenderServiceEP&quot;).CreateChannel();&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;&lt;i&gt;channel&lt;/i&gt; is our proxy. Reading carefully &lt;a href=&quot;http://www.amazon.ca/Programming-WCF-Services-Juval-Lowy/dp/0596521308&quot; mce_href=&quot;http://www.amazon.ca/Programming-WCF-Services-Juval-Lowy/dp/0596521308&quot; target=&quot;_blank&quot;&gt;Programming WCF Services&lt;/a&gt; book from Yuval Lowy (page 48), it is clear that a channel has to be closed, regardless of the state it’s found in after invocation (faulted or not).&lt;/p&gt;&#xA;&#xA;&lt;div style=&quot;border: 1px solid silver; margin: 20px 0px 10px; padding: 4px; overflow: auto; text-align: left; line-height: 12pt; background-color: rgb(244, 244, 244); width: 97.5%; font-family: 'Courier New',courier,monospace; direction: ltr; max-height: 200px; font-size: 8pt; cursor: text;&quot; id=&quot;codeSnippetWrapper&quot;&gt;&#xA;  &lt;div style=&quot;border-style: none; padding: 0px; overflow: visible; text-align: left; line-height: 12pt; background-color: rgb(244, 244, 244); width: 100%; font-family: 'Courier New',courier,monospace; direction: ltr; color: black; font-size: 8pt;&quot; id=&quot;codeSnippet&quot;&gt;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; text-align: left; line-height: 12pt; background-color: white; width: 100%; font-family: 'Courier New',courier,monospace; direction: ltr; color: black; font-size: 8pt;&quot;&gt;&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;using&lt;/span&gt;(channel &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;as&lt;/span&gt; IDisposable)&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; text-align: left; line-height: 12pt; background-color: rgb(244, 244, 244); width: 100%; font-family: 'Courier New',courier,monospace; direction: ltr; color: black; font-size: 8pt;&quot;&gt;          channel.Append(loggingEventDataDto);&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;.NET &lt;i&gt;using&lt;/i&gt; statement does the work.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This is it. To simplify the whole thing, we could intercept method calls on channel with a transparent proxy of ours and wrap with &lt;i&gt;using&lt;/i&gt; statements – that way a user does not have to remember to do it each time.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Configuration file for a client would contain the minimal required information:&lt;/p&gt;&#xA;&#xA;&lt;div style=&quot;border: 1px solid silver; margin: 20px 0px 10px; padding: 4px; overflow: auto; text-align: left; line-height: 12pt; background-color: rgb(244, 244, 244); width: 97.5%; font-family: 'Courier New',courier,monospace; direction: ltr; max-height: 200px; font-size: 8pt; cursor: text;&quot; id=&quot;codeSnippetWrapper&quot;&gt;&#xA;  &lt;div style=&quot;border-style: none; padding: 0px; overflow: visible; text-align: left; line-height: 12pt; background-color: rgb(244, 244, 244); width: 100%; font-family: 'Courier New',courier,monospace; direction: ltr; color: black; font-size: 8pt;&quot; id=&quot;codeSnippet&quot;&gt;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; text-align: left; line-height: 12pt; background-color: white; width: 100%; font-family: 'Courier New',courier,monospace; direction: ltr; color: black; font-size: 8pt;&quot;&gt;&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: rgb(128, 0, 0);&quot;&gt;system.serviceModel&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; text-align: left; line-height: 12pt; background-color: rgb(244, 244, 244); width: 100%; font-family: 'Courier New',courier,monospace; direction: ltr; color: black; font-size: 8pt;&quot;&gt;  &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: rgb(128, 0, 0);&quot;&gt;client&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; text-align: left; line-height: 12pt; background-color: white; width: 100%; font-family: 'Courier New',courier,monospace; direction: ltr; color: black; font-size: 8pt;&quot;&gt;    &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: rgb(128, 0, 0);&quot;&gt;endpoint&lt;/span&gt; &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;address&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;=&quot;http://localhost:4268/WcfAppenderService.svc&quot;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; text-align: left; line-height: 12pt; background-color: rgb(244, 244, 244); width: 100%; font-family: 'Courier New',courier,monospace; direction: ltr; color: black; font-size: 8pt;&quot;&gt;        &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;binding&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;=&quot;wsHttpBinding&quot;&lt;/span&gt; &lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; text-align: left; line-height: 12pt; background-color: white; width: 100%; font-family: 'Courier New',courier,monospace; direction: ltr; color: black; font-size: 8pt;&quot;&gt;        &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;contract&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;=&quot;WcfAppender.Contracts.IWcfAppenderService&quot;&lt;/span&gt; &lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; text-align: left; line-height: 12pt; background-color: rgb(244, 244, 244); width: 100%; font-family: 'Courier New',courier,monospace; direction: ltr; color: black; font-size: 8pt;&quot;&gt;        &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;=&quot;WcfAppenderServiceEP&quot;&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; text-align: left; line-height: 12pt; background-color: white; width: 100%; font-family: 'Courier New',courier,monospace; direction: ltr; color: black; font-size: 8pt;&quot;&gt;    &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: rgb(128, 0, 0);&quot;&gt;endpoint&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; text-align: left; line-height: 12pt; background-color: rgb(244, 244, 244); width: 100%; font-family: 'Courier New',courier,monospace; direction: ltr; color: black; font-size: 8pt;&quot;&gt;  &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: rgb(128, 0, 0);&quot;&gt;client&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; text-align: left; line-height: 12pt; background-color: white; width: 100%; font-family: 'Courier New',courier,monospace; direction: ltr; color: black; font-size: 8pt;&quot;&gt;&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: rgb(128, 0, 0);&quot;&gt;system.serviceModel&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;!--CRLF--&gt;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;And the last missing part – contracts. A shared assembly with contracts would define all the service and data contracts. This is the only coupling between client and the server, which is logical, because contracts are coupling. &lt;a href=&quot;http://weblogs.asp.net/blogs/sfeldman/image_000B2BE4.png&quot; mce_href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_000B2BE4.png&quot;&gt;&lt;img src=&quot;http://weblogs.asp.net/blogs/sfeldman/image_thumb_4B012D64.png&quot; style=&quot;border: 0px none ; display: inline; margin-left: 0px; margin-right: 0px;&quot; title=&quot;image&quot; alt=&quot;image&quot; mce_src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_4B012D64.png&quot; align=&quot;right&quot; border=&quot;0&quot; height=&quot;207&quot; width=&quot;159&quot;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I am not done with my WCF adventures, but I can definitely point to a great book by Yuval Lowy as a reference for WCF.&amp;nbsp; &lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-09-23T01:22:00Z" PublishedUtc="2014-04-19T20:32:21.5643717Z" ModifiedUtc="2009-09-23T01:22:00Z" />
      <TagsPart Tags=".NET" />
      <AutoroutePart Alias="dynamic-wcf-proxy" UseCustomPattern="false" />
      <TitlePart Title="Dynamic WCF Proxy" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=goodbye-launcy-hello-executor" Status="Published">
      <BodyPart Text="&lt;p&gt;I have recently switched from &lt;a href=&quot;http://www.launchy.net/&quot; target=&quot;_blank&quot;&gt;Launchy&lt;/a&gt; to &lt;a href=&quot;http://www.1space.dk/executor&quot; target=&quot;_blank&quot;&gt;Executor&lt;/a&gt; after &lt;a href=&quot;http://www.connicus.com/&quot; target=&quot;_blank&quot;&gt;Terry&lt;/a&gt; told me about it. I test drove it for a while and find it better than Launcy, which was a great tool. Time for myself to move on to a better tool.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-09-22T16:44:00Z" PublishedUtc="2014-04-19T20:32:22.0175016Z" ModifiedUtc="2009-09-22T16:44:00Z" />
      <TagsPart Tags="Other" />
      <AutoroutePart Alias="goodbye-launcy-hello-executor" UseCustomPattern="false" />
      <TitlePart Title="Goodbye Launcy, Hello Executor" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=pair-programming-article" Status="Published">
      <BodyPart Text="&lt;p&gt;While reading blogs during today morning, I read an interesting &lt;a href=&quot;http://www.nytimes.com/2009/09/20/jobs/20pre.html?_r=3&quot; target=&quot;_blank&quot;&gt;one&lt;/a&gt;, which captures the way I feel about Pair-Programming. I have my opinion before (old posts), and it’s slightly updated since then, but at the end I still think it’s a great way and not just to develop.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-09-21T21:11:00Z" PublishedUtc="2014-04-19T20:32:22.2831117Z" ModifiedUtc="2009-09-21T21:11:00Z" />
      <TagsPart Tags="Agile" />
      <AutoroutePart Alias="pair-programming-article" UseCustomPattern="false" />
      <TitlePart Title="Pair-Programming Article" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=todos-are-not-forgotten" Status="Published">
      <BodyPart Text="&lt;p&gt;We are using Hudson as a build server, and one of the lasts steps that were taken is to mark a build as ‘unstable’ when we pass a certain number of TODO comments in our code (an arbitrary number). While I am not a 100% sold on a number, I think it’s a good way of insuring things are not just marked and forgotten. Actually, we are not even tracking TODOs, but BROKEN_WINDOW comments, as those are definitely bad. Failing on HACK is another possibility. Visualization plays a significant role in my case (interpretation of things based on visualization), and here how it looks (green is all good, yellow is all passed, but number of comments has exceeded the limit).&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_1C7946A4.png&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_3ED0DC1D.png&quot; width=&quot;227&quot; height=&quot;51&quot; /&gt;&lt;/a&gt;&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-09-17T17:13:00Z" PublishedUtc="2014-04-19T20:32:22.8143595Z" ModifiedUtc="2009-09-17T17:13:00Z" />
      <TagsPart Tags="Agile" />
      <AutoroutePart Alias="todos-are-not-forgotten" UseCustomPattern="false" />
      <TitlePart Title="TODOs are not forgotten" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=gallio-warning-output" Status="Published">
      <BodyPart Text="&lt;p&gt;Today I was trying to figure out how to access output Gallio is using to render a warning message. According to &lt;a href=&quot;http://blog.bits-in-motion.com/2008/10/announcing-gallio-and-mbunit-v304.html&quot; target=&quot;_blank&quot;&gt;this&lt;/a&gt;, the Assert.Warning was replaced by TestLog.Warning.WriteLine. But for some reason that is not doing the job. Has anyone encountered similar problem?&lt;/p&gt;  &lt;p&gt;We run today into this problem, while trying to update our spec-based testing framework. We got the required details from with-in the base specification (test) leveraging TestContext.CurrentContext.LogWriter.Warnings, but with no success. Anyone, ideas?&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-09-15T00:23:00Z" PublishedUtc="2014-04-19T20:32:23.5331049Z" ModifiedUtc="2009-09-15T00:23:00Z" />
      <TagsPart Tags="TDD" />
      <AutoroutePart Alias="gallio-warning-output" UseCustomPattern="false" />
      <TitlePart Title="Gallio Warning Output" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=nhibernate-profiler" Status="Published">
      <BodyPart Text="&lt;p&gt;Recently I had to update our domain model and it required some NHibernate profiling. I have installed trial version of &lt;a href=&quot;http://nhprof.com/&quot; target=&quot;_blank&quot;&gt;NHibernate Profiler&lt;/a&gt;, and it rocked. The fact that it was not only able to show what was going on, but also give suggestions how to improve NHibernate usage just rocked (unlimited records returned).&lt;/p&gt;  &lt;p&gt;I also loved straight, cut-the-bullshit communication with &lt;a href=&quot;http://ayende.com/Blog/&quot; target=&quot;_blank&quot;&gt;Oren&lt;/a&gt;, who has responded quickly (to the bug that I found). Worked for me, and we are going to purchase a few licenses.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-09-12T06:30:00Z" PublishedUtc="2014-04-19T20:32:23.7830939Z" ModifiedUtc="2009-09-12T06:30:00Z" />
      <TagsPart Tags="NHibernate" />
      <AutoroutePart Alias="nhibernate-profiler" UseCustomPattern="false" />
      <TitlePart Title="NHibernate Profiler" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=wix-product-version-with-build-script" Status="Published">
      <BodyPart Text="&lt;p&gt;Our projects are deployed with MSIs. Each MSI file is appended with the product version number (regular staff – major, minor, build number, revision number). &lt;/p&gt;  &lt;p&gt;While this is enough for deployment, in production, it is hard to determine what product version is installed without either searching for assemblies to see the version, or some other piece of evidence. Today I decided to leverage Wix to generate the Product Version number, based on our NAnt script.&lt;/p&gt;  &lt;p&gt;Nant script has all parts of product version defined as follow:&lt;/p&gt;  &lt;pre style=&quot;border: 1px solid rgb(206, 206, 206); padding: 5px; overflow: auto; background-color: rgb(251, 251, 251); min-height: 40px; width: 650px;&quot;&gt;&lt;pre style=&quot;margin: 0em; background-color: rgb(251, 251, 251); width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 12px;&quot;&gt;  1: &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: rgb(128, 0, 0);&quot;&gt;property&lt;/span&gt; &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;name&lt;/span&gt;=&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&quot;version.major&quot;&lt;/span&gt; &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;value&lt;/span&gt;=&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;pre style=&quot;margin: 0em; background-color: rgb(251, 251, 251); width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 12px;&quot;&gt;  2: &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: rgb(128, 0, 0);&quot;&gt;property&lt;/span&gt; &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;name&lt;/span&gt;=&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&quot;version.minor&quot;&lt;/span&gt; &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;value&lt;/span&gt;=&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&quot;7&quot;&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;pre style=&quot;margin: 0em; background-color: rgb(251, 251, 251); width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 12px;&quot;&gt;  3: &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: rgb(128, 0, 0);&quot;&gt;property&lt;/span&gt; &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;name&lt;/span&gt;=&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&quot;build.number&quot;&lt;/span&gt; &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;value&lt;/span&gt;=&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;readonly&lt;/span&gt;=&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&quot;false&quot;&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;pre style=&quot;margin: 0em; background-color: rgb(251, 251, 251); width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 12px;&quot;&gt;  4: &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: rgb(128, 0, 0);&quot;&gt;property&lt;/span&gt; &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;name&lt;/span&gt;=&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&quot;svn.revision&quot;&lt;/span&gt; &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;value&lt;/span&gt;=&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;readonly&lt;/span&gt;=&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&quot;false&quot;&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;pre style=&quot;margin: 0em; background-color: rgb(251, 251, 251); width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 12px;&quot;&gt;  5: &lt;br&gt;&lt;/pre&gt;&lt;pre style=&quot;margin: 0em; background-color: rgb(255, 255, 0); width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 12px;&quot;&gt;  6: &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: rgb(128, 0, 0);&quot;&gt;property&lt;/span&gt; &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;name&lt;/span&gt;=&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&quot;project.version.full&quot;&lt;/span&gt; &lt;br&gt;&lt;/pre&gt;&lt;pre style=&quot;margin: 0em; background-color: rgb(255, 255, 0); width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 12px;&quot;&gt;  7:           &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;value&lt;/span&gt;=&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&quot;${version.major}.${version.minor}.${build.number}.${svn.revision}&quot;&lt;/span&gt; &lt;br&gt;&lt;/pre&gt;&lt;pre style=&quot;margin: 0em; background-color: rgb(255, 255, 0); width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 12px;&quot;&gt;  8:           &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;dynamic&lt;/span&gt;=&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;readonly&lt;/span&gt;=&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&quot;false&quot;&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Next step was updating Wix installer project file to include an external include file with a defined variable for product version, called ProductVersion, and apply that to project. Here’s partial Wix installer file:&lt;/p&gt;&#xA;&#xA;&lt;pre style=&quot;border: 1px solid rgb(206, 206, 206); padding: 5px; overflow: auto; background-color: rgb(255, 255, 255); min-height: 40px; width: 650px;&quot;&gt;&lt;pre style=&quot;margin: 0em; background-color: rgb(255, 255, 255); width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 12px;&quot;&gt;  1: &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;lt;?&lt;/span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;pre style=&quot;margin: 0em; background-color: rgb(255, 255, 255); width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 12px;&quot;&gt;  2: &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: rgb(128, 0, 0);&quot;&gt;Wix&lt;/span&gt; &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;xmlns&lt;/span&gt;=&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&quot;http://schemas.microsoft.com/wix/2006/wi&quot;&lt;/span&gt; &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;xmlns&lt;/span&gt;:&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;iis&lt;/span&gt;=&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&quot;http://schemas.microsoft.com/wix/IIsExtension&quot;&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;pre style=&quot;margin: 0em; background-color: rgb(255, 255, 255); width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 12px;&quot;&gt;  3: &lt;br&gt;&lt;/pre&gt;&lt;pre style=&quot;margin: 0em; background-color: rgb(255, 255, 0); width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 12px;&quot;&gt;  4:   &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;lt;?&lt;/span&gt;define build_dir = &quot;$(var.ProjectDir)..\..\build\compile&quot;&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;pre style=&quot;margin: 0em; background-color: rgb(255, 255, 0); width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 12px;&quot;&gt;  5:   &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;lt;?&lt;/span&gt;define documentation_dir = &quot;$(var.ProjectDir)..\..\docs&quot;&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;pre style=&quot;margin: 0em; background-color: rgb(255, 255, 0); width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 12px;&quot;&gt;  6: &lt;br&gt;&lt;/pre&gt;&lt;pre style=&quot;margin: 0em; background-color: rgb(255, 255, 0); width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 12px;&quot;&gt;  7:   &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;lt;?&lt;/span&gt;include $(var.build_dir)\ProductVersion.wxi &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;pre style=&quot;margin: 0em; background-color: rgb(255, 255, 255); width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 12px;&quot;&gt;  8: &lt;br&gt;&lt;/pre&gt;&lt;pre style=&quot;margin: 0em; background-color: rgb(255, 255, 255); width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 12px;&quot;&gt;  9:   &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: rgb(128, 0, 0);&quot;&gt;Product&lt;/span&gt; &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;Id&lt;/span&gt;=&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&quot;5646ced5-d897-4978-b1d6-338e5baadbe9&quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;pre style=&quot;margin: 0em; background-color: rgb(255, 255, 255); width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 12px;&quot;&gt; 10:        &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;Name&lt;/span&gt;=&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&quot;COMPANY NAME $(var.ProductVersion)&quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;pre style=&quot;margin: 0em; background-color: rgb(255, 255, 255); width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 12px;&quot;&gt; 11:        &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;Language&lt;/span&gt;=&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&quot;1033&quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;pre style=&quot;margin: 0em; background-color: rgb(255, 255, 255); width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 12px;&quot;&gt; 12:        &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;Version&lt;/span&gt;=&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&quot;$(var.ProductVersion)&quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;pre style=&quot;margin: 0em; background-color: rgb(255, 255, 255); width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 12px;&quot;&gt; 13:        &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;Manufacturer&lt;/span&gt;=&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&quot;COMPANY NAME&quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;pre style=&quot;margin: 0em; background-color: rgb(255, 255, 255); width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 12px;&quot;&gt; 14:        &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;UpgradeCode&lt;/span&gt;=&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&quot;790b1905-c843-4973-a078-79874a7f30f2&quot;&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;pre style=&quot;margin: 0em; background-color: rgb(255, 255, 255); width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 12px;&quot;&gt; 15: &lt;/pre&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Include file, ProductVersion.wxi is the one that should contain variable &lt;i&gt;ProductVersion&lt;/i&gt;. This include is generated by nant script, injecting nant &lt;i&gt;project.version.full &lt;/i&gt;variable.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Nant script to generate Wix include file:&lt;/p&gt;&#xA;&#xA;&lt;pre style=&quot;border: 1px solid rgb(206, 206, 206); padding: 5px; overflow: auto; background-color: rgb(255, 255, 255); min-height: 40px; width: 650px;&quot;&gt;&lt;pre style=&quot;margin: 0em; background-color: rgb(255, 255, 255); width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 12px;&quot;&gt;&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: rgb(128, 0, 0);&quot;&gt;echo&lt;/span&gt; &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;file&lt;/span&gt;=&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&quot;${build.compile.dir}\ProductVersion.wxi&quot;&lt;/span&gt; &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;message&lt;/span&gt;=&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;'&amp;amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;amp;gt;&amp;amp;#xA;&amp;amp;#xD;&amp;amp;lt;Include&amp;amp;gt;&amp;amp;#xA;&amp;amp;#xD;&amp;amp;lt;?define ProductVersion=&quot;${project.version.full}&quot;?&amp;amp;gt;&amp;amp;#xA;&amp;amp;#xD;&amp;amp;lt;/Include&amp;amp;gt;'&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;pre style=&quot;margin: 0em; background-color: rgb(255, 255, 255); width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 12px;&quot;&gt;&lt;/pre&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Which results in a file, that contains the required product version variable for Wix installer:&lt;/p&gt;&#xA;&#xA;&lt;pre style=&quot;border: 1px solid rgb(206, 206, 206); padding: 5px; overflow: auto; background-color: rgb(255, 255, 255); min-height: 40px; width: 650px;&quot;&gt;&lt;pre style=&quot;margin: 0em; background-color: rgb(255, 255, 255); width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 12px;&quot;&gt;&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;lt;?&lt;/span&gt;xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/pre&gt;&lt;pre style=&quot;margin: 0em; background-color: rgb(255, 255, 255); width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 12px;&quot;&gt;&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: rgb(128, 0, 0);&quot;&gt;Include&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&lt;pre style=&quot;margin: 0em; background-color: rgb(255, 255, 255); width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 12px;&quot;&gt;  &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;lt;?&lt;/span&gt;define ProductVersion=&quot;1.7.1234.4321&quot;&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/pre&gt;&lt;pre style=&quot;margin: 0em; background-color: rgb(255, 255, 255); width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 12px;&quot;&gt;&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: rgb(128, 0, 0);&quot;&gt;Include&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;pre style=&quot;margin: 0em; background-color: rgb(255, 255, 255); width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 12px;&quot;&gt;&lt;/pre&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Once MSI is installed, Add/Remove programs contains the name with the version:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;http://weblogs.asp.net/blogs/sfeldman/image_02299A23.png&quot; mce_href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_02299A23.png&quot;&gt;&lt;img src=&quot;http://weblogs.asp.net/blogs/sfeldman/image_thumb_0D55B51E.png&quot; style=&quot;border: 0px none ; display: inline;&quot; title=&quot;image&quot; alt=&quot;image&quot; mce_src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_0D55B51E.png&quot; border=&quot;0&quot; height=&quot;136&quot; width=&quot;733&quot;&gt;&lt;/a&gt;&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-09-02T04:49:00Z" PublishedUtc="2014-04-19T20:32:24.2830864Z" ModifiedUtc="2009-09-02T04:49:00Z" />
      <TagsPart Tags=".NET" />
      <AutoroutePart Alias="wix-product-version-with-build-script" UseCustomPattern="false" />
      <TitlePart Title="Wix Product Version with Build Script" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=msmq-with-files-larger-than-10mb" Status="Published">
      <BodyPart Text="&lt;p&gt;&lt;b&gt;&lt;font color=&quot;#990000&quot;&gt;Update 2009-09-11&lt;/font&gt;&lt;/b&gt;: I was playing with the sample provided in two comments, and has run into issue with chunking binding. See thread: &lt;a href=&quot;http://code.msdn.microsoft.com/msmqpluswcf/Thread/View.aspx?ThreadId=2265&quot; target=&quot;_blank&quot; mce_href=&quot;http://code.msdn.microsoft.com/msmqpluswcf/Thread/View.aspx?ThreadId=2265&quot;&gt;http://code.msdn.microsoft.com/msmqpluswcf/Thread/View.aspx?ThreadId=2265&lt;/a&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;Has anyone dealt with this issue before? We are running into a problem when our system has to use queues, but files can be more than 10MB.&lt;/p&gt;  &lt;p&gt;I have googled around, and found a few things about MSMQ/T (BizTalk related/unrelated), but nothing concrete (&lt;a href=&quot;http://blogs.msdn.com/johnbreakwell/archive/2007/08/22/how-to-send-msmq-messages-over-4mb-in-size-1-using-mqrtlarge-dll.aspx&quot; mce_href=&quot;http://blogs.msdn.com/johnbreakwell/archive/2007/08/22/how-to-send-msmq-messages-over-4mb-in-size-1-using-mqrtlarge-dll.aspx&quot; target=&quot;_blank&quot;&gt;example&lt;/a&gt;).&lt;/p&gt;  &lt;p&gt;Has anyone had some production code with messages more than 4MB using MSMQ/T and can point to the right resources? Thank you.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-08-12T06:13:00Z" PublishedUtc="2014-04-19T20:32:25.1893259Z" ModifiedUtc="2009-08-12T06:13:00Z" />
      <TagsPart Tags=".NET" />
      <AutoroutePart Alias="msmq-with-files-larger-than-10mb" UseCustomPattern="false" />
      <TitlePart Title="MSMQ With Files Larger Than 10MB?" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=sumsing-turbo-3000-xi-multitask" Status="Published">
      <BodyPart Text="&lt;p&gt;Related to the recent post comments – this is the *REAL* thing :D&lt;/p&gt;  &lt;div style=&quot;padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px&quot; id=&quot;scid:5737277B-5D6D-4f48-ABFC-DD9C333F4C5D:df100af5-69d9-4381-8e19-68690149386d&quot; class=&quot;wlWriterEditableSmartContent&quot;&gt;&lt;div&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=7DHrHMsT7KQ&quot; target=&quot;_new&quot;&gt;&lt;img src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/videodf057d1b0587_24FD61D6.jpg&quot; style=&quot;border-style: none&quot; galleryimg=&quot;no&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-08-05T04:58:00Z" PublishedUtc="2014-04-19T20:32:27.0799279Z" ModifiedUtc="2009-08-05T04:58:00Z" />
      <TagsPart Tags="Personal" />
      <AutoroutePart Alias="sumsing-turbo-3000-xi-multitask" UseCustomPattern="false" />
      <TitlePart Title="Sumsing Turbo 3000 Xi Multitask" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=moq-pitfall-on-tostring-method" Status="Published">
      <BodyPart Text="&lt;p&gt;I was working on some code today, when run into a pitfall with Moq. This was probably my misreading of documentation.&lt;/p&gt;  &lt;p&gt;The component I was testing looked somewhat like the code below&lt;/p&gt;  &lt;pre class=&quot;code&quot;&gt;&lt;span style=&quot;color: blue;&quot;&gt;public class &lt;/span&gt;&lt;span style=&quot;color: rgb(43, 145, 175);&quot;&gt;SomeOtherType&lt;br&gt;&lt;/span&gt;{&lt;br&gt;  &lt;span style=&quot;color: blue;&quot;&gt;private readonly &lt;/span&gt;&lt;span style=&quot;color: rgb(43, 145, 175);&quot;&gt;ISomeType &lt;/span&gt;someType;&lt;br&gt;&lt;br&gt;  &lt;span style=&quot;color: blue;&quot;&gt;public &lt;/span&gt;SomeOtherType(&lt;span style=&quot;color: rgb(43, 145, 175);&quot;&gt;ISomeType &lt;/span&gt;someType)&lt;br&gt;  {&lt;br&gt;    &lt;span style=&quot;color: blue;&quot;&gt;this&lt;/span&gt;.someType = someType;&lt;br&gt;  }&lt;br&gt;&lt;br&gt;  &lt;span style=&quot;color: blue;&quot;&gt;public string &lt;/span&gt;Do()&lt;br&gt;  {&lt;br&gt;    &lt;span style=&quot;color: blue;&quot;&gt;return &lt;/span&gt;&lt;span style=&quot;color: rgb(163, 21, 21);&quot;&gt;&quot;And it was: &quot; &lt;/span&gt;+ someType.ToString();&lt;br&gt;  }&lt;br&gt;}&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;http://11011.net/software/vspaste&quot; style=&quot;position: absolute;&quot; mce_href=&quot;http://11011.net/software/vspaste&quot;&gt;&lt;/a&gt;where dependency in injected and .ToString() method is invoked on it to construct the final result.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Specification looked quiet simple&lt;/p&gt;&#xA;&#xA;&lt;pre class=&quot;code&quot;&gt;[&lt;span style=&quot;color: rgb(43, 145, 175);&quot;&gt;Concern&lt;/span&gt;(&lt;span style=&quot;color: blue;&quot;&gt;typeof &lt;/span&gt;(&lt;span style=&quot;color: rgb(43, 145, 175);&quot;&gt;SomeType&lt;/span&gt;))]&lt;br&gt;[&lt;span style=&quot;color: rgb(43, 145, 175);&quot;&gt;TestFixture&lt;/span&gt;]&lt;br&gt;&lt;span style=&quot;color: blue;&quot;&gt;public class &lt;/span&gt;&lt;span style=&quot;color: rgb(43, 145, 175);&quot;&gt;ToStringMoqIssue &lt;/span&gt;: &lt;span style=&quot;color: rgb(43, 145, 175);&quot;&gt;StaticContextSpecification&lt;br&gt;&lt;/span&gt;{&lt;br&gt;  &lt;span style=&quot;color: blue;&quot;&gt;private &lt;/span&gt;&lt;span style=&quot;color: rgb(43, 145, 175);&quot;&gt;Mock&lt;/span&gt;&amp;lt;&lt;span style=&quot;color: rgb(43, 145, 175);&quot;&gt;ISomeType&lt;/span&gt;&amp;gt; dependency = &lt;span style=&quot;color: blue;&quot;&gt;new &lt;/span&gt;&lt;span style=&quot;color: rgb(43, 145, 175);&quot;&gt;Mock&lt;/span&gt;&amp;lt;&lt;span style=&quot;color: rgb(43, 145, 175);&quot;&gt;ISomeType&lt;/span&gt;&amp;gt;();&lt;br&gt;  &lt;span style=&quot;color: blue;&quot;&gt;private string &lt;/span&gt;result;&lt;br&gt;&lt;br&gt;  &lt;span style=&quot;color: blue;&quot;&gt;protected override void &lt;/span&gt;establish_context()&lt;br&gt;  {&lt;br&gt;    dependency.Setup(x =&amp;gt; x.ToString()).Returns(&lt;span style=&quot;color: rgb(163, 21, 21);&quot;&gt;&quot;dependency&quot;&lt;/span&gt;);&lt;br&gt;  }&lt;br&gt;&lt;br&gt;  &lt;span style=&quot;color: blue;&quot;&gt;protected override void &lt;/span&gt;because()&lt;br&gt;  {&lt;br&gt;    result = &lt;span style=&quot;color: blue;&quot;&gt;new &lt;/span&gt;&lt;span style=&quot;color: rgb(43, 145, 175);&quot;&gt;SomeOtherType&lt;/span&gt;(dependency.Object).Do();&lt;br&gt;  }&lt;br&gt;&lt;br&gt;  [&lt;span style=&quot;color: rgb(43, 145, 175);&quot;&gt;Observation&lt;/span&gt;]&lt;br&gt;  &lt;span style=&quot;color: blue;&quot;&gt;public void &lt;/span&gt;Should_return_And_it_worked()&lt;br&gt;  {&lt;br&gt;    result.Should_Be_Equal_To(&lt;span style=&quot;color: rgb(163, 21, 21);&quot;&gt;&quot;And it was: dependency&quot;&lt;/span&gt;);&lt;br&gt;  }&lt;br&gt;}&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Dependency contract was dead simple&lt;/p&gt;&#xA;&#xA;&lt;pre class=&quot;code&quot;&gt;  &lt;span style=&quot;color: blue;&quot;&gt;public interface &lt;/span&gt;&lt;span style=&quot;color: rgb(43, 145, 175);&quot;&gt;ISomeType&lt;br&gt;  &lt;/span&gt;{&lt;br&gt;&lt;span style=&quot;color: green;&quot;&gt;  &lt;/span&gt;}&lt;/pre&gt;&#xA;&lt;a href=&quot;http://11011.net/software/vspaste&quot; style=&quot;position: absolute;&quot; mce_href=&quot;http://11011.net/software/vspaste&quot;&gt;&lt;/a&gt;&#xA;&#xA;&lt;p&gt;Observation is clear and simple. Yet I was getting an unexpected failure. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;i&gt;Expected Value : &quot;And it was: dependency&quot;&#xA;    &lt;br&gt;Actual Value&amp;nbsp;&amp;nbsp; : &quot;And it was: &lt;b&gt;ISomeTypeProxy14b81655017446cc9f41c4740251e9c1&lt;/b&gt;&quot; &lt;/i&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Something obviously did not work right. Then I realized that ToString() is a method of Object and not of the Contract, and by default is assigned to any object (even if you reference it by the contract…). Update to the contract has fixed it.&lt;/p&gt;&#xA;&#xA;&lt;pre class=&quot;code&quot;&gt;&lt;span style=&quot;color: blue;&quot;&gt;public interface &lt;/span&gt;&lt;span style=&quot;color: rgb(43, 145, 175);&quot;&gt;ISomeType&lt;br&gt;&lt;/span&gt;{&lt;br&gt;  &lt;span style=&quot;color: blue;&quot;&gt;string &lt;/span&gt;ToString();&lt;br&gt;}&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Reminder for myself – careful with ToString()!&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-08-05T04:53:00Z" PublishedUtc="2014-04-19T20:32:27.7205514Z" ModifiedUtc="2009-08-05T04:53:00Z" />
      <TagsPart Tags=".NET,C#,TDD" />
      <AutoroutePart Alias="moq-pitfall-on-tostring-method" UseCustomPattern="false" />
      <TitlePart Title="Moq – ToString() Method Pitfall" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=warning-best-practices" Status="Published">
      <BodyPart Text="&lt;p&gt;According to the wikipedia definition, &lt;a href=&quot;http://en.wikipedia.org/wiki/Best_practice&quot; target=&quot;_blank&quot;&gt;best practice&lt;/a&gt; is&lt;/p&gt;  &lt;blockquote&gt;   &lt;p&gt;…a technique, method, process, activity, incentive or reward that is &lt;u&gt;believed&lt;/u&gt; to be more effective at delivering a particular outcome than any other technique, method, process, etc.&lt;/p&gt; &lt;/blockquote&gt;  &lt;p&gt;The word “believed”, in my opinion, plays an important role. What one believes in, is not necessarily shared by another person. And not only with faith, but with technologies as well. What one technology / platform / methodology will describe as good practice, another one can claim if not the opposite, then at least disagree on the stated.&lt;/p&gt;  &lt;p&gt;The motivation for this though was withdrawn from the project I am working on quickly, which is entirely written in Java. Despite my opinions on Java as a language, there’s something fundamental embedded in&amp;#160; Java, that does not exist in C# – one class per file. It bothered me, so I decided to spike the history of the feature.&lt;/p&gt;  &lt;p&gt;Now you can debate for hours if this right or wrong. I think this is a &lt;strong&gt;false best practice&lt;/strong&gt;. From Object Oriented perspective, there’s nothing wrong with more than one class (or “type”) within a single file. Let me demonstrate a few examples.&lt;/p&gt;  &lt;h4&gt;Example 1 – Design by Contract&lt;/h4&gt;  &lt;p&gt;The system is coded with a Container (Dependency Injection), and Contracts are what we care about, not implementers. In some cases it makes sense to see &lt;strong&gt;&lt;u&gt;packaging &lt;/u&gt;&lt;/strong&gt;done the following way:&lt;/p&gt;  &lt;div style=&quot;border-bottom: gray 1px solid; border-left: gray 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; max-height: 200px; font-size: 8pt; overflow: auto; border-top: gray 1px solid; cursor: text; border-right: gray 1px solid; padding-top: 4px&quot;&gt;   &lt;div style=&quot;border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;     &lt;pre style=&quot;border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   1:&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;interface&lt;/span&gt; IContract&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   2:&lt;/span&gt; {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   3:&lt;/span&gt;   &lt;span style=&quot;color: #008000&quot;&gt;//...&lt;/span&gt;&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   4:&lt;/span&gt; }&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   5:&lt;/span&gt;&amp;#160; &lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   6:&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;internal&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;class&lt;/span&gt; DefaultContractImplementation : IContract&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   7:&lt;/span&gt; {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   8:&lt;/span&gt;   &lt;span style=&quot;color: #008000&quot;&gt;//...&lt;/span&gt;&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   9:&lt;/span&gt; }&lt;/pre&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;I intentionally highlighted “packaging”, because in my opinion it’s all about packaging and some sort of convenience. &lt;/p&gt;&#xA;&#xA;&lt;h4&gt;Example 2 – BDD Specifications&lt;/h4&gt;&#xA;&#xA;&lt;p&gt;If you are familiar with Behaviour-Driven Development, you know that there can be multiple specifications for a single SUT (system under test). The most common and efficient way to achieve it, is to break it into separate classes, extending some sort of base spec for a particular SUT.&lt;/p&gt;&#xA;&#xA;&lt;div style=&quot;border-bottom: gray 1px solid; border-left: gray 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; max-height: 200px; font-size: 8pt; overflow: auto; border-top: gray 1px solid; cursor: text; border-right: gray 1px solid; padding-top: 4px&quot;&gt;&#xA;  &lt;div style=&quot;border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&#xA;    &lt;pre style=&quot;border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   1:&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;abstract&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;class&lt;/span&gt; DomainService_Specs : ContextSpecification&amp;lt;IDomainService&amp;gt;&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   2:&lt;/span&gt; {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   3:&lt;/span&gt;     &lt;span style=&quot;color: #0000ff&quot;&gt;protected&lt;/span&gt; IDomainService system_udner_test;&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   4:&lt;/span&gt;     &lt;span style=&quot;color: #008000&quot;&gt;// ...&lt;/span&gt;&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   5:&lt;/span&gt; }&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   6:&lt;/span&gt;&amp;#160; &lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   7:&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;class&lt;/span&gt; When_DomainService_is_asked_to_to_deliver_a_message_and_exception_is_thrown : DomainService_Specs&lt;/pre&gt;&#xA;  &lt;/div&gt;&#xA;&#xA;  &lt;p&gt;&amp;#160;&lt;/p&gt;&#xA;&#xA;  &lt;div style=&quot;border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&#xA;    &lt;pre style=&quot;border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   9:&lt;/span&gt;     [Observation]&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  10:&lt;/span&gt;     &lt;span style=&quot;color: #0000ff&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;void&lt;/span&gt; Should_recover_and_log_exception()&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  11:&lt;/span&gt;     {}&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  12:&lt;/span&gt;&amp;#160; &lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  13:&lt;/span&gt;     [Observation]&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  14:&lt;/span&gt;     &lt;span style=&quot;color: #0000ff&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;void&lt;/span&gt; Should_do_something_else()&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  15:&lt;/span&gt;     {}&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  16:&lt;/span&gt; }&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  17:&lt;/span&gt;&amp;#160; &lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  18:&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;class&lt;/span&gt; When_DomainService_is_asked_to_to_find_a_message_by_sender : DomainService_Specs&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  19:&lt;/span&gt; {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  20:&lt;/span&gt;     [Observation]&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  21:&lt;/span&gt;     &lt;span style=&quot;color: #0000ff&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;void&lt;/span&gt; Should_do_this()&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  22:&lt;/span&gt;     {}&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  23:&lt;/span&gt;&amp;#160; &lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  24:&lt;/span&gt;     [Observation]&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  25:&lt;/span&gt;     &lt;span style=&quot;color: #0000ff&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;void&lt;/span&gt; Should_do_that()&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  26:&lt;/span&gt;     {}&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  27:&lt;/span&gt; }&lt;/pre&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;We could potentially break the specs into multiple files, but is it worth it?&lt;/p&gt;&#xA;&#xA;&lt;h4&gt;The Reason&lt;/h4&gt;&#xA;&#xA;&lt;p&gt;Before making a blind assumption that a best practice is always good thing to apply, always look for the reason(s) it came to existence. Googling why Java had this best practice was an interesting finding (&lt;a href=&quot;http://java.sun.com/docs/books/jls/third_edition/html/packages.html#26783&quot;&gt;The Java Language Specification&lt;/a&gt;):&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;When packages are stored in a file system (�7.2.1), the host system may choose to enforce the restriction that it is a compile-time error if a type is not found in a file under a name composed of the type name plus an extension (such as .java or .jav) if either of the following is true: &#xA;    &lt;br /&gt;&lt;/p&gt;&#xA;&#xA;  &lt;p&gt;* The type is referred to by code in other compilation units of the package in which the type is declared. &#xA;    &lt;br /&gt;&lt;/p&gt;&#xA;&#xA;  &lt;p&gt;* The type is declared public (and therefore is potentially accessible from code in other packages). &#xA;    &lt;br /&gt;&lt;/p&gt;&#xA;&#xA;  &lt;p&gt;This restriction implies that there must be at most one such type per compilation unit. &lt;u&gt;This restriction makes it easy for a compiler for the Java programming language or an implementation of the Java virtual machine to find a named class within a package&lt;/u&gt;; for example, the source code for a public type wet.sprocket.Toad would be found in a file Toad.java in the directory wet/sprocket, and the corresponding object code would be found in the file Toad.class in the same directory.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;It is obvious from the extract that the main reason behind the “best practice” was a technical optimization, and not OO principle implementation (like someone might raise up, Separation of Concerns, for example).&lt;/p&gt;&#xA;&#xA;&lt;h4&gt;Conclusion&lt;/h4&gt;&#xA;&#xA;&lt;p&gt;Java / C# (.NET) is a bit of a holly war. If you drop who borrowed what and when, you find that there’s an attempt to make a better development environment, and each attempt is packaged with the best practices considered to be “the best” at a time of product development. When product is outdated, or lagging behind, some will try to justify false best practices as best practices of even today. Be practical, search for the reasons, and make your decisions. Make sure you get the best out of the best practice, and not limited by it.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&amp;#160;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;PS: Oh, and you can always convert to C# – proven to be more fun :)&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-07-31T15:03:00Z" PublishedUtc="2014-04-19T20:32:28.4861595Z" ModifiedUtc="2009-07-31T15:03:00Z" />
      <TagsPart Tags="" />
      <AutoroutePart Alias="warning-best-practices" UseCustomPattern="false" />
      <TitlePart Title="Warning – Best Practices" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=disjunction-and-conjunction-in-nhibernate" Status="Published">
      <BodyPart Text="&lt;p&gt;Criteria involving multiple ORs and ANDs can quickly become ugly. &lt;a href=&quot;http://davidmorgantini.blogspot.com&quot; target=&quot;_blank&quot;&gt;David&lt;/a&gt;&amp;#160;&lt;a href=&quot;http://davidmorgantini.blogspot.com/2009/07/nhibernate-disjunction.html&quot; target=&quot;_blank&quot;&gt;showed&lt;/a&gt; how some of our code became more readable by using a feature to join multiple &lt;em&gt;ICriterion-&lt;/em&gt;s instead of using &lt;em&gt;Restrictions&lt;/em&gt; class (as well as how to quickly leverage expressions to get away from using property names, and allow better refactoring by replacing strings with compile-able code).&lt;/p&gt;  &lt;p&gt;James Gregory has provided earlier a very &lt;a href=&quot;http://stackoverflow.com/questions/386308?sort=oldest#sort-top&quot; target=&quot;_blank&quot;&gt;simple explanation&lt;/a&gt; on the subject. Absolutely love when things become simpler!&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-07-22T13:29:00Z" PublishedUtc="2014-04-19T20:32:29.548644Z" ModifiedUtc="2009-07-22T13:29:00Z" />
      <TagsPart Tags="NHibernate" />
      <AutoroutePart Alias="disjunction-and-conjunction-in-nhibernate" UseCustomPattern="false" />
      <TitlePart Title="Disjunction and Conjunction in NHibernate" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=sending-emails-with-no-smtp" Status="Published">
      <BodyPart Text="&lt;p&gt;I ran into a problem once in a QA environment, and it was unpleasant to handle. &lt;a href=&quot;http://amrelgarhy.com/blog/sending-mails-development-machine-without-actual-mail-server/&quot; target=&quot;_blank&quot;&gt;Amr ElGarhy&lt;/a&gt; has showed a way “baked into” .NET how to overcome issues similar to the one I had – write emails straight into file system. Solutions is elegant and done through configuration file.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-07-22T13:19:00Z" PublishedUtc="2014-04-19T20:32:29.8767696Z" ModifiedUtc="2009-07-22T13:19:00Z" />
      <TagsPart Tags=".NET" />
      <AutoroutePart Alias="sending-emails-with-no-smtp" UseCustomPattern="false" />
      <TitlePart Title="Sending Emails with no SMTP" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=convention-over-configuration" Status="Published">
      <BodyPart Text="&lt;p&gt;Convention over is defined in &lt;a href=&quot;http://en.wikipedia.org/wiki/Convention_over_configuration&quot; target=&quot;_blank&quot;&gt;Wikipedia&lt;/a&gt; as follow:&lt;/p&gt;  &lt;blockquote&gt;   &lt;p&gt;Convention over Configuration (aka Coding by convention) is a software design paradigm which seeks to decrease the number of decisions that developers need to make, gaining simplicity, but not necessarily losing flexibility.&lt;/p&gt; &lt;/blockquote&gt;  &lt;p&gt;Our current project, that is no longer a skinny cow, has a state machine of message statuses, and a factory that can produce the state object from a key. Today I ran into a bug, when added two new message states, but forgot to update the factory, that happened to reside in a completely different assembly from the one that contains state classes. After a quick trace the bug was found. But how painful it is:&lt;/p&gt;  &lt;ol&gt;   &lt;li&gt;As a developer I had to keep in mind to link between new message state classes and message state factory. This is getting easily out of control when you either new to the project or have not worked on it for a while. New developers have to be familiar with the limitation or find it out the difficult way. &lt;/li&gt;    &lt;li&gt;Each time a message state is added or removed to the state machine, factory has to be updated. &lt;/li&gt;    &lt;li&gt;Message state factory specification (tests) has to be updated as the production code, and again that’s a manual process that can lead to forgetfulness. &lt;/li&gt; &lt;/ol&gt;  &lt;p&gt;The conclusion was “we have to have &lt;strong&gt;A Pit of Success&lt;/strong&gt;”. Convention over Configuration (or simply CoC) is what we need. So I spiked this quickly (no specs, sorry for that) and this is what is looks like.&lt;/p&gt;  &lt;h4&gt;Defining a “State”&lt;/h4&gt;  &lt;pre class=&quot;code&quot;&gt;&lt;span style=&quot;color: blue&quot;&gt;public abstract class &lt;/span&gt;&lt;span style=&quot;color: #2b91af&quot;&gt;BaseState&#xA;&lt;/span&gt;{&#xA;  &lt;span style=&quot;color: blue&quot;&gt;public abstract string &lt;/span&gt;Name { &lt;span style=&quot;color: blue&quot;&gt;get&lt;/span&gt;; }&#xA;&#xA;  &lt;span style=&quot;color: blue&quot;&gt;public virtual &lt;/span&gt;&lt;span style=&quot;color: #2b91af&quot;&gt;BaseState &lt;/span&gt;MoveToNextState()&#xA;  {&#xA;    &lt;span style=&quot;color: blue&quot;&gt;throw new &lt;/span&gt;&lt;span style=&quot;color: #2b91af&quot;&gt;NotImplementedException&lt;/span&gt;(&lt;span style=&quot;color: blue&quot;&gt;string&lt;/span&gt;.Format(&lt;span style=&quot;color: #a31515&quot;&gt;&amp;quot;State '{0}' is not implemented.&amp;quot;&lt;/span&gt;, Name));&#xA;  }&#xA;}&lt;/pre&gt;&#xA;&lt;a href=&quot;http://11011.net/software/vspaste&quot;&gt;&lt;/a&gt;&#xA;&#xA;&lt;p&gt;Base abstract BaseState class defines the default behavior and attribute for state name. A few state (three for simplicity) with only ability to move forward would look like the following code snippets.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_6CE280A1.png&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: block; float: none; margin-left: auto; border-top: 0px; margin-right: auto; border-right: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_27C9B36B.png&quot; width=&quot;384&quot; height=&quot;120&quot; /&gt;&lt;/a&gt; &lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;span style=&quot;color: blue&quot;&gt;public class&lt;/span&gt;&lt;span style=&quot;color: #2b91af&quot;&gt;InitialState &lt;/span&gt;: &lt;span style=&quot;color: #2b91af&quot;&gt;BaseState&#xA;    &lt;br /&gt;&lt;/span&gt;{&#xA;&#xA;  &lt;br /&gt;&amp;#160; &lt;span style=&quot;color: blue&quot;&gt;public const string&lt;/span&gt;StateName = &lt;span style=&quot;color: #a31515&quot;&gt;&amp;quot;Initial&amp;quot;&lt;/span&gt;;&#xA;&#xA;  &lt;br /&gt;&#xA;&#xA;  &lt;br /&gt;&amp;#160; &lt;span style=&quot;color: blue&quot;&gt;public override string&lt;/span&gt;Name&#xA;&#xA;  &lt;br /&gt;&amp;#160; {&#xA;&#xA;  &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; &lt;span style=&quot;color: blue&quot;&gt;get&lt;/span&gt;{ &lt;span style=&quot;color: blue&quot;&gt;return&lt;/span&gt;StateName; }&#xA;&#xA;  &lt;br /&gt;&amp;#160; }&#xA;&#xA;  &lt;br /&gt;&#xA;&#xA;  &lt;br /&gt;&amp;#160; &lt;span style=&quot;color: blue&quot;&gt;public override&lt;/span&gt;&lt;span style=&quot;color: #2b91af&quot;&gt;BaseState &lt;/span&gt;MoveToNextState()&#xA;&#xA;  &lt;br /&gt;&amp;#160; {&#xA;&#xA;  &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; &lt;span style=&quot;color: blue&quot;&gt;return new&lt;/span&gt;&lt;span style=&quot;color: #2b91af&quot;&gt;IntermediateState&lt;/span&gt;();&#xA;&#xA;  &lt;br /&gt;&amp;#160; }&#xA;&#xA;  &lt;br /&gt;}&#xA;&#xA;  &lt;br /&gt;&lt;/p&gt;&#xA;&lt;a href=&quot;http://11011.net/software/vspaste&quot;&gt;&lt;/a&gt;&#xA;&#xA;&lt;pre class=&quot;code&quot;&gt;&lt;span style=&quot;color: blue&quot;&gt;public class &lt;/span&gt;&lt;span style=&quot;color: #2b91af&quot;&gt;IntermediateState &lt;/span&gt;: &lt;span style=&quot;color: #2b91af&quot;&gt;BaseState&#xA;&lt;/span&gt;{&#xA;  &lt;span style=&quot;color: blue&quot;&gt;public const string &lt;/span&gt;StateName = &lt;span style=&quot;color: #a31515&quot;&gt;&amp;quot;Intermediate&amp;quot;&lt;/span&gt;;&#xA;&#xA;  &lt;span style=&quot;color: blue&quot;&gt;public override string &lt;/span&gt;Name&#xA;  {&#xA;    &lt;span style=&quot;color: blue&quot;&gt;get &lt;/span&gt;{ &lt;span style=&quot;color: blue&quot;&gt;return &lt;/span&gt;StateName; }&#xA;  }&#xA;&#xA;  &lt;span style=&quot;color: blue&quot;&gt;public override &lt;/span&gt;&lt;span style=&quot;color: #2b91af&quot;&gt;BaseState &lt;/span&gt;MoveToNextState()&#xA;  {&#xA;    &lt;span style=&quot;color: blue&quot;&gt;return new &lt;/span&gt;&lt;span style=&quot;color: #2b91af&quot;&gt;FinalState&lt;/span&gt;();&#xA;  }&#xA;}&lt;/pre&gt;&#xA;&lt;a href=&quot;http://11011.net/software/vspaste&quot;&gt;&lt;/a&gt;&#xA;&#xA;&lt;pre class=&quot;code&quot;&gt;&lt;span style=&quot;color: blue&quot;&gt;public class &lt;/span&gt;&lt;span style=&quot;color: #2b91af&quot;&gt;FinalState &lt;/span&gt;: &lt;span style=&quot;color: #2b91af&quot;&gt;BaseState&#xA;&lt;/span&gt;{&#xA;  &lt;span style=&quot;color: blue&quot;&gt;public const string &lt;/span&gt;StateName = &lt;span style=&quot;color: #a31515&quot;&gt;&amp;quot;Final&amp;quot;&lt;/span&gt;;&#xA;&#xA;  &lt;span style=&quot;color: blue&quot;&gt;public override string &lt;/span&gt;Name&#xA;  {&#xA;    &lt;span style=&quot;color: blue&quot;&gt;get &lt;/span&gt;{ &lt;span style=&quot;color: blue&quot;&gt;return &lt;/span&gt;StateName; }&#xA;  }&#xA;}&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Fairly simple and straightforward. State factory, normally, would be a collection of all states, with a getter behavior that would allow from a key to get the state object. For simplicity, I am omitting the case when requested key has no equivalent state object.&lt;/p&gt;&#xA;&#xA;&lt;pre class=&quot;code&quot;&gt;&lt;span style=&quot;color: blue&quot;&gt;public class &lt;/span&gt;&lt;span style=&quot;color: #2b91af&quot;&gt;StateFactory&#xA;&lt;/span&gt;{&#xA;  &lt;span style=&quot;color: blue&quot;&gt;private static readonly &lt;/span&gt;&lt;span style=&quot;color: #2b91af&quot;&gt;Dictionary&lt;/span&gt;&amp;lt;&lt;span style=&quot;color: blue&quot;&gt;string&lt;/span&gt;, &lt;span style=&quot;color: #2b91af&quot;&gt;BaseState&lt;/span&gt;&amp;gt; dictionary = &lt;span style=&quot;color: blue&quot;&gt;new &lt;/span&gt;&lt;span style=&quot;color: #2b91af&quot;&gt;Dictionary&lt;/span&gt;&amp;lt;&lt;span style=&quot;color: blue&quot;&gt;string&lt;/span&gt;, &lt;span style=&quot;color: #2b91af&quot;&gt;BaseState&lt;/span&gt;&amp;gt;&#xA;                                                                       {&#xA;                                                                          {&lt;span style=&quot;color: #2b91af&quot;&gt;InitialState&lt;/span&gt;.StateName, &lt;span style=&quot;color: blue&quot;&gt;new &lt;/span&gt;&lt;span style=&quot;color: #2b91af&quot;&gt;InitialState&lt;/span&gt;()},&#xA;                                                                          {&lt;span style=&quot;color: #2b91af&quot;&gt;IntermediateState&lt;/span&gt;.StateName, &lt;span style=&quot;color: blue&quot;&gt;new &lt;/span&gt;&lt;span style=&quot;color: #2b91af&quot;&gt;IntermediateState&lt;/span&gt;()},&#xA;                                                                          {&lt;span style=&quot;color: #2b91af&quot;&gt;FinalState&lt;/span&gt;.StateName, &lt;span style=&quot;color: blue&quot;&gt;new &lt;/span&gt;&lt;span style=&quot;color: #2b91af&quot;&gt;FinalState&lt;/span&gt;()},&#xA;                                                                       };&#xA;&#xA;  &lt;span style=&quot;color: blue&quot;&gt;public &lt;/span&gt;&lt;span style=&quot;color: #2b91af&quot;&gt;BaseState &lt;/span&gt;GetStateFromName(&lt;span style=&quot;color: blue&quot;&gt;string &lt;/span&gt;stateName)&#xA;  {&#xA;    &lt;span style=&quot;color: blue&quot;&gt;return &lt;/span&gt;dictionary[stateName];&#xA;  }&#xA;}&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This is the spot where the disconnection has happened. Each time a state is added or removed, dictionary has to be updates as well. So end this up, we can leverage CoC to reflectively discover statuses, and prevent future manual updates and forgetfulness (thanks David for a nice way of putting it in words).&lt;/p&gt;&#xA;&#xA;&lt;h4&gt;Reflective Discoverer&lt;/h4&gt;&#xA;&#xA;&lt;p&gt;The contract for reflective discoverer would accept 3 Funcs&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;  &lt;li&gt;Function to return an array of assemblies to scan, determined at the time of invocation.&lt;/li&gt;&#xA;&#xA;  &lt;li&gt;Function to generate a key value, based on the item type.&lt;/li&gt;&#xA;&#xA;  &lt;li&gt;Function to verify is a type is matching the required criteria (could be predicate).&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;pre class=&quot;code&quot;&gt;&lt;span style=&quot;color: blue&quot;&gt;public interface &lt;/span&gt;&lt;span style=&quot;color: #2b91af&quot;&gt;IReflectiveDiscoverer&#xA;&lt;/span&gt;{&#xA;  &lt;span style=&quot;color: #2b91af&quot;&gt;Dictionary&lt;/span&gt;&amp;lt;key_type, item_type&amp;gt; Discover&amp;lt;key_type, item_type&amp;gt;(&lt;span style=&quot;color: #2b91af&quot;&gt;Func&lt;/span&gt;&amp;lt;&lt;span style=&quot;color: #2b91af&quot;&gt;Assembly&lt;/span&gt;[]&amp;gt; assembliesToScan,&#xA;                                                                &lt;span style=&quot;color: #2b91af&quot;&gt;Func&lt;/span&gt;&amp;lt;item_type, key_type&amp;gt; generateKeyFrom,&#xA;                                                                &lt;span style=&quot;color: #2b91af&quot;&gt;Func&lt;/span&gt;&amp;lt;&lt;span style=&quot;color: #2b91af&quot;&gt;Type&lt;/span&gt;, &lt;span style=&quot;color: blue&quot;&gt;bool&lt;/span&gt;&amp;gt; verifyTypeCanBeUsed);&#xA;}&lt;/pre&gt;&#xA;&lt;a href=&quot;http://11011.net/software/vspaste&quot;&gt;&lt;/a&gt;&#xA;&#xA;&lt;p&gt;Implementation of the contract:&lt;/p&gt;&#xA;&#xA;&lt;pre class=&quot;code&quot;&gt;&lt;span style=&quot;color: blue&quot;&gt;public class &lt;/span&gt;&lt;span style=&quot;color: #2b91af&quot;&gt;ReflectiveDiscoverer &lt;/span&gt;: &lt;span style=&quot;color: #2b91af&quot;&gt;IReflectiveDiscoverer&#xA;&lt;/span&gt;{&#xA;  &lt;span style=&quot;color: blue&quot;&gt;public &lt;/span&gt;&lt;span style=&quot;color: #2b91af&quot;&gt;Dictionary&lt;/span&gt;&amp;lt;key_type, item_type&amp;gt; Discover&amp;lt;key_type, item_type&amp;gt;(&lt;span style=&quot;color: #2b91af&quot;&gt;Func&lt;/span&gt;&amp;lt;&lt;span style=&quot;color: #2b91af&quot;&gt;Assembly&lt;/span&gt;[]&amp;gt; assemblies_to_scan,&#xA;                                                                       &lt;span style=&quot;color: #2b91af&quot;&gt;Func&lt;/span&gt;&amp;lt;item_type, key_type&amp;gt; generate_key_from,&#xA;                                                                       &lt;span style=&quot;color: #2b91af&quot;&gt;Func&lt;/span&gt;&amp;lt;&lt;span style=&quot;color: #2b91af&quot;&gt;Type&lt;/span&gt;, &lt;span style=&quot;color: blue&quot;&gt;bool&lt;/span&gt;&amp;gt; verify_type_can_be_used)&#xA;  {&#xA;    &lt;span style=&quot;color: blue&quot;&gt;var &lt;/span&gt;dictionary = &lt;span style=&quot;color: blue&quot;&gt;new &lt;/span&gt;&lt;span style=&quot;color: #2b91af&quot;&gt;Dictionary&lt;/span&gt;&amp;lt;key_type, item_type&amp;gt;();&#xA;&#xA;    &lt;span style=&quot;color: blue&quot;&gt;foreach &lt;/span&gt;(&lt;span style=&quot;color: blue&quot;&gt;var &lt;/span&gt;assembly &lt;span style=&quot;color: blue&quot;&gt;in &lt;/span&gt;assemblies_to_scan())&#xA;    {&#xA;      &lt;span style=&quot;color: blue&quot;&gt;var &lt;/span&gt;all_types_in_assembly = assembly.GetTypes().Where(verify_type_can_be_used);&#xA;&#xA;      &lt;span style=&quot;color: blue&quot;&gt;foreach &lt;/span&gt;(&lt;span style=&quot;color: blue&quot;&gt;var &lt;/span&gt;candidate_type &lt;span style=&quot;color: blue&quot;&gt;in &lt;/span&gt;all_types_in_assembly)&#xA;      {&#xA;        &lt;span style=&quot;color: blue&quot;&gt;var &lt;/span&gt;instance = (item_type)&lt;span style=&quot;color: #2b91af&quot;&gt;Activator&lt;/span&gt;.CreateInstance(candidate_type);&#xA;        dictionary.Add(generate_key_from(instance), instance);&#xA;      }&#xA;    }&#xA;&#xA;    &lt;span style=&quot;color: blue&quot;&gt;return &lt;/span&gt;dictionary;&#xA;  }&#xA;}&lt;/pre&gt;&#xA;&lt;a href=&quot;http://11011.net/software/vspaste&quot;&gt;&lt;/a&gt;&#xA;&#xA;&lt;p&gt;Now it’s time to update StateFactory to use ReflectiveDiscoverer.&lt;/p&gt;&#xA;&#xA;&lt;pre class=&quot;code&quot;&gt;&lt;span style=&quot;color: blue&quot;&gt;public class &lt;/span&gt;&lt;span style=&quot;color: #2b91af&quot;&gt;StateFactory&#xA;&lt;/span&gt;{&#xA;  &lt;span style=&quot;color: blue&quot;&gt;public &lt;/span&gt;&lt;span style=&quot;color: #2b91af&quot;&gt;BaseState &lt;/span&gt;GetStateFromName(&lt;span style=&quot;color: blue&quot;&gt;string &lt;/span&gt;stateName)&#xA;  {&#xA;    &lt;span style=&quot;color: blue&quot;&gt;var &lt;/span&gt;states = &lt;span style=&quot;color: blue&quot;&gt;new &lt;/span&gt;&lt;span style=&quot;color: #2b91af&quot;&gt;ReflectiveDiscoverer&lt;/span&gt;().Discover&amp;lt;&lt;span style=&quot;color: blue&quot;&gt;string&lt;/span&gt;, &lt;span style=&quot;color: #2b91af&quot;&gt;BaseState&lt;/span&gt;&amp;gt;(() =&amp;gt; &lt;span style=&quot;color: #2b91af&quot;&gt;AppDomain&lt;/span&gt;.CurrentDomain.GetAssemblies(),&#xA;                                                                        state =&amp;gt; state.Name,&#xA;                                                                        type =&amp;gt; type.IsSubclassOf(&lt;span style=&quot;color: blue&quot;&gt;typeof &lt;/span&gt;(&lt;span style=&quot;color: #2b91af&quot;&gt;BaseState&lt;/span&gt;)))&#xA;    &lt;span style=&quot;color: blue&quot;&gt;return &lt;/span&gt;states[stateName];&#xA;  }&#xA;}&lt;/pre&gt;&#xA;&lt;a href=&quot;http://11011.net/software/vspaste&quot;&gt;&lt;/a&gt;&#xA;&#xA;&lt;p&gt;&amp;#160;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;A few implementation details missing in this version:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;  &lt;li&gt;Factory is used frequently, and probably should keep states cached.&lt;/li&gt;&#xA;&#xA;  &lt;li&gt;We skipped specifications, and therefore have un-testable code.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;Fixing those issues is not difficult. For testability we need to inject IReflectiveDiscoverer. For performance issue – keep the dictionary cached. &lt;/p&gt;&#xA;&#xA;&lt;h4&gt;Final Version&lt;/h4&gt;&#xA;&#xA;&lt;pre class=&quot;code&quot;&gt;&lt;span style=&quot;color: blue&quot;&gt;private static &lt;/span&gt;&lt;span style=&quot;color: #2b91af&quot;&gt;Dictionary&lt;/span&gt;&amp;lt;&lt;span style=&quot;color: blue&quot;&gt;string&lt;/span&gt;, &lt;span style=&quot;color: #2b91af&quot;&gt;BaseState&lt;/span&gt;&amp;gt; states;&#xA;&#xA;&lt;span style=&quot;color: blue&quot;&gt;public &lt;/span&gt;StateFactory() : &lt;span style=&quot;color: blue&quot;&gt;this&lt;/span&gt;(&lt;span style=&quot;color: blue&quot;&gt;new &lt;/span&gt;&lt;span style=&quot;color: #2b91af&quot;&gt;ReflectiveDiscoverer&lt;/span&gt;()) {}&#xA;&#xA;&lt;span style=&quot;color: blue&quot;&gt;public &lt;/span&gt;StateFactory(&lt;span style=&quot;color: #2b91af&quot;&gt;IReflectiveDiscoverer &lt;/span&gt;reflectiveDiscoverer)&#xA;{&#xA;  &lt;span style=&quot;color: blue&quot;&gt;if &lt;/span&gt;(states != &lt;span style=&quot;color: blue&quot;&gt;null&lt;/span&gt;) &lt;span style=&quot;color: blue&quot;&gt;return&lt;/span&gt;;&#xA;&#xA;  states = reflectiveDiscoverer.Discover&amp;lt;&lt;span style=&quot;color: blue&quot;&gt;string&lt;/span&gt;, &lt;span style=&quot;color: #2b91af&quot;&gt;BaseState&lt;/span&gt;&amp;gt;(() =&amp;gt; &lt;span style=&quot;color: #2b91af&quot;&gt;AppDomain&lt;/span&gt;.CurrentDomain.GetAssemblies(),&#xA;                                                            state =&amp;gt; state.Name,&#xA;                                                            type =&amp;gt; type.IsSubclassOf(&lt;span style=&quot;color: blue&quot;&gt;typeof &lt;/span&gt;(&lt;span style=&quot;color: #2b91af&quot;&gt;BaseState&lt;/span&gt;)));&#xA;}&#xA;&#xA;&lt;span style=&quot;color: blue&quot;&gt;public &lt;/span&gt;&lt;span style=&quot;color: #2b91af&quot;&gt;BaseState &lt;/span&gt;GetStateFromName(&lt;span style=&quot;color: blue&quot;&gt;string &lt;/span&gt;stateName)&#xA;{&#xA;  &lt;span style=&quot;color: blue&quot;&gt;return &lt;/span&gt;states[stateName];&#xA;}&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;http://11011.net/software/vspaste&quot;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Parameterless constructor is replacing container functionality. “states” dictionary is a static member field that caches states with a guard clause in constructor.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Now, the code is cleaner and automated. No need to add states when those are added or removed. This will ensure that developers don’t make mistake of forgetting to update factory. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Finally, if we developers embrace the concept “People don’t fail, processes do”, our code will be better.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-07-21T04:23:14Z" PublishedUtc="2014-04-19T20:32:30.4236327Z" ModifiedUtc="2009-07-21T04:23:14Z" />
      <TagsPart Tags=".NET,Agile,OO" />
      <AutoroutePart Alias="convention-over-configuration" UseCustomPattern="false" />
      <TitlePart Title="Convention over Configuration" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=productivity-with-multiple-monitors" Status="Published">
      <BodyPart Text="&lt;p&gt;“Two better than one”.&lt;/p&gt;  &lt;p&gt;“Once you try it, you never go back”.&lt;/p&gt;  &lt;p&gt;Productivity can be achieved in multiple ways. One way is to provide developers with multiple monitors to minimize context switching and allow more real estate for concurrent usage. &lt;a href=&quot;http://www.necdisplay.com/gowide/NEC_Productivity_Study_0208.pdf&quot; target=&quot;_blank&quot;&gt;NEC Productivity Study&lt;/a&gt; lists a few factors users like about dual monitors:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;Faster &lt;/li&gt;    &lt;li&gt;More effective &lt;/li&gt;    &lt;li&gt;Easier to use &lt;/li&gt;    &lt;li&gt;More viewable space &lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;Out company provides employees with laptops and an additional screen by default. So theoretically you end up with two monitors. The problem, is that laptop monitor is 15” and it’s resolution does not match (usually) larger monitors with higher resolution. Today, thanks to Victor, I have installed &lt;a href=&quot;http://www.memoryexpress.com/Products/PID-MX21203(ME).aspx&quot; target=&quot;_blank&quot;&gt;eVGA’s UV+&lt;/a&gt; to enable 3rd monitor. Now I can really work. Each monitor has it’s dedication:&lt;/p&gt;  &lt;ol&gt;   &lt;li&gt;Laptop – web for searches / build server status &lt;/li&gt;    &lt;li&gt;Monitor (middle) – project in Visual Studio I am currently on &lt;/li&gt;    &lt;li&gt;Monitor (left) – command prompt for local builds and/or tool(s) I need for work &lt;/li&gt; &lt;/ol&gt;  &lt;p&gt;This arrangement is a perfect win for myself. Considering that a human Field of View is no more than 140 degrees, 3 monitors are still in that range. &lt;/p&gt;  &lt;p&gt;Now getting to the bottom of the business – cost. Managers are always worried about not wasting resources. In this case the investment is so minimal to get a serious ROI. A 17”-19” wide screen monitors are dirt cheap these days, below $200 mark. What’s that with in comparison to a developer that has less chances of making a mistake just because of a task (windows) switching.&lt;/p&gt;  &lt;p&gt;Either way, I am definitely not going back. Build server will have to forgive me for taking the monitor away ;)&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/3.monitors_5CA89B0D.jpg&quot;&gt;&lt;img style=&quot;border-right-width: 0px; display: block; float: none; border-top-width: 0px; border-bottom-width: 0px; margin-left: auto; border-left-width: 0px; margin-right: auto&quot; title=&quot;3.monitors&quot; border=&quot;0&quot; alt=&quot;3.monitors&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/3.monitors_thumb_426AC29A.jpg&quot; width=&quot;644&quot; height=&quot;484&quot; /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;&lt;/p&gt;  &lt;p&gt;It is possible to control position popups, dialog boxes, and other dynamic windows with various free applications. One application like that, &lt;a href=&quot;http://www.ntwind.com/software/taskswitchxp.html&quot; target=&quot;_blank&quot;&gt;TaskSwitchXP&lt;/a&gt;, can force task switch dialog window to be always showed on the active screen. There are no limits, the question is how limited your imagination ;)&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_3C5F788F.png&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: block; float: none; margin-left: auto; border-top: 0px; margin-right: auto; border-right: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_305D885B.png&quot; width=&quot;358&quot; height=&quot;50&quot; /&gt;&lt;/a&gt;&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-07-18T07:58:00Z" PublishedUtc="2014-04-19T20:32:31.0642526Z" ModifiedUtc="2009-07-18T07:58:00Z" />
      <TagsPart Tags="Other" />
      <AutoroutePart Alias="productivity-with-multiple-monitors" UseCustomPattern="false" />
      <TitlePart Title="Productivity With Multiple Monitors" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=what-happens-when-pm-is-for-too-long-among-geeks" Status="Published">
      <BodyPart Text="&lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_5C72767D.png&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: block; float: none; margin-left: auto; border-top: 0px; margin-right: auto; border-right: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_55E6A900.png&quot; width=&quot;565&quot; height=&quot;359&quot; /&gt;&lt;/a&gt;&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-07-17T21:37:00Z" PublishedUtc="2014-04-19T20:32:31.8767419Z" ModifiedUtc="2009-07-17T21:37:00Z" />
      <TagsPart Tags="Personal" />
      <AutoroutePart Alias="what-happens-when-pm-is-for-too-long-among-geeks" UseCustomPattern="false" />
      <TitlePart Title="What Happens When PM is for Too Long Among Geeks…" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=tests-maintainability" Status="Published">
      <BodyPart Text="&lt;p&gt;Write your test code as you would write your production code. In my opinion, a few of the most critical things are: &lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;Understanding (Readability and clarity of what the code is doing)&lt;/li&gt;    &lt;li&gt;Easy of change (be able to reflect changes)&lt;/li&gt;    &lt;li&gt;Quick safety net (understand what goes wrong and why)&lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;In &lt;a href=&quot;http://weblogs.asp.net/sfeldman/archive/2008/10/27/writing-a-test.aspx&quot; target=&quot;_blank&quot;&gt;one&lt;/a&gt; of my previous posts, I have blogged about test naming conventions, that is popular among BDD adopters, and starts to pick up among classic-TDD followers as well. Seven months later, I can see where all the bullet items are missing in classical TDD, and present in BDD.&lt;/p&gt;  &lt;h4&gt;True story example&lt;/h4&gt;  &lt;p&gt;In BDD we have Specifications and Observations breakdown. The classical TDD is missing this aspect. So a specification like the follows,&lt;/p&gt;  &lt;div style=&quot;border-right: gray 1px solid; padding-right: 4px; border-top: gray 1px solid; padding-left: 4px; font-size: 8pt; padding-bottom: 4px; margin: 20px 0px 10px; overflow: auto; border-left: gray 1px solid; width: 97.5%; cursor: text; max-height: 200px; line-height: 12pt; padding-top: 4px; border-bottom: gray 1px solid; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; background-color: #f4f4f4&quot;&gt;   &lt;div style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;     &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   1:&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;class&lt;/span&gt; When_DomainService_is_asked_to_to_deliver_a_message_and_exception_is_thrown&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   2:&lt;/span&gt; {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   3:&lt;/span&gt;     [Observation]&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   4:&lt;/span&gt;     &lt;span style=&quot;color: #0000ff&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;void&lt;/span&gt; Should_recover_and_log_exception()&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   5:&lt;/span&gt;     {}&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   6:&lt;/span&gt; }&lt;/pre&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;looks as next in classic TDD.&lt;/p&gt;&#xA;&#xA;&lt;div style=&quot;border-right: gray 1px solid; padding-right: 4px; border-top: gray 1px solid; padding-left: 4px; font-size: 8pt; padding-bottom: 4px; margin: 20px 0px 10px; overflow: auto; border-left: gray 1px solid; width: 97.5%; cursor: text; max-height: 200px; line-height: 12pt; padding-top: 4px; border-bottom: gray 1px solid; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; background-color: #f4f4f4&quot;&gt;&#xA;  &lt;div style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   1:&lt;/span&gt; ShouldRecoverAndLogExceptionWhenDomainServiceThrowsFaultExceptionAndDeliveryQueueServiceThrowsFaultExceptionWhenAttemptingToDeliverMessage&lt;/pre&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;Readability / clarity is definitely compromised. A single word of 138 characters looks a bit complex.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Ease of change is not quiet simple in classic TDD case – you first have to de-crypt what the test actually does before updating test/production code.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Safety net – in this case we are on a thin ice – developers who have a problem to “de-crypt” the test code to figure out what went wrong, will eventually end-up either disabling tests for new code, or worse, removing old tests as well. And that happened in the past. &lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;The moral of the post – BDD is all about the behaviour. Let the old habits of classic TDD-ism go away, accept that testing code is a first class citizen as the production code. &lt;/p&gt;&lt;/blockquote&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-07-14T05:05:00Z" PublishedUtc="2014-04-19T20:32:32.1111252Z" ModifiedUtc="2009-07-14T05:05:00Z" />
      <TagsPart Tags="TDD" />
      <AutoroutePart Alias="tests-maintainability" UseCustomPattern="false" />
      <TitlePart Title="Tests Maintainability" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=implementing-lean-software-development-the-book" Status="Published">
      <BodyPart Text="&amp;#160; &lt;p&gt;After reading “&lt;a href=&quot;http://weblogs.asp.net/sfeldman/archive/2009/06/19/implementing-lean-software-development-the-book.aspx&quot; target=&quot;_blank&quot;&gt;Implementing Lean Software Development&lt;/a&gt;: From Concept &lt;a href=&quot;http://www.amazon.ca/Lean-Software-Development-Agile-Toolkit/dp/0321150783&quot; target=&quot;_blank&quot;&gt;&lt;img title=&quot;image&quot; style=&quot;border-right: 0px; border-top: 0px; display: inline; margin-left: 0px; border-left: 0px; margin-right: 0px; border-bottom: 0px&quot; height=&quot;244&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_65C48DA3.png&quot; width=&quot;185&quot; align=&quot;right&quot; border=&quot;0&quot; /&gt;&lt;/a&gt;to Cash”, I decided to look at the &lt;a href=&quot;http://www.amazon.ca/Implementing-Lean-Software-Development-Concept/dp/0321437381&quot; target=&quot;_blank&quot;&gt;original book&lt;/a&gt;. It is as good as the successor. IMO reading the original one first even better than just skipping to the new version.&lt;/p&gt;  &lt;p&gt;Mary and Tom Poppenieck have greatly captured so many aspects of software development and how to do those lean way.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-06-27T15:24:00Z" PublishedUtc="2014-04-19T20:32:32.5173574Z" ModifiedUtc="2009-06-27T15:24:00Z" />
      <TagsPart Tags="Books" />
      <AutoroutePart Alias="implementing-lean-software-development-the-book" UseCustomPattern="false" />
      <TitlePart Title="Lean Software Development: An Agile Toolkit - The Book" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=building-software-vs-building-a-house" Status="Published">
      <BodyPart Text="&lt;p&gt;Found this great excerpt in a book:&lt;/p&gt;  &lt;blockquote&gt;   &lt;p&gt;Principles are guiding ideas and insights about a discipline, while practices are what you actually do to carry out principles. Principles are universal, but it is not always easy to see how they apply to particular environments. Practices, on the other hand, give specific guidance on what to do, but they need to be adapted to the domain. We believe that there is no such thing as a &amp;quot;best&amp;quot; practice; practices must take context into account. In fact, the problems that arise when applying metaphors from other disciplines to software development are often the result of trying to transfer the practices rather than the principles of the other discipline.&lt;/p&gt; &lt;/blockquote&gt;  &lt;p&gt;So true. How many times you’ve heard software development compared to constructions or any other discipline?&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-06-25T13:49:00Z" PublishedUtc="2014-04-19T20:32:33.0329758Z" ModifiedUtc="2009-06-25T13:49:00Z" />
      <TagsPart Tags="Books" />
      <AutoroutePart Alias="building-software-vs-building-a-house" UseCustomPattern="false" />
      <TitlePart Title="Building Software vs. Building a House" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=the-art-of-unit-testing-the-book" Status="Published">
      <BodyPart Text="&lt;p&gt;I have finished reading the book and wanted to write a short review, but &lt;a href=&quot;http://www.amazon.ca/Art-Unit-Testing-Examples-Net/dp/1933988274&quot; target=&quot;_blank&quot;&gt;&lt;img title=&quot;image&quot; style=&quot;border-right: 0px; border-top: 0px; display: inline; margin-left: 0px; border-left: 0px; margin-right: 0px; border-bottom: 0px&quot; height=&quot;244&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_2E19B79A.png&quot; width=&quot;196&quot; align=&quot;right&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; the best I could come up with is a list of cons and pros. Lame, I know, but this will give you a hint at least. &lt;/p&gt;  &lt;h5&gt;pros&lt;/h5&gt;  &lt;ol&gt;   &lt;li&gt;Smooth introduction, complexity is added step by step&lt;/li&gt;    &lt;li&gt;“Strict mocks are causing brittle tests” – more than that, it causes to get into the private details of execution, rather than overall design and behaviour&lt;/li&gt;    &lt;li&gt;“Method strings are bad inside tests” – absolutely&lt;/li&gt;    &lt;li&gt;“Mapping tests to projects” – very right decision to spend time on the subject and show a right example&lt;/li&gt;    &lt;li&gt;One-test-class-per-feature pattern is mentioned (music to BDD fan ears)&lt;/li&gt;    &lt;li&gt;Writing maintainable tests – critical topic that was covered&lt;/li&gt;    &lt;li&gt;DRY in test code – in general I agree that an unnecessary duplication should be removed from the test code. But there’s a think line that should not be crossed – tests should be readable and maintainable. For that, duplication sometimes is necessary. This is the less evil for a bigger cause – readability and maintainability. &lt;/li&gt;    &lt;li&gt;Row testing is showed&lt;/li&gt;    &lt;li&gt;“Integrating unit testing into the organization” – a very, very useful chapter, especially if you have to pioneer the field at your work place. Personally, I wish I would read this long time ago. &lt;/li&gt; &lt;/ol&gt;  &lt;h5&gt;cons&lt;/h5&gt;  &lt;ol&gt;   &lt;li&gt;Tests naming conventions&lt;/li&gt;    &lt;li&gt;Too much is dedicated to Stubs and manual Mocks&lt;/li&gt;    &lt;li&gt;Chapter 5 - Isolation (mock object) framework is explained with Rhino.Mocks Record/Playback rather that AAA that is more natural &lt;/li&gt;    &lt;ul&gt;     &lt;li&gt;Note: AAA sample is showed, but after Record/Playback, which IMHO is a wrong way of teaching it. AAA is more intuitive and sticks more than the opponent.&lt;/li&gt;   &lt;/ul&gt;    &lt;li&gt;TypeMock promotion – &lt;a href=&quot;http://weblogs.asp.net/rosherove/&quot; target=&quot;_blank&quot;&gt;Roy&lt;/a&gt; is working for TypeMock that is a commercial tool. He could definitely use an OSS framework to show AAA mocking framework, like &lt;a href=&quot;http://code.google.com/p/moq/&quot; target=&quot;_blank&quot;&gt;Moq&lt;/a&gt; framework. In an absence of a free tool, I would accept TypeMock as an example, or as a part of available commercial tools. (Page 130 shows the distribution of popularity, and Rhino.Mocks with Moq are the two most popular free mocking frameworks). This was a promo for the tool… not nice.&lt;/li&gt;    &lt;ul&gt;     &lt;li&gt;Note: I am not a big fan of the fluent naming TypeMock is using. &lt;em&gt;Isolate.Fake&lt;/em&gt;.Instance&amp;lt;IWebService&amp;gt;() is two verbs that are not intuitive.&lt;/li&gt;   &lt;/ul&gt;    &lt;li&gt;Naming conventions for tests – both unit tests and integration tests are suffixed with a single word “Test”. I would rather distinguish and use context “Spec” and “Integration” as an example.&lt;/li&gt;    &lt;li&gt;One-test-class-per-class pattern – for someone who’s doing BDD this is an anti-pattern. One big test class is a smell. It leads to brutal test code that is not only difficult to maintain, but even understand from it what it is doing. Very typical to the classical TDD.&lt;/li&gt;    &lt;ul&gt;     &lt;li&gt;Note: Roy has provided a tip on this, politically correctly hinting that not everything from the big heads (&lt;a href=&quot;http://www.amazon.com/xUnit-Test-Patterns-Refactoring-Addison-Wesley/dp/0131495054&quot; target=&quot;_blank&quot;&gt;Meszaro&lt;/a&gt; in this case) is always an absolute must.&lt;/li&gt;   &lt;/ul&gt;    &lt;li&gt;Assertion with Extension Methods to improve tests readability was not showed at all&lt;/li&gt;    &lt;ul&gt;     &lt;li&gt;Note: IMO &lt;em&gt;Assert.AreEqual(found, expected)&lt;/em&gt; is confusing. I prefer to reveal intent with a code like &lt;em&gt;result.Should_Be_Equal_To(expected);&lt;/em&gt;&lt;/li&gt;   &lt;/ul&gt;    &lt;li&gt;NO BDD SAMPLES – BAD BAD BAD. I strongly believe that just with classic TDD testing is not complete. BDD is the next step in the right direction, and skipping it entirely was a mistake.&lt;/li&gt; &lt;/ol&gt;  &lt;h5&gt;Conclusions&lt;/h5&gt;  &lt;p&gt;If you are a newbie in TDD or just “checking it out” – go for this book, worth it. In case you already have experience in TDD/BDD, and you are doing it for a while, it will not add much to your tool belt. Either way, the book is welcomed, and I am excited that more and more of this kind of literature is becoming available for .NET developers. I only wish the next version will be written &lt;strong&gt;BDD&lt;/strong&gt; style, right Roy? ;)&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-06-24T10:54:00Z" PublishedUtc="2014-04-19T20:32:34.5485814Z" ModifiedUtc="2009-06-24T10:54:00Z" />
      <TagsPart Tags="Books" />
      <AutoroutePart Alias="the-art-of-unit-testing-the-book" UseCustomPattern="false" />
      <TitlePart Title="The Art of Unit Testing – The Book" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=braking-myths" Status="Published">
      <BodyPart Text="&lt;p&gt;I was chatting with an old mate of mine, &lt;a href=&quot;http://www.linkedin.com/profile?goback=.con&amp;amp;viewProfile=&amp;amp;key=2712421&amp;amp;jsstate=&quot; mce_href=&quot;http://www.linkedin.com/profile?goback=.con&amp;amp;viewProfile=&amp;amp;key=2712421&amp;amp;jsstate=&quot; target=&quot;_blank&quot;&gt;Lev&amp;nbsp; Ozeryansky&lt;/a&gt;, with whom we graduated together computer science about 8 years ago (man, that was long time ago, but doesn’t feel like that). He’s a great developer, with lots of experience. Yesterday we have finally met and chatted a bit (guess about what). Two things I heard bothered me a lot.&lt;/p&gt;  &lt;p&gt;1. You need more than 2 developers to do pair programming and being effective.&lt;/p&gt;  &lt;p&gt;2. TDD is a waste of resources (where resources are developers, money, time, you name it) and only possible in big companies.&lt;/p&gt;  &lt;p&gt;Lev was doing TDD, but he was the only person to do so. Why didn’t this work for the entire company? It was considered a waste. Worse that that, it was mandated as a waste by the management to the point where developers believed in it. What a waste… Immediately I thought just about the &lt;a href=&quot;http://weblogs.asp.net/sfeldman/archive/2009/06/19/implementing-lean-software-development-the-book.aspx&quot; mce_href=&quot;http://weblogs.asp.net/sfeldman/archive/2009/06/19/implementing-lean-software-development-the-book.aspx&quot; target=&quot;_blank&quot;&gt;blog published lately&lt;/a&gt; – management has got to buy into this and adopt, and it’s a developer role not to give up on change promotion.&lt;/p&gt;  &lt;p&gt;As to the first point, about pair programming, well… Personally I am a huge fan of pair programming for multiple reasons (final code quality, knowledge transfer, overall design, better testing in place, etc). I agree that it is impossible (and from the psychological point of view even not always desirable for certain individuals) to pair a 100% of time, but even 2 developers in a shop will do a huge difference by pairing.&lt;/p&gt;  &lt;p&gt;Along with that I am no longer surprised that bigger companies are adopting both. Not just because “they have more money to waste”, but since they have already “wasted enough to realize that something was absolutely wrong”. If I would be today in a position of a start-up, yes, I would think twice before throwing these two aspects into the game. In case of a running shop – no thinking. Just do it, unless you want to vanish quickly among piles of in-maintainable legacy code in the suffer-land.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-06-23T04:20:00Z" PublishedUtc="2014-04-19T20:32:35.0798332Z" ModifiedUtc="2009-06-23T04:20:00Z" />
      <TagsPart Tags="Agile,Personal" />
      <AutoroutePart Alias="braking-myths" UseCustomPattern="false" />
      <TitlePart Title="Breaking Myths" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=code-leader-the-book" Status="Published">
      <BodyPart Text="&lt;p&gt;On my flight I had a chance to finish reading “&lt;a href=&quot;http://www.amazon.ca/gp/product/0470259248&quot; target=&quot;_blank&quot;&gt;Code Leader&lt;/a&gt;” by Patrick &lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_5A62C6D6.png&quot;&gt;&lt;img title=&quot;image&quot; style=&quot;border-right: 0px; border-top: 0px; display: inline; margin-left: 0px; border-left: 0px; margin-right: 0px; border-bottom: 0px&quot; height=&quot;208&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_23291310.png&quot; width=&quot;165&quot; align=&quot;right&quot; border=&quot;0&quot; /&gt;&lt;/a&gt;Cauldwell. The book is a good source for ideas and concepts that “solid” developers should employ on a daily basis. Topics such as TDD, build vs. buy, CI, choosing the right tool for the right job, contract driven development, and much more.&lt;/p&gt;  &lt;p&gt;The book goes over subjects showing tidbits of everything, and could be probably expended and extended at least several times more. But then it would probably become “&lt;a href=&quot;http://www.amazon.ca/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882&quot; target=&quot;_blank&quot;&gt;Clean Code&lt;/a&gt;” and “&lt;a href=&quot;http://www.amazon.ca/Agile-Principles-Patterns-Practices-C/dp/0131857258&quot; target=&quot;_blank&quot;&gt;Agile Principles, Patterns, and Practices&lt;/a&gt;” clone, which author probably didn’t want to create. &lt;/p&gt;  &lt;p&gt;Overall, I liked the book as an introduction to so many “Alt .NET” concepts in a single source. What I missed in this book is the human leadership in the code, the human-factor in code creation, the behaviour and interaction between people that work on the same software. IMHO, code leadership is not only superiority in machine code, but also in the team environment. &lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-06-19T06:57:00Z" PublishedUtc="2014-04-19T20:32:35.892326Z" ModifiedUtc="2009-06-19T06:57:00Z" />
      <TagsPart Tags="Books" />
      <AutoroutePart Alias="code-leader-the-book" UseCustomPattern="false" />
      <TitlePart Title="Code Leader – The Book" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=quality-software" Status="Published">
      <BodyPart Text="&lt;p&gt;I am on my vacation, and not suppose to brag about software, but something has happened on my way to Israel, that just couldn’t go away silently. To get from Calgary to Tel-Aviv, I had to fly with Lufthansa for 9 hours first. The &lt;a href=&quot;http://en.wikipedia.org/wiki/Airbus_A340&quot; mce_href=&quot;http://en.wikipedia.org/wiki/Airbus_A340&quot;&gt;Airbus 340&lt;/a&gt; is a decent plain. It’s flying, and it’s as comfortable as a Economy class can be. What blew me away was the entertainment system. Let me break this down.&lt;/p&gt;  &lt;blockquote&gt;   &lt;p&gt;As an airline customer, I want to be able to watch the movies on board, so my time on the boring flight could go faster.&lt;/p&gt; &lt;/blockquote&gt;  &lt;p&gt;Does this user story sounds too much to ask for? Nope, I think it’s a decent business case. As a customer “trapped” on board for more than a couple of hours, constrained in movement and in general ability to do what he/she wants, should be able at least to freely select a movie to watch from a limited list that is provided. Not in this case.&lt;/p&gt;  &lt;p&gt;First, the whole &lt;a href=&quot;http://www.flickr.com/photos/tims/3063573438/&quot; mce_href=&quot;http://www.flickr.com/photos/tims/3063573438/&quot;&gt;entertainment system crashed&lt;/a&gt; twice! &lt;strike&gt;(I apologize for not using my own image I took with my phone – the battery died on me and I wisely forgot the USB charger:)&lt;/strike&gt;. &lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/07062009280_1C3DEDE0.jpg&quot;&gt;&lt;img title=&quot;07062009280&quot; style=&quot;border-right: 0px; border-top: 0px; display: inline; border-left: 0px; border-bottom: 0px&quot; height=&quot;365&quot; alt=&quot;07062009280&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/07062009280_thumb_15E6F185.jpg&quot; width=&quot;484&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;Was that an end? Nope.&lt;/p&gt;  &lt;p&gt;Second, when the system finally came back – any selected movie would yield “The selected content is not available at this moment”. Awesome work folks. Just what a client needs.&lt;/p&gt;  &lt;p&gt;Good that some people are hacky enough to go into flight information (crappy video with status of the flight) and at that time start zipping channels on the armrest (on the right side). That, surprisingly, was able to flip through the channels where movies were playing in an endless loop. Ha! Some entertainment, ladies and gentlemen.&amp;#160;&amp;#160; &lt;/p&gt;  &lt;p&gt;Moral of the story – quality is just not there. To understand if your software is worth anything, become the client of your own software. Being techy is not enough. UX and usability are as important as the software itself. Bring value and not shame on our profession – that’s one of the things I realize in encounters like this.&lt;/p&gt;  &lt;p&gt;PS: Talking about usability – same entertainment system, the volume buttons seemed to be switched. Louder button was on left, and quieter button was on right… weird :) &lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-06-14T03:39:00Z" PublishedUtc="2014-04-19T20:32:36.4391865Z" ModifiedUtc="2009-06-14T03:39:00Z" />
      <TagsPart Tags="Other" />
      <AutoroutePart Alias="quality-software" UseCustomPattern="false" />
      <TitlePart Title="Quality Software" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=once-you-have-tasted-flight-you-will-walk-the-earth-with-your-eyes-turned-skywards" Status="Published">
      <BodyPart Text="&#xA;&lt;p&gt;Today, my friend Ran (no blog – boo!), has gave me a chance to feel what it is like to fly. Unfortunately, the weather conditions were not the best, and we could not do a lot, but the time spent up there was awesome. Feels great, and I wish I could do it more. Who knows, maybe I am discovering a new hobby in exploring the Z dimension :) Either way, a few pictures worth a long blog post.&lt;/p&gt;&#xA;  &#xA;&lt;p&gt;&lt;a href=&quot;http://weblogs.asp.net/blogs/sfeldman/P6137801_23947F41.jpg&quot; mce_href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/P6137801_23947F41.jpg&quot;&gt;&lt;img src=&quot;http://weblogs.asp.net/blogs/sfeldman/P6137801_thumb_458CB53A.jpg&quot; title=&quot;P6137801&quot; style=&quot;border: 0px none ; display: inline;&quot; alt=&quot;P6137801&quot; mce_src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/P6137801_thumb_458CB53A.jpg&quot; border=&quot;0&quot; width=&quot;244&quot; height=&quot;184&quot;&gt;&lt;/a&gt; &lt;a href=&quot;http://weblogs.asp.net/blogs/sfeldman/P6137802_7C1A607E.jpg&quot; mce_href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/P6137802_7C1A607E.jpg&quot;&gt;&lt;img src=&quot;http://weblogs.asp.net/blogs/sfeldman/P6137802_thumb_608538AE.jpg&quot; title=&quot;P6137802&quot; style=&quot;border: 0px none ; display: inline;&quot; alt=&quot;P6137802&quot; mce_src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/P6137802_thumb_608538AE.jpg&quot; border=&quot;0&quot; width=&quot;244&quot; height=&quot;184&quot;&gt;&lt;/a&gt; &lt;/p&gt;&#xA;  &#xA;&lt;p&gt;&lt;a href=&quot;http://weblogs.asp.net/blogs/sfeldman/P6137806_64AF1073.jpg&quot; mce_href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/P6137806_64AF1073.jpg&quot;&gt;&lt;img src=&quot;http://weblogs.asp.net/blogs/sfeldman/P6137806_thumb_03E1917A.jpg&quot; title=&quot;P6137806&quot; style=&quot;border: 0px none ; display: inline;&quot; alt=&quot;P6137806&quot; mce_src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/P6137806_thumb_03E1917A.jpg&quot; border=&quot;0&quot; width=&quot;244&quot; height=&quot;184&quot;&gt;&lt;/a&gt; &lt;a href=&quot;http://weblogs.asp.net/blogs/sfeldman/P6137807_49C29ECD.jpg&quot; mce_href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/P6137807_49C29ECD.jpg&quot;&gt;&lt;img src=&quot;http://weblogs.asp.net/blogs/sfeldman/P6137807_thumb_0D3A0456.jpg&quot; title=&quot;P6137807&quot; style=&quot;border: 0px none ; display: inline;&quot; alt=&quot;P6137807&quot; mce_src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/P6137807_thumb_0D3A0456.jpg&quot; border=&quot;0&quot; width=&quot;244&quot; height=&quot;184&quot;&gt;&lt;/a&gt; &lt;/p&gt;&#xA;  &#xA;&lt;p&gt;&lt;a href=&quot;http://weblogs.asp.net/blogs/sfeldman/P6137812_48C9ED49.jpg&quot; mce_href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/P6137812_48C9ED49.jpg&quot;&gt;&lt;img src=&quot;http://weblogs.asp.net/blogs/sfeldman/P6137812_thumb_6507099C.jpg&quot; title=&quot;P6137812&quot; style=&quot;border: 0px none ; display: inline;&quot; alt=&quot;P6137812&quot; mce_src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/P6137812_thumb_6507099C.jpg&quot; border=&quot;0&quot; width=&quot;244&quot; height=&quot;184&quot;&gt;&lt;/a&gt; &lt;a href=&quot;http://weblogs.asp.net/blogs/sfeldman/P6137814_2D90D2A1.jpg&quot; mce_href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/P6137814_2D90D2A1.jpg&quot;&gt;&lt;img src=&quot;http://weblogs.asp.net/blogs/sfeldman/P6137814_thumb_5129AEA1.jpg&quot; title=&quot;P6137814&quot; style=&quot;border: 0px none ; display: inline;&quot; alt=&quot;P6137814&quot; mce_src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/P6137814_thumb_5129AEA1.jpg&quot; border=&quot;0&quot; width=&quot;244&quot; height=&quot;184&quot;&gt;&lt;/a&gt; &lt;/p&gt;&#xA;  &#xA;&lt;p&gt;&lt;a href=&quot;http://weblogs.asp.net/blogs/sfeldman/P6137816_324314F6.jpg&quot; mce_href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/P6137816_324314F6.jpg&quot;&gt;&lt;img src=&quot;http://weblogs.asp.net/blogs/sfeldman/P6137816_thumb_2CC47E85.jpg&quot; title=&quot;P6137816&quot; style=&quot;border: 0px none ; display: inline;&quot; alt=&quot;P6137816&quot; mce_src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/P6137816_thumb_2CC47E85.jpg&quot; border=&quot;0&quot; width=&quot;244&quot; height=&quot;184&quot;&gt;&lt;/a&gt; &lt;a href=&quot;http://weblogs.asp.net/blogs/sfeldman/P6137819_22AFDD5A.jpg&quot; mce_href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/P6137819_22AFDD5A.jpg&quot;&gt;&lt;img src=&quot;http://weblogs.asp.net/blogs/sfeldman/P6137819_thumb_26C98F52.jpg&quot; title=&quot;P6137819&quot; style=&quot;border: 0px none ; display: inline;&quot; alt=&quot;P6137819&quot; mce_src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/P6137819_thumb_26C98F52.jpg&quot; border=&quot;0&quot; width=&quot;244&quot; height=&quot;184&quot;&gt;&lt;/a&gt; &lt;/p&gt;&#xA;  &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&#xA;  &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&#xA;  &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&#xA;  &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&#xA;  &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&#xA;  &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&#xA;  &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&#xA;  &#xA;&lt;p&gt;&amp;nbsp;&lt;a href=&quot;http://weblogs.asp.net/blogs/sfeldman/P6137826_4AA240DF.jpg&quot; mce_href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/P6137826_4AA240DF.jpg&quot;&gt;&lt;img src=&quot;http://weblogs.asp.net/blogs/sfeldman/P6137826_thumb_345BFFC0.jpg&quot; title=&quot;P6137826&quot; style=&quot;border: 0px none ; display: inline;&quot; alt=&quot;P6137826&quot; mce_src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/P6137826_thumb_345BFFC0.jpg&quot; border=&quot;0&quot; width=&quot;244&quot; height=&quot;184&quot;&gt;&lt;/a&gt; &lt;a href=&quot;http://weblogs.asp.net/blogs/sfeldman/P6137824_59794A2C.jpg&quot; mce_href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/P6137824_59794A2C.jpg&quot;&gt;&lt;img src=&quot;http://weblogs.asp.net/blogs/sfeldman/P6137824_thumb_5CF7196F.jpg&quot; title=&quot;P6137824&quot; style=&quot;border: 0px none ; display: inline;&quot; alt=&quot;P6137824&quot; mce_src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/P6137824_thumb_5CF7196F.jpg&quot; border=&quot;0&quot; width=&quot;244&quot; height=&quot;184&quot;&gt;&lt;/a&gt; &lt;/p&gt;&#xA;  &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&#xA;  &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&#xA;  &#xA;&lt;p&gt;&lt;a href=&quot;http://weblogs.asp.net/blogs/sfeldman/P6137829_41DE4A61.jpg&quot; mce_href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/P6137829_41DE4A61.jpg&quot;&gt;&lt;img src=&quot;http://weblogs.asp.net/blogs/sfeldman/P6137829_thumb_324B12C5.jpg&quot; title=&quot;P6137829&quot; style=&quot;border: 0px none ; display: inline;&quot; alt=&quot;P6137829&quot; mce_src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/P6137829_thumb_324B12C5.jpg&quot; border=&quot;0&quot; width=&quot;244&quot; height=&quot;184&quot;&gt;&lt;/a&gt; &lt;a href=&quot;http://weblogs.asp.net/blogs/sfeldman/P6137833_359C84A0.jpg&quot; mce_href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/P6137833_359C84A0.jpg&quot;&gt;&lt;img src=&quot;http://weblogs.asp.net/blogs/sfeldman/P6137833_thumb_6717CC68.jpg&quot; title=&quot;P6137833&quot; style=&quot;border: 0px none ; display: inline;&quot; alt=&quot;P6137833&quot; mce_src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/P6137833_thumb_6717CC68.jpg&quot; border=&quot;0&quot; width=&quot;244&quot; height=&quot;184&quot;&gt;&lt;/a&gt; &lt;/p&gt;&#xA;  &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&#xA;  &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&#xA;  &#xA;&lt;p&gt;PS: When we were about to leave, another flying craft appeared, “showing off” some nice stunts. As I learned later, it was a retired F-15 pilot. Another guy showed up as well, not flying, but getting his plain in the air. Hobby that is an obsession. &lt;/p&gt;&#xA;  &#xA;&lt;p&gt;&lt;a href=&quot;http://weblogs.asp.net/blogs/sfeldman/P6137839_38DDD0AE.jpg&quot; mce_href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/P6137839_38DDD0AE.jpg&quot;&gt;&lt;img src=&quot;http://weblogs.asp.net/blogs/sfeldman/P6137839_thumb_5A69D3B2.jpg&quot; title=&quot;P6137839&quot; style=&quot;border: 0px none ; display: inline;&quot; alt=&quot;P6137839&quot; mce_src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/P6137839_thumb_5A69D3B2.jpg&quot; border=&quot;0&quot; width=&quot;244&quot; height=&quot;184&quot;&gt;&lt;/a&gt; &lt;a href=&quot;http://weblogs.asp.net/blogs/sfeldman/P6137841_1665EF9B.jpg&quot; mce_href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/P6137841_1665EF9B.jpg&quot;&gt;&lt;img src=&quot;http://weblogs.asp.net/blogs/sfeldman/P6137841_thumb_436AB69C.jpg&quot; title=&quot;P6137841&quot; style=&quot;border: 0px none ; display: inline;&quot; alt=&quot;P6137841&quot; mce_src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/P6137841_thumb_436AB69C.jpg&quot; border=&quot;0&quot; width=&quot;184&quot; height=&quot;244&quot;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Stealing Rans' signature borrowed from Leonard Da Vinci I will finish this. &quot;For once you have tasted flight you will walk the earth with your eyes turned skywards, for there you have been and there you will long to return.&quot;&lt;br&gt;&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-06-13T14:52:00Z" PublishedUtc="2014-04-19T20:32:40.4428513Z" ModifiedUtc="2009-06-13T14:52:00Z" />
      <TagsPart Tags="Personal" />
      <AutoroutePart Alias="once-you-have-tasted-flight-you-will-walk-the-earth-with-your-eyes-turned-skywards" UseCustomPattern="false" />
      <TitlePart Title="Once You Have Tasted Flight, You Will Walk the Earth With Your Eyes Turned Skywards" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=with-power-comes-responsibility" Status="Published">
      <BodyPart Text="&lt;p&gt;In software like in a real life, not always everything can be extremely simple. One example I can think of right away is Inversion of Control container (IoC). In a simple application, it’s not a big deal, and normally achieved easily. The dependent component leverages some sort of Static Gateway container to resolve the dependencies based on contacts.&lt;/p&gt;  &lt;div style=&quot;border-right: gray 1px solid; padding-right: 4px; border-top: gray 1px solid; padding-left: 4px; font-size: 8pt; padding-bottom: 4px; margin: 20px 0px 10px; border-left: gray 1px solid; width: 97.5%; cursor: text; max-height: 200px; line-height: 12pt; padding-top: 4px; border-bottom: gray 1px solid; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; background-color: #f4f4f4&quot;&gt;   &lt;div style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;     &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   1:&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;class&lt;/span&gt; Component&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   2:&lt;/span&gt; {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   3:&lt;/span&gt;     &lt;span style=&quot;color: #0000ff&quot;&gt;public&lt;/span&gt; Component(IDependency dependency) &lt;span style=&quot;color: #008000&quot;&gt;//...&lt;/span&gt;&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   4:&lt;/span&gt;     &lt;span style=&quot;color: #0000ff&quot;&gt;public&lt;/span&gt; Component() : &lt;span style=&quot;color: #0000ff&quot;&gt;this&lt;/span&gt;(DependencyResolver.Resolve&amp;lt;IDependency&amp;gt;()) &lt;span style=&quot;color: #008000&quot;&gt;//...&lt;/span&gt;&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   5:&lt;/span&gt; }&lt;/pre&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;In order to “populate” container with all the dependencies, normally we’d leverage some sort of start-up task to achieve the goal.&lt;/p&gt;&#xA;&#xA;&lt;div&gt;&#xA;  &lt;div style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   1:&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;class&lt;/span&gt; StartupTask : ICommand&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   2:&lt;/span&gt; {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   3:&lt;/span&gt;     &lt;span style=&quot;color: #0000ff&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;void&lt;/span&gt; Execute()&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   4:&lt;/span&gt;     {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   5:&lt;/span&gt;         DependencyResolver.Register&amp;lt;IDependency&amp;gt;(() =&amp;gt; &lt;span style=&quot;color: #0000ff&quot;&gt;new&lt;/span&gt; Dependency());&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   6:&lt;/span&gt;     }&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   7:&lt;/span&gt; }&lt;/pre&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;When does the complexity creeps in? When a real life scenario kicks in. One of those scenarios are services. Why services? Because now it’s no longer a linear execution (a service can be started and stopped), and we neither want to pollute the service code with start-up tasks’ responsibilities. Solution? Different ones, but either way, a bit of complexity is added and from that moment and on developers are required to “ramp up” in knowledge to be able to understand and maintain it (develop or just-keep-alive). This is where “with power comes responsibility” is mostly used.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;So is happening in real life. I was quiet surprised to see the most unexpected place – kids playground. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Playgrounds in Israel are mostly for kids up to age of 6 and not extremely attractive for teens.&amp;#160; Despite unmatched age, those normally spend some time at playgrounds as well, ruining them completely. A bright idea that a wise man had was to introduce “work-out” machines side-by-side with kids playground, so teens would invest their energy in a more peaceful way. Boy it worked! Not only little kids now have playgrounds in normal and usable condition and their parents a peace of mind, but also the awareness among teenagers for physical fitness has significantly raised. Well done. Here are some shots of proof how with power comes responsibility.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/P6100051_590A8FE6.jpg&quot;&gt;&lt;img title=&quot;P6100051&quot; style=&quot;border-right: 0px; border-top: 0px; display: inline; border-left: 0px; border-bottom: 0px&quot; height=&quot;244&quot; alt=&quot;P6100051&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/P6100051_thumb_516EFAAC.jpg&quot; width=&quot;184&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/P6100057_669D0054.jpg&quot;&gt;&lt;img title=&quot;P6100057&quot; style=&quot;border-right: 0px; border-top: 0px; display: inline; border-left: 0px; border-bottom: 0px&quot; height=&quot;244&quot; alt=&quot;P6100057&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/P6100057_thumb_73F2ED8D.jpg&quot; width=&quot;184&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/P6100053_7B4EAD3A.jpg&quot;&gt;&lt;img title=&quot;P6100053&quot; style=&quot;border-right: 0px; border-top: 0px; display: inline; border-left: 0px; border-bottom: 0px&quot; height=&quot;184&quot; alt=&quot;P6100053&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/P6100053_thumb_4936C116.jpg&quot; width=&quot;244&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/P6100055_49DF7740.jpg&quot;&gt;&lt;img title=&quot;P6100055&quot; style=&quot;border-right: 0px; border-top: 0px; display: inline; border-left: 0px; border-bottom: 0px&quot; height=&quot;184&quot; alt=&quot;P6100055&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/P6100055_thumb_7B0E1606.jpg&quot; width=&quot;244&quot; border=&quot;0&quot; /&gt;&lt;/a&gt;&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-06-12T17:20:00Z" PublishedUtc="2014-04-19T20:32:41.7240938Z" ModifiedUtc="2009-06-12T17:20:00Z" />
      <TagsPart Tags="Other" />
      <AutoroutePart Alias="with-power-comes-responsibility" UseCustomPattern="false" />
      <TitlePart Title="With Power Comes Responsibility" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=calgary-june-6th-2009" Status="Published">
      <BodyPart Text="&lt;p&gt;I am about to leave for my vacation and I think it is a perfect timing, based on what I saw this morning outside :)&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;http://weblogs.asp.net/blogs/sfeldman/06062009snow_48AA8795.jpg&quot; mce_href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/06062009snow_48AA8795.jpg&quot;&gt;&lt;img src=&quot;http://weblogs.asp.net/blogs/sfeldman/06062009snow_thumb_2CB9529D.jpg&quot; title=&quot;06062009-snow&quot; style=&quot;border: 0px none ; display: block; float: none; margin-left: auto; margin-right: auto;&quot; alt=&quot;06062009-snow&quot; mce_src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/06062009snow_thumb_2CB9529D.jpg&quot; border=&quot;0&quot; width=&quot;604&quot; height=&quot;804&quot;&gt;&lt;/a&gt;&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-06-06T14:49:00Z" PublishedUtc="2014-04-19T20:32:42.2084544Z" ModifiedUtc="2009-06-06T14:49:00Z" />
      <TagsPart Tags="Personal" />
      <AutoroutePart Alias="calgary-june-6th-2009" UseCustomPattern="false" />
      <TitlePart Title="Calgary, June 6th 2009" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=visualsvn-missing-key-shortcuts" Status="Published">
      <BodyPart Text="&lt;p&gt;Update: 2009-06-03&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;http://tortoisesvn.tigris.org/&quot;&gt;TortoiseSVN&lt;/a&gt; is a good tool. I like the frequent updates and good integration with Visual Studio through &lt;a href=&quot;http://www.visualsvn.com/visualsvn/&quot; target=&quot;_blank&quot;&gt;VisualSVN&lt;/a&gt;. What I find annoying, is breaking changes with no immediate follow-ups to fix those. Now it’s the missing key shortcuts. I prefer keyboard to a mouse, so in my case it’s a waste. &lt;/p&gt;  &lt;p&gt;Please bring it back.&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_7EB953BB.png&quot;&gt;&lt;img title=&quot;image&quot; style=&quot;border-top-width: 0px; display: block; border-left-width: 0px; float: none; border-bottom-width: 0px; margin-left: auto; margin-right: auto; border-right-width: 0px&quot; height=&quot;302&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_5621D820.png&quot; width=&quot;659&quot; border=&quot;0&quot; /&gt;&lt;/a&gt;&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-06-02T14:24:00Z" PublishedUtc="2014-04-19T20:32:42.7084474Z" ModifiedUtc="2009-06-02T14:24:00Z" />
      <TagsPart Tags="" />
      <AutoroutePart Alias="visualsvn-missing-key-shortcuts" UseCustomPattern="false" />
      <TitlePart Title="TortoiseSVN – Missing Key Shortcuts" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=mime-header-content-disposition" Status="Published">
      <BodyPart Text="&lt;p&gt;I am trying to figure out something on MIME header, and just can’t understand who is standing behind the RFCs. Are they trying to read it on their own and realize if it makes sense?! &lt;/p&gt;  &lt;p&gt;The problem I am facing is attachments in another standard, RosettaNet, that is leveraging MIME for attachments. We are using a third party component to parse a RosettaNet message and load all the attachments. Attachments original filenames are supposed to be in the “Content-Disposition” property, marked as “Content-Disposition: attachment; filename=some_filename” according to the &lt;a href=&quot;http://en.wikipedia.org/wiki/MIME#Content-Disposition&quot; target=&quot;_blank&quot;&gt;this WIKI&lt;/a&gt;. “But WIKI is not RFC” you say, well, read &lt;a href=&quot;http://tools.ietf.org/html/rfc2183&quot; target=&quot;_blank&quot;&gt;RFC 2183&lt;/a&gt;. It says&lt;/p&gt;  &lt;blockquote&gt;   &lt;pre&gt;In addition to allowing the sender to specify the presentational&#xA;disposition of a message component, it is &lt;strong&gt;&lt;u&gt;desirable&lt;/u&gt;&lt;/strong&gt; to allow her to&#xA;indicate a default archival disposition; a filename. The &lt;u&gt;optional&lt;/u&gt;&#xA;&amp;quot;filename&amp;quot; parameter provides for this.&lt;/pre&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;And later:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;pre&gt;&lt;h5&gt;&lt;a name=&quot;section-2.3&quot;&gt;2.3&lt;/a&gt;  The Filename Parameter&lt;/h5&gt;&#xA;&#xA;   The sender may want to suggest a filename to be used if the entity is&#xA;   detached and stored in a separate file. If the receiving MUA writes&#xA;   the entity to a file, the suggested filename &lt;u&gt;should be used&lt;/u&gt; as a&#xA;   basis for the actual filename, where possible.&lt;/pre&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Reading more of the great RFC, I found an example #3, in section 2.10&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;pre&gt;The following body part contains a JPEG image that should be&#xA;displayed to the user only if the user requests it. &lt;u&gt;If the JPEG is&#xA;written to a file, the file should be named &amp;quot;genome.jpg&amp;quot;.&lt;/u&gt;  The&#xA;recipient's user might also choose to set the last-modified date of&#xA;the stored file to date in the modification-date parameter:&#xA;&#xA;        Content-Type: image/jpeg&#xA;        Content-Disposition: attachment; filename=genome.jpeg;&#xA;          modification-date=&amp;quot;Wed, 12 Feb 1997 16:29:51 -0500&amp;quot;;&#xA;        Content-Description: a complete map of the human genome&#xA;&#xA;        &amp;lt;jpeg data&amp;gt;&lt;/pre&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;I am really confused.&amp;#160; One part says “it’s optional”, the other part says “should be used”. So in case I want to save the attachment in a file with the original filename, I might end up not having one (filename)?! Great… Long live standards.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-06-02T05:17:00Z" PublishedUtc="2014-04-19T20:32:43.4158026Z" ModifiedUtc="2009-06-02T05:17:00Z" />
      <TagsPart Tags="Other" />
      <AutoroutePart Alias="mime-header-content-disposition" UseCustomPattern="false" />
      <TitlePart Title="MIME Header - Content-Disposition" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=wise-manager-words" Status="Published">
      <BodyPart Text="&lt;blockquote&gt;   &lt;p&gt;The task then is to refine the code base to better meet customer needs. If that is not clear, the programmers should not write a line of code. Every line of code costs money to write and more money to support. It is better for the developers to be surfing than writing code that won’t be needed. If they write code that ultimately is not used, I will be paying for that code for the life of the system, which is typically longer than my professional life. If they went surfing, they would have fun, and I would have a less expensive system and fewer headaches to maintain.&lt;/p&gt; &lt;/blockquote&gt;  &lt;p&gt;-- Jeff Sutherland&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-05-27T23:52:00Z" PublishedUtc="2014-04-19T20:32:44.2646974Z" ModifiedUtc="2009-05-27T23:52:00Z" />
      <TagsPart Tags="Agile" />
      <AutoroutePart Alias="wise-manager-words" UseCustomPattern="false" />
      <TitlePart Title="Wise Manager Words" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=nhibernate-sessionfactory-lesson" Status="Published">
      <BodyPart Text="&lt;p&gt;Anyone who worked with NHibernate knows that SessionFactory is an expensive object, that better to be constructed once, cached and re-used to build lightweight and disposable NHibernate sessions. It’s always shows up as a warning in books (&lt;a href=&quot;http://www.manning.com/kuate/&quot; target=&quot;_blank&quot;&gt;NHibernate in Action&lt;/a&gt;, page 35), WIKIs, blogs, etc.&lt;/p&gt;  &lt;p&gt;Today our team had a chance to experience what a wrong handling of SessionFactory can turn into – a huge memory leak. SessionFactory is a heavy object, it’s initialization and allocation is not a trivial one. Each time SessionFactory is constructed, it uses a significant amount of recourses and holds to those. If SessionFactory is not cached as a single instance, each allocation causes to the overall memory leak. Combine that with luck of Session disposing generates a very interesting result – more than a gig of&amp;#160; memory for something that is barely 20 megs.&lt;/p&gt;  &lt;p&gt;Moral of the story:&lt;/p&gt;  &lt;p&gt;- As in pair programming, so is in pair-troubleshooting – team works better&lt;/p&gt;  &lt;p&gt;- Using a third party components (even the best out there) without exploratory tests will cause eventually pain&lt;/p&gt;  &lt;p&gt;- Follow simple notes third party components authors write, they might simplify your life&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-05-21T05:22:00Z" PublishedUtc="2014-04-19T20:32:44.7178171Z" ModifiedUtc="2009-05-21T05:22:00Z" />
      <TagsPart Tags="NHibernate" />
      <AutoroutePart Alias="nhibernate-sessionfactory-lesson" UseCustomPattern="false" />
      <TitlePart Title="NHibernate SessionFactory Lesson" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=building-a-dream-team" Status="Published">
      <BodyPart Text="&lt;p&gt;The company I work for, &lt;a href=&quot;http://www.cortex.net&quot;&gt;Cortex Business Solutions&lt;/a&gt;, is in the hiring mode again. We are looking for passionate developers (Terry has worded the requirements in his &lt;a href=&quot;http://www.connicus.com/archive/2008/12/17/a-call-for-passionate-developers.aspx&quot;&gt;post&lt;/a&gt; already, so I will keep it DRY). &lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-05-19T16:57:00Z" PublishedUtc="2014-04-19T20:32:45.0146947Z" ModifiedUtc="2009-05-19T16:57:00Z" />
      <TagsPart Tags="Other" />
      <AutoroutePart Alias="building-a-dream-team" UseCustomPattern="false" />
      <TitlePart Title="Building a Dream Team" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=free-typemock-licenses-real-deal" Status="Published">
      <BodyPart Text="&lt;p&gt;&lt;a href=&quot;http://www.typemock.com/&quot;&gt;Unit Testing&lt;/a&gt; ASP.NET? &lt;a href=&quot;http://www.typemock.com/ASP.NET_unit_testing_page.php&quot;&gt;ASP.NET unit testing&lt;/a&gt; has never been this easy.     &lt;br /&gt;Typemock is launching a new product for ASP.NET developers – the &lt;strong&gt;ASP.NET Bundle&lt;/strong&gt; - and for the launch will be giving out &lt;strong&gt;FREE licenses&lt;/strong&gt; to bloggers and their readers.&lt;/p&gt;  &lt;p&gt;   &lt;br /&gt;The ASP.NET Bundle is the ultimate ASP.NET unit testing solution, and offers both &lt;a href=&quot;http://www.typemock.com/&quot;&gt;Typemock Isolator&lt;/a&gt;, a &lt;a href=&quot;http://www.typemock.com/&quot;&gt;unit test&lt;/a&gt; tool and &lt;a href=&quot;http://sm-art.biz/Ivonna.aspx&quot;&gt;Ivonna&lt;/a&gt;, the Isolator add-on for &lt;a href=&quot;http://sm-art.biz/Ivonna.aspx&quot;&gt;ASP.NET unit testing&lt;/a&gt;, for a bargain price.     &lt;br /&gt;&lt;/p&gt;  &lt;p&gt;Typemock Isolator is a leading &lt;a href=&quot;http://www.typemock.com/&quot;&gt;.NET unit testing&lt;/a&gt; tool (C# and VB.NET) for many ‘hard to test’ technologies such as &lt;a href=&quot;http://typemock.com/sharepointpage.php&quot;&gt;SharePoint&lt;/a&gt;, &lt;a href=&quot;http://www.typemock.com/ASP.NET_unit_testing_page.php&quot;&gt;ASP.NET&lt;/a&gt;, &lt;a href=&quot;http://www.typemock.com/ASP.NET_unit_testing_page.php&quot;&gt;MVC&lt;/a&gt;, &lt;a href=&quot;http://www.typemock.com/wcfpage.php&quot;&gt;WCF&lt;/a&gt;, WPF, &lt;a href=&quot;http://www.typemock.com/Silverlight_unit_testing_page.php&quot;&gt;Silverlight&lt;/a&gt; and more. Note that for &lt;a href=&quot;http://www.typemock.com/Silverlight_unit_testing_page.php&quot;&gt;unit testing Silverlight&lt;/a&gt; there is an open source Isolator add-on called &lt;a href=&quot;http://www.typemock.com/Silverlight_unit_testing_page.php&quot;&gt;SilverUnit&lt;/a&gt;.     &lt;br /&gt;The first 60 bloggers who will blog this text in their blog and &lt;a href=&quot;http://blog.typemock.com/2009/05/get-free-typemock-licenses-aspnet.html&quot;&gt;tell us about it&lt;/a&gt;, will get a Free Isolator ASP.NET Bundle license (Typemock Isolator + Ivonna). If you post this in an ASP.NET &lt;strong&gt;dedicated&lt;/strong&gt; blog, you'll get a license automatically (even if more than 60 submit) during the first week of this announcement.     &lt;br /&gt;Also 8 bloggers will get an &lt;strong&gt;additional 2 licenses&lt;/strong&gt; (each) to give away to their readers / friends.     &lt;br /&gt;&lt;/p&gt;  &lt;p&gt;Go ahead, click the following link for &lt;a href=&quot;http://blog.typemock.com/2009/05/get-free-typemock-licenses-aspnet.html&quot;&gt;more information &lt;/a&gt;on how to get your free license.&lt;/p&gt;  &lt;p&gt;Update: This is what I received today, less than 24 hours after the post was published:&lt;/p&gt;  &lt;blockquote&gt;   &lt;p&gt;Thank you for participating in the launch of our &lt;a href=&quot;http://ASP.NET&quot;&gt;ASP.NET&lt;/a&gt; bundle.&lt;/p&gt;    &lt;p&gt;I am glad to inform you that you have qualified for a &lt;b&gt;free license &lt;/b&gt;for the&lt;b&gt; &lt;a href=&quot;http://ASP.NET&quot;&gt;ASP.NET&lt;/a&gt; Bundle&lt;/b&gt; (&lt;a href=&quot;http://www.typemock.com/&quot;&gt;Typemock Isolator&lt;/a&gt; personal edition + &lt;a href=&quot;http://sm-art.biz/Ivonna.aspx&quot;&gt;Ivonna&lt;/a&gt;), and that the license will be sent to you in the upcoming week.&lt;/p&gt; &lt;/blockquote&gt;  &lt;p&gt;Real deal.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-05-19T13:43:00Z" PublishedUtc="2014-04-19T20:32:45.3428171Z" ModifiedUtc="2009-05-19T13:43:00Z" />
      <TagsPart Tags="Other" />
      <AutoroutePart Alias="free-typemock-licenses-real-deal" UseCustomPattern="false" />
      <TitlePart Title="Free Typemock licenses – Real Deal" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=domain-object-and-contracts-the-end" Status="Published">
      <BodyPart Text="&lt;p&gt;In my &lt;a href=&quot;http://weblogs.asp.net/sfeldman/archive/2008/10/23/domain-object-and-contracts.aspx&quot;&gt;previous blog&lt;/a&gt; about domain objects and contracts for those, I have described the situation where the team was thinking in a different way than myself, and what we tried. I have never blogged back about the fact that the team got convinced that this is not a good practice, and long time ago we stopped doing that. Today I spotted a &lt;a href=&quot;http://www.lostechies.com/blogs/jagregory/archive/2009/05/09/entity-interface-anti-pattern.aspx&quot;&gt;blog post&lt;/a&gt; from &lt;a href=&quot;http://www.lostechies.com/members/jagregory/default.aspx&quot;&gt;James Gregory&lt;/a&gt; where he names it properly “an anti-pattern”. That’s what it is. End of the story.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-05-14T19:43:00Z" PublishedUtc="2014-04-19T20:32:45.6396784Z" ModifiedUtc="2009-05-14T19:43:00Z" />
      <TagsPart Tags="DDD" />
      <AutoroutePart Alias="domain-object-and-contracts-the-end" UseCustomPattern="false" />
      <TitlePart Title="Domain Object and Contracts – The End" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=hudson-task-scanner-plugin" Status="Published">
      <BodyPart Text="&lt;p&gt;Seeing is believing. I was looking for a Hudson plugins that would allow me to present any TODOs left in the code. And as usual, found it (love that!). &lt;a href=&quot;http://wiki.hudson-ci.org/display/HUDSON/Static+Code+Analysis+Plug-ins&quot;&gt;Static Code Analysis Plugins&lt;/a&gt; are useful when you need that type of information. In particular, I am talking about &lt;a href=&quot;http://wiki.hudson-ci.org/display/HUDSON/Task+Scanner+Plugin&quot;&gt;Task Scanner Plugin&lt;/a&gt;. The snapshot will tell everything.&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_401E7D6B.png&quot;&gt;&lt;img title=&quot;image&quot; style=&quot;border-right: 0px; border-top: 0px; display: inline; border-left: 0px; border-bottom: 0px&quot; height=&quot;278&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_4F54E638.png&quot; width=&quot;1019&quot; border=&quot;0&quot; /&gt;&lt;/a&gt;&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-05-13T01:12:00Z" PublishedUtc="2014-04-19T20:32:46.2490459Z" ModifiedUtc="2009-05-13T01:12:00Z" />
      <TagsPart Tags="CI" />
      <AutoroutePart Alias="hudson-task-scanner-plugin" UseCustomPattern="false" />
      <TitlePart Title="Hudson – Task Scanner Plugin" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=dd-vs-dd-the-end" Status="Published">
      <BodyPart Text="&lt;p&gt;I had an &lt;a href=&quot;http://weblogs.asp.net/sfeldman/archive/2008/07/17/data-driven-or-domain-driven-application.aspx&quot;&gt;old post&lt;/a&gt;, back in July 2008, where I had a few comments on Data Driven vs. Domain Driven applications. It will be almost a year soon since that post, and I have definitely learned a lot since then. One thing I learned for sure, is to pick your the battles. You cannot fight a developer who knows data driven applications since day one and nothing else, that domain driven applications are not necessarily more ‘efficient’, but more maintainable, allow better link between domain concept and software, allow change, pass the reality tests when change in business is coming. It’s the same as trying to convince someone who spent 2/3 of his career without testing and sees no value in it, suddenly to start TDD or even ‘worse’, BDD. Why to bother? I know my stuff well, don’t I? Look, XX years in the industry are not wasted. No, they are invested with a little ROI. But these are religious wars. Useless. Therefore I am off the topic, and just learning, exploring, and implementing things I see the right way at the given moment. Once you concentrate on doing that rather than chasing ghosts to convince, you realize what is right and what is wrong, without a need in side-kicks.&lt;/p&gt;  &lt;p&gt;So this is the end of discussion for me. Why did I post this? Well, it was funny to get today a comment, referencing the post. I forgot it long time ago, but someone is still fighting the fight he will eventually lose…&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-05-12T03:13:00Z" PublishedUtc="2014-04-19T20:32:46.5771686Z" ModifiedUtc="2009-05-12T03:13:00Z" />
      <TagsPart Tags="" />
      <AutoroutePart Alias="dd-vs-dd-the-end" UseCustomPattern="false" />
      <TitlePart Title="DD vs. DD – The End" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=categoryattribute" Status="Published">
      <BodyPart Text="&lt;p&gt;Anyone who's doing TDD is familiar with the CategoryAttribute coming with the most of frameworks. Today (I am surprised it took us so long!) we got read of &lt;/p&gt;  &lt;div&gt;   &lt;div style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;     &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;[Category(&lt;span style=&quot;color: #006080&quot;&gt;&amp;quot;Integration&amp;quot;&lt;/span&gt;)]&lt;/pre&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;and started to use the right approach&lt;/p&gt;&#xA;&#xA;&lt;div&gt;&#xA;  &lt;div style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;[Category(Categories.Integration)]&lt;/pre&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;where Categories is a sealed class with constants&lt;/p&gt;&#xA;&#xA;&lt;div&gt;&#xA;  &lt;div style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;sealed&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;class&lt;/span&gt; Categories&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;{&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;    &lt;span style=&quot;color: #0000ff&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;const&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;string&lt;/span&gt; Integration = &lt;span style=&quot;color: #006080&quot;&gt;&amp;quot;Integration&amp;quot;&lt;/span&gt;;&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;}&lt;/pre&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;Why is it good? First - it's DRY (rather that finding strings such as &amp;quot;Integration&amp;quot; and &amp;quot;Integration&lt;strong&gt;s&lt;/strong&gt;&amp;quot; all over the place. Second - it's easy to refactor.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-05-08T03:45:30Z" PublishedUtc="2014-04-19T20:32:47.3271589Z" ModifiedUtc="2009-05-08T03:45:30Z" />
      <TagsPart Tags="TDD" />
      <AutoroutePart Alias="categoryattribute" UseCustomPattern="false" />
      <TitlePart Title="CategoryAttribute" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=xunit-test-patterns-the-book" Status="Published">
      <BodyPart Text="&lt;p&gt;I have a deep respect to people writing books. Not only it's a commitment, but a hard work that may not be appreciated, despite all the efforts invested into creation of a such. Saying that, some books are just not as good as the hype around them. Unfortunately, I found &amp;quot;&lt;a href=&quot;http://www.amazon.ca/xUnit-Test-Patterns-Refactoring-Code/dp/0131495054&quot; target=&quot;_blank&quot;&gt;xUnit Test Patterns&lt;/a&gt;&amp;quot; by Gerard Meszaros not very pleasant for reading...&lt;/p&gt;  &lt;p&gt;Do not misunderstand me - the book has a lot of knowledge and practical experience behind it. I am absolutely sure that the author knows very well what he wrote about. The problem I found with the book was the way it laid out and presented. And in particular:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;If you are a novice in TDD, this book is way too dry and overwhelming. I would almost compare it to the &amp;quot;&lt;a href=&quot;http://www.amazon.ca/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612&quot; target=&quot;_blank&quot;&gt;Design Patterns&lt;/a&gt;&amp;quot; by &lt;a href=&quot;http://en.wikipedia.org/wiki/Design_Patterns_(book)&quot; target=&quot;_blank&quot;&gt;GoF&lt;/a&gt; reading experience when you have never touched C++/Smalltalk in your entire life and the concept of patterns in pretty new to you. What I would like the &amp;quot;xUnit Test Patterns&amp;quot; to be like for a novice (or at least a few chapters in the begging) is something similar to &amp;quot;&lt;a href=&quot;http://www.amazon.ca/Head-First-Design-Patterns-Freeman/dp/0596007124&quot; target=&quot;_blank&quot;&gt;Head First Design Patterns&lt;/a&gt;&amp;quot;.&lt;/li&gt;    &lt;li&gt;If you are into TDD already, and seeking for ways to improve what you are doing - no book will help, but practice and lots of it. At the same time, it is good to read the theory to understand what should be avoided or alternatives to what you are already doing. Unfortunately, this book is not a pleasant reading, as every single page has at least one page-reference, and that has at least another one, and so on, and so on. You get destructed so by often page-jumps that you loose the content.&lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;Finally the verdict: you can have this book as a reference, but not as a reading material. Oh, and if your shelf needs a solidity boost, it's damn good one for that :) &lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-05-08T03:31:55Z" PublishedUtc="2014-04-19T20:32:48.4052697Z" ModifiedUtc="2009-05-08T03:31:55Z" />
      <TagsPart Tags="Books" />
      <AutoroutePart Alias="xunit-test-patterns-the-book" UseCustomPattern="false" />
      <TitlePart Title="xUnit Test Patterns - The Book" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=durban-conference-2009-show-goes-on-and-on" Status="Published">
      <BodyPart Text="&lt;p&gt;This post is political.&lt;/p&gt;  &lt;p&gt;I am just glad that along with Israel, Canada and US did not take part in this pre-arranged &amp;quot;show&amp;quot;. Boy oh boy, an international conference masqueraded with good intentions, and leading to the same old thing - hatred for Jews and state of Israel. Now ask the question yourself: do you trust UN and everything you hear? Cause I wouldn't.&lt;/p&gt;  &lt;p&gt;Some countries representatives have left in order to &lt;a href=&quot;http://www.youtube.com/watch?v=AThlfpt335I&quot; target=&quot;_blank&quot;&gt;boycott&lt;/a&gt; the speech, and this is where I am not sure if that was in solidarity to what was done to Israel, or because they felt attacked. Either way, I hope they will open their eyes, and stop participating ahead.&lt;/p&gt;  &lt;p&gt;PS: The &lt;a href=&quot;http://www.youtube.com/watch?v=WPcvfGZ4g74&quot; target=&quot;_blank&quot;&gt;speech of the president of Iran&lt;/a&gt; had some brilliant timing - close to the Holocaust day. And the world applauded to the speech. Now will people wake up to see the truth?&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-04-26T16:32:22Z" PublishedUtc="2014-04-19T20:32:48.7490151Z" ModifiedUtc="2009-04-26T16:32:22Z" />
      <TagsPart Tags="Personal" />
      <AutoroutePart Alias="durban-conference-2009-show-goes-on-and-on" UseCustomPattern="false" />
      <TitlePart Title="Durban Conference 2009 - Show Goes On And On" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=db4o" Status="Published">
      <BodyPart Text="&lt;p&gt;I was exposed to &lt;a href=&quot;http://www.amazon.ca/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215&quot; target=&quot;_blank&quot;&gt;Domain-Driven Design&lt;/a&gt; not that much time ago. Prior to that, I was struggling with the &lt;a href=&quot;http://en.wikipedia.org/wiki/Object-Relational_impedance_mismatch&quot; target=&quot;_blank&quot;&gt;object-relational impedance mismatch&lt;/a&gt; while developing &lt;a href=&quot;http://en.wikipedia.org/wiki/Object_oriented&quot; target=&quot;_blank&quot;&gt;objects&lt;/a&gt; based applications. First attempt to get relational database close to the applications I was writing was an uneducated experiment to &amp;quot;wrap&amp;quot; the data into objects. The reason I think of this now as &amp;quot;uneducated&amp;quot; decision, is because I knew nothing about proper object relational mappers, neither had sufficient knowledge about patterns such as Identity, Unit of Work, Repository, etc. &lt;/p&gt;  &lt;p&gt;The first wave ended up being a &amp;quot;home-grown&amp;quot; database access layer, trying to be an ORM. Quickly I felt the pain of that solution. Some good books helped to get the answer, such as &lt;a href=&quot;http://www.amazon.ca/Patterns-Enterprise-Application-Architecture-Martin/dp/0321127420&quot; target=&quot;_blank&quot;&gt;Patterns of Enterprise Application Architecture&lt;/a&gt;. &lt;/p&gt;  &lt;p&gt;The 2nd wave was the discovery of NHibernate. It was exciting and frustrating at the same time. Exciting, because it actually could link between the object oriented solution implemented with domain-first. Frustrating, since acceptance of an ORM such as NHibernate in a company that is a hardcore DB driven solutions is hard. To sell something that is new and &amp;quot;possibly is unreliable&amp;quot; is not a simple task, and it took time. &lt;/p&gt;  &lt;p&gt;The 3rd wave was adopting &lt;a href=&quot;http://fluentnhibernate.org&quot; target=&quot;_blank&quot;&gt;FluentNHibernate&lt;/a&gt; as a development standard across the development team. Not only this has allowed us a better domain-driven development process, it actually has contributed to a fundamental change in development team - no more dumb developers coding down instructions, but developers that speak ubiquitous language with the business folks, developers that build applications based on the current domain understanding, changing and updating it to what business represents today.&lt;/p&gt;  &lt;p&gt;Now I am moving towards the 4th wave - object oriented database. The idea is not original, but the thought is striking when you think - why should I have relational database for a domain/objects structured application? I have raised the question in my &lt;a href=&quot;http://weblogs.asp.net/sfeldman/archive/2009/04/23/sick-of-relational-databases.aspx&quot; target=&quot;_blank&quot;&gt;previous blog&lt;/a&gt;. &lt;/p&gt;  &lt;p&gt;Today I have finished to read the book &amp;quot;&lt;a href=&quot;http://www.amazon.ca/Definitive-Guide-db4o-Stefan-Edlich/dp/1590596560&quot; target=&quot;_blank&quot;&gt;The Definite Guide to db4o&lt;/a&gt;&amp;quot;. Good reading. I recommend to look into it. I still cannot see how mainstream would accept it, since RDBMS are so much rooted in the minds of majority of developers and business people. There are some outstanding opportunities for OODMS, but those are not exposed widely.&lt;/p&gt;  &lt;p&gt;db4o is mostly free, and available for both .NET and Java platforms. To sum this up I will bring an excerpt from the book to think about:&lt;/p&gt;  &lt;blockquote&gt;   &lt;p&gt;The key advantages are that developers can work with object structures as if they were in-memory structures, while there is no performance loss associated with processing taking place behind the scenes to fit those objects into a relational database. Little additional coding is required to manage object persistence. New application features can be added to products much more quickly to gain competitive advantages. Models can be updated more easily for debugging or refactoring, or in order to apply change requirements.&lt;/p&gt;&lt;/blockquote&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-04-26T00:07:05Z" PublishedUtc="2014-04-19T20:32:49.0146382Z" ModifiedUtc="2009-04-26T00:07:05Z" />
      <TagsPart Tags="Books" />
      <AutoroutePart Alias="db4o" UseCustomPattern="false" />
      <TitlePart Title="db4o" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=state-pattern-with-fluentnhibernate" Status="Published">
      <BodyPart Text="&#xA;&lt;p&gt;FluentNHibernate is an amazingly nice DSL to use for quick NHibernate mapping implementation. Today I had to refactor some of the code we did at work, in order to persist a state of an object. The original code was implemented using State pattern, which allows simple division of responsibility and easy decision making at each given step. I have decided to create a simple example of State pattern persisted with FluentNHibernate in order to demonstrate how powerful it is and what kind of freedom it can give to developers.&lt;/p&gt;&#xA;  &#xA;&lt;p&gt;The domain for the sample will be some sort of simple message processing system. Listed below are all &lt;a href=&quot;http://weblogs.asp.net/blogs/sfeldman/image_4BEA3588.png&quot; mce_href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_4BEA3588.png&quot;&gt;&lt;img src=&quot;http://weblogs.asp.net/blogs/sfeldman/image_thumb_58E41599.png&quot; title=&quot;image&quot; style=&quot;border-width: 0px; display: inline; margin-left: 0px; margin-right: 0px;&quot; alt=&quot;image&quot; mce_src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_58E41599.png&quot; align=&quot;right&quot; border=&quot;0&quot; width=&quot;439&quot; height=&quot;188&quot;&gt;&lt;/a&gt;possible message statuses we can have in the system. A message starts its life in the system when it’s&amp;nbsp; received the first time, and then its’ status is set to “Received”. When message is processed, in case processing has ended successfully, it’s being send to the destinator and marked as Processed. In case processing was not successful, it’s state is updated to the “FailedProcessing”. When a successfully processed message is sent out, its’ status is set to “Sent”, which is the last status possible in the given system.&lt;/p&gt;&#xA;  &#xA;&lt;p&gt;First we want to implement the Status using State pattern.&lt;/p&gt;&#xA;  &lt;div&gt;   &lt;div style=&quot;border-style: none; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;     &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   1:&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;abstract&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;class&lt;/span&gt; MessageStatus : Entity&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   2:&lt;/span&gt; {&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   3:&lt;/span&gt;   &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;protected&lt;/span&gt; MessageStatus(&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;string&lt;/span&gt; status)&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   4:&lt;/span&gt;   {&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   5:&lt;/span&gt;     Status = status;&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   6:&lt;/span&gt;   }&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   7:&lt;/span&gt;&amp;nbsp; &lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   8:&lt;/span&gt;   &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;string&lt;/span&gt; Status { get; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;protected&lt;/span&gt; set; }&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   9:&lt;/span&gt;&amp;nbsp; &lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  10:&lt;/span&gt;   &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;virtual&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;void&lt;/span&gt; Complete()&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  11:&lt;/span&gt;   {&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  12:&lt;/span&gt;     &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;throw&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;new&lt;/span&gt; InvalidOperationException(&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;string&lt;/span&gt;.Format(&lt;span style=&quot;color: rgb(0, 96, 128);&quot;&gt;&quot;Status '{0}' cannot have a complete state.&quot;&lt;/span&gt;, Status));&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  13:&lt;/span&gt;   }&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  14:&lt;/span&gt;&amp;nbsp; &lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  15:&lt;/span&gt;   &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;virtual&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;void&lt;/span&gt; Fail()&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  16:&lt;/span&gt;   {&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  17:&lt;/span&gt;     &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;throw&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;new&lt;/span&gt; InvalidOperationException(&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;string&lt;/span&gt;.Format(&lt;span style=&quot;color: rgb(0, 96, 128);&quot;&gt;&quot;Status '{0}' cannot have a failed state.&quot;&lt;/span&gt;, Status));&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  18:&lt;/span&gt;   }&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  19:&lt;/span&gt; }&lt;/pre&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;I want to be able to store message (current) status as an entity on its’ own. We will use this to query system for messages with a particular status. MessageStatus is an Entity, entity is a base class for all entities (included in source code) to handle ID handling and equality.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Next step is to define behavior for the statuses we have. Let’s do it through tests.&lt;/p&gt;&#xA;&#xA;&lt;div style=&quot;border: 1px solid gray; margin: 20px 0px 10px; padding: 4px; overflow: auto; font-size: 8pt; width: 97.5%; cursor: text; max-height: 200px; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&#xA;  &lt;div style=&quot;border-style: none; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   1:&lt;/span&gt; [Concern(&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;typeof&lt;/span&gt; (MessageStatus))]&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   2:&lt;/span&gt; [TestFixture]&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   3:&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;abstract&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;class&lt;/span&gt; ReceivedStatus_Specs : ContextSpecification&amp;lt;MessageStatus&amp;gt;&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   4:&lt;/span&gt; {&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   5:&lt;/span&gt;   &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;protected&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;override&lt;/span&gt; MessageStatus create_system_under_test()&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   6:&lt;/span&gt;   {&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   7:&lt;/span&gt;     &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;new&lt;/span&gt; ReceivedStatus();&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   8:&lt;/span&gt;   }&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   9:&lt;/span&gt;&amp;nbsp; &lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  10:&lt;/span&gt;   &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;protected&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;override&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;void&lt;/span&gt; establish_context()&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  11:&lt;/span&gt;   {&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  12:&lt;/span&gt;     system_under_test = create_system_under_test();&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  13:&lt;/span&gt;   }&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  14:&lt;/span&gt; }&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  15:&lt;/span&gt;&amp;nbsp; &lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  16:&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;class&lt;/span&gt; When_ReceivedStatus_is_asked_to_complete : ReceivedStatus_Specs&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  17:&lt;/span&gt; {&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  18:&lt;/span&gt;   &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;protected&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;override&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;void&lt;/span&gt; because()&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  19:&lt;/span&gt;   {&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  20:&lt;/span&gt;     system_under_test.Complete();&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  21:&lt;/span&gt;   }&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  22:&lt;/span&gt;&amp;nbsp; &lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  23:&lt;/span&gt;   [Observation]&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  24:&lt;/span&gt;   &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;void&lt;/span&gt; Should_become_Processed_status()&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  25:&lt;/span&gt;   {&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  26:&lt;/span&gt;     system_under_test.Status.Should_Be_Equal_To(ProcessedStatus.StatusName);&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  27:&lt;/span&gt;   }&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  28:&lt;/span&gt; }&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  29:&lt;/span&gt;&amp;nbsp; &lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  30:&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;class&lt;/span&gt; When_ReceivedStatus_is_asked_to_fail : ReceivedStatus_Specs&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  31:&lt;/span&gt; {&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  32:&lt;/span&gt;   &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;protected&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;override&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;void&lt;/span&gt; because() {}&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  33:&lt;/span&gt;&amp;nbsp; &lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  34:&lt;/span&gt;   [Observation]&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  35:&lt;/span&gt;   [ExpectedException(&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;typeof&lt;/span&gt;(InvalidOperationException))]&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  36:&lt;/span&gt;   &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;void&lt;/span&gt; Should_throw_an_exception()&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  37:&lt;/span&gt;   {&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  38:&lt;/span&gt;     system_under_test.Fail();&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  39:&lt;/span&gt;   }&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  40:&lt;/span&gt; }&lt;/pre&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;Complete state transition specification will fail. Fixing the test will complete the implementation. &lt;/p&gt;&#xA;&#xA;&lt;div style=&quot;border: 1px solid gray; margin: 20px 0px 10px; padding: 4px; overflow: auto; font-size: 8pt; width: 97.5%; cursor: text; max-height: 200px; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&#xA;  &lt;div style=&quot;border-style: none; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   1:&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;class&lt;/span&gt; ReceivedStatus : MessageStatus&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   2:&lt;/span&gt; {&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   3:&lt;/span&gt;   &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;const&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;string&lt;/span&gt; StatusName = &lt;span style=&quot;color: rgb(0, 96, 128);&quot;&gt;&quot;Received&quot;&lt;/span&gt;;&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   4:&lt;/span&gt;&amp;nbsp; &lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   5:&lt;/span&gt;   &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;public&lt;/span&gt; ReceivedStatus() : &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;base&lt;/span&gt;(StatusName) {}&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   6:&lt;/span&gt;&amp;nbsp; &lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   7:&lt;/span&gt;   &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;override&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;void&lt;/span&gt; Complete()&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   8:&lt;/span&gt;   {&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   9:&lt;/span&gt;     Status = ProcessedStatus.StatusName;&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  10:&lt;/span&gt;   }&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  11:&lt;/span&gt; }&lt;/pre&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;The rest of the statuses are very much similar. &lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;  &#xA;&lt;li&gt;“Processed” status overrides both Complete() and Fail() &lt;/li&gt;&#xA;&#xA;  &#xA;&lt;li&gt;“Finished” and “FailedProcessing” statuses do not override anything as they are the final states &lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;div style=&quot;border: 1px solid gray; margin: 20px 0px 10px; padding: 4px; overflow: auto; font-size: 8pt; width: 97.5%; cursor: text; max-height: 200px; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&#xA;  &lt;div style=&quot;border-style: none; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   1:&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;class&lt;/span&gt; ProcessedStatus : MessageStatus&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   2:&lt;/span&gt; {&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   3:&lt;/span&gt;   &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;const&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;string&lt;/span&gt; StatusName = &lt;span style=&quot;color: rgb(0, 96, 128);&quot;&gt;&quot;Processed&quot;&lt;/span&gt;;&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   4:&lt;/span&gt;&amp;nbsp; &lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   5:&lt;/span&gt;   &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;public&lt;/span&gt; ProcessedStatus() : &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;base&lt;/span&gt;(StatusName) { }&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   6:&lt;/span&gt;&amp;nbsp; &lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   7:&lt;/span&gt;   &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;override&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;void&lt;/span&gt; Complete()&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   8:&lt;/span&gt;   {&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   9:&lt;/span&gt;     Status = SentStatus.StatusName;&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  10:&lt;/span&gt;   }&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  11:&lt;/span&gt;&amp;nbsp; &lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  12:&lt;/span&gt;   &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;override&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;void&lt;/span&gt; Fail()&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  13:&lt;/span&gt;   {&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  14:&lt;/span&gt;     Status = FailedProcessingStatus.StatusName;&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  15:&lt;/span&gt;   }&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  16:&lt;/span&gt;&amp;nbsp; &lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  17:&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;class&lt;/span&gt; SentStatus : MessageStatus&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  18:&lt;/span&gt; {&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  19:&lt;/span&gt;   &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;const&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;string&lt;/span&gt; StatusName = &lt;span style=&quot;color: rgb(0, 96, 128);&quot;&gt;&quot;Sent&quot;&lt;/span&gt;;&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  20:&lt;/span&gt;&amp;nbsp; &lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  21:&lt;/span&gt;   &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;public&lt;/span&gt; SentStatus() : &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;base&lt;/span&gt;(StatusName) { }&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  22:&lt;/span&gt; }&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  23:&lt;/span&gt;&amp;nbsp; &lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  24:&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;class&lt;/span&gt; FailedProcessingStatus : MessageStatus&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  25:&lt;/span&gt; {&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  26:&lt;/span&gt;   &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;const&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;string&lt;/span&gt; StatusName = &lt;span style=&quot;color: rgb(0, 96, 128);&quot;&gt;&quot;FailedProcessing&quot;&lt;/span&gt;;&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  27:&lt;/span&gt;&amp;nbsp; &lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  28:&lt;/span&gt;   &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;public&lt;/span&gt; FailedProcessingStatus() : &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;base&lt;/span&gt;(StatusName) { }&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  29:&lt;/span&gt; }&lt;/pre&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;Next step – mapping.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Mapping is done with FluentNHibernate, which is a great DSL to simplify and abstract XML mapping from domain world into relational database. Saying that, it is a good practice to understand what is done behind the scenes. There are plenty of resources out there. My recommendation is the XXX book. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Message mapping looks like this:&lt;/p&gt;&#xA;&#xA;&lt;div style=&quot;border: 1px solid gray; margin: 20px 0px 10px; padding: 4px; overflow: auto; font-size: 8pt; width: 97.5%; cursor: text; max-height: 200px; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&#xA;  &lt;div style=&quot;border-style: none; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   1:&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;sealed&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;class&lt;/span&gt; MessageMap : ClassMap&amp;lt;Message&amp;gt;&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   2:&lt;/span&gt; {&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   3:&lt;/span&gt;   &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;public&lt;/span&gt; MessageMap()&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   4:&lt;/span&gt;   {&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   5:&lt;/span&gt;     Not.LazyLoad(); &lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   6:&lt;/span&gt;&amp;nbsp;    Id(x =&amp;gt; x.Id);&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   7:&lt;/span&gt;     Component(x =&amp;gt; x.Content, part =&amp;gt;&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   8:&lt;/span&gt;                               part.Map(y =&amp;gt; y.Value)&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   9:&lt;/span&gt;                                 .ColumnName(&lt;span style=&quot;color: rgb(0, 96, 128);&quot;&gt;&quot;Content&quot;&lt;/span&gt;)&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  10:&lt;/span&gt;                                 .CustomSqlTypeIs(&lt;span style=&quot;color: rgb(0, 96, 128);&quot;&gt;&quot;text&quot;&lt;/span&gt;)&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  11:&lt;/span&gt;                                 .Not.Nullable());&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  12:&lt;/span&gt;&amp;nbsp; &lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  13:&lt;/span&gt;     References(x =&amp;gt; x.Status)&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  14:&lt;/span&gt;       .Not.Nullable()&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  15:&lt;/span&gt;       .Not.LazyLoad()&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  16:&lt;/span&gt;       .FetchType.Join();&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  17:&lt;/span&gt;   }&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  18:&lt;/span&gt;&amp;nbsp; &lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  19:&lt;/span&gt;   &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;private&lt;/span&gt; XmlDocument Generate()&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  20:&lt;/span&gt;   {&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  21:&lt;/span&gt;     var mapping = CreateMapping(&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;new&lt;/span&gt; MappingVisitor());&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  22:&lt;/span&gt;     Trace.WriteLine(Regex.Replace(mapping.InnerXml, &lt;span style=&quot;color: rgb(0, 96, 128);&quot;&gt;&quot;&amp;gt;&quot;&lt;/span&gt;, &lt;span style=&quot;color: rgb(0, 96, 128);&quot;&gt;&quot;&amp;gt;\r&quot;&lt;/span&gt;));&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  23:&lt;/span&gt;     &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;return&lt;/span&gt; mapping;&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  24:&lt;/span&gt;   }&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  25:&lt;/span&gt; }&lt;/pre&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;Content is just a string at this moment, but it makes sense to wrap it with a value object and give it a meaning of Content, rather than just a string. Lately I see more an more benefit in this technique, especially when dealing with a new domain and understanding of domain concepts is rapidly changing. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Messages’ status is referenced by message. Cascade.All() will cause saving of the MessageStatus entity with messages’ ID. That is done intentionally, in order to allow querying later with no message data, just the ID. Mapping looks like this (and generated by the Visitor provided by FluentNHibernate):&lt;/p&gt;&#xA;&#xA;&lt;div style=&quot;border: 1px solid gray; margin: 20px 0px 10px; padding: 4px; overflow: auto; font-size: 8pt; width: 97.5%; cursor: text; max-height: 200px; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&#xA;  &lt;div style=&quot;border-style: none; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   1:&lt;/span&gt; &amp;lt;?xml version=&lt;span style=&quot;color: rgb(0, 96, 128);&quot;&gt;&quot;1.0&quot;&lt;/span&gt; encoding=&lt;span style=&quot;color: rgb(0, 96, 128);&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;?&amp;gt;&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   2:&lt;/span&gt;     &amp;lt;hibernate-mapping xmlns=&lt;span style=&quot;color: rgb(0, 96, 128);&quot;&gt;&quot;urn:nhibernate-mapping-2.2&quot;&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;default&lt;/span&gt;-lazy=&lt;span style=&quot;color: rgb(0, 96, 128);&quot;&gt;&quot;true&quot;&lt;/span&gt; assembly=&lt;span style=&quot;color: rgb(0, 96, 128);&quot;&gt;&quot;StatePatternPersisted&quot;&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;namespace&lt;/span&gt;=&lt;span style=&quot;color: rgb(0, 96, 128);&quot;&gt;&quot;StatePatternPersisted.Domain&quot;&lt;/span&gt;&amp;gt;&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   3:&lt;/span&gt;         &amp;lt;&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;class&lt;/span&gt; name=&lt;span style=&quot;color: rgb(0, 96, 128);&quot;&gt;&quot;Message&quot;&lt;/span&gt; table=&lt;span style=&quot;color: rgb(0, 96, 128);&quot;&gt;&quot;`Message`&quot;&lt;/span&gt; xmlns=&lt;span style=&quot;color: rgb(0, 96, 128);&quot;&gt;&quot;urn:nhibernate-mapping-2.2&quot;&lt;/span&gt; lazy=&lt;span style=&quot;color: rgb(0, 96, 128);&quot;&gt;&quot;false&quot;&lt;/span&gt;&amp;gt;&amp;lt;id name=&quot;Id&quot;&amp;gt;&amp;lt;generator class=&quot;native&quot;/&amp;gt;&amp;lt;/id&amp;gt;&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   4:&lt;/span&gt;             &amp;lt;many-to-one cascade=&lt;span style=&quot;color: rgb(0, 96, 128);&quot;&gt;&quot;all&quot;&lt;/span&gt; not-&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;null&lt;/span&gt;=&lt;span style=&quot;color: rgb(0, 96, 128);&quot;&gt;&quot;true&quot;&lt;/span&gt; lazy=&lt;span style=&quot;color: rgb(0, 96, 128);&quot;&gt;&quot;proxy&quot;&lt;/span&gt; fetch=&lt;span style=&quot;color: rgb(0, 96, 128);&quot;&gt;&quot;join&quot;&lt;/span&gt; name=&lt;span style=&quot;color: rgb(0, 96, 128);&quot;&gt;&quot;Status&quot;&lt;/span&gt; column=&lt;span style=&quot;color: rgb(0, 96, 128);&quot;&gt;&quot;Status_id&quot;&lt;/span&gt; /&amp;gt;&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   5:&lt;/span&gt;             &amp;lt;component name=&lt;span style=&quot;color: rgb(0, 96, 128);&quot;&gt;&quot;Content&quot;&lt;/span&gt; insert=&lt;span style=&quot;color: rgb(0, 96, 128);&quot;&gt;&quot;true&quot;&lt;/span&gt; update=&lt;span style=&quot;color: rgb(0, 96, 128);&quot;&gt;&quot;true&quot;&lt;/span&gt;&amp;gt;&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   6:&lt;/span&gt;                 &amp;lt;property name=&lt;span style=&quot;color: rgb(0, 96, 128);&quot;&gt;&quot;Value&quot;&lt;/span&gt; length=&lt;span style=&quot;color: rgb(0, 96, 128);&quot;&gt;&quot;100&quot;&lt;/span&gt; type=&lt;span style=&quot;color: rgb(0, 96, 128);&quot;&gt;&quot;String&quot;&lt;/span&gt;&amp;gt;&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   7:&lt;/span&gt;                     &amp;lt;column name=&lt;span style=&quot;color: rgb(0, 96, 128);&quot;&gt;&quot;Content&quot;&lt;/span&gt; not-&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;null&lt;/span&gt;=&lt;span style=&quot;color: rgb(0, 96, 128);&quot;&gt;&quot;true&quot;&lt;/span&gt; sql-type=&lt;span style=&quot;color: rgb(0, 96, 128);&quot;&gt;&quot;text&quot;&lt;/span&gt; /&amp;gt;&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   8:&lt;/span&gt;                 &amp;lt;/property&amp;gt;&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   9:&lt;/span&gt;             &amp;lt;/component&amp;gt;&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  10:&lt;/span&gt;         &amp;lt;/&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;class&lt;/span&gt;&amp;gt;&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  11:&lt;/span&gt; &amp;lt;/hibernate-mapping&amp;gt;&lt;/pre&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;Writing this by hand is possible, but too tedious. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Mapping MessageStatus has to be based on the fact that each entity will have a value (discriminator) that will cause NHibernate to instantiate this or another descendent of MessageStatus base abstract class.&lt;/p&gt;&#xA;&#xA;&lt;div&gt;&#xA;  &lt;div style=&quot;border-style: none; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   1:&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;public&lt;/span&gt; MessageStatusMap()&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   2:&lt;/span&gt; {&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   3:&lt;/span&gt;   Not.LazyLoad();&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   4:&lt;/span&gt;&amp;nbsp;  Id(x =&amp;gt; x.Id);&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   5:&lt;/span&gt;   var column_name = &lt;span style=&quot;color: rgb(0, 96, 128);&quot;&gt;&quot;Status&quot;&lt;/span&gt;;&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   6:&lt;/span&gt;&amp;nbsp; &lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   7:&lt;/span&gt;   DiscriminateSubClassesOnColumn&amp;lt;&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;string&lt;/span&gt;&amp;gt;(column_name)&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   8:&lt;/span&gt;     .SubClass&amp;lt;ReceivedStatus&amp;gt;(ReceivedStatus.StatusName, x =&amp;gt; { })&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   9:&lt;/span&gt;     .SubClass&amp;lt;ProcessedStatus&amp;gt;(ProcessedStatus.StatusName, x =&amp;gt; { })&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  10:&lt;/span&gt;     .SubClass&amp;lt;SentStatus&amp;gt;(SentStatus.StatusName, x =&amp;gt; { })&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  11:&lt;/span&gt;     .SubClass&amp;lt;FailedProcessingStatus&amp;gt;(FailedProcessingStatus.StatusName, x =&amp;gt; { });&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  12:&lt;/span&gt; }&lt;/pre&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;The generated HBM shows the details:&lt;/p&gt;&#xA;&#xA;&lt;div style=&quot;border: 1px solid gray; margin: 20px 0px 10px; padding: 4px; overflow: auto; font-size: 8pt; width: 97.5%; cursor: text; max-height: 200px; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&#xA;  &lt;div style=&quot;border-style: none; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   1:&lt;/span&gt; &amp;lt;?xml version=&lt;span style=&quot;color: rgb(0, 96, 128);&quot;&gt;&quot;1.0&quot;&lt;/span&gt; encoding=&lt;span style=&quot;color: rgb(0, 96, 128);&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;?&amp;gt;&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   2:&lt;/span&gt; &amp;lt;hibernate-mapping xmlns=&lt;span style=&quot;color: rgb(0, 96, 128);&quot;&gt;&quot;urn:nhibernate-mapping-2.2&quot;&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;default&lt;/span&gt;-lazy=&lt;span style=&quot;color: rgb(0, 96, 128);&quot;&gt;&quot;true&quot;&lt;/span&gt; assembly=&lt;span style=&quot;color: rgb(0, 96, 128);&quot;&gt;&quot;StatePatternPersisted&quot;&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;namespace&lt;/span&gt;=&lt;span style=&quot;color: rgb(0, 96, 128);&quot;&gt;&quot;StatePatternPersisted.Domain&quot;&lt;/span&gt;&amp;gt;&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   3:&lt;/span&gt;     &amp;lt;&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;class&lt;/span&gt; name=&lt;span style=&quot;color: rgb(0, 96, 128);&quot;&gt;&quot;MessageStatus&quot;&lt;/span&gt; table=&lt;span style=&quot;color: rgb(0, 96, 128);&quot;&gt;&quot;`MessageStatus`&quot;&lt;/span&gt; xmlns=&lt;span style=&quot;color: rgb(0, 96, 128);&quot;&gt;&quot;urn:nhibernate-mapping-2.2&quot;&lt;/span&gt; lazy=&lt;span style=&quot;color: rgb(0, 96, 128);&quot;&gt;&quot;false&quot;&lt;/span&gt;&amp;gt;&amp;lt;id name=&quot;Id&quot;&amp;gt;&amp;lt;generator class=&quot;native&quot;/&amp;gt;&amp;lt;/id&amp;gt;&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   4:&lt;/span&gt;         &amp;lt;discriminator column=&lt;span style=&quot;color: rgb(0, 96, 128);&quot;&gt;&quot;Status&quot;&lt;/span&gt; type=&lt;span style=&quot;color: rgb(0, 96, 128);&quot;&gt;&quot;String&quot;&lt;/span&gt; /&amp;gt;&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   5:&lt;/span&gt;         &amp;lt;subclass name=&lt;span style=&quot;color: rgb(0, 96, 128);&quot;&gt;&quot;StatePatternPersisted.Domain.MessageStatuses.SentStatus, StatePatternPersisted, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null&quot;&lt;/span&gt; discriminator-&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;value&lt;/span&gt;=&lt;span style=&quot;color: rgb(0, 96, 128);&quot;&gt;&quot;Sent&quot;&lt;/span&gt; /&amp;gt;&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   6:&lt;/span&gt;         &amp;lt;subclass name=&lt;span style=&quot;color: rgb(0, 96, 128);&quot;&gt;&quot;StatePatternPersisted.Domain.MessageStatuses.FailedProcessingStatus, StatePatternPersisted, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null&quot;&lt;/span&gt; discriminator-&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;value&lt;/span&gt;=&lt;span style=&quot;color: rgb(0, 96, 128);&quot;&gt;&quot;FailedProcessing&quot;&lt;/span&gt; /&amp;gt;&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   7:&lt;/span&gt;         &amp;lt;subclass name=&lt;span style=&quot;color: rgb(0, 96, 128);&quot;&gt;&quot;StatePatternPersisted.Domain.MessageStatuses.ReceivedStatus, StatePatternPersisted, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null&quot;&lt;/span&gt; discriminator-&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;value&lt;/span&gt;=&lt;span style=&quot;color: rgb(0, 96, 128);&quot;&gt;&quot;Received&quot;&lt;/span&gt; /&amp;gt;&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   8:&lt;/span&gt;         &amp;lt;subclass name=&lt;span style=&quot;color: rgb(0, 96, 128);&quot;&gt;&quot;StatePatternPersisted.Domain.MessageStatuses.ProcessedStatus, StatePatternPersisted, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null&quot;&lt;/span&gt; discriminator-&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;value&lt;/span&gt;=&lt;span style=&quot;color: rgb(0, 96, 128);&quot;&gt;&quot;Processed&quot;&lt;/span&gt; /&amp;gt;&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   9:&lt;/span&gt;     &amp;lt;/&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;class&lt;/span&gt;&amp;gt;&lt;/pre&gt;&#xA;    &#xA;&lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  10:&lt;/span&gt; &amp;lt;/hibernate-mapping&amp;gt;&lt;/pre&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;NHibernate will use the column “Status” to discriminate the entities based on the value in that column. Each value is mapped to a particular MessageStatus implementer.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;What’s next?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Next we should be doing configuration and persistence into the actual database, which I leave to your own choice. In order to allow code download, I have stripped the “heavy tools/libraries” in case those can be downloaded separately by just looking on the empty folder names in the Build project. I hope this example will help others to see the oportunities hidden behind FluentNHibernate DSL, to leverage an easy ORM such as NHibernate in order to create better code.&lt;/p&gt;&#xA;&#xA;&lt;div class=&quot;wlWriterEditableSmartContent&quot; id=&quot;scid:fb3a1972-4489-4e52-abe7-25a00bb07fdf:05a13723-7d00-45a5-b9f3-2d222efbb289&quot; style=&quot;margin: 0px; padding: 0px; display: inline; float: none;&quot;&gt;&#xA;&lt;p&gt;Code for &lt;a href=&quot;http://weblogs.asp.net/blogs/sfeldman/StatePatternPersisted_34B65BA4.zip&quot; mce_href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/StatePatternPersisted_34B65BA4.zip&quot; target=&quot;_blank&quot;&gt;download&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;span style=&quot;color: rgb(204, 0, 0);&quot;&gt;&lt;b&gt;Update:&lt;/b&gt;&lt;/span&gt; Seems like I completely forgot to implement the Entity class itself. public abstract class Entity { public int Id {get; private set;} ...}&lt;br&gt;Entity has also to implement the&amp;nbsp; overriden GenHashCode, ToString, and Equality.&amp;nbsp; &lt;/p&gt;&#xA;&lt;/div&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-04-25T02:58:00Z" PublishedUtc="2014-04-19T20:32:50.0614979Z" ModifiedUtc="2009-04-25T02:58:00Z" />
      <TagsPart Tags="DDD,OO,Patterns" />
      <AutoroutePart Alias="state-pattern-with-fluentnhibernate" UseCustomPattern="false" />
      <TitlePart Title="State Pattern with FluentNHibernate" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=sick-of-relational-databases" Status="Published">
      <BodyPart Text="&lt;p&gt;I have started to read a new book about OODB. The reason I decided to get the book and go through it is because I am SICK of the traditional RDBMS and the way it forces us to go through loops and hoops to create domain driven applications.&lt;/p&gt;  &lt;p&gt;The very first question to popup - what's the practicality? Don't know, but I know the truth is out there. And it doesn't have a shape of conventional databases.&lt;/p&gt;  &lt;p&gt;According to the book, db4o is exceptionally good for any kind of DB activity that operates on object hierarchies rather than any combination of RDB with proper OR Mapper (even such as N/Hibernate). And yes, it sucks when you work with it as query source for things like reporting, but wouldn't be that a re-use/abuse case? For reporting, use the relational representation of the data, not object one.&lt;/p&gt;  &lt;p&gt;Why in the world one would like to deal with it? Well, actually a lot of reasons why would someone would like to deal with it. First of all, if you are doing DDD and implement your code with Domain-First approach, data has no meaning without objects. Your data is the state of the objects. Objects cannot keep going without retrieving it's state once they reloaded, but state without objects is meaningless, unless it has a different domain that utilizes it differently (again, reporting is a good example). Therefore, I am questioning the standard approach that &amp;quot;code comes and goes, data stays forever&amp;quot;. No. Not in domain driven application. &lt;/p&gt;  &lt;p&gt;Have comments? Shoot!&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-04-24T03:40:38Z" PublishedUtc="2014-04-19T20:32:50.3583879Z" ModifiedUtc="2009-04-24T03:40:38Z" />
      <TagsPart Tags="OO,Personal" />
      <AutoroutePart Alias="sick-of-relational-databases" UseCustomPattern="false" />
      <TitlePart Title="Sick of Relational Databases" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=the-productive-programmer" Status="Published">
      <BodyPart Text="&lt;p&gt;Just finished reading &amp;quot;&lt;a href=&quot;http://www.amazon.ca/Productive-Programmer-David-Bock/dp/0596519788&quot; target=&quot;_blank&quot;&gt;The Productive Programmer&lt;/a&gt;&amp;quot; by Neal Ford. Mixed &lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/TheProductiveProgrammer_12931/image_2.png&quot;&gt;&lt;img style=&quot;border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px&quot; height=&quot;115&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/TheProductiveProgrammer_12931/image_thumb.png&quot; width=&quot;115&quot; align=&quot;right&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; emotions about the book. On one hand it's packed with good practices and decent tips to follow, on another hand haven't I watch the &lt;a href=&quot;http://www.infoq.com/presentations/10-Ways-to-Better-Code-Neal-Ford&quot; target=&quot;_blank&quot;&gt;presentation&lt;/a&gt; on InfoQ, reading the book might be a bit more pleasant... &lt;/p&gt;  &lt;p&gt;One good thought that I liked in the book especially - question the authorities. Exactly as the author of the book ran into the no acceptance of changing long-time structured naming conventions, same happened to myself recently in a team with a couple of &amp;quot;old school agile consultants&amp;quot; (no names :). And the most important lesson, don't turn into angry (code) monkey and beat other developers for fresh ideas.&amp;#160; &lt;/p&gt;  &lt;p&gt;PS: I do recommend to watch the &lt;a href=&quot;http://www.infoq.com/presentations/10-Ways-to-Better-Code-Neal-Ford&quot; target=&quot;_blank&quot;&gt;presentation&lt;/a&gt;, though. It's good.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-04-24T03:06:29Z" PublishedUtc="2009-04-24T03:06:29Z" ModifiedUtc="2009-04-24T03:06:29Z" />
      <TagsPart Tags="Books" />
      <AutoroutePart Alias="the-productive-programmer" UseCustomPattern="false" />
      <TitlePart Title="The Productive Programmer" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=10-ways-to-improve-your-code" Status="Published">
      <BodyPart Text="&lt;p&gt;&lt;a href=&quot;http://memeagora.blogspot.com/&quot; target=&quot;_blank&quot;&gt;Neal Ford&lt;/a&gt; had an interesting &lt;a href=&quot;http://www.infoq.com/presentations/10-Ways-to-Better-Code-Neal-Ford&quot; target=&quot;_blank&quot;&gt;presentation&lt;/a&gt; at InfoQ. An interesting presentation. One part was funny, is to hear from a core Java guy calling Pocos by a funky name “Ponos” :) Well, besides the fact it’s not the name we (.NET folks) use, it’s also funny to hear if you know the &lt;a href=&quot;http://oules.lightentertainment.org/Old%20site/myths/poo.html&quot; target=&quot;_blank&quot;&gt;similar Russian word&lt;/a&gt;.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-04-21T03:59:00Z" PublishedUtc="2014-04-19T20:32:51.5158807Z" ModifiedUtc="2009-04-21T03:59:00Z" />
      <TagsPart Tags="Agile" />
      <AutoroutePart Alias="10-ways-to-improve-your-code" UseCustomPattern="false" />
      <TitlePart Title="10 Ways To Improve Your Code" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=hudson-ci-engine-part-2" Status="Published">
      <BodyPart Text="&lt;p&gt;In my &lt;a href=&quot;http://weblogs.asp.net/sfeldman/archive/2009/03/25/hudson-ci-engine.aspx&quot; target=&quot;_blank&quot;&gt;previous blog&lt;/a&gt; about &lt;a href=&quot;https://hudson.dev.java.net/&quot; target=&quot;_blank&quot;&gt;Hudson&lt;/a&gt; I was excited as a user how cool and great this CI engine was. This week I had to quickly setup a project and get it going on our build server. Boy oh boy, that was great task. Easy, clean, and fast. You should definitely check it out. &lt;/p&gt;  &lt;p&gt;For those who want to install it, keep in mind the next:&lt;/p&gt;  &lt;ol&gt;   &lt;li&gt;You will have to install Java Runtime &lt;/li&gt;    &lt;li&gt;Once you can run the command line version, you can through the browser install the windows service (a much better way of running CI server) &lt;/li&gt;    &lt;li&gt;You probably will need a few .NET related plugins to install prior to setting up any projects, such as      &lt;ol&gt;       &lt;li&gt;MSBuild (if you use it) &lt;/li&gt;        &lt;li&gt;NAnt (if this is your build script of choice) &lt;/li&gt;        &lt;li&gt;Gallio report builder (if you use MbUnit 3.x) &lt;/li&gt;        &lt;li&gt;Green Balls (if you rather see red-green and not red-blue – why blue?!) &lt;/li&gt;     &lt;/ol&gt;   &lt;/li&gt; &lt;/ol&gt;  &lt;p&gt;The nice part is that the information is all available at the Hudson site, and very easy to find. &lt;/p&gt;  &lt;p&gt;Oh, and &lt;a href=&quot;http://www.connicus.com/&quot; target=&quot;_blank&quot;&gt;Terry&lt;/a&gt;, why won’t you blog about setting it up for the .NET community. Folks would love to read it :P &lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_19E112A7.png&quot;&gt;&lt;img title=&quot;image&quot; style=&quot;border-top-width: 0px; display: block; border-left-width: 0px; float: none; border-bottom-width: 0px; margin-left: auto; margin-right: auto; border-right-width: 0px&quot; height=&quot;152&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_101BAB2F.png&quot; width=&quot;740&quot; border=&quot;0&quot; /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;&lt;/strong&gt;&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; this blog &lt;a href=&quot;http://redsolo.blogspot.com/2008/04/guide-to-building-net-projects-using.html&quot;&gt;post&lt;/a&gt; is a nice detailed step-through guide how to setup and run Hudson. Uses NUnit, but not a big issue to convert to anything you need. &lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-04-20T04:05:00Z" PublishedUtc="2014-04-19T20:32:52.9064842Z" ModifiedUtc="2009-04-20T04:05:00Z" />
      <TagsPart Tags="" />
      <AutoroutePart Alias="hudson-ci-engine-part-2" UseCustomPattern="false" />
      <TitlePart Title="Hudson – CI Engine (part 2)" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=two-good-xml-tools" Status="Published">
      <BodyPart Text="&lt;p&gt;I was working a lot lately with regular expressions and XPath. As usual in scenario like this, you want to have a good tool to assist your tests writing. For regular expressions I used &lt;a href=&quot;http://www.radsoftware.com.au/regexdesigner/&quot; target=&quot;_blank&quot;&gt;Rad Software Regular Expression Designer&lt;/a&gt; that does a good job of matching and replacements. For XPath, I used &lt;a href=&quot;http://pgfearo.googlepages.com/&quot; target=&quot;_blank&quot;&gt;SketchPath 2.0&lt;/a&gt; which is really friendly and great to use. Both are free for usage.&lt;/p&gt;  &lt;p&gt;Feel free to comment on other useful tool you’ve encountered for XML and XPath.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-04-13T19:32:00Z" PublishedUtc="2014-04-19T20:32:53.1721017Z" ModifiedUtc="2009-04-13T19:32:00Z" />
      <TagsPart Tags="Other" />
      <AutoroutePart Alias="two-good-xml-tools" UseCustomPattern="false" />
      <TitlePart Title="Two Good XML Tools" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=switching-mocking-framework" Status="Published">
      <BodyPart Text="&lt;p&gt;Our team is moving away from &lt;a href=&quot;http://ayende.com/projects/rhino-mocks.aspx&quot; target=&quot;_blank&quot;&gt;Rhino.Mocks&lt;/a&gt; to &lt;a href=&quot;http://code.google.com/p/moq/&quot; target=&quot;_blank&quot;&gt;Moq&lt;/a&gt;.&lt;/p&gt;  &lt;p&gt;Rhino.Mocks was the first mocking framework I encountered in my life about a year and a half ago, while taking JP’s Nothing But .NET training course. It was great (the power of mocking), it was weird (record/playback concepts), it was good. But lately, the pain of legacy support and backwards compatibility has made the tool too fat and complex. &lt;/p&gt;  &lt;p&gt;If you are familiar with AAA syntax, Moq will feel no big change. Just less fat and more to the business. It’s simple and expresses well the concepts you need for mocking. There’s no backwards compatibility, as it entirely based on C# 3.0 and AAA syntax.&lt;/p&gt;  &lt;p&gt;At this point this is our mocking framework of choice. Saying this, it doesn’t mean we won’t change it if something better shows up, but for now this is the best we could find for our usage. Go grab it and try.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-04-13T04:57:00Z" PublishedUtc="2014-04-19T20:32:53.4533478Z" ModifiedUtc="2009-04-13T04:57:00Z" />
      <TagsPart Tags="TDD" />
      <AutoroutePart Alias="switching-mocking-framework" UseCustomPattern="false" />
      <TitlePart Title="Switching Mocking Framework" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=testing-just-when-i-thought-i-has-it-all" Status="Published">
      <BodyPart Text="&lt;p&gt;Testing is normally divided into unit testing and integration testing. Is it?&lt;/p&gt;  &lt;p&gt;The current project I am involved in has gone through some very interesting turns. I was privileged to get into some really interesting debates and get exposed to different approaches that might not always can agree with, but definitely contribute to my better understanding of testing in general. Testing, one word so many meanings...&lt;/p&gt;  &lt;p&gt;Do you write tests to guard against unexpected changes in your code? Or do you write the tests to validate assumptions? Maybe you do it to drive out the design and implementation? Or you testing how components work together when they actually put together? If you do one of those, you do testing. Then the question comes - is that enough or&amp;nbsp; should all of the mentioned be done plus more? Well, this is the reason I decided to blog about the subject.&lt;/p&gt;  &lt;p&gt;My initial attempts to write tests were lack of satisfaction with the way I created code, the guts feeling that there must be a better way. I want to know that 2+2 is actually 4, and when it's replaced by x and y the result is what it should be. Later I liked the power of being able to validate interactions between the components without having the whole shebang up and running. Mocking it is called. Along combined with state based testing it felt good. It felt right, but still something was missing. The missing part was the clarity - I needed to understand what is happening with the tests, and that's why I loved the AAA syntax showed to me down the road and specification based testing. From that moment it became an infection that spread all over the brain and it was irreversible. And I am glad it was like that.&lt;/p&gt;  &lt;p&gt;But a few project have showed that it still did not bring me the complete satisfaction and confidence in the code. This is were pain for integration was a clear sign. The last project has proved that the ration between so called &quot;unit&quot; testing (specifications) and automated integration testing should be about 50% to 50%. I know it sounds extreme, but imagine this: a component A that has a dependency on a component B. For specifications and design drive B can be mocked and everything is great. The key assumptions is that if B is tested and passes, there's no point of re-testing it along with A, as in A's tests we are only interested to exercise A's stuff. But are we? Well, partially true. For design and implementation purposes, yes. B should and will be mocked out. But right after that should come an integration test, where the real A and B both are used. That will ensure that the design secured by specification tests is implemented the way integration tests are using it. This is the total coverage. &lt;/p&gt;  &lt;p&gt;So integration tests are required and team buys into that, but what will be an automated integration testing? This is what it is defined:&lt;/p&gt;  &lt;p&gt;1. Touching DB&lt;/p&gt;  &lt;p&gt;2. Going over a wire&lt;/p&gt;  &lt;p&gt;3. Touching file system&lt;/p&gt;  &lt;p&gt;4. Performing anything that is not in memory&lt;/p&gt;  &lt;p&gt;Do I agree with the traditional definitions? Nope!&lt;/p&gt;  &lt;p&gt;Doing anything that will cause more than a single component to execute it's production code with a purpose of getting the result anticipated from a production code - to me is an integration test. It can be all in memory, it can touch the DB, it can do whatever is necessary to make sure that production code will stand the expectations. And we can always optimize things, right? Locally cloned DB, emulating file system, instantiating multiple objects to work against. It is all good.&lt;/p&gt;  &lt;p&gt;So if you do tests, keep in mind the importance of integration testing. Do not let it go invisible just because specifications are in place and make you feel comfy. Remember 50%/50%, or would it be more 100% to 100% - you own call, as long as you can live with it.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-04-11T08:07:00Z" PublishedUtc="2014-04-19T20:32:53.7502211Z" ModifiedUtc="2009-04-11T08:07:00Z" />
      <TagsPart Tags="Agile" />
      <AutoroutePart Alias="testing-just-when-i-thought-i-has-it-all" UseCustomPattern="false" />
      <TitlePart Title="Testing - Just When I Thought I Had It All" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=dblinq" Status="Published">
      <BodyPart Text="&lt;p&gt;Today I had to look into persisting some of the data from the new system we are building into existing legacy system for backwards compatibility until the old system can retired (data that is required for the old applications/services that is a product of the new system). The database was MySql. The new system is leveraging FluentNHibernate to do the Domain objects persistence. The legacy system has no relational tables, and it’s just a matter of inserting information into the legacy DB. Since FluentNHibernate was not a good fit for the job, I looked into leveraging raw ADO.NET to do the simple job. And I couldn’t. Raw ADO.NET feels ugly after you get used to an ORM. So I thought about alternative, Linq to SQL. Well, Linq to MySql to be precise. I found &lt;a href=&quot;http://code.google.com/p/dblinq2007/downloads/list&quot; target=&quot;_blank&quot;&gt;DbLinq project&lt;/a&gt; which I highly recommend if you want Linq to any non MS SQL database (Oracle, MySql, SqlLite, Ingres, etc.)&lt;/p&gt;  &lt;p&gt;I had to &lt;a href=&quot;http://social.msdn.microsoft.com/forums/en-US/linqprojectgeneral/thread/6273d072-f500-4382-afb4-8eafd185794d/&quot; target=&quot;_blank&quot;&gt;mess around a bit with AttributeMappings&lt;/a&gt; in order to inject table names dynamically, but rather than that it was quiet smooth.&lt;/p&gt;  &lt;p&gt;This was definitely the right tool for the quick job.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-04-08T05:48:12Z" PublishedUtc="2014-04-19T20:32:54.3908356Z" ModifiedUtc="2009-04-08T05:48:12Z" />
      <TagsPart Tags="" />
      <AutoroutePart Alias="dblinq" UseCustomPattern="false" />
      <TitlePart Title="DbLinq" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=going-towards-the-end" Status="Published">
      <BodyPart Text="&lt;p&gt;Our current project is moving towards the final phase. This is going to be the 1st release, and I am quiet excited to see how team work is transforming a bunch of stickies and tests into a real system. This is how our whiteboard looks like (done-done part was not captured, but it’s definitely there and has a significant amount) and tests result trend based on builds Hudson CI is running.&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/going.towards.the.end_5A8C518C.jpg&quot;&gt;&lt;img title=&quot;going.towards.the.end&quot; style=&quot;border-right: 0px; border-top: 0px; display: block; float: none; margin-left: auto; border-left: 0px; margin-right: auto; border-bottom: 0px&quot; height=&quot;359&quot; alt=&quot;going.towards.the.end&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/going.towards.the.end_thumb_3E7E2352.jpg&quot; width=&quot;440&quot; border=&quot;0&quot; /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/test.result_49AA3E4D.png&quot;&gt;&lt;img title=&quot;test.result&quot; style=&quot;border-right: 0px; border-top: 0px; display: block; float: none; margin-left: auto; border-left: 0px; margin-right: auto; border-bottom: 0px&quot; height=&quot;213&quot; alt=&quot;test.result&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/test.result_thumb_64E2974E.png&quot; width=&quot;498&quot; border=&quot;0&quot; /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;&amp;#160; Backlog is empty, besides out-of-scope and low-priority items. Low-priority items are items that are “nice” to have, but can be sacrificed in order to have more important things done-done.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-04-03T02:28:00Z" PublishedUtc="2014-04-19T20:32:55.3595727Z" ModifiedUtc="2009-04-03T02:28:00Z" />
      <TagsPart Tags="Agile" />
      <AutoroutePart Alias="going-towards-the-end" UseCustomPattern="false" />
      <TitlePart Title="Going Towards the End" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=hudson-ci-engine" Status="Published">
      <BodyPart Text="&lt;p&gt;I am amazed. Not everyday you can find a great application that just works the way you expect it to work. &lt;a href=&quot;https://hudson.dev.java.net/&quot; target=&quot;_blank&quot;&gt;Hudson&lt;/a&gt; is our teams’ CI engine of choice. We used &lt;a href=&quot;http://cruisecontrol.sourceforge.net/&quot; target=&quot;_blank&quot;&gt;CruiseControl&lt;/a&gt;, but it is no where close to what Hudson is capable. &lt;/p&gt;  &lt;p&gt;Features I loved most of all:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;Ajax updates for the web interface&lt;/li&gt;    &lt;li&gt;Real time report of the projects statuses&lt;/li&gt;    &lt;li&gt;Console of the build (see the script execution)&lt;/li&gt;    &lt;li&gt;Integration with AD&lt;/li&gt;    &lt;li&gt;Integration with Subversion (providing comments on commits)&lt;/li&gt;    &lt;li&gt;Recent changes&lt;/li&gt;    &lt;li&gt;Workspace (ZIPed trunk)&lt;/li&gt;    &lt;li&gt;Real-time Build Executor Status&lt;/li&gt;    &lt;li&gt;and much more…&lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;We are less then a month on CI server, and Hudson is only a few days as introduced, but from now on there will be no project outside of it. So what’s the status, doc? Cloudy, but we are getting warmer and sun will eventually shine (a nice visual gimmick for Hudson to report the status :) &lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_29DE2022.png&quot;&gt;&lt;img title=&quot;image&quot; style=&quot;border-right: 0px; border-top: 0px; display: inline; border-left: 0px; border-bottom: 0px&quot; height=&quot;187&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_527C8C29.png&quot; width=&quot;1022&quot; border=&quot;0&quot; /&gt;&lt;/a&gt;&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-03-26T04:11:00Z" PublishedUtc="2014-04-19T20:32:55.9533137Z" ModifiedUtc="2009-03-26T04:11:00Z" />
      <TagsPart Tags="Agile" />
      <AutoroutePart Alias="hudson-ci-engine" UseCustomPattern="false" />
      <TitlePart Title="Hudson – CI Engine" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=nothing-but-net-is-in-calgary-again" Status="Published">
      <BodyPart Text="&lt;p&gt;I know there are lots of good developers in Calgary. I know for sure lots of them feel sort of puzzled if they do things the right way. If you have a chance, get your answers at the &lt;a href=&quot;http://www.eventbrite.com/event/279353554&quot; target=&quot;_blank&quot;&gt;course JP is giving in Calgary&lt;/a&gt; &lt;a href=&quot;http://weblogs.asp.net/sfeldman/archive/2007/11/07/nothing-but-net-calgary-2007-day-1.aspx&quot; target=&quot;_blank&quot;&gt;again&lt;/a&gt; – absolutely worth it. As someone who took the course a year ago, I can testify you will not be disappointed, unless code is not what you love to do. Yes, love to do, and not like, since to get through the course you gotta be loving programming. What will this course give you? I think some of the most valuable things a developer can ask for:&lt;/p&gt;  &lt;p&gt;- Sanity check: Am I doing the right thing?&lt;/p&gt;  &lt;p&gt;- Back to the basic: Technology will come and go, core principles will stay. Do I know what are those?&lt;/p&gt;  &lt;p&gt;- Testing is important: Is test only to discover bugs or more than that?&lt;/p&gt;  &lt;p&gt;This year JP is changing the way course is done for better (IMO). Sign up and see how deep the rabbit hole goes.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-03-24T06:59:22Z" PublishedUtc="2014-04-19T20:32:57.0314355Z" ModifiedUtc="2009-03-24T06:59:22Z" />
      <TagsPart Tags="" />
      <AutoroutePart Alias="nothing-but-net-is-in-calgary-again" UseCustomPattern="false" />
      <TitlePart Title="Nothing But .NET is in Calgary Again!" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=ruby" Status="Published">
      <BodyPart Text="&lt;p&gt;I would like to learn Ruby for .NET (I think it’s out there). But I am also addicted to BDD development style. Can anyone recommend a good book that will teach Ruby through testing?&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-03-15T01:58:47Z" PublishedUtc="2014-04-19T20:32:57.3439319Z" ModifiedUtc="2009-03-15T01:58:47Z" />
      <TagsPart Tags="" />
      <AutoroutePart Alias="ruby" UseCustomPattern="false" />
      <TitlePart Title="Ruby" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=strict-mocks-thoughts" Status="Published">
      <BodyPart Text="&lt;p&gt;Today we had a discussion about having strict mocks for all of our dependencies in code. Reason - to force the tests to serve as a safety net for production code. I will try to explain pros&amp;#160; and cons of this approach from the point of view myself is found.&lt;/p&gt;  &lt;p&gt;Why not to have strict mocks all over the place?&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;Too much of intimacy with production code - test becomes the production code line by line &lt;/li&gt;    &lt;li&gt;Painful refactoring - how many times the same code is invoked, etc &lt;/li&gt;    &lt;li&gt;Behaviour Driven Development becomes impossible (single observation rather than multiple ones)&amp;#160; &lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;Why would one like to have all mocks as strict mocks?&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;Safety net - change in code causes tests to fail right away &lt;/li&gt;    &lt;li&gt;Simplicity, as opposed to the complexity generated when trying to do BDD with spec based testing &lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;What I am asking, is wouldn't the fact of making all mocks strict cause tests to have more than one responsibility? Rather that to have a single one - test if production code is failing or not, it will also have the responsibility of serving as a security net to prevent developers from starting code from production code and not tests first.&lt;/p&gt;  &lt;p&gt;Would it make sense to read&lt;/p&gt;  &lt;div&gt;   &lt;div style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;     &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;dependency.VerifyAllExpectations();&lt;/pre&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;vs.&lt;/p&gt;&#xA;&#xA;&lt;div&gt;&#xA;  &lt;div style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;dependency.AssertWasToldTo(x =&amp;gt; x.SomeBehaviour());&lt;/pre&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;Not sure.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I can definitely see the benefit of forcing strict mocks to force people to get into habit of testing properly, but beyond that, it is a meter of team agreement to adhere to the coding style (tests first). None can ensure that code will go into repository with accompanying tests or tests will necessarily be good. Strict mocks should definitely not be used to pursuit that particular goal.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Share your opinion and experience with our team, feel free to comment.&amp;#160;&amp;#160; &lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-03-14T04:09:43Z" PublishedUtc="2014-04-19T20:32:57.6095532Z" ModifiedUtc="2009-03-14T04:09:43Z" />
      <TagsPart Tags="TDD" />
      <AutoroutePart Alias="strict-mocks-thoughts" UseCustomPattern="false" />
      <TitlePart Title="Strict Mocks - Thoughts" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=agile-stickies-board-part-2-colors" Status="Published">
      <BodyPart Text="&lt;p&gt;In my &lt;a href=&quot;http://weblogs.asp.net/sfeldman/archive/2009/02/28/agile-stickies-board.aspx&quot; target=&quot;_blank&quot;&gt;previous post&lt;/a&gt; I talked about efficiency of whiteboard with stickies as a tracking tool for a project progress. During last iteration, our PM has suggested to “color code” features with different color stikies. Boy it worked great. Apparently, this is a great way to ease progress reading for a specific feature. &lt;/p&gt;  &lt;p&gt;To make it possible, we put the name of the feature with the appropriate color sticky on the top of the whiteboard. The rest – picture will prove it.&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/06032009110_4CB6B2D0.jpg&quot;&gt;&lt;img title=&quot;06032009110&quot; style=&quot;border-right: 0px; border-top: 0px; display: block; float: none; margin-left: auto; border-left: 0px; margin-right: auto; border-bottom: 0px&quot; height=&quot;487&quot; alt=&quot;06032009110&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/06032009110_thumb_2989481E.jpg&quot; width=&quot;491&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;PS: the bottom left corner represents all known items in Backlog with low priority. &lt;/p&gt;  &lt;p&gt;Done-done column is not captured here, it’s a whiteboard (smaller) on it’s own, that is getting slowly filled up with items form “In QA”, when those are accepted, and all associated items with it (from Dev. Complete) are moved.&lt;/p&gt;  &lt;p&gt;PSS: The hot pink – these are the bugs, they get attached to the appropriate stickes in order to attract attention and get fixed ASAP (example in column “In Progress”).&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-03-09T01:40:00Z" PublishedUtc="2014-04-19T20:32:58.1095389Z" ModifiedUtc="2009-03-09T01:40:00Z" />
      <TagsPart Tags="Agile" />
      <AutoroutePart Alias="agile-stickies-board-part-2-colors" UseCustomPattern="false" />
      <TitlePart Title="Agile Stickies Board – Part 2 - Colors" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=domain-modeling-books" Status="Published">
      <BodyPart Text="&lt;p&gt;Anyone can recommend on good Domain Modeling (not design) books? Thank you.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-03-06T04:26:00Z" PublishedUtc="2014-04-19T20:32:58.7814111Z" ModifiedUtc="2009-03-06T04:26:00Z" />
      <TagsPart Tags="Books" />
      <AutoroutePart Alias="domain-modeling-books" UseCustomPattern="false" />
      <TitlePart Title="Domain Modeling Books" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=bdd-and-specifications" Status="Published">
      <BodyPart Text="&lt;p&gt;The current project I am involved in, we are using BDD style of testing, where our specifications (tests) are both designing force and documentation for the implementation. One of the interesting cases we are running into, is when we need to express some complex conditions. For example&lt;/p&gt;  &lt;p&gt;&lt;em&gt;When a component is asked to perform some action on some object&lt;/em&gt;&lt;/p&gt;  &lt;blockquote&gt;   &lt;p&gt;- Should do A&lt;/p&gt;    &lt;p&gt;- Should do B&lt;/p&gt; &lt;/blockquote&gt;  &lt;p&gt;Then we add complexity by trying to look into what is going to happen when&lt;/p&gt;  &lt;blockquote&gt;   &lt;p&gt;- instance of some object is valid&lt;/p&gt;    &lt;p&gt;- instance of some object is invalid&lt;/p&gt; &lt;/blockquote&gt;  &lt;p&gt;So far it’s working nicely, and code looks like this&lt;/p&gt;  &lt;div&gt;   &lt;div style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;     &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   1:&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;class&lt;/span&gt; When_component_is_asked_to_perform_some_action_on_some_other_object : Component_Specs&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   2:&lt;/span&gt; {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   3:&lt;/span&gt;     [Observation]&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   4:&lt;/span&gt;     &lt;span style=&quot;color: #0000ff&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;void&lt;/span&gt; Should_do_A() {}&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   5:&lt;/span&gt;&amp;#160; &lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   6:&lt;/span&gt;     [Observation]&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   7:&lt;/span&gt;     &lt;span style=&quot;color: #0000ff&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;void&lt;/span&gt; Should_do_B() {}&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   8:&lt;/span&gt; }&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   9:&lt;/span&gt;&amp;#160; &lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  10:&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;class&lt;/span&gt; And_some_other_object_is_valid : When_component_is_asked_to_perform_some_action_on_some_other_object&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  11:&lt;/span&gt; {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  12:&lt;/span&gt;     [Observation]&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  13:&lt;/span&gt;     &lt;span style=&quot;color: #0000ff&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;void&lt;/span&gt; Should_happen_something_when_some_object_is_valid() {}&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  14:&lt;/span&gt;&amp;#160; &lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  15:&lt;/span&gt; }&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  16:&lt;/span&gt;&amp;#160; &lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  17:&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;class&lt;/span&gt; And_some_other_object_is_invalid : When_component_is_asked_to_perform_some_action_on_some_other_object&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  18:&lt;/span&gt; {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  19:&lt;/span&gt;     [Observation]&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  20:&lt;/span&gt;     &lt;span style=&quot;color: #0000ff&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;void&lt;/span&gt; Should_happen_something_else_when_some_object_is_invalid() {}&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  21:&lt;/span&gt;&amp;#160; &lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  22:&lt;/span&gt; }&lt;/pre&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;The problem started when there were 10 passing tests instead of 6. Well, good that they all were passing, but what’s the catch? Apparently, the When_component_is_asked_to_perform_some_action_on_some_other_object class was running on it’s own, in addition to the AND specifications that included its’ observations by inheritance. Solution was simple, don’t let the testing framework instantiate the base specification.&lt;/p&gt;&#xA;&#xA;&lt;div&gt;&#xA;  &lt;div style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   1:&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;&lt;strong&gt;&lt;u&gt;abstract&lt;/u&gt;&lt;/strong&gt;&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;class&lt;/span&gt; When_component_is_asked_to_perform_some_action_on_some_other_object : Component_Specs&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   2:&lt;/span&gt; {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   3:&lt;/span&gt;     [Observation]&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   4:&lt;/span&gt;     &lt;span style=&quot;color: #0000ff&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;void&lt;/span&gt; Should_do_A() {}&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   5:&lt;/span&gt;&amp;#160; &lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   6:&lt;/span&gt;     [Observation]&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   7:&lt;/span&gt;     &lt;span style=&quot;color: #0000ff&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;void&lt;/span&gt; Should_do_B() {}&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   8:&lt;/span&gt; }&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   9:&lt;/span&gt;&amp;#160; &lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  10:&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;class&lt;/span&gt; And_some_other_object_is_valid : When_component_is_asked_to_perform_some_action_on_some_other_object&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  11:&lt;/span&gt; {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  12:&lt;/span&gt;     [Observation]&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  13:&lt;/span&gt;     &lt;span style=&quot;color: #0000ff&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;void&lt;/span&gt; Should_happen_something_when_some_object_is_valid() {}&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  14:&lt;/span&gt;&amp;#160; &lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  15:&lt;/span&gt; }&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  16:&lt;/span&gt;&amp;#160; &lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  17:&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;class&lt;/span&gt; And_some_other_object_is_invalid : When_component_is_asked_to_perform_some_action_on_some_other_object&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  18:&lt;/span&gt; {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  19:&lt;/span&gt;     [Observation]&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  20:&lt;/span&gt;     &lt;span style=&quot;color: #0000ff&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;void&lt;/span&gt; Should_happen_something_else_when_some_object_is_invalid() {}&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  21:&lt;/span&gt;&amp;#160; &lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  22:&lt;/span&gt; }&lt;/pre&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;Moral: passing tests is important. Having clean and manageable tests is no less important. &lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-03-05T06:16:00Z" PublishedUtc="2014-04-19T20:32:59.2347021Z" ModifiedUtc="2009-03-05T06:16:00Z" />
      <TagsPart Tags="TDD" />
      <AutoroutePart Alias="bdd-and-specifications" UseCustomPattern="false" />
      <TitlePart Title="BDD - AND Specifications" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=pragmatic-approach-avoid-premature-optimizations" Status="Published">
      <BodyPart Text="&lt;p&gt;Today, while Mike Hesse and I were working on one of the tasks, we had to implement logging capabilities. Log4Net was the component we abstracted and used to achieve the result. Though logger our code could not know ahead what class would use it, so this is what we put in place:&lt;/p&gt;  &lt;div&gt;   &lt;div style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;     &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   1:&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;class&lt;/span&gt; Logger : ILogger&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   2:&lt;/span&gt; {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   3:&lt;/span&gt;   &lt;span style=&quot;color: #0000ff&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;readonly&lt;/span&gt; Type logInvokerType;&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   4:&lt;/span&gt;&amp;#160; &lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   5:&lt;/span&gt;   &lt;span style=&quot;color: #0000ff&quot;&gt;public&lt;/span&gt; Logger(Type logInvokerType)&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   6:&lt;/span&gt;   {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   7:&lt;/span&gt;     &lt;span style=&quot;color: #0000ff&quot;&gt;this&lt;/span&gt;.logInvokerType = logInvokerType;&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   8:&lt;/span&gt;   }&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   9:&lt;/span&gt;&amp;#160; &lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  10:&lt;/span&gt;   &lt;span style=&quot;color: #0000ff&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;void&lt;/span&gt; LogError(&lt;span style=&quot;color: #0000ff&quot;&gt;string&lt;/span&gt; message)&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  11:&lt;/span&gt;   {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  12:&lt;/span&gt;     var logger = LogManager.GetLogger(logInvokerType);&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  13:&lt;/span&gt;     logger.Error(message);&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  14:&lt;/span&gt;   }&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  15:&lt;/span&gt; }&lt;/pre&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;Yes, constructor is the one that receives the type of the invoker. We are still able to resolve logger from container despite this (this is not an issue in our case).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The issue we started to look into was performance. Normally, sample code for Log4Net would have logger instance as static. Our thoughts were, well, it’s probably ‘expensive’ to instantiate logger each time we want to log an error. But we don’t know the invoker until we have the instance of the logger constructed. Chicken or egg? But then we stepped back, and thought – in the current system this error logging will be happening rarely, so why we are concerned about “premature optimization”? Pragmatic decision was – roll it out the way it is, and if we run into issues, refactor.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Thank you Mike for keeping me on the ground.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-03-04T05:29:00Z" PublishedUtc="2014-04-19T20:32:59.4532766Z" ModifiedUtc="2009-03-04T05:29:00Z" />
      <TagsPart Tags="Agile" />
      <AutoroutePart Alias="pragmatic-approach-avoid-premature-optimizations" UseCustomPattern="false" />
      <TitlePart Title="Pragmatic Approach – Avoid Premature Optimizations" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=agile-stickies-board" Status="Published">
      <BodyPart Text="&lt;p&gt;&lt;embed src=&quot;http://www.youtube.com/v/Su4ZIqxaObo&amp;amp;color1=0xb1b1b1&amp;amp;color2=0xcfcfcf&amp;amp;feature=player_embedded&amp;amp;fs=1&quot; width=&quot;425&quot; height=&quot;344&quot; type=&quot;application/x-shockwave-flash&quot; allowfullscreen=&quot;true&quot; /&gt;     &lt;br /&gt;While we are not yet in the era of &amp;quot;Minority Report&amp;quot;, a regular White Board and stikies are good &lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/AgileStickiesBoard_BEE0/25022009100_2.jpg&quot;&gt;&lt;img style=&quot;border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px&quot; height=&quot;228&quot; alt=&quot;25022009100&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/AgileStickiesBoard_BEE0/25022009100_thumb.jpg&quot; width=&quot;240&quot; align=&quot;right&quot; border=&quot;0&quot; /&gt;&lt;/a&gt;enough. This is how we started on our current project - the classic way. An interesting observation I've made while going through several attempts to track the progress of a project at several companies - an attempt to &amp;quot;modernize&amp;quot; stickies and get rid of the board. Ways are multiple, from virtualization of the board, to going back to a file based tracking (Excel/Word). &lt;/p&gt;  &lt;p&gt;From what I can see right now - non of those are as effective as the classic way. Reasons? &lt;/p&gt;  &lt;ol&gt;   &lt;li&gt;Trying to capture progress not visually leaves out gray areas. When project is big, partition it, but don't rely on files or scrollable screen in an application - doesn't really work. &lt;/li&gt;    &lt;li&gt;Time estimate is a separate concern - progress for developers makes sense in stickes that are in &amp;quot;done-done&amp;quot; column, and the flow from left to right. &lt;/li&gt;    &lt;li&gt;The process should be simple, if it requires extra effort, it become rather an impediment, than an assistance, and eventually will be abandoned. &lt;/li&gt;    &lt;li&gt;Board is something that is a couple of steps away at worse, and a head turn at the best. File based solutions are failing this, applications require windows switching (context change) or worse, load time.&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/AgileStickiesBoard_BEE0/27022009103_2.jpg&quot;&gt;&lt;img style=&quot;border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px&quot; height=&quot;228&quot; alt=&quot;27022009103&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/AgileStickiesBoard_BEE0/27022009103_thumb.jpg&quot; width=&quot;240&quot; align=&quot;right&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;/li&gt; &lt;/ol&gt;  &lt;p&gt;By sticking to the KISS principle with stikies, it is obvious what the status after just a week.&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;Have fun with stickies! :)&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-02-28T20:33:06Z" PublishedUtc="2009-02-28T20:33:06Z" ModifiedUtc="2009-02-28T20:33:06Z" />
      <TagsPart Tags="Agile" />
      <AutoroutePart Alias="agile-stickies-board" UseCustomPattern="false" />
      <TitlePart Title="Agile Stickies Board" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=am-i-agile-no-will-i-be-yes" Status="Published">
      <BodyPart Text="&lt;p&gt;Being a developer for 8 years, I went through the classic path of a green newbie knowing nothing, to a more mature developer aware of the flaws, till the current stage where I realize that I wasted too much time on too many things that are not important, when important things are not new and shiny, but old and proved by the time. Waterfall, Spiral, Agile – all titles, what I want to share is the experience I had for the past a year+.&lt;/p&gt;  &lt;p&gt;Agile or not, as a developer you quickly realize that there’s a good code, bad code, and smelly code. The first two are simple to distinguish. The last one, smelly, is not. Personally, I had absolutely no idea how to determine smelly code, besides just ‘sensing’ it. &lt;/p&gt;  &lt;p&gt;I started my career as a single developer with pre-designed and assigned to me tasks. Thanks goodness that was short. Right after that, I worked in pair. Well, at that time I didn’t know I was pairing, since it was more ‘master’ and ‘teacher’ arrangement of things. Now looking back it made total sense – I had a chance to “learn how to shave on someone else’s beard”. Knowledge transfer, team effort, mutual design and implementation. The theory I have is that, thanks to that start, I was able to continue and constantly question myself “am I doing the right thing in the right manner”.&lt;/p&gt;  &lt;p&gt;Journey into Agile for myself started at the end of 2007, when I took the Nothing But .NET training course and got exposed to the methodologies and concepts that are not floating a lot in the traditional mainstream development. I learned and realized that software is there to resolve real life problems, and it’s a tool, not a privilege. The “developer-centric” world collapsed for me, and the new world of the “business-centric” has taken place. I must admit, that I am not entirely converted, yet know that going the right way. How? Again, same feeling that led me to realization that pair-programming is a better model for development, that having confidence in the code is as important as the code itself (aka tests), that team is all about individuals and not just progress, and much more.&lt;/p&gt;  &lt;p&gt;Latest project I am currently involved in is a remarkable opportunity to get to the next level. Working along with 3 brilliant developers (&lt;a href=&quot;http://davidmorgantini.blogspot.com/&quot;&gt;David Morgantini&lt;/a&gt;, &lt;a href=&quot;http://www.linkedin.com/profile?viewProfile=&amp;amp;key=9606022&quot;&gt;Jason Lindermann&lt;/a&gt;, and Mike Hesse), implementing agile in practice makes me realize and understand better what I was reading all the way along, but was not capable to experience. Pairing, pragmatism, continuous design decision making, refactoring, trade-offs, testing, self-organized team, done-done, and much more – it all comes alive once you actually do it. “The Art of Agile Development” book authors said that first you have to entirely embrace agile methodology, and once you know it (rather that interpretate what it should be), only after that you can mix and match methodologies. But first be committed to know agile. Anyone knows what agile is? A-a-a-a-a-a!&lt;/p&gt;  &lt;p&gt;Agile, IMHO, is an echo system. Developers, management, business people, all related and interconnected. To know how to balance it all, provide the maximum value from the resources that are available, with constant intention of improvement implemented rapidly in reality – all together represent just one of the Agile sides. Many other sides to learn remain. Realization of that is the right step in the right direction. My recommendation would be:&lt;/p&gt;  &lt;p&gt;- Strive to self-improvement &lt;/p&gt;  &lt;p&gt;- Surround yourself with people you want to be with&lt;/p&gt;  &lt;p&gt;- Challenge what you do and how you do it&lt;/p&gt;  &lt;p&gt;- Be honest to yourself and others on what you understand and don’t&lt;/p&gt;  &lt;p&gt;- Don’t be afraid to learn – it is not weakness, but strength&lt;/p&gt;  &lt;p&gt;- Go with your feeling – if it feels right, it cannot be wrong, but when it feels wrong, it obviously is&lt;/p&gt;  &lt;p&gt;- Realize, that even as a software developer, you are a unit to function in a social environment and learn to deal with that&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-02-28T08:05:00Z" PublishedUtc="2014-04-19T20:33:00.6407634Z" ModifiedUtc="2009-02-28T08:05:00Z" />
      <TagsPart Tags="Personal" />
      <AutoroutePart Alias="am-i-agile-no-will-i-be-yes" UseCustomPattern="false" />
      <TitlePart Title="Am I Agile? No. Will I Be? Yes." />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=baha-is-in-iran" Status="Published">
      <BodyPart Text="&lt;p&gt;&lt;strong&gt;This is political&lt;/strong&gt;, skip it if it’s not what you normally would like to read.&lt;/p&gt;  &lt;p&gt;Today I learned about Baha’i leaders in Iran being charged for &lt;em&gt;spying in favor of Israel, insulting religious sanctities and propaganda against the Islamic Republic&lt;/em&gt;. My reaction was – what a bull. Besides the fact that the country is running like a show, this type of accusation is just ridiculous. Where’s the logic? If someone would spy in favor of Israel, would they spread propaganda against the Islamic Republic? Don’t think so…&lt;/p&gt;  &lt;p&gt;Personally, I can clearly see what Iran is up to and what they are trying to provoke. The game is old, and everyone knows its’ name. Sadly, I am no longer surprised about how weak and incapable of deeds the modern society is, when it comes to situations like this. &lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-02-23T04:57:00Z" PublishedUtc="2014-04-19T20:33:00.9220097Z" ModifiedUtc="2009-02-23T04:57:00Z" />
      <TagsPart Tags="Personal" />
      <AutoroutePart Alias="baha-is-in-iran" UseCustomPattern="false" />
      <TitlePart Title="Baha’is in Iran" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=light-weight-base-classes" Status="Published">
      <BodyPart Text="&lt;p&gt;Base classes are a &lt;a href=&quot;http://stackoverflow.com/questions/56867/interface-vs-base-class&quot; target=&quot;_blank&quot;&gt;touchy subject&lt;/a&gt;. Some might advocate for it, some will against it.&lt;/p&gt;  &lt;p&gt;Personally, I am not a big fan of base classes. There are several reasons for that, but most important to me, is the baggage you get to carry around once extend a base class. Saying this, I’ve noticed, that a “light-weight” base classes make sense for a very specific and narrowed scope job. To be short, an example – we started to leverage &lt;a href=&quot;http://fluentnhibernate.org/&quot; target=&quot;_blank&quot;&gt;Fluent NHibernate&lt;/a&gt; to do our mappings. It’s simple and nice, but extremely repetitive. A typical mapping would look like this:&lt;/p&gt;  &lt;div&gt;   &lt;div style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;     &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   1:&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;class&lt;/span&gt; AttachmentMap : ClassMap&amp;lt;Attachment&amp;gt;, IMapGenerator&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   2:&lt;/span&gt; {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   3:&lt;/span&gt;     &lt;span style=&quot;color: #0000ff&quot;&gt;public&lt;/span&gt; AttachmentMap()&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   4:&lt;/span&gt;     {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   5:&lt;/span&gt;         BuildMap();&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   6:&lt;/span&gt;     }&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   7:&lt;/span&gt;&amp;#160; &lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   8:&lt;/span&gt;     &lt;span style=&quot;color: #0000ff&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;void&lt;/span&gt; BuildMap()&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   9:&lt;/span&gt;     {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  10:&lt;/span&gt;         Id(x =&amp;gt; x.Id)&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  11:&lt;/span&gt;             .WithUnsavedValue(-1);&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  12:&lt;/span&gt;         Map(x =&amp;gt; x.Filename)&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  13:&lt;/span&gt;             .WithLengthOf(100)&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  14:&lt;/span&gt;             .Not.Nullable();&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  15:&lt;/span&gt;         Map(x =&amp;gt; x.Data)&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  16:&lt;/span&gt;             .Not.Nullable();&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  17:&lt;/span&gt;         References(x =&amp;gt; x.TrpMessage);&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  18:&lt;/span&gt;     }&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  19:&lt;/span&gt;&amp;#160; &lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  20:&lt;/span&gt;     &lt;span style=&quot;color: #0000ff&quot;&gt;public&lt;/span&gt; XmlDocument Generate()&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  21:&lt;/span&gt;     {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  22:&lt;/span&gt;         &lt;span style=&quot;color: #0000ff&quot;&gt;return&lt;/span&gt; CreateMapping(&lt;span style=&quot;color: #0000ff&quot;&gt;new&lt;/span&gt; MappingVisitor());&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  23:&lt;/span&gt;     }&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  24:&lt;/span&gt; }&lt;/pre&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;Where &lt;em&gt;IMapGenerator &lt;/em&gt;was introduced to enforce &lt;em&gt;Generate()&lt;/em&gt; method, that would allow us quickly to see what’s the generated XML (HBM) looks like.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You can definitely see that code is going to repeat itself for each entity and template is obvious. Plus, creating a constructor just to invoke &lt;em&gt;BuildMap()&lt;/em&gt; can be omitted by mistake easily. The concept “if the process cannot allow mistake then it won’t be made” is true here as well. This is where the “light weight” base class is a good thing to have.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&amp;#160;&lt;/p&gt;&#xA;&#xA;&lt;div&gt;&#xA;  &lt;div style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   1:&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;abstract&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;class&lt;/span&gt; BaseEntityMap&amp;lt;EntityType&amp;gt; : ClassMap&amp;lt;EntityType&amp;gt; &lt;span style=&quot;color: #0000ff&quot;&gt;where&lt;/span&gt; EntityType : Entity&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   2:&lt;/span&gt; {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   3:&lt;/span&gt;     &lt;span style=&quot;color: #0000ff&quot;&gt;protected&lt;/span&gt; BaseEntityMap()&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   4:&lt;/span&gt;     {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   5:&lt;/span&gt;         BuildMap(); &lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   6:&lt;/span&gt;     }&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   7:&lt;/span&gt;&amp;#160; &lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   8:&lt;/span&gt;     &lt;span style=&quot;color: #0000ff&quot;&gt;protected&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;abstract&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;void&lt;/span&gt; BuildMap();&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   9:&lt;/span&gt;&amp;#160; &lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  10:&lt;/span&gt;     &lt;span style=&quot;color: #0000ff&quot;&gt;protected&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;virtual&lt;/span&gt; XmlDocument Generate()&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  11:&lt;/span&gt;     {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  12:&lt;/span&gt;         var mapping = CreateMapping(&lt;span style=&quot;color: #0000ff&quot;&gt;new&lt;/span&gt; MappingVisitor());&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  13:&lt;/span&gt;         Trace.WriteLine(Regex.Replace(mapping.InnerXml, &lt;span style=&quot;color: #006080&quot;&gt;&amp;quot;&amp;gt;&amp;quot;&lt;/span&gt;, &lt;span style=&quot;color: #006080&quot;&gt;&amp;quot;&amp;gt;\r&amp;quot;&lt;/span&gt;));&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  14:&lt;/span&gt;         &lt;span style=&quot;color: #0000ff&quot;&gt;return&lt;/span&gt; mapping;&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  15:&lt;/span&gt;     }&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  16:&lt;/span&gt; }&lt;/pre&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;&lt;em&gt;BaseEntityMap&amp;lt;EntityType&amp;gt;&lt;/em&gt; as a base class is responsible for one and only thing – enforce definition of &lt;em&gt;BuildMap()&lt;/em&gt;, and remove repetition of code for Generating XML.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The new mapping code looks simpler and base class is not a “heavy beast to deal with”:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&amp;#160;&lt;/p&gt;&#xA;&#xA;&lt;div&gt;&#xA;  &lt;div style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   1:&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;class&lt;/span&gt; AttachmentMap : BaseEntityMap&amp;lt;Attachment&amp;gt;&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   2:&lt;/span&gt; {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   3:&lt;/span&gt;     &lt;span style=&quot;color: #0000ff&quot;&gt;protected&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;override&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;void&lt;/span&gt; BuildMap()&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   4:&lt;/span&gt;     {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   5:&lt;/span&gt;         Not.LazyLoad();&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   6:&lt;/span&gt;         WithTable(&lt;span style=&quot;color: #006080&quot;&gt;&amp;quot;Attachments&amp;quot;&lt;/span&gt;);&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   7:&lt;/span&gt;&amp;#160; &lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   8:&lt;/span&gt;         Id(x =&amp;gt; x.Id)&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   9:&lt;/span&gt;             .WithUnsavedValue(-1);&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  10:&lt;/span&gt;         Version(x =&amp;gt; x.Version);&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  11:&lt;/span&gt;         Map(x =&amp;gt; x.Filename)&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  12:&lt;/span&gt;             .WithLengthOf(255)&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  13:&lt;/span&gt;             .Not.Nullable();&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  14:&lt;/span&gt;         Map(x =&amp;gt; x.Data)&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  15:&lt;/span&gt;             .Not.Nullable();&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  16:&lt;/span&gt;     }&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  17:&lt;/span&gt;&amp;#160; &lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  18:&lt;/span&gt;     &lt;span style=&quot;color: #0000ff&quot;&gt;protected&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;override&lt;/span&gt; XmlDocument Generate()&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  19:&lt;/span&gt;     {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  20:&lt;/span&gt;         &lt;span style=&quot;color: #0000ff&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;base&lt;/span&gt;.Generate();&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  21:&lt;/span&gt;     }&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  22:&lt;/span&gt; }&lt;/pre&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&amp;#160;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Lines 18-21 are not necessary, and we only override &lt;em&gt;Generate() &lt;/em&gt;when we want to see the generated XML. And even then, we are not duplicating the actual code. As for the &lt;em&gt;BuildMap()&lt;/em&gt;, by extending &lt;em&gt;BaseEntnty &lt;/em&gt;class, we are forced to have &lt;em&gt;BuildMap()&lt;/em&gt;.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-02-22T21:58:00Z" PublishedUtc="2014-04-19T20:33:01.2501341Z" ModifiedUtc="2009-02-22T21:58:00Z" />
      <TagsPart Tags="C#,NHibernate" />
      <AutoroutePart Alias="light-weight-base-classes" UseCustomPattern="false" />
      <TitlePart Title="“Light Weight” Base Classes" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=c-in-depth" Status="Published">
      <BodyPart Text="&lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/CinDepth_92B9/image_2.png&quot;&gt;&lt;img style=&quot;border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px&quot; height=&quot;189&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/CinDepth_92B9/image_thumb.png&quot; width=&quot;150&quot; align=&quot;right&quot; border=&quot;0&quot; /&gt;&lt;/a&gt;Finished reading &lt;a href=&quot;http://www.amazon.ca/C-Depth-What-need-master/dp/1933988363&quot; target=&quot;_blank&quot;&gt;&amp;quot;C# in Depth&amp;quot;&lt;/a&gt; by Jon Skeet. Good reading, especially if you have to&amp;#160; catch up from C# 1.0 or 2.0 to the latest 3.0. The other one I would like to read now will have to be a mix of this book (without 1.0/2.0 materials) and the excellent &lt;a href=&quot;http://www.amazon.ca/gp/product/0735621632&quot; target=&quot;_blank&quot;&gt;&amp;quot;CLR via C#&amp;quot;&lt;/a&gt; by&amp;#160; Jeffery Richter. &lt;/p&gt;  &lt;p&gt;Until that mix is out, I am switching back to Domain Design/Modeling. &lt;a href=&quot;http://www.amazon.ca/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215&quot; target=&quot;_blank&quot;&gt;&amp;quot;Domain Driven Design&amp;quot;&lt;/a&gt; by Eric Evans is the only one I read, loved, was confused with, and have to re-read. But what is missing is the practicality (the modeling part?). Would love to hear about the Domain Modeling books you have to recommend (and they don't have to be necessarily in .NET neither C#).&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-02-14T17:17:27Z" PublishedUtc="2009-02-14T17:17:27Z" ModifiedUtc="2009-02-14T17:17:27Z" />
      <TagsPart Tags="Books" />
      <AutoroutePart Alias="c-in-depth" UseCustomPattern="false" />
      <TitlePart Title="C# in Depth" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=switching-ioc-container-with-linq-expressions" Status="Published">
      <BodyPart Text="&lt;p&gt;Several last projects I used a simple IoC container, leveraging Activator.CreateInstance(type). The main reason - simplicity. Once there was a need to go to a higher level, I would switch to Windsor Container. One of the projects used Unity. The only issue was that I would always have to do some customization to my container (or DependencyResolver), which is nothing but a static gateway.&lt;/p&gt;  &lt;p&gt;What I have decided, is that I do not want to invest effort in something that was working before just because the underlying implementation of container has changed. The container engine might be changed, but my code should not (OCP?). Therefore, DependencyResolver had to be coded slightly different. To make it possible, I decided to go with the LINQ Expressions. It allows to pass code in data structures, and thus allows to manipulate how to execute the code.&lt;/p&gt;  &lt;p&gt;For demonstration purposes, I will only demonstrate the simple case, more complex cases are feasible as well.&lt;/p&gt;  &lt;div&gt;   &lt;div style=&quot;border-style: none; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;     &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   1:&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;interface&lt;/span&gt; IService&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   2:&lt;/span&gt; {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   3:&lt;/span&gt;     &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;void&lt;/span&gt; DoSomething();&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   4:&lt;/span&gt; }&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   5:&lt;/span&gt;&amp;nbsp; &lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   6:&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;class&lt;/span&gt; ServiceImpl : IService &lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   7:&lt;/span&gt; {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   8:&lt;/span&gt;     &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;void&lt;/span&gt; DoSomething()&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   9:&lt;/span&gt;     {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  10:&lt;/span&gt;         Console.WriteLine(&lt;span style=&quot;color: rgb(0, 96, 128);&quot;&gt;&quot;ServiceImpl&quot;&lt;/span&gt;);&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  11:&lt;/span&gt;     }&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  12:&lt;/span&gt; }&lt;/pre&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;DependencyResolver (which is static gateway) is&lt;/p&gt;&#xA;&#xA;&lt;div&gt;&#xA;  &lt;div style=&quot;border-style: none; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   1:&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;class&lt;/span&gt; DependencyResolver&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   2:&lt;/span&gt; {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   3:&lt;/span&gt;     &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;static&lt;/span&gt; IDependencyResolver &lt;b&gt;instance&lt;/b&gt; = &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;new&lt;/span&gt; LambdaDependencyResolver();&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   4:&lt;/span&gt;&amp;nbsp; &lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   5:&lt;/span&gt;     &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;void&lt;/span&gt; InitializeWith(IDependencyResolver resolver)&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   6:&lt;/span&gt;     {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   7:&lt;/span&gt;         instance = resolver;&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   8:&lt;/span&gt;     }&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   9:&lt;/span&gt;&amp;nbsp; &lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  10:&lt;/span&gt;     &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;void&lt;/span&gt; Register&amp;lt;ContractType&amp;gt;(Expression&amp;lt;Func&amp;lt;ContractType&amp;gt;&amp;gt; func)&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  11:&lt;/span&gt;     {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  12:&lt;/span&gt;         instance.Register(func);&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  13:&lt;/span&gt;     }&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  14:&lt;/span&gt;&amp;nbsp; &lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  15:&lt;/span&gt;     &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;static&lt;/span&gt; ContractType Resolve&amp;lt;ContractType&amp;gt;()&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  16:&lt;/span&gt;     {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  17:&lt;/span&gt;         &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;return&lt;/span&gt; instance.Resolve&amp;lt;ContractType&amp;gt;();&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  18:&lt;/span&gt;     }&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  19:&lt;/span&gt; }&lt;/pre&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;By default, LambdaDependencyResolver is going to be used. Registration is done by passing in an Expression&amp;lt;Func&amp;lt;ContractType&amp;gt;&amp;gt; that is nothing but a function that returns a ContractType implementer. The idea to wrap it with Expression, so that the instance (a particular dependency resolver implementation) would take care of the details based on how it works.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;IDependencyResolver code&lt;/p&gt;&#xA;&#xA;&lt;div&gt;&#xA;  &lt;div style=&quot;border-style: none; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   1:&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;interface&lt;/span&gt; IDependencyResolver&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   2:&lt;/span&gt; {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   3:&lt;/span&gt;     &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;void&lt;/span&gt; Register&amp;lt;ContractType&amp;gt;(Expression&amp;lt;Func&amp;lt;ContractType&amp;gt;&amp;gt; func);&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   4:&lt;/span&gt;     ContractType Resolve&amp;lt;ContractType&amp;gt;();&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   5:&lt;/span&gt; }&lt;/pre&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;LambdaDependencyResolver code&lt;/p&gt;&#xA;&#xA;&lt;div&gt;&#xA;  &lt;div style=&quot;border-style: none; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   1:&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;class&lt;/span&gt; LambdaDependencyResolver : IDependencyResolver&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   2:&lt;/span&gt; {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   3:&lt;/span&gt;     &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;private&lt;/span&gt; Dictionary&amp;lt;Type, &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;object&lt;/span&gt;&amp;gt; dictionary = &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;new&lt;/span&gt; Dictionary&amp;lt;Type, &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;object&lt;/span&gt;&amp;gt;();&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   4:&lt;/span&gt;&amp;nbsp; &lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   5:&lt;/span&gt;     &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;void&lt;/span&gt; Register&amp;lt;ContractType&amp;gt;(Expression&amp;lt;Func&amp;lt;ContractType&amp;gt;&amp;gt; func)&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   6:&lt;/span&gt;     {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   7:&lt;/span&gt;         &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;if&lt;/span&gt; (dictionary.ContainsKey(&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;typeof&lt;/span&gt;(ContractType)))&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   8:&lt;/span&gt;         {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   9:&lt;/span&gt;             &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;throw&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;new&lt;/span&gt; InvalidOperationException(&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;typeof&lt;/span&gt;(ContractType).FullName + &lt;span style=&quot;color: rgb(0, 96, 128);&quot;&gt;&quot; was added already to container.&quot;&lt;/span&gt;);&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  10:&lt;/span&gt;         }&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  11:&lt;/span&gt;&amp;nbsp; &lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  12:&lt;/span&gt;         dictionary.Add(&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;typeof&lt;/span&gt;(ContractType), func);&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  13:&lt;/span&gt;     }&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  14:&lt;/span&gt;&amp;nbsp; &lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  15:&lt;/span&gt;     &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;public&lt;/span&gt; ContractType Resolve&amp;lt;ContractType&amp;gt;()&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  16:&lt;/span&gt;     {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  17:&lt;/span&gt;         &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;if&lt;/span&gt; (!dictionary.ContainsKey(&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;typeof&lt;/span&gt;(ContractType)))&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  18:&lt;/span&gt;         {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  19:&lt;/span&gt;             &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;throw&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;new&lt;/span&gt; InvalidOperationException(&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;typeof&lt;/span&gt;(ContractType).FullName + &lt;span style=&quot;color: rgb(0, 96, 128);&quot;&gt;&quot; was not found in container.&quot;&lt;/span&gt;);&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  20:&lt;/span&gt;         }&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  21:&lt;/span&gt;&amp;nbsp; &lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  22:&lt;/span&gt;         &lt;b&gt;var expression = dictionary[&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;typeof&lt;/span&gt; (ContractType)];&lt;/b&gt;&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  23:&lt;/span&gt;         &lt;b&gt;var compiledLambda = ((Expression&amp;lt;Func&amp;lt;ContractType&amp;gt;&amp;gt;)expression).Compile();&lt;/b&gt;&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  24:&lt;/span&gt;       &lt;b&gt;  &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;return&lt;/span&gt; compiledLambda.Invoke(&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;this&lt;/span&gt;);&lt;/b&gt;&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  25:&lt;/span&gt;     }&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  26:&lt;/span&gt; }&lt;/pre&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;The usage&lt;/p&gt;&#xA;&#xA;&lt;div&gt;&#xA;  &lt;div style=&quot;border-style: none; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   1:&lt;/span&gt; DependencyResolver.Register&amp;lt;IService&amp;gt;(() =&amp;gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;new&lt;/span&gt; ServiceImpl());&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   2:&lt;/span&gt; var service = DependencyResolver.Resolve&amp;lt;IService&amp;gt;();&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   3:&lt;/span&gt; service.DoSomething();&lt;/pre&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;It's working, great. Some time later, we need to switch to some 3rd party container, and we don't want to change our code that relies on DependencyResolver. This is where Expressions are handy. I have used Unity container, but that could be StructureMap, Windsor Container, or anything else.&lt;/p&gt;&#xA;&#xA;&lt;div&gt;&#xA;  &lt;div style=&quot;border-style: none; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   1:&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;class&lt;/span&gt; UnityDependencyResolver : IDependencyResolver&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   2:&lt;/span&gt; {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   3:&lt;/span&gt;     &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;private&lt;/span&gt; UnityContainer container = &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;new&lt;/span&gt; UnityContainer();&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   4:&lt;/span&gt;&amp;nbsp; &lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   5:&lt;/span&gt;     &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;void&lt;/span&gt; Register&amp;lt;ContractType&amp;gt;(Expression&amp;lt;Func&amp;lt;ContractType&amp;gt;&amp;gt; func)&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   6:&lt;/span&gt;     {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   7:&lt;/span&gt;         &lt;b&gt;var newExpression = (NewExpression)func.Body;&lt;/b&gt;&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   8:&lt;/span&gt;         &lt;b&gt;container.RegisterType(&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;typeof&lt;/span&gt; (ContractType), newExpression.Type, &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;new&lt;/span&gt; InjectionMember[] {});&lt;/b&gt;&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   9:&lt;/span&gt;     }&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  10:&lt;/span&gt;&amp;nbsp; &lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  11:&lt;/span&gt;     &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;public&lt;/span&gt; ContractType Resolve&amp;lt;ContractType&amp;gt;()&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  12:&lt;/span&gt;     {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  13:&lt;/span&gt;         &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;return&lt;/span&gt; (ContractType) container.Resolve(&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;typeof&lt;/span&gt;(ContractType));&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  14:&lt;/span&gt;     }&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  15:&lt;/span&gt; }&lt;/pre&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;Bolded code in LambdaDependencyResolver and UnityDependencyResolver is simply leveraging LINQ Expressions to make it all work. You can definitely make it more sophisticated and elegant as needed.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-02-09T04:51:00Z" PublishedUtc="2014-04-19T20:33:02.1407373Z" ModifiedUtc="2009-02-09T04:51:00Z" />
      <TagsPart Tags="C#,Patterns" />
      <AutoroutePart Alias="switching-ioc-container-with-linq-expressions" UseCustomPattern="false" />
      <TitlePart Title="Switching IoC Container with LINQ Expressions" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=right-tool-for-the-right-job-part-2" Status="Published">
      <BodyPart Text="&lt;p&gt;In the &lt;a href=&quot;http://weblogs.asp.net/sfeldman/archive/2009/02/04/right-tool-for-the-right-job.aspx&quot; target=&quot;_blank&quot;&gt;previous post&lt;/a&gt; I talked about running test in Resharper vs. TestDriven.NET&lt;/p&gt;  &lt;p&gt;This time I will compare Visual Studio .NET 2008 (VS) with TestDriven.NET (TD.NET) for another functionality - quick code execution for evaluation purposes.&lt;/p&gt;  &lt;p&gt;VS was shipped with a feature called Object Test Bench. The idea was to be able to instantiate an object of a class in order to execute it's methods for quick evaluation. Great idea. The steps to have it going were multiple.&lt;/p&gt;  &lt;p&gt;Step 1 - Open Object Test Bench&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/RightToolfortheRightJobPart2_145B6/image_2.png&quot;&gt;&lt;img style=&quot;border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px&quot; height=&quot;192&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/RightToolfortheRightJobPart2_145B6/image_thumb.png&quot; width=&quot;546&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;Step 2 - Class View&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/RightToolfortheRightJobPart2_145B6/image_4.png&quot;&gt;&lt;img style=&quot;border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px&quot; height=&quot;169&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/RightToolfortheRightJobPart2_145B6/image_thumb_1.png&quot; width=&quot;270&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;Right click on the class &lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/RightToolfortheRightJobPart2_145B6/image_6.png&quot;&gt;&lt;img style=&quot;border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px&quot; height=&quot;123&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/RightToolfortheRightJobPart2_145B6/image_thumb_2.png&quot; width=&quot;288&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;Step 3 - Create Instance&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/RightToolfortheRightJobPart2_145B6/image_8.png&quot;&gt;&lt;img style=&quot;border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px&quot; height=&quot;257&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/RightToolfortheRightJobPart2_145B6/image_thumb_3.png&quot; width=&quot;375&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;This will create the temporary object in Object Test Bench space.&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/RightToolfortheRightJobPart2_145B6/image_10.png&quot;&gt;&lt;img style=&quot;border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px&quot; height=&quot;121&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/RightToolfortheRightJobPart2_145B6/image_thumb_4.png&quot; width=&quot;254&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;Step 4 - Invoking Method&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/RightToolfortheRightJobPart2_145B6/image_12.png&quot;&gt;&lt;img style=&quot;border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px&quot; height=&quot;128&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/RightToolfortheRightJobPart2_145B6/image_thumb_5.png&quot; width=&quot;350&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;Step 5 - Getting Result&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/RightToolfortheRightJobPart2_145B6/image_14.png&quot;&gt;&lt;img style=&quot;border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px&quot; height=&quot;211&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/RightToolfortheRightJobPart2_145B6/image_thumb_6.png&quot; width=&quot;375&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;Step 6 - Finalizing&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/RightToolfortheRightJobPart2_145B6/image_16.png&quot;&gt;&lt;img style=&quot;border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px&quot; height=&quot;77&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/RightToolfortheRightJobPart2_145B6/image_thumb_7.png&quot; width=&quot;346&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;Note: to see the result stored under string1, you have to mouse over.&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;Not the same thing with TD.NET&lt;/p&gt;  &lt;p&gt;Step 1 - Point to the method to invoke&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/RightToolfortheRightJobPart2_145B6/image_18.png&quot;&gt;&lt;img style=&quot;border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px&quot; height=&quot;190&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/RightToolfortheRightJobPart2_145B6/image_thumb_8.png&quot; width=&quot;397&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;Step 2 - See the result&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/RightToolfortheRightJobPart2_145B6/image_20.png&quot;&gt;&lt;img style=&quot;border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px&quot; height=&quot;123&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/RightToolfortheRightJobPart2_145B6/image_thumb_9.png&quot; width=&quot;376&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;Don't know what about you, but for me it's an obvious difference. Multiple steps in VS vs. single* step in TD.NET. Thanks David for showing this one.&lt;/p&gt;  &lt;p&gt;So the right tool for the right job. Do you have any samples? Show it! Heck, why just to limit ourselves with VS only. We can do more than that. How about replacing RDBS with OODBS as the right tool? Sky is the limit.&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;* If you set your VS to show Output window automatically, it will popup on it's own. Otherwise that will be 2 step process. Still ALT-V, O should make it a step and a half :)&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-02-08T17:16:34Z" PublishedUtc="2009-02-08T17:16:34Z" ModifiedUtc="2009-02-08T17:16:34Z" />
      <TagsPart Tags="VS.NET" />
      <AutoroutePart Alias="right-tool-for-the-right-job-part-2" UseCustomPattern="false" />
      <TitlePart Title="Right Tool for the Right Job - Part 2" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=possible-bug-in-rhino-mocks-3-5" Status="Published">
      <BodyPart Text="&lt;p&gt;Seems like there's a bug in Rhino.Mocks 3.5 in regards to stubbed dependency (stubbing property getter and a behavior in certain order). Anyone knows something about it? &lt;/p&gt;  &lt;p&gt;PS: have posts at both Rhino.Mocks &lt;a href=&quot;http://groups.google.com/group/RhinoMocks/browse_thread/thread/b38d09b276e66ec7&quot; target=&quot;_blank&quot;&gt;usergroup&lt;/a&gt; and &lt;a href=&quot;http://stackoverflow.com/questions/510050/stubbing-property-getter-prior-to-method-on-the-same-object-rhino-mocks-3-5&quot; target=&quot;_blank&quot;&gt;stackoverflow&lt;/a&gt;, but still no clue what's wrong.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-02-05T16:30:12Z" PublishedUtc="2014-04-19T20:33:07.8920127Z" ModifiedUtc="2009-02-05T16:30:12Z" />
      <TagsPart Tags="TDD" />
      <AutoroutePart Alias="possible-bug-in-rhino-mocks-3-5" UseCustomPattern="false" />
      <TitlePart Title="Possible Bug in Rhino.Mocks 3.5" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=exploratory-tests" Status="Published">
      <BodyPart Text="&lt;p&gt;My team is off the spike project we had, and I wanted to share a bit about exploratory tests. &lt;/p&gt;  &lt;p&gt;The idea is to spike let's say some 3rd party component. Just spiking is good, but not always enough. How to ensure that we transfer the knowledge we acquired during the spike to the coming generations of developers? Or how to document what we know about the particular version of the 3rd party component, so it can be verified with any other potential versions it (component) will have? &lt;/p&gt;  &lt;p&gt;The answer is simple - exploratory tests. These not just document in the best manner how to use the component, but also verify it behavior. In our case we used a component, where it's documentation stated certain default values, and in reality it had different values. What will be capturing it the best way and allow to verify for next versions that the bug was fixed and our code doesn't have to work around the issue? Yes, the old good exploratory test.&lt;/p&gt;  &lt;p&gt;Bottom line, explore, test, document - all comes in one.&lt;/p&gt;  &lt;p&gt;PS: I still don't like RosettaNet ;)&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-02-05T04:05:39Z" PublishedUtc="2014-04-19T20:33:08.0951256Z" ModifiedUtc="2009-02-05T04:05:39Z" />
      <TagsPart Tags="Agile,TDD" />
      <AutoroutePart Alias="exploratory-tests" UseCustomPattern="false" />
      <TitlePart Title="Exploratory Tests" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=right-tool-for-the-right-job" Status="Published">
      <BodyPart Text="&lt;p&gt;I used R# as a test runner tool. Nice UI (see my older posts), nicely integrated with Gallio. Just one issue - unrealistically slow when compared with a non-visual tool. And then our team member &lt;a href=&quot;http://davidmorgantini.blogspot.com/&quot; target=&quot;_blank&quot;&gt;David&lt;/a&gt; showed us old-and-forgotten TestDriven.NET. &lt;/p&gt;  &lt;p&gt;Oh boy, what a difference. It's so much faster, than we jumped on it (almost) right away, leaving R# unit testing tool behind (though, not the R# itself :).&lt;/p&gt;  &lt;p&gt;One weak side of TD.NET - executing all tests in solution or selective tests execution grouped, it's not there. Yet, this is not an issue, for that we should leverage automated build scripts, right? :D&lt;/p&gt;  &lt;p&gt;Moral of the story - use the right tool for the right job.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-02-05T03:59:04Z" PublishedUtc="2014-04-19T20:33:08.3295121Z" ModifiedUtc="2009-02-05T03:59:04Z" />
      <TagsPart Tags="TDD" />
      <AutoroutePart Alias="right-tool-for-the-right-job" UseCustomPattern="false" />
      <TitlePart Title="Right Tool for the Right Job" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=reporting-impediments" Status="Published">
      <BodyPart Text="&lt;p&gt;   &lt;br /&gt;During the scrums we report what we did yesterday, planning to do today, and what are the impediments. Impediments sometimes tend to sound like a complaint. So what to do to prevent it become just &amp;quot;bitching&amp;quot; about things?&lt;/p&gt;  &lt;p&gt;1. Don't complaint. Bring impediment to an attention with a very short and pragmatic preposition how to remove it. If you can't make such a note or just don't have one, don't complaint (&amp;quot;Report impediment, not complaints&amp;quot;).&lt;/p&gt;  &lt;p&gt;2. Look what can be learned and withdrawn as an experience from the impediment, and use that knowledge to prevent a similar impediment in the future (&amp;quot;Turn enemy into ally&amp;quot;).&lt;/p&gt;  &lt;p&gt;These two simple guidelines can avoid &lt;a href=&quot;http://www.globalnerdy.com/2007/11/28/dilbert-on-extreme-and-agile-programming/&quot; target=&quot;_blank&quot;&gt;Dilbert's understanding of Agile&lt;/a&gt;.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-02-05T03:52:44Z" PublishedUtc="2014-04-19T20:33:08.5326194Z" ModifiedUtc="2009-02-05T03:52:44Z" />
      <TagsPart Tags="Agile" />
      <AutoroutePart Alias="reporting-impediments" UseCustomPattern="false" />
      <TitlePart Title="Reporting Impediments" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=time-estimation-for-user-story" Status="Published">
      <BodyPart Text="&lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/EstimatingEffort_E017/how_to_estimate_effort_2.jpg&quot; mce_href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/EstimatingEffort_E017/how_to_estimate_effort_2.jpg&quot;&gt;&lt;img src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/EstimatingEffort_E017/how_to_estimate_effort_thumb.jpg&quot; style=&quot;border: 0px none ;&quot; alt=&quot;how_to_estimate_effort&quot; mce_src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/EstimatingEffort_E017/how_to_estimate_effort_thumb.jpg&quot; align=&quot;right&quot; border=&quot;0&quot; width=&quot;244&quot; height=&quot;226&quot;&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;There are multiple ways to estimate time for a user story. One of the ways that worked really nice for my team was personal estimates discussed by the developers together (Estimate Poker game?). This is how it goes.&lt;br&gt;&lt;/p&gt;  &lt;p&gt;User story:&lt;br&gt;&lt;/p&gt;  &lt;p&gt;As a Sender, I want to be able to query status of my document, so I could know it's location.&lt;/p&gt;  &lt;p&gt;&amp;nbsp;&lt;/p&gt;  &lt;p&gt;Each develop would grab a pen and paper, break down the user story into tasks that will be required to implement the user story and estimate each task. At the end the total estimate is written down.&lt;/p&gt;  &lt;p&gt;Once all team members are done, the total numbers are revealed. If the numbers are identical, I envy you. You have a solid team with hands on experience on the subject. But have no worries, this will not happen often. Normally numbers will vary, and significantly. &lt;/p&gt;  &lt;p&gt;At this point the discussion starts, to understand why each person estimated it this or other way. This is the best part of the estimate, as it&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;Brings up all the required tasks an individual would not necessarily consider, but as a group chances to forget something are lower&lt;/li&gt;    &lt;li&gt;Reveals if a certain tasks is a brand new or there's some previous experience that can help to estimate / implement better&lt;/li&gt;    &lt;li&gt;Bridge domain understanding by driving into question and having answers&lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;This is a great technique. Works smoothly and feels like a game, therefore not boring and doesn't feel like a depressing task to do.&lt;/p&gt;  &lt;p&gt;And recycle you papers after that so you'd feel even better about the whole process :)&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-02-05T02:51:00Z" PublishedUtc="2009-02-05T02:51:00Z" ModifiedUtc="2009-02-05T02:51:00Z" />
      <TagsPart Tags="Agile" />
      <AutoroutePart Alias="time-estimation-for-user-story" UseCustomPattern="false" />
      <TitlePart Title="Time Estimation for User Story" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=keeping-automated-builds-dry" Status="Published">
      <BodyPart Text="&lt;p&gt;This is not the first time I came back to automated builds and re-evaluate how they are done. This time, I wanted to capture several things at the same time:&lt;/p&gt;  &lt;p&gt;1. Specifications and Integration tests have to reside within the same project with the SUT, so that there's no need to maintain 2 separate projects structures and keep them in sync.&lt;/p&gt;  &lt;p&gt;2. Ensure that visually we be determined if a class has Specifications or/and Integration tests (SomeClass.cs, SomeClass_Specs.cs, and SomeClass_Integration.cs)&lt;/p&gt;  &lt;p&gt;3. Reuse the existing scripts generated by VS.NET for us&lt;/p&gt;  &lt;p&gt;The last point is the key. Since VS.NET 2008 project files are actually MSBuild scripts. Good or bad, that's not important. What is important is that information about project and how to compile it already exists and we should be able to re-use it and not re-invent the wheel.&lt;/p&gt;  &lt;p&gt;NAntContrib has MSBuild task. Sadly, it says that parameter is the solution file. In reality, it can be just a single project file, after all, it's just an MSBuild script. By running this task on an MSBuild file we can get all the work done for us. What we missing, is the ability to filter out Specs and Integration tests when we don't need those. &lt;/p&gt;  &lt;p&gt;What would it look like? Example:&lt;/p&gt;  &lt;p&gt;&lt;i&gt;build &amp;#8211;D: build.production.deployment=false &lt;/i&gt;&lt;/p&gt;  &lt;p&gt;would compile all the specs/integ. Tests into the assembly&lt;/p&gt;  &lt;p&gt;&lt;i&gt;build &amp;#8211;D: build.production.deployment=true&lt;/i&gt;&lt;/p&gt;  &lt;p&gt;would not compile all the specs/integ. Tests into the assembly&lt;/p&gt;  &lt;p&gt;How this would be done?&lt;/p&gt;  &lt;p&gt;In nant script we would have something like this:&lt;/p&gt;  &lt;div&gt;   &lt;div style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;     &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   1:&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;target&lt;/span&gt; &lt;span style=&quot;color: #ff0000&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;=&amp;quot;compile.app&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #ff0000&quot;&gt;depends&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;=&amp;quot;prep&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   2:&lt;/span&gt;     &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;msbuild&lt;/span&gt; &lt;span style=&quot;color: #ff0000&quot;&gt;project&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;=&amp;quot;${app.proj}&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   3:&lt;/span&gt;       &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;property&lt;/span&gt; &lt;span style=&quot;color: #ff0000&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;=&amp;quot;Configuration&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #ff0000&quot;&gt;value&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;=&amp;quot;${build.configuration}&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   4:&lt;/span&gt;       &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;property&lt;/span&gt; &lt;span style=&quot;color: #ff0000&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;=&amp;quot;OutputPath&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #ff0000&quot;&gt;value&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;=&amp;quot;${app.compile.dir}&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   5:&lt;/span&gt;&amp;#160;&amp;#160;&amp;#160; &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;property&lt;/span&gt; &lt;span style=&quot;color: #ff0000&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;=&amp;quot;ProductionDeployment&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #ff0000&quot;&gt;value&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;=&amp;quot;${build.production.deployment}&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   6:&lt;/span&gt;     &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;msbuild&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   7:&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;target&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;In project file, we would have to &amp;#8220;filter&amp;#8221; things that are not always will go into assembly in msbuild fashion:&lt;/p&gt;&#xA;&#xA;&lt;div&gt;&#xA;  &lt;div style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   1:&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;ItemGroup&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   2:&lt;/span&gt;     &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;Compile&lt;/span&gt; &lt;span style=&quot;color: #ff0000&quot;&gt;Condition&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;=&amp;quot;$(ProductionDeployment) == 'false' &amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #ff0000&quot;&gt;Include&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;=&amp;quot;**\*_Specs.cs&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   3:&lt;/span&gt;     &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;Compile&lt;/span&gt; &lt;span style=&quot;color: #ff0000&quot;&gt;Condition&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;=&amp;quot;$(ProductionDeployment) == 'false' &amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #ff0000&quot;&gt;Include&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;=&amp;quot;**\*_Integration.cs&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   4:&lt;/span&gt;     &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;Compile&lt;/span&gt; &lt;span style=&quot;color: #ff0000&quot;&gt;Condition&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;=&amp;quot;$(ProductionDeployment) == 'false' &amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #ff0000&quot;&gt;Include&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;=&amp;quot;**\Infrastructure\Testing\*.cs&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   5:&lt;/span&gt;     &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;Compile&lt;/span&gt; &lt;span style=&quot;color: #ff0000&quot;&gt;Include&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;=&amp;quot;Properties\AssemblyInfo.cs&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   6:&lt;/span&gt;     &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;Compile&lt;/span&gt; &lt;span style=&quot;color: #ff0000&quot;&gt;Include&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;=&amp;quot;SomeComponent.cs&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   7:&lt;/span&gt;     &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;Compile&lt;/span&gt; &lt;span style=&quot;color: #ff0000&quot;&gt;Include&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;=&amp;quot;IContract.cs&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   8:&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;ItemGroup&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;This would allow Visual Studio .NET to show the files, but have a conditional compiling. Reference would follow the same route (at this point they are always copied, but the result assembly is not referencing them if we set ProductionDeployment to true), I still have to figure out how to express that properly. Not sure how to apply same condition on the &amp;lt;Reference&amp;gt; elements. Ideas?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Bottom line - nant, rake, powershell, msbuild - it's all good. What is missed is the fact that we have assets we can take advantage, and not redo things that already there.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-01-30T07:47:46Z" PublishedUtc="2014-04-19T20:33:09.2826195Z" ModifiedUtc="2009-01-30T07:47:46Z" />
      <TagsPart Tags="VS.NET" />
      <AutoroutePart Alias="keeping-automated-builds-dry" UseCustomPattern="false" />
      <TitlePart Title="Keeping Automated Builds DRY" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=factory-per-dto" Status="Published">
      <BodyPart Text="&lt;p&gt;Today one of our team members brought up a valid question - how do I know that my SUT (system uder test) packages the primitive parameters (username and password) and sends into dependency object as a DTO. Maybe instead of packaging into DTO the primitive values it packages something else by accident. The proposed solution was a dedicated Factory per each DTO (contract and implementation). For testing purpose it was great, but from the design perspective this is an absolute no-no. Lets review what we have and what we want to have.&lt;/p&gt;  &lt;p&gt;Have:&lt;/p&gt;  &lt;p&gt;- A SUT that leverages a dependency to perform a task&lt;/p&gt;  &lt;p&gt;- Communication to SUT is done with primitive types (2 strings in this case)&lt;/p&gt;  &lt;p&gt;- Dependency requires primitives to be sent as a DTO&lt;/p&gt;  &lt;p&gt;Want to have:&lt;/p&gt;  &lt;p&gt;- Test on SUT that does interaction testing with dependency&lt;/p&gt;  &lt;p&gt;- Verify that parameters provided to SUT are propagated into dependency and no surprises with that take place&lt;/p&gt;  &lt;p&gt;How to achieve what we need? We have to ensure that &lt;b&gt;whatever dependency was called with is matching what the SUT was invoked with&lt;/b&gt;. It doesn&amp;#8217;t mean we have to have a factory. Here&amp;#8217;s an example:&lt;/p&gt;  &lt;div&gt;   &lt;div style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;     &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   1:&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;using&lt;/span&gt; Library.Infrastructure;&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   2:&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;using&lt;/span&gt; Rhino.Mocks;&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   3:&lt;/span&gt;&amp;#160; &lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   4:&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;namespace&lt;/span&gt; Library&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   5:&lt;/span&gt; {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   6:&lt;/span&gt;     [Concern(&lt;span style=&quot;color: #0000ff&quot;&gt;typeof&lt;/span&gt;(ServiceContract))]&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   7:&lt;/span&gt;     &lt;span style=&quot;color: #0000ff&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;abstract&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;class&lt;/span&gt; ServiceContract_Specs : ContextSpecification&amp;lt;IServiceContract&amp;gt;&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   8:&lt;/span&gt;     {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   9:&lt;/span&gt;         &lt;span style=&quot;color: #0000ff&quot;&gt;protected&lt;/span&gt; IDomainService domainService;&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  10:&lt;/span&gt;&amp;#160; &lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  11:&lt;/span&gt;         &lt;span style=&quot;color: #0000ff&quot;&gt;protected&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;override&lt;/span&gt; IServiceContract create_system_under_test()&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  12:&lt;/span&gt;         {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  13:&lt;/span&gt;             &lt;span style=&quot;color: #0000ff&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;new&lt;/span&gt; ServiceContract(domainService);&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  14:&lt;/span&gt;         }&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  15:&lt;/span&gt;&amp;#160; &lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  16:&lt;/span&gt;         &lt;span style=&quot;color: #0000ff&quot;&gt;protected&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;override&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;void&lt;/span&gt; establish_context()&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  17:&lt;/span&gt;         {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  18:&lt;/span&gt;             system_under_test = create_system_under_test();&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  19:&lt;/span&gt;         }&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  20:&lt;/span&gt;     }&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  21:&lt;/span&gt;&amp;#160; &lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  22:&lt;/span&gt;     &lt;span style=&quot;color: #0000ff&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;class&lt;/span&gt; When_service_is_asked_to_validate_a_user_with_provided_user_name_and_password : ServiceContract_Specs&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  23:&lt;/span&gt;     {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  24:&lt;/span&gt;         &lt;span style=&quot;color: #0000ff&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;const&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;string&lt;/span&gt; username = &lt;span style=&quot;color: #006080&quot;&gt;&amp;quot;username&amp;quot;&lt;/span&gt;;&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  25:&lt;/span&gt;         &lt;span style=&quot;color: #0000ff&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;const&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;string&lt;/span&gt; password = &lt;span style=&quot;color: #006080&quot;&gt;&amp;quot;password&amp;quot;&lt;/span&gt;;&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  26:&lt;/span&gt;&amp;#160; &lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  27:&lt;/span&gt;         &lt;span style=&quot;color: #0000ff&quot;&gt;protected&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;override&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;void&lt;/span&gt; establish_context()&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  28:&lt;/span&gt;         {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  29:&lt;/span&gt;             domainService = dependency&amp;lt;IDomainService&amp;gt;();&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  30:&lt;/span&gt;             domainService.setup_result(x =&amp;gt; x.ValidateUser(Arg&amp;lt;UserDto&amp;gt;.Is.NotNull)).Return(&lt;span style=&quot;color: #0000ff&quot;&gt;true&lt;/span&gt;);&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  31:&lt;/span&gt;             &lt;span style=&quot;color: #0000ff&quot;&gt;base&lt;/span&gt;.establish_context();&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  32:&lt;/span&gt;         }&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  33:&lt;/span&gt;&amp;#160; &lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  34:&lt;/span&gt;         &lt;span style=&quot;color: #0000ff&quot;&gt;protected&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;override&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;void&lt;/span&gt; because()&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  35:&lt;/span&gt;         {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  36:&lt;/span&gt;             system_under_test.Validate(username, password);&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  37:&lt;/span&gt;         }&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  38:&lt;/span&gt;&amp;#160; &lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  39:&lt;/span&gt;         [Observation]&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  40:&lt;/span&gt;         &lt;span style=&quot;color: #0000ff&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;void&lt;/span&gt; Should_leverage_domain_service_to_validate_a_user()&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  41:&lt;/span&gt;         {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  42:&lt;/span&gt;             domainService.was_told_to(x =&amp;gt; x.ValidateUser(Arg&amp;lt;UserDto&amp;gt;.Matches(&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  43:&lt;/span&gt;                 dto =&amp;gt; userdto_details_match_username_and_password(dto))));&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  44:&lt;/span&gt;         }&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  45:&lt;/span&gt;&amp;#160; &lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  46:&lt;/span&gt;         &lt;span style=&quot;color: #0000ff&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;bool&lt;/span&gt; userdto_details_match_username_and_password(UserDto dto)&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  47:&lt;/span&gt;         {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  48:&lt;/span&gt;             &lt;span style=&quot;color: #0000ff&quot;&gt;return&lt;/span&gt; dto.Username.Equals(username) &amp;amp;&amp;amp; dto.Password.Equals(password);&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  49:&lt;/span&gt;         }&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  50:&lt;/span&gt;     }&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  51:&lt;/span&gt; }&lt;/pre&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;The underlined code is verifying what we &amp;#8220;want to have&amp;#8221; without having a factory in place. A simple predicate replaces requirement in Factory per DTO just for testing needs.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I am opened for discussions, but pretty sold on the fact that Factory per DTO is a waste of time.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Update: updated the establish_context to setup a proper result (domain service, ValidateUser behavior is returning a value). &lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-01-29T16:29:40Z" PublishedUtc="2014-04-19T20:33:09.8919795Z" ModifiedUtc="2009-01-29T16:29:40Z" />
      <TagsPart Tags="Patterns,TDD" />
      <AutoroutePart Alias="factory-per-dto" UseCustomPattern="false" />
      <TitlePart Title="Factory per DTO" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=more-effective-c-50-specific-ways-to-improve-your-c" Status="Published">
      <BodyPart Text="&lt;p&gt;This is an interesting &lt;a href=&quot;http://www.amazon.ca/More-Effective-C-Specific-Improve/dp/0321485890&quot; target=&quot;_blank&quot;&gt;book&lt;/a&gt; to read in case your reading queue is empty&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/50Ways_12973/image_2.png&quot;&gt;&lt;img style=&quot;border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px&quot; height=&quot;243&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/50Ways_12973/image_thumb.png&quot; width=&quot;186&quot; align=&quot;right&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; and you want to brush up some aspects of C# (2/3). I can't recommend this book as a general reading, as it's way too narrowed to specific subjects (or implementation of those). Saying this, I really loved the introduction into expressions and functional pieces in C#. It gives you the hint what's going on, leaving a taste of more to read. &lt;/p&gt;  &lt;p&gt;PS: Isma&amp;#235;l, thank you for letting us have it ;)&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-01-09T05:17:49Z" PublishedUtc="2009-01-09T05:17:49Z" ModifiedUtc="2009-01-09T05:17:49Z" />
      <TagsPart Tags="Books" />
      <AutoroutePart Alias="more-effective-c-50-specific-ways-to-improve-your-c" UseCustomPattern="false" />
      <TitlePart Title="More Effective C#: 50 Specific Ways to Improve Your C#" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=welcome-a-board-david" Status="Published">
      <BodyPart Text="&lt;p&gt;I am happy to welcome &lt;a href=&quot;http://davidmorgantini.blogspot.com/&quot; target=&quot;_blank&quot;&gt;David Morgantini,&lt;/a&gt; who has joined our team. Adding another solid developer into our team is definitely the right step. This is going to be an exciting journey for all of us. &lt;/p&gt;  &lt;p&gt;Good luck, David.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-01-09T05:12:44Z" PublishedUtc="2014-04-19T20:33:10.9075891Z" ModifiedUtc="2009-01-09T05:12:44Z" />
      <TagsPart Tags="Personal" />
      <AutoroutePart Alias="welcome-a-board-david" UseCustomPattern="false" />
      <TitlePart Title="Welcome a board, David!" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=quot-iteration-quot-31" Status="Published">
      <BodyPart Text="&lt;p&gt;So today is the day. I am 31 and a new iteration in my life has started. What are the features I am trying to achieve in this one? A few:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;Improve in my profession&lt;/li&gt;    &lt;ul&gt;     &lt;li&gt;Become better developer&lt;/li&gt;      &lt;li&gt;Lead by example&lt;/li&gt;   &lt;/ul&gt;    &lt;li&gt;Become more active&lt;/li&gt;    &lt;ul&gt;     &lt;li&gt;At work place&lt;/li&gt;      &lt;li&gt;Community (*)&lt;/li&gt;   &lt;/ul&gt;    &lt;li&gt;Overcome a few of my own &amp;quot;border bullies&amp;quot; that I have started to face recently, but not done yet&lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;And more than ever - &amp;quot;Never give up, never surrender&amp;quot;.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-01-09T05:08:14Z" PublishedUtc="2014-04-19T20:33:11.2200887Z" ModifiedUtc="2009-01-09T05:08:14Z" />
      <TagsPart Tags="Personal" />
      <AutoroutePart Alias="quot-iteration-quot-31" UseCustomPattern="false" />
      <TitlePart Title="&quot;Iteration&quot; 31" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=funny-post-with-a-moral" Status="Published">
      <BodyPart Text="&lt;p&gt;Davy Brion &lt;a href=&quot;http://davybrion.com/blog/2009/01/the-life-and-times-of-a-bug/&quot; target=&quot;_blank&quot;&gt;&amp;quot;The Life And Times of a Bug&amp;quot;&lt;/a&gt; post.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2009-01-02T18:20:55Z" PublishedUtc="2014-04-19T20:33:11.5950815Z" ModifiedUtc="2009-01-02T18:20:55Z" />
      <TagsPart Tags="" />
      <AutoroutePart Alias="funny-post-with-a-moral" UseCustomPattern="false" />
      <TitlePart Title="Funny Post With a Moral" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=recommended-reading" Status="Published">
      <BodyPart Text="&lt;p&gt;I was asked a question today, what books I would recommend to read. Besides the those that I have already finished and a few that are still in pipeline, anything else that would contribute to the overall improving. The current list is:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;The Pragmatic Programmer &lt;/li&gt;    &lt;li&gt;Heads First - Design Patterns &lt;/li&gt;    &lt;li&gt;Agile Principles, Patterns, and Practices in C# &lt;/li&gt;    &lt;li&gt;Working Effectively with Legacy Code &lt;/li&gt;    &lt;li&gt;Domain Driven Design &lt;/li&gt;    &lt;li&gt;CLR via C# &lt;/li&gt;    &lt;li&gt;C# 3.0 in a Nutshell: A Desktop Quick Reference &lt;/li&gt;    &lt;li&gt;Effective Java &lt;/li&gt;    &lt;li&gt;Test Driven Development &lt;/li&gt;    &lt;li&gt;Patterns of Enterprise Applications Architecture &lt;/li&gt;    &lt;li&gt;Agile Database Techniques: Effective Strategies for the Agile Software Developer &lt;/li&gt;    &lt;li&gt;Pair Programming Illuminated &lt;/li&gt;    &lt;li&gt;The Art of Agile Development &lt;/li&gt;    &lt;li&gt;Fearless Change: Patterns for Introducing New Ideas &lt;/li&gt;    &lt;li&gt;Who Moved My Cheese &lt;/li&gt;    &lt;li&gt;xUnit Test Patterns &lt;/li&gt;    &lt;li&gt;Refactoring to Patterns &lt;/li&gt;    &lt;li&gt;Analysis Patterns: Reusable Object Models &lt;/li&gt;    &lt;li&gt;Clean Code: A Handbook of Agile Software Craftsmanship &lt;/li&gt;    &lt;li&gt;Applying UML and Patterns: An Introduction to Object-Oriented Analysis and Design and Iterative Development &lt;/li&gt;    &lt;li&gt;Test-Driven Development: A Practical Guide &lt;/li&gt;    &lt;li&gt;Continuous Integration - Improving Software Quality and Reducing Risk &lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;The order doesn't really matter, though I would strongly recommend to read the first 5-6 books first, with &amp;quot;Who Moved My Cheese&amp;quot; in the middle. Other good books that you find useful - please feel free to recommend. If you are into Agile methodology, &amp;quot;The Art of Agile Development&amp;quot; and &amp;quot;Pair Programming Illuminated&amp;quot; are probably the best two starters. &lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-12-27T06:07:38Z" PublishedUtc="2014-04-19T20:33:11.8763285Z" ModifiedUtc="2008-12-27T06:07:38Z" />
      <TagsPart Tags="Books" />
      <AutoroutePart Alias="recommended-reading" UseCustomPattern="false" />
      <TitlePart Title="Recommended Reading" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=continuous-integration-book" Status="Published">
      <BodyPart Text="&lt;p&gt;First my personal impression - this book is a very good &amp;quot;business case&amp;quot; to introduce&lt;a href=&quot;http://www.amazon.ca/Continuous-Integration-Improving-Software-Reducing/dp/0321336380/&quot; target=&quot;_blank&quot;&gt;&lt;img style=&quot;border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px&quot; height=&quot;240&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/ContinuousIntegrationbook_13100/image_3.png&quot; width=&quot;181&quot; align=&quot;right&quot; border=&quot;0&quot; /&gt;&lt;/a&gt;&amp;#160; things like automated builds, CI server, DB continuous integration (loved the word CDBI), automated deployment, automated inspection - most of the things that CI leverages. It doesn't go into deep details of one or another particular technology, balancing most of examples between (mostly) Java and .NET worlds. &lt;/p&gt;  &lt;p&gt;From my personal experience, if your company doesn't practice CI in any shape or form and shows no interest in it, using excuses like &amp;quot;we deploy internally&amp;quot;, &amp;quot;our deployment consist of a few assemblies and content files&amp;quot;, or worse &amp;quot;there's no real benefit in it&amp;quot; - think twice if you are in the right place and do your math.&lt;/p&gt;  &lt;p&gt;CI is simple to start, it's free, and most of all, ROI is guaranteed. &lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-12-27T04:40:54Z" PublishedUtc="2008-12-27T04:40:54Z" ModifiedUtc="2008-12-27T04:40:54Z" />
      <TagsPart Tags="Agile,TDD" />
      <AutoroutePart Alias="continuous-integration-book" UseCustomPattern="false" />
      <TitlePart Title="Continuous Integration (book)" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=happy" Status="Published">
      <BodyPart Text="&lt;p&gt;I realized that I always forget to greet the readers. Never too late to fix it (and yes, I have a test in place to automate it from now on :)&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;&lt;font size=&quot;5&quot;&gt;Happy Chanuka, Cristmas, and New Year! &lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-12-24T21:44:03Z" PublishedUtc="2014-04-19T20:33:12.6659783Z" ModifiedUtc="2008-12-24T21:44:03Z" />
      <TagsPart Tags="" />
      <AutoroutePart Alias="happy" UseCustomPattern="false" />
      <TitlePart Title="Happy * !" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=looking-for-passionate-developers" Status="Published">
      <BodyPart Text="&lt;p&gt;Our team is growing and we are looking for passionate developers that go beyond the average. If you are looking for an environment that is all about software development, agile flavour, thinks out of Container, T/BDD spiced, .NET mixed with OSS, mapped with NHibernate, and willing to go beyond, then it's the place to join. We are located in Calgary (Canada) and will be happy to have you on board. Who is interested, can drop me a note at Feldman {dot} Sean {dot} at gmail {dot} com.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-12-16T04:27:08Z" PublishedUtc="2014-04-19T20:33:12.9472637Z" ModifiedUtc="2008-12-16T04:27:08Z" />
      <TagsPart Tags="" />
      <AutoroutePart Alias="looking-for-passionate-developers" UseCustomPattern="false" />
      <TitlePart Title="Looking for Passionate Developers" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=autumn-of-agile" Status="Published">
      <BodyPart Text="&lt;p&gt;Stephen A. Bohlen has started a great series of &lt;a href=&quot;http://www.autumnofagile.net/&quot; target=&quot;_blank&quot;&gt;screencasts&lt;/a&gt;. You should definitely check it out if you are into Agile and the rest. The work is really done well, so donate!&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-12-14T08:54:06Z" PublishedUtc="2014-04-19T20:33:13.2597211Z" ModifiedUtc="2008-12-14T08:54:06Z" />
      <TagsPart Tags="Agile" />
      <AutoroutePart Alias="autumn-of-agile" UseCustomPattern="false" />
      <TitlePart Title="Autumn Of Agile" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=test-driven-development-a-practical-guide" Status="Published">
      <BodyPart Text="&lt;p&gt;This &lt;a href=&quot;http://www.amazon.ca/Test-Driven-Development-Practical-David-Astels/dp/0131016490/ref=sr_1_1?ie=UTF8&amp;amp;s=books&amp;amp;qid=1229239268&amp;amp;sr=8-1&quot; target=&quot;_blank&quot;&gt;book&lt;/a&gt; is a bit outdated (published in 2003, probably written in 2002), but still one of the best practical&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/TestDrivenDevelopmentAPracticalGuide_947/image_2.png&quot;&gt;&lt;img style=&quot;border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px&quot; height=&quot;214&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/TestDrivenDevelopmentAPracticalGuide_947/image_thumb.png&quot; width=&quot;162&quot; align=&quot;right&quot; border=&quot;0&quot; /&gt;&lt;/a&gt;&amp;#160; examples of what TDD is all about. It talks about unit testing, mocking, integration testing. I am definitely putting this one on my recommended readings list. The part I loved is that the author takes readers from zero to an application implementing not just the back logic, but also the UI, all TDD done. The nice transition from state testing to mocking was very well performed, and in MHO one of the best I have seen so far in books.&amp;#160; &lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-12-14T07:36:42Z" PublishedUtc="2008-12-14T07:36:42Z" ModifiedUtc="2008-12-14T07:36:42Z" />
      <TagsPart Tags="Books" />
      <AutoroutePart Alias="test-driven-development-a-practical-guide" UseCustomPattern="false" />
      <TitlePart Title="Test-Driven Development: A Practical Guide" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=quot-hello-world-quot-tdd-style" Status="Published">
      <BodyPart Text="&lt;p&gt;A friend of mine told me, &amp;quot;what you know and what seems to as trivial, might be completely new to someone else&amp;quot;. So I am trying to remember this, and once again the simple life wisdom proved to be correct. One of our team members had to be away while the team was conquering T/BDD and unit testing. As a result, he stayed a little behind, and as catch up exercise, we pared on a very simple problem, Calculator, another version of the classical &amp;quot;Hello World&amp;quot;. Maybe this will help someone someday.&lt;/p&gt;  &lt;p&gt;Calculator is capable of adding to numbers and return the result. Each time calculator performs an operation like Add, it should log it. Lets break it down&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;&lt;em&gt;Calculator&lt;/em&gt; is the contract we are defining for creation. The component that will implement it is going to be the &lt;em&gt;system under test&lt;/em&gt;. There is exactly one specification at this point, that &lt;em&gt;Calculator &lt;/em&gt;is performing &lt;em&gt;Add &lt;/em&gt;operation.&amp;#160; We also have a few observations, such as &amp;quot;should&amp;#160; add two numbers together and return the result&amp;quot;, and &amp;quot;should log the operation&amp;quot;. Visually (personally, I am an extremely visual person and need to visualize a lot) it look like this:&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/HelloWorldBDDStyle_132D7/image_2.png&quot;&gt;&lt;img style=&quot;border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px&quot; height=&quot;91&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/HelloWorldBDDStyle_132D7/image_thumb.png&quot; width=&quot;532&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;Our contract is simple. Do I start implementation just because I know precisely how it's going to be implemented? No. Why not? What's so difficult about adding two numbers and giving back the result?! (Normally it will sound like you trying to insult a person who's supposed to follow these steps). But wait till the end, we'll come back to this again. &lt;/p&gt;  &lt;p&gt;Lets start the test, shall we? The test will drive out everything. Prior to this, I would like to mention&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/HelloWorldBDDStyle_132D7/image_6.png&quot;&gt;&lt;img style=&quot;border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px&quot; height=&quot;216&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/HelloWorldBDDStyle_132D7/image_thumb_2.png&quot; width=&quot;225&quot; align=&quot;right&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; how we as a team setup our environment, so development is streamlined and templated (no unnecessary friction). Normally, there will be a Build project to contain any utilities, 3rd party components, tools, etc. The rest are the code projects. Ad a team, we concluded that having separate test projects adds too much of a maintenance and can be eliminated by keeping tests along with the tested code. To differentiate between production code and test code we use naming conventions that allow easy filtering at sooner time by automated build script. Specifications for a single component are all locked under the &amp;quot;hood&amp;quot; of a single file - &lt;em&gt;CoponentName&lt;/em&gt;_Specs. This allows very quick visual separation between the test code and the 'normal' code. It's also allows a better association between what is tested and where are the tests reside.&lt;/p&gt;  &lt;p&gt;In order to create tests with less friction, we have our &amp;quot;abstraction&amp;quot; of testing tools (using MbUnit, Rhino.Mocks). Normally those are grouped in a sub-folder under &lt;em&gt;Infrastructure&lt;/em&gt;.&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/HelloWorldBDDStyle_132D7/image_8.png&quot;&gt;&lt;img style=&quot;border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px&quot; height=&quot;132&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/HelloWorldBDDStyle_132D7/image_thumb_3.png&quot; width=&quot;215&quot; align=&quot;right&quot; border=&quot;0&quot; /&gt;&lt;/a&gt;ConcernAttribute - used for documentation generation (specs extraction)&lt;/p&gt;  &lt;p&gt;AssertionExtensions - abstraction of MbUnit (also syntactical sugar)&lt;/p&gt;  &lt;p&gt;RhinoMocksExtensions - abstraction of Rhino.Mocks (similar to above)&lt;/p&gt;  &lt;p&gt;StaticContextSpecification - base specification class to create a framework for all the tests&lt;/p&gt;  &lt;p&gt;ContextSpecification - extension of &lt;em&gt;StaticContextSpecification&lt;/em&gt; for Contract driven tests&lt;/p&gt;  &lt;p&gt;TimeBomb - a necessary evil we had to have to postpone a test implementation till a certain date/time&lt;/p&gt;  &lt;p&gt;TimeBomb_Specs - everything has to have a test...&lt;/p&gt;  &lt;p&gt;Now that we have seen what the &amp;quot;framework is&amp;quot; we know it's no more than just a few things that will save us typing time. The most interesting ones are &lt;em&gt;StaticContextSpecification&lt;/em&gt; and &lt;em&gt;ContextSpecification.&lt;/em&gt;&lt;/p&gt;  &lt;div&gt;   &lt;div style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;     &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   1:&lt;/span&gt; [TestFixture]&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   2:&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;abstract&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;class&lt;/span&gt; StaticContextSpecification&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   3:&lt;/span&gt; {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   4:&lt;/span&gt;     [SetUp]&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   5:&lt;/span&gt;     &lt;span style=&quot;color: #0000ff&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;void&lt;/span&gt; setup()&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   6:&lt;/span&gt;     {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   7:&lt;/span&gt;         establish_context();&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   8:&lt;/span&gt;         because();&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   9:&lt;/span&gt;     }&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  10:&lt;/span&gt;&amp;#160; &lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  11:&lt;/span&gt;     [TearDown]&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  12:&lt;/span&gt;     &lt;span style=&quot;color: #0000ff&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;void&lt;/span&gt; tear_down()&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  13:&lt;/span&gt;     {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  14:&lt;/span&gt;         after_each_specification();&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  15:&lt;/span&gt;     }&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  16:&lt;/span&gt;&amp;#160; &lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  17:&lt;/span&gt;     &lt;span style=&quot;color: #0000ff&quot;&gt;protected&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;abstract&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;void&lt;/span&gt; because();&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  18:&lt;/span&gt;     &lt;span style=&quot;color: #0000ff&quot;&gt;protected&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;abstract&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;void&lt;/span&gt; establish_context();&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  19:&lt;/span&gt;     &lt;span style=&quot;color: #0000ff&quot;&gt;protected&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;virtual&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;void&lt;/span&gt; after_each_specification()&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  20:&lt;/span&gt;     {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  21:&lt;/span&gt;     }&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  22:&lt;/span&gt;&amp;#160; &lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  23:&lt;/span&gt;     &lt;span style=&quot;color: #0000ff&quot;&gt;protected&lt;/span&gt; InterfaceType dependency&amp;lt;InterfaceType&amp;gt;()&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  24:&lt;/span&gt;     {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  25:&lt;/span&gt;         &lt;span style=&quot;color: #0000ff&quot;&gt;return&lt;/span&gt; MockRepository.&lt;strong&gt;&lt;u&gt;GenerateStub&lt;/u&gt;&lt;/strong&gt;&amp;lt;InterfaceType&amp;gt;();&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  26:&lt;/span&gt;     }&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  27:&lt;/span&gt; }&lt;/pre&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;Some use for dependency Mock, our team has reached the conclusion that by default we should be using Stub, and only in cases when it's really needed turn to Mock. See &lt;a href=&quot;http://ayende.com/Wiki/Default.aspx?Page=Rhino+Mocks+3.5&amp;amp;AspxAutoDetectCookieSupport=1&quot; target=&quot;_blank&quot;&gt;documentation&lt;/a&gt; provided by Oren Eini on this.&lt;/p&gt;&#xA;&#xA;&lt;div&gt;&#xA;  &lt;div style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   1:&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;abstract&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;class&lt;/span&gt; ContextSpecification&amp;lt;SystemUnderTestType&amp;gt; : StaticContextSpecification&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   2:&lt;/span&gt; {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   3:&lt;/span&gt;     &lt;span style=&quot;color: #0000ff&quot;&gt;protected&lt;/span&gt; SystemUnderTestType system_under_test;&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   4:&lt;/span&gt;&amp;#160; &lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   5:&lt;/span&gt;     &lt;span style=&quot;color: #0000ff&quot;&gt;protected&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;abstract&lt;/span&gt; SystemUnderTestType create_system_under_test();&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   6:&lt;/span&gt; }&lt;/pre&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;All the underscores is an adopted style quiet popular among TDD/BDD practitioners and frankly speaking feels extremely natural once you get used to the concept &lt;strong&gt;AND&lt;/strong&gt; get to know about &lt;a href=&quot;http://www.autohotkey.com/&quot; target=&quot;_blank&quot;&gt;AutoHotKey&lt;/a&gt; utility and how to use it in conjunction with test-related names. &lt;a href=&quot;http://stevenharman.net/blog/archive/2008/06/07/save-your-fingers-use-a-bdd-autohotkey-script.aspx&quot; target=&quot;_blank&quot;&gt;Steven Harman&lt;/a&gt; has a good post about it. (Isma&amp;#235;l, hold on, I am almost done with the script for your name:)&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/HelloWorldBDDStyle_132D7/image_10.png&quot;&gt;&lt;img style=&quot;border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px&quot; height=&quot;133&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/HelloWorldBDDStyle_132D7/image_thumb_4.png&quot; width=&quot;419&quot; align=&quot;right&quot; border=&quot;0&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Lets get to the business - specification for calculator. First - definition of concern. &lt;a href=&quot;http://www.jetbrains.com/resharper/&quot; target=&quot;_blank&quot;&gt;ReSharper&lt;/a&gt; is the tool you have to use. No ReSharper (R#), no deal. You can try something else, and if you find better, let me know. So far this is #1 for our team.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&amp;#160;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Remember we said that test will drive everything, even if it's a dead simple task - so it's happening. Since we specified the concern, R# will assist us to create it. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/HelloWorldBDDStyle_132D7/image_14.png&quot;&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/HelloWorldBDDStyle_132D7/image_12.png&quot;&gt;&lt;img style=&quot;border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px&quot; height=&quot;113&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/HelloWorldBDDStyle_132D7/image_thumb_5.png&quot; width=&quot;244&quot; align=&quot;left&quot; border=&quot;0&quot; /&gt;&lt;/a&gt;&lt;img style=&quot;border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px&quot; height=&quot;93&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/HelloWorldBDDStyle_132D7/image_thumb_6.png&quot; width=&quot;548&quot; border=&quot;0&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&amp;#160;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The testing framework we put in place will ensure that the contract for the component we are concerned about is generated as well, forcing the component to implement that specific contract. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;&amp;#160;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/HelloWorldBDDStyle_132D7/image_16.png&quot;&gt;&lt;img style=&quot;border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px&quot; height=&quot;157&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/HelloWorldBDDStyle_132D7/image_thumb_7.png&quot; width=&quot;494&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/HelloWorldBDDStyle_132D7/image_18.png&quot;&gt;&lt;img style=&quot;border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px&quot; height=&quot;54&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/HelloWorldBDDStyle_132D7/image_thumb_8.png&quot; width=&quot;274&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;/p&gt;&#xA;&#xA;&lt;p&gt;This is great! Now system_under_test is always expressed by the contract. Anything we define/do on it, is affecting the contract, driving out the design of the component that implements it. I.e., we shape the contract to make it usable and well designed, and component is just the implementation of that contract.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/HelloWorldBDDStyle_132D7/image_24.png&quot;&gt;&lt;img style=&quot;border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px&quot; height=&quot;80&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/HelloWorldBDDStyle_132D7/image_thumb_11.png&quot; width=&quot;403&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Establishing context at this point is very simple. Though, this code smells a bit and it probably will be replicated multiple times for each specification. We will refactor it later, so this becomes an optionaltemplate method with default behavior to instantiate &lt;em&gt;system_under_test&lt;/em&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/HelloWorldBDDStyle_132D7/image_26.png&quot;&gt;&lt;img style=&quot;border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px&quot; height=&quot;75&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/HelloWorldBDDStyle_132D7/image_thumb_12.png&quot; width=&quot;277&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/HelloWorldBDDStyle_132D7/image_30.png&quot;&gt;&lt;img style=&quot;border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px&quot; height=&quot;80&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/HelloWorldBDDStyle_132D7/image_thumb_14.png&quot; width=&quot;441&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Why we are going to have an observation? &lt;strong&gt;Because &lt;/strong&gt;some behavior on &lt;em&gt;system_under_test &lt;/em&gt;has happened. Again, &lt;em&gt;Add&lt;/em&gt; behavior is not defined. We will add it leveraging R#, and this will go into the Contract, not the implementation. But contract will force implementer to have it as well.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/HelloWorldBDDStyle_132D7/image_32.png&quot;&gt;&lt;img style=&quot;border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px&quot; height=&quot;144&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/HelloWorldBDDStyle_132D7/image_thumb_15.png&quot; width=&quot;454&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;/p&gt;&#xA;&#xA;&lt;p&gt;And this is where it's shockingly simple and yet confusing a lot, we don't implement the behavior and let the exception be thrown. Why? The test should fail, then be fixed. Red-Green-Refactor. That's the rhythm, and it's good. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/HelloWorldBDDStyle_132D7/image_34.png&quot;&gt;&lt;img style=&quot;border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px&quot; height=&quot;132&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/HelloWorldBDDStyle_132D7/image_thumb_16.png&quot; width=&quot;485&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;/p&gt;&#xA;&#xA;&lt;p&gt; To someone who's not used to this it looks ridiculous. &amp;quot;Why would someone do this silly thing when I know exactly what to return - what's the point&amp;quot;. The point that every complex thing starts from something simple. We are not just creating tests here, we are documenting the code, shaping our architecture, go through the issues from the user perspective (usability). It might look like a wasted effort at this point, but down the road it pays off big time. OK, lets refactor &lt;em&gt;result &lt;/em&gt;to be a member field, rename the specification to something that is more meaningful than &lt;em&gt;Calculator_Specs&lt;/em&gt;, such as &amp;quot;&lt;em&gt;When_calculator_is_asked_to_add_two_numbers&lt;/em&gt;&amp;quot;, and define an observation (Our team uses Gallio addon for Visual Studio.NET to run the tests and unfortunately, ObservationAttribute is not picked up by Gallio as we haven't found what in MbUnit v3 would be equivevalent to the TestPatternAttribute&amp;#160; from MbUnit v2.4. In case you know the solution, would appreciate your help)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/HelloWorldBDDStyle_132D7/image_38.png&quot;&gt;&lt;img style=&quot;border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px&quot; height=&quot;101&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/HelloWorldBDDStyle_132D7/image_thumb_18.png&quot; width=&quot;423&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Lets run the test&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/HelloWorldBDDStyle_132D7/image_40.png&quot;&gt;&lt;img style=&quot;border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px&quot; height=&quot;78&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/HelloWorldBDDStyle_132D7/image_thumb_19.png&quot; width=&quot;726&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;/p&gt;&#xA;&#xA;&lt;p&gt;It fails - good. What's good? Is that we need to 'fix' it, i.e. implement and bring to the green. We also keep in mind that we do the simplest thing to pass. This is so tough on people who are absolutely new to the testing, to the point where you sit in front of the line to implement, overwhelmed with all the going on,&amp;#160; thinking that there must be a catch, it's not as simple as it seems. I loved this type of exercise JP gave at his &lt;a href=&quot;http://blog.jpboodhoo.com/SoWhatDoPastStudentsReallyThinkAboutNothinButNet.aspx&quot; target=&quot;_blank&quot;&gt;course&lt;/a&gt;. BTW, if you haven't heard about Nothin But .NET bootcamp, you are living a life or a mort. Google it, save for it, and do it. Regardless of your skills level, you will NOT regret. And yes, you get your money back in a HUGE satisfaction after and a complete change in how you do things for better. Especially if you are getting tired of development because it just &amp;quot;doesn't&amp;#160; do it to you&amp;quot; as it used before - get your second breath and self re-invention at his course. So simple thing first...&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/HelloWorldBDDStyle_132D7/image_42.png&quot;&gt;&lt;img style=&quot;border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px&quot; height=&quot;83&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/HelloWorldBDDStyle_132D7/image_thumb_20.png&quot; width=&quot;474&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Run the test - green. Good. Is it? Let's break in the simplest possible way (not that it's hard).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/HelloWorldBDDStyle_132D7/image_44.png&quot;&gt;&lt;img style=&quot;border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px&quot; height=&quot;81&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/HelloWorldBDDStyle_132D7/image_thumb_21.png&quot; width=&quot;746&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/HelloWorldBDDStyle_132D7/image_46.png&quot;&gt;&lt;img style=&quot;border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px&quot; height=&quot;25&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/HelloWorldBDDStyle_132D7/image_thumb_22.png&quot; width=&quot;339&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Breaking. But wait a second, what is breaking? No, not the &lt;em&gt;system_under_test&lt;/em&gt;, it's our test is wrong. The lesson is that tests have to be clean and simple, or they are not a tool to assist, but another impediment in the future, and eventually destined to be abandoned. How about extracting those magical numbers with constants?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/HelloWorldBDDStyle_132D7/image_48.png&quot;&gt;&lt;img style=&quot;border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px&quot; height=&quot;137&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/HelloWorldBDDStyle_132D7/image_thumb_23.png&quot; width=&quot;743&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Re-running the test will still be breaking, but now we are a 100% confident that this is the &lt;em&gt;system_under_test &lt;/em&gt;that is breaking. Lets fix it.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/HelloWorldBDDStyle_132D7/image_50.png&quot;&gt;&lt;img style=&quot;border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px&quot; height=&quot;79&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/HelloWorldBDDStyle_132D7/image_thumb_24.png&quot; width=&quot;472&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Passing again and now we know it's not a hard-coded value, but actual calculation. This is our first observation for this specification that exercises state based testing of the component.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;How about the second one, &amp;quot;&lt;em&gt;Should_log_the_operation&lt;/em&gt;&amp;quot;? Now we getting more into Dependency Injection and interaction testing. We don't want to create the actual logger, but we want to shape and form the contract and verify our &lt;em&gt;Calculator&lt;/em&gt; works with the logger the way we will design it. A mocking library is a must at this point. Logger is a &lt;em&gt;dependency&lt;/em&gt; to the &lt;em&gt;Calculator&lt;/em&gt;. We shall inject it upon creation of &lt;em&gt;Calculator&lt;/em&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/HelloWorldBDDStyle_132D7/image_52.png&quot;&gt;&lt;img style=&quot;border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px&quot; height=&quot;123&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/HelloWorldBDDStyle_132D7/image_thumb_25.png&quot; width=&quot;506&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Once again, because we are doing this from test, we will be forced to define a contract for our logger,&lt;em&gt; ISomeLogger&lt;/em&gt;, and refactor the constructor of &lt;em&gt;Calculator&lt;/em&gt; to be able to accept it.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/HelloWorldBDDStyle_132D7/image_54.png&quot;&gt;&lt;img style=&quot;border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px&quot; height=&quot;153&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/HelloWorldBDDStyle_132D7/image_thumb_26.png&quot; width=&quot;331&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Again it seems obvious what has to be done, but fight the tempt of doing the evil, resist it and go back to the test. Why? Because we want to document, we want to make sure that it fails first and our implementation is based on the test, and not vice versa, to shape the logger contract before we anything else. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/HelloWorldBDDStyle_132D7/image_56.png&quot;&gt;&lt;img style=&quot;border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px&quot; height=&quot;124&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/HelloWorldBDDStyle_132D7/image_thumb_27.png&quot; width=&quot;359&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;/p&gt;&#xA;&#xA;&lt;p&gt;We also setup and expectation that logger will be used and it's &lt;em&gt;Log&lt;/em&gt; method will be called with a parameter &amp;quot;add&amp;quot;. This is probably the best documentation I, personally, have seen ever done for a code. This is one of so many reasons why you want to have the tests in place. So we run it and it fails. Why?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/HelloWorldBDDStyle_132D7/image_58.png&quot;&gt;&lt;img style=&quot;border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px&quot; height=&quot;52&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/HelloWorldBDDStyle_132D7/image_thumb_28.png&quot; width=&quot;315&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Error massage shows us that &amp;quot;System.InvalidOperationException: The object '' is not a mocked object.&amp;quot; - Ops, right, we are passing in &lt;em&gt;logger, &lt;/em&gt;into &lt;em&gt;Calculator &lt;/em&gt;constructor, but it's nothing. It's our dependency, let's stub it.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/HelloWorldBDDStyle_132D7/image_60.png&quot;&gt;&lt;img style=&quot;border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px&quot; height=&quot;95&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/HelloWorldBDDStyle_132D7/image_thumb_29.png&quot; width=&quot;475&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Fails again, but now the error message gives us direction to the next step that we are supposed to take &amp;quot;Rhino.Mocks.Exceptions.ExpectationViolationException: &lt;u&gt;Expected that ISomeLogger.Log(&amp;quot;add&amp;quot;); would be called, but it was not found on the actual calls made on the mocked object.&lt;/u&gt;&amp;quot;. Let's fix it and run the tests again.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/HelloWorldBDDStyle_132D7/image_62.png&quot;&gt;&lt;img style=&quot;border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px&quot; height=&quot;98&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/HelloWorldBDDStyle_132D7/image_thumb_30.png&quot; width=&quot;474&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;/p&gt;&#xA;&#xA;&lt;p&gt;This time the assertion passes and tests are all green.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/HelloWorldBDDStyle_132D7/image_64.png&quot;&gt;&lt;img style=&quot;border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px&quot; height=&quot;51&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/HelloWorldBDDStyle_132D7/image_thumb_31.png&quot; width=&quot;310&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;/p&gt;&#xA;&#xA;&lt;p&gt;This observation was an interaction based test. We were not trying to define how logger will get implemented, we deferred that till the last possible moment. Did just enough to get this going - a contract. Implementation will depend on actual requirements. &lt;em&gt;Calculator&lt;/em&gt; is capable of logging, we ensured well enough that it's documented and traceable in case &lt;em&gt;Calculator &lt;/em&gt;changes introduce some breaking code.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Now the problem of creating system_under_test and establishing context - that can be refactored to remove the smell and remove code duplication:&lt;/p&gt;&#xA;&#xA;&lt;div style=&quot;border-right: gray 1px solid; padding-right: 4px; border-top: gray 1px solid; padding-left: 4px; font-size: 8pt; padding-bottom: 4px; margin: 20px 0px 10px; overflow: auto; border-left: gray 1px solid; width: 97.5%; cursor: text; max-height: 200px; line-height: 12pt; padding-top: 4px; border-bottom: gray 1px solid; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; background-color: #f4f4f4&quot;&gt;&#xA;  &lt;div style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   1:&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;abstract&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;class&lt;/span&gt; context_for_calculator : ContextSpecification&amp;lt;ICalculator&amp;gt;&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   2:&lt;/span&gt; {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   3:&lt;/span&gt;     &lt;span style=&quot;color: #0000ff&quot;&gt;protected&lt;/span&gt; ISomeLogger logger;&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   4:&lt;/span&gt;&amp;#160; &lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   5:&lt;/span&gt;     &lt;span style=&quot;color: #0000ff&quot;&gt;protected&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;override&lt;/span&gt; ICalculator create_system_under_test()&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   6:&lt;/span&gt;     {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   7:&lt;/span&gt;         logger = dependency&amp;lt;ISomeLogger&amp;gt;();&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   8:&lt;/span&gt;         &lt;span style=&quot;color: #0000ff&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;new&lt;/span&gt; Calculator(logger);&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   9:&lt;/span&gt;     }&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  10:&lt;/span&gt;&amp;#160; &lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  11:&lt;/span&gt;     &lt;span style=&quot;color: #0000ff&quot;&gt;protected&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;override&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;void&lt;/span&gt; establish_context()&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  12:&lt;/span&gt;     {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  13:&lt;/span&gt;         system_under_test = create_system_under_test();&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  14:&lt;/span&gt;     }&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  15:&lt;/span&gt; }&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  16:&lt;/span&gt;&amp;#160; &lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  17:&lt;/span&gt; [Concern(&lt;span style=&quot;color: #0000ff&quot;&gt;typeof&lt;/span&gt;(Calculator))]&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  18:&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;class&lt;/span&gt; When_calculator_is_asked_to_add_two_numbers : context_for_calculator&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  19:&lt;/span&gt; {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  20:&lt;/span&gt;     &lt;span style=&quot;color: #0000ff&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;const&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;double&lt;/span&gt; first_number = 8.0;&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  21:&lt;/span&gt;     &lt;span style=&quot;color: #0000ff&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;const&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;double&lt;/span&gt; second_number = 3.0;&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  22:&lt;/span&gt;     &lt;span style=&quot;color: #0000ff&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;const&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;double&lt;/span&gt; sum_of_first_number_and_second_number = first_number + second_number;&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  23:&lt;/span&gt;     &lt;span style=&quot;color: #0000ff&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;double&lt;/span&gt; result;&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  24:&lt;/span&gt;     &lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  25:&lt;/span&gt;     &lt;span style=&quot;color: #0000ff&quot;&gt;protected&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;override&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;void&lt;/span&gt; because()&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  26:&lt;/span&gt;     {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  27:&lt;/span&gt;         result = system_under_test.Add(first_number, second_number);&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  28:&lt;/span&gt;     }&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  29:&lt;/span&gt;&amp;#160; &lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  30:&lt;/span&gt;     [Test]&lt;span style=&quot;color: #008000&quot;&gt;//[Observation]&lt;/span&gt;&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  31:&lt;/span&gt;     &lt;span style=&quot;color: #0000ff&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;void&lt;/span&gt; Should_return_the_sum_of_two_numbers()&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  32:&lt;/span&gt;     {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  33:&lt;/span&gt;         result.should_be_equal_to(sum_of_first_number_and_second_number);&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  34:&lt;/span&gt;     }&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  35:&lt;/span&gt;&amp;#160; &lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  36:&lt;/span&gt;     [Test]&lt;span style=&quot;color: #008000&quot;&gt;//[Observation]&lt;/span&gt;&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  37:&lt;/span&gt;     &lt;span style=&quot;color: #0000ff&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;void&lt;/span&gt; Should_log_the_operation()&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  38:&lt;/span&gt;     {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  39:&lt;/span&gt;         logger.was_told_to(l =&amp;gt; l.Log(&lt;span style=&quot;color: #006080&quot;&gt;&amp;quot;add&amp;quot;&lt;/span&gt;));&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  40:&lt;/span&gt;     }&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  41:&lt;/span&gt; }&lt;/pre&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;Now another member of the team, &lt;a href=&quot;http://www.connicus.com/&quot; target=&quot;_blank&quot;&gt;Terry&lt;/a&gt;, looks at it and says &amp;quot;ahh, now it feels good&amp;quot;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&amp;#160;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I hope this was helpful to someone who's trying to make any sense out of testing. It is funny how I was telling my son again and again to my 5 years old son &amp;quot;do one thing at a time, but do it well&amp;quot;, when myself was not following this basic rule. Test one thing at a time, and test it well. This will lead you to the system that is written in such a manner you will enjoy working with it, regardless how difficult the domain problem is.&lt;/p&gt;&#xA;&#xA;&lt;div class=&quot;wlWriterSmartContent&quot; id=&quot;scid:fb3a1972-4489-4e52-abe7-25a00bb07fdf:5130d332-17c2-4604-b740-b681f0769091&quot; style=&quot;padding-right: 0px; display: inline; padding-left: 0px; padding-bottom: 0px; margin: 0px; padding-top: 0px&quot;&gt;&lt;p&gt; &lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/HelloWorldBDDStyle_132D7/CalculatorSpike_1.zip&quot; target=&quot;_blank&quot;&gt;Code for download&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-12-13T04:49:14Z" PublishedUtc="2008-12-13T04:49:14Z" ModifiedUtc="2008-12-13T04:49:14Z" />
      <TagsPart Tags="TDD" />
      <AutoroutePart Alias="quot-hello-world-quot-tdd-style" UseCustomPattern="false" />
      <TitlePart Title="&quot;Hello World&quot; TDD Style" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=first-milestone" Status="Published">
      <BodyPart Text="&lt;p&gt;I learned from a wise man that celebrating small successes as important as the having big one, if not even more. So today I would like to thank my team for the effort they made in such a short period of time and with a quiet a steep learning curve they had to go through. One picture is worth a thousand words.&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/FirstMilestone_FE74/image_2.png&quot;&gt;&lt;img style=&quot;border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px&quot; height=&quot;78&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/FirstMilestone_FE74/image_thumb.png&quot; width=&quot;800&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;Some statistics:&lt;/p&gt;  &lt;p&gt;Project size - small&lt;/p&gt;  &lt;p&gt;Project form scratch to functional all T/BDD time - 2 weeks*&lt;/p&gt;  &lt;p&gt;Team - no TDD, no principles, no solid OO till about 3 months only&lt;/p&gt;  &lt;p&gt;Components - web components, windows service component&lt;/p&gt;  &lt;p&gt;OSS projects used - NHibernate&lt;/p&gt;  &lt;p&gt;Testing frameworks used - MbUnit 3, Rhino.Mocks 3.5, WatiN 2&lt;/p&gt;  &lt;p&gt;Testing performed - unit, integration (load is &lt;font color=&quot;#ff0000&quot;&gt;not &lt;/font&gt;there yet, but I am sure next iteration it will)&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;* we literally started from absolutely nothing, bringing no code from existing projects.&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;Great work team!&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-12-13T01:04:18Z" PublishedUtc="2008-12-13T01:04:18Z" ModifiedUtc="2008-12-13T01:04:18Z" />
      <TagsPart Tags="Agile,TDD" />
      <AutoroutePart Alias="first-milestone" UseCustomPattern="false" />
      <TitlePart Title="First Milestone" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=c-3-0-r-great-tests-readability" Status="Published">
      <BodyPart Text="&lt;p&gt;C# 3.0 has introduced lots of great features to make our life easier and syntax sweeter. Lots of people talked about it already, and I am not scooping here anything new. What I do want to demonstrate, is how to make the code easier to understand.&lt;/p&gt;  &lt;p&gt;Confession is that I am relying on a tool to help me achieve what I will demonstrate – &lt;a href=&quot;http://www.jetbrains.com/resharper/&quot; mce_href=&quot;http://www.jetbrains.com/resharper/&quot; target=&quot;_blank&quot;&gt;ReSharper&lt;/a&gt;. Not only it’s a great refactoring tool, but an excellent guide to C# 3.0 features (and not only). So lets roll to an example.&lt;/p&gt;  &lt;p&gt;The test is trying to confirm that whatever path is being returned by system under test (SUT) is ending with either “\bin”, “\debug”, or “\release”. Normally, this is what I would write:&lt;/p&gt;  &lt;div style=&quot;border: 1px solid gray; margin: 20px 0px 10px; padding: 4px; overflow: auto; font-size: 8pt; width: 97.5%; cursor: text; max-height: 200px; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;   &lt;div style=&quot;border-style: none; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;     &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   1:&lt;/span&gt; [Test]&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   2:&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;void&lt;/span&gt; Should_return_the_path_represented_by_system_as_a_BaseDirectory()&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   3:&lt;/span&gt; {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   4:&lt;/span&gt;     var isMatching = result.path.EndsWith(&lt;span style=&quot;color: rgb(0, 96, 128);&quot;&gt;@&quot;\bin&quot;&lt;/span&gt;, StringComparison.InvariantCultureIgnoreCase)&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   5:&lt;/span&gt;                    || result.EndsWith(&lt;span style=&quot;color: rgb(0, 96, 128);&quot;&gt;@&quot;\debug&quot;&lt;/span&gt;, StringComparison.InvariantCultureIgnoreCase)&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   6:&lt;/span&gt;                    || result.EndsWith(&lt;span style=&quot;color: rgb(0, 96, 128);&quot;&gt;@&quot;\release&quot;&lt;/span&gt;, StringComparison.InvariantCultureIgnoreCase);&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   7:&lt;/span&gt;     Assert.IsTrue(isMatching);&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   8:&lt;/span&gt; }&lt;/pre&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;Way too chatty. The whole EndsWith is more of a distraction, rather than help.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Next step – introduce an Extension Method that would encapsulate testing. One option would be to write a method that takes boolean and asserts.&lt;/p&gt;&#xA;&#xA;&lt;div style=&quot;border: 1px solid gray; margin: 20px 0px 10px; padding: 4px; overflow: auto; font-size: 8pt; width: 97.5%; cursor: text; max-height: 200px; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&#xA;  &lt;div style=&quot;border-style: none; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   1:&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;void&lt;/span&gt; should_be_true(&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;this&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;bool&lt;/span&gt; item)&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   2:&lt;/span&gt; {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   3:&lt;/span&gt;    Assert.IsTrue(item);&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   4:&lt;/span&gt; }&lt;/pre&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;Then the code would read a bit more descriptive, but still with lots of ‘noise’.&lt;/p&gt;&#xA;&#xA;&lt;div style=&quot;border: 1px solid gray; margin: 20px 0px 10px; padding: 4px; overflow: auto; font-size: 8pt; width: 97.5%; cursor: text; max-height: 200px; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&#xA;  &lt;div style=&quot;border-style: none; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   1:&lt;/span&gt; isMatching.should_be_true(result.EndsWith(...) || (...) || (...));&lt;/pre&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;Not nice :) Another way is to have an extension method accepting a Func&amp;lt;T, bool&amp;gt; and leverage method group&lt;/p&gt;&#xA;&#xA;&lt;div style=&quot;border: 1px solid gray; margin: 20px 0px 10px; padding: 4px; overflow: auto; font-size: 8pt; width: 97.5%; cursor: text; max-height: 200px; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&#xA;  &lt;div style=&quot;border-style: none; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   1:&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;void&lt;/span&gt; should_be&amp;lt;T&amp;gt;(&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;this&lt;/span&gt; T item, Func&amp;lt;T, &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;bool&lt;/span&gt;&amp;gt; evalueationWith)&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   2:&lt;/span&gt; {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   3:&lt;/span&gt;      Assert.IsTrue(evalueationWith(item));&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   4:&lt;/span&gt; }&lt;/pre&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;To escape the ‘noise’ I do what have described in the &lt;a href=&quot;http://weblogs.asp.net/sfeldman/archive/2008/11/29/test-helpers-and-fluent-interfaces.aspx&quot; mce_href=&quot;http://weblogs.asp.net/sfeldman/archive/2008/11/29/test-helpers-and-fluent-interfaces.aspx&quot; target=&quot;_blank&quot;&gt;previous post&lt;/a&gt; (Test Helper with Fluent Interface).&lt;/p&gt;&#xA;&#xA;&lt;div style=&quot;border: 1px solid gray; margin: 20px 0px 10px; padding: 4px; overflow: auto; font-size: 8pt; width: 97.5%; cursor: text; max-height: 200px; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&#xA;  &lt;div style=&quot;border-style: none; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   1:&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;class&lt;/span&gt; True&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   2:&lt;/span&gt; {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   3:&lt;/span&gt;    &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;bool&lt;/span&gt; for_the_given_path(&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;string&lt;/span&gt; path)&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   4:&lt;/span&gt;    {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   5:&lt;/span&gt;      &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;return&lt;/span&gt; path.EndsWith(&lt;span style=&quot;color: rgb(0, 96, 128);&quot;&gt;@&quot;\bin&quot;&lt;/span&gt;, StringComparison.InvariantCultureIgnoreCase)&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   6:&lt;/span&gt;             || path.EndsWith(&lt;span style=&quot;color: rgb(0, 96, 128);&quot;&gt;@&quot;\debug&quot;&lt;/span&gt;, StringComparison.InvariantCultureIgnoreCase)&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   7:&lt;/span&gt;             || path.EndsWith(&lt;span style=&quot;color: rgb(0, 96, 128);&quot;&gt;@&quot;\release&quot;&lt;/span&gt;, StringComparison.InvariantCultureIgnoreCase);&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   8:&lt;/span&gt;    }&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   9:&lt;/span&gt; }&lt;/pre&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;Bringing the test to the form it becomes cleaner.&lt;/p&gt;&#xA;&#xA;&lt;div style=&quot;border: 1px solid gray; margin: 20px 0px 10px; padding: 4px; overflow: auto; font-size: 8pt; width: 97.5%; cursor: text; max-height: 200px; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&#xA;  &lt;div style=&quot;border-style: none; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   1:&lt;/span&gt; [Test]&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   2:&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;void&lt;/span&gt; Should_return_the_path_represented_by_system_as_a_BaseDirectory()&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   3:&lt;/span&gt; {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   4:&lt;/span&gt;   result.should_be(s =&amp;gt; True.for_the_given_path(s));&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   5:&lt;/span&gt; }&lt;/pre&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;With some hints from R#…&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;http://weblogs.asp.net/blogs/sfeldman/image_62684FBC.png&quot; mce_href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_62684FBC.png&quot;&gt;&lt;img src=&quot;http://weblogs.asp.net/blogs/sfeldman/image_thumb_6D946AB7.png&quot; title=&quot;image&quot; style=&quot;border-width: 0px; display: inline;&quot; alt=&quot;image&quot; mce_src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_6D946AB7.png&quot; border=&quot;0&quot; height=&quot;157&quot; width=&quot;515&quot;&gt;&lt;/a&gt; &lt;/p&gt;&#xA;&#xA;&lt;p&gt;It becomes “now I get it”, as my team mate &lt;a href=&quot;http://www.connicus.com/&quot; mce_href=&quot;http://www.connicus.com/&quot; target=&quot;_blank&quot;&gt;Terry Thibodeau&lt;/a&gt; says, to hint me that finally the test becomes readable and simple to be considered good.&lt;/p&gt;&#xA;&#xA;&lt;div style=&quot;border: 1px solid gray; margin: 20px 0px 10px; padding: 4px; overflow: auto; font-size: 8pt; width: 97.5%; cursor: text; max-height: 200px; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&#xA;  &lt;div style=&quot;border-style: none; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   1:&lt;/span&gt; [Observation]&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   2:&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;void&lt;/span&gt; Should_return_the_path_represented_by_system_as_a_BaseDirectory()&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   3:&lt;/span&gt; {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   4:&lt;/span&gt;    result.should_be(True.for_the_given_path);&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   5:&lt;/span&gt; }&lt;/pre&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Develop code, not bugs!&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-11-30T05:09:00Z" PublishedUtc="2014-04-19T20:33:23.1222072Z" ModifiedUtc="2008-11-30T05:09:00Z" />
      <TagsPart Tags="TDD" />
      <AutoroutePart Alias="c-3-0-r-great-tests-readability" UseCustomPattern="false" />
      <TitlePart Title="C# 3.0 + R# = Great Tests Readability" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=test-helpers-and-fluent-interfaces" Status="Published">
      <BodyPart Text="&lt;p&gt;Today was a great day. One of the things we do with the team is experiment how we write our test. Experimenting seems the most effective way of figuring out what should be our testing approach. At this point we are mostly doing specification driven tests (unit tests). &lt;/p&gt;  &lt;p&gt;We had a few questions in regards to code duplication and keeping it DRY and self-explanatory at the same time, hiding no important details. At the same time overwhelming details should not be annoying the test reader/explorer.&amp;nbsp; &lt;/p&gt;  &lt;p&gt;One of the things that is crucial, is to keep the spot light on the most important in the test – subject under test (SUT) and what are the assertions about it behavior/state. Anything else is secondary, but not unimportant. Therefore, anything that is not primarily should be communicated in the simplest manner and preferably in human language with simplistic logic in order not to steal the scene from SUT and result. &lt;/p&gt;  &lt;p&gt;The component my pair partner and I were working on was a strategy component, based on time. A very simple one with the following rules:&lt;/p&gt;  &lt;ol&gt;   &lt;li&gt;A report can be issued to a client if reporting time is within 10 minutes in the past from the current system’s time &lt;/li&gt;    &lt;li&gt;Anything that outside of the time frame defined in #1 means no report issued to the client &lt;/li&gt; &lt;/ol&gt;  &lt;p&gt;Simple one.&lt;/p&gt;  &lt;p&gt;First step was to abstract the System.DateTime object in order to manipulate the current time. There are plenty of resources on that, and despite the fact that I loved a particular testing implementation proposed by Oren &lt;a href=&quot;http://ayende.com/Blog/archive/2008/07/07/Dealing-with-time-in-tests.aspx&quot; mce_href=&quot;http://ayende.com/Blog/archive/2008/07/07/Dealing-with-time-in-tests.aspx&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;, we ended up doing contract based implementation and usage of an instance based custom SystemDateTime solution. &lt;/p&gt;  &lt;div style=&quot;border: 1px solid gray; margin: 20px 0px 10px; padding: 4px; overflow: auto; font-size: 8pt; width: 97.5%; cursor: text; max-height: 200px; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;   &lt;div style=&quot;border-style: none; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;     &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   1:&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;interface&lt;/span&gt; ISystemDateTime&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   2:&lt;/span&gt; {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   3:&lt;/span&gt;     DateTime Now { get; }&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   4:&lt;/span&gt; }&lt;/pre&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;div style=&quot;border: 1px solid gray; margin: 20px 0px 10px; padding: 4px; overflow: auto; font-size: 8pt; width: 97.5%; cursor: text; max-height: 200px; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&#xA;  &lt;div style=&quot;border-style: none; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   1:&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;class&lt;/span&gt; SystemDateTime : ISystemDateTime &lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   2:&lt;/span&gt; {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   3:&lt;/span&gt;     &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;public&lt;/span&gt; DateTime Now&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   4:&lt;/span&gt;     {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   5:&lt;/span&gt;         get { &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;return&lt;/span&gt; DateTime.Now; }&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   6:&lt;/span&gt;     }&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   7:&lt;/span&gt; }&lt;/pre&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;Once that&amp;nbsp; was in place, we started to craft the tests for the strategy object. But something was wrong.&lt;/p&gt;&#xA;&#xA;&lt;div style=&quot;border: 1px solid gray; margin: 20px 0px 10px; padding: 4px; overflow: auto; font-size: 8pt; width: 97.5%; cursor: text; max-height: 200px; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&#xA;  &lt;div style=&quot;border-style: none; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   1:&lt;/span&gt; [Concern(&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;typeof&lt;/span&gt;(TimeBasedReportExecutionStrategy))]&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   2:&lt;/span&gt;   [TestFixture]&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   3:&lt;/span&gt;   &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;class&lt;/span&gt; When_time_based_report_execution_strategy_is_asked_to_determine_can_report_be_executed_for_a_given_client_information : SpecificationContext&amp;lt;IReportExecutionStrategy&amp;gt;&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   4:&lt;/span&gt;   {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   5:&lt;/span&gt;       &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;private&lt;/span&gt; ISystemDateTime systemDateTime;&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   6:&lt;/span&gt;       &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;private&lt;/span&gt; DateTime clientReportExecutionTime = &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;new&lt;/span&gt; DateTime(2008, 1, 1, 12, 0, 0);&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   7:&lt;/span&gt;       &lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   8:&lt;/span&gt;       &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;protected&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;override&lt;/span&gt; IReportExecutionStrategy EstablishContext()&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   9:&lt;/span&gt;       {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  10:&lt;/span&gt;           systemDateTime = Stub&amp;lt;ISystemDateTime&amp;gt;();&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  11:&lt;/span&gt;&amp;nbsp; &lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  12:&lt;/span&gt;           &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;new&lt;/span&gt; TimeBasedReportExecutionStrategy(systemDateTime);&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  13:&lt;/span&gt;       }&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  14:&lt;/span&gt;&amp;nbsp; &lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  15:&lt;/span&gt;       &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;protected&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;override&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;void&lt;/span&gt; BecauseOf(){}&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  16:&lt;/span&gt;&amp;nbsp; &lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  17:&lt;/span&gt;       [Test]&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  18:&lt;/span&gt;       &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;void&lt;/span&gt; Should_allow_report_execution_when_escalation_time_is_within_executable_threshold()&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  19:&lt;/span&gt;       {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  20:&lt;/span&gt;           systemDateTime.Stub(t =&amp;gt; { var readProperty = t.Now; })&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  21:&lt;/span&gt;               .Return(clientReportExecutionTime.AddMinutes(5));&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  22:&lt;/span&gt;&amp;nbsp; &lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  23:&lt;/span&gt;           var result = system_under_test.CanIssueReportFor(&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;new&lt;/span&gt; ClientEscalationInfo(&lt;span style=&quot;color: rgb(0, 96, 128);&quot;&gt;&quot;client_id&quot;&lt;/span&gt;, clientReportExecutionTime, &lt;span style=&quot;color: rgb(0, 96, 128);&quot;&gt;&quot;recipients&quot;&lt;/span&gt;));&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  24:&lt;/span&gt;           result.should_be_true();&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  25:&lt;/span&gt;       }&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  26:&lt;/span&gt; }&lt;/pre&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;What bothered us is the expression that was setting up a stubbed version of the&amp;nbsp; system current time, “clientReportExecutionTime.AddMinutes(5)”. It was too much of information to process just to determine that we want to test what happens when SUT has a client report time that is less than 10 minutes old.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;So we started to think, and gosh I love pair programming. I know it’s unnecessary to promote it any further, but just can’t stop getting excited about pair programming I recall “the days of silo”. And if you read these lines and think this dude went from the “days of silo” to the “days of psycho”, then yes, I am mad about it :)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Anyhow, this test was not the only one, we wanted to test more than 10 minutes in the past, as well as what happens when report time is in future, etc. How we can make it as clear as possible? This is where we went to the Test Helper class pattern. It was nice, but still not what we wanted, we wanted something that would feel natural. Next step was to think towards the natural syntax – fluent interface. After a few iterations, name changes and debates, this is what we got:&lt;/p&gt;&#xA;&#xA;&lt;div style=&quot;border: 1px solid gray; margin: 20px 0px 10px; padding: 4px; overflow: auto; font-size: 8pt; width: 97.5%; cursor: text; max-height: 200px; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&#xA;  &lt;div style=&quot;border-style: none; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   1:&lt;/span&gt; [Concern(&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;typeof&lt;/span&gt;(TimeBasedReportExecutionStrategy))]&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   2:&lt;/span&gt;     [TestFixture]&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   3:&lt;/span&gt;     &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;class&lt;/span&gt; When_time_based_report_execution_strategy_is_asked_to_determine_can_report_be_executed_for_a_given_client_information : SpecificationContext&amp;lt;IReportExecutionStrategy&amp;gt;&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   4:&lt;/span&gt;     {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   5:&lt;/span&gt;         &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;private&lt;/span&gt; ISystemDateTime systemDateTime;&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   6:&lt;/span&gt;         &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;private&lt;/span&gt; DateTime clientReportExecutionTime = &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;new&lt;/span&gt; DateTime(2008, 1, 1, 12, 0, 0);&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   7:&lt;/span&gt;         &lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   8:&lt;/span&gt;         &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;protected&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;override&lt;/span&gt; IReportExecutionStrategy EstablishContext()&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   9:&lt;/span&gt;         {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  10:&lt;/span&gt;             systemDateTime = Stub&amp;lt;ISystemDateTime&amp;gt;();&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  11:&lt;/span&gt;&amp;nbsp; &lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  12:&lt;/span&gt;             &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;new&lt;/span&gt; TimeBasedReportExecutionStrategy(systemDateTime);&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  13:&lt;/span&gt;         }&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  14:&lt;/span&gt;&amp;nbsp; &lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  15:&lt;/span&gt;         &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;protected&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;override&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;void&lt;/span&gt; BecauseOf(){}&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  16:&lt;/span&gt;&amp;nbsp; &lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  17:&lt;/span&gt;         [Test]&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  18:&lt;/span&gt;         &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;void&lt;/span&gt; Should_allow_report_execution_when_escalation_time_is_within_executable_threshold()&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  19:&lt;/span&gt;         {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  20:&lt;/span&gt;             systemDateTime.Stub(t =&amp;gt; { var readProperty = t.Now; })&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  21:&lt;/span&gt;                 .Return(TestHelper.When(clientReportExecutionTime).Is(5).minutes_in_the_past);&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  22:&lt;/span&gt;&amp;nbsp; &lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  23:&lt;/span&gt;             var result = system_under_test.CanIssueReportFor(&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;new&lt;/span&gt; ClientEscalationInfo(&lt;span style=&quot;color: rgb(0, 96, 128);&quot;&gt;&quot;client_id&quot;&lt;/span&gt;, clientReportExecutionTime, &lt;span style=&quot;color: rgb(0, 96, 128);&quot;&gt;&quot;recipients&quot;&lt;/span&gt;));&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  24:&lt;/span&gt;             result.should_be_true();&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  25:&lt;/span&gt;         }&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  26:&lt;/span&gt;&amp;nbsp; &lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  27:&lt;/span&gt;         [Test]&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  28:&lt;/span&gt;         &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;void&lt;/span&gt; Should_not_allow_report_execution_when_escalation_time_is_within_executable_threshold_in_the_future()&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  29:&lt;/span&gt;         {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  30:&lt;/span&gt;             systemDateTime.Stub(t =&amp;gt; { var readProperty = t.Now; })&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  31:&lt;/span&gt;                 .Return(TestHelper.When(clientReportExecutionTime).Is(5).minutes_in_the_future);&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  32:&lt;/span&gt;&amp;nbsp; &lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  33:&lt;/span&gt;             var result = system_under_test.CanIssueReportFor(&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;new&lt;/span&gt; ClientEscalationInfo(&lt;span style=&quot;color: rgb(0, 96, 128);&quot;&gt;&quot;client_id&quot;&lt;/span&gt;, clientReportExecutionTime, &lt;span style=&quot;color: rgb(0, 96, 128);&quot;&gt;&quot;recipients&quot;&lt;/span&gt;));&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  34:&lt;/span&gt;             result.should_be_false();&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  35:&lt;/span&gt;         }&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  36:&lt;/span&gt;&amp;nbsp; &lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  37:&lt;/span&gt;         [Test]&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  38:&lt;/span&gt;         &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;void&lt;/span&gt; Should_not_allow_report_execution_when_escalation_time_is_outside_of_executable_threshold_in_the_past()&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  39:&lt;/span&gt;         {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  40:&lt;/span&gt;             systemDateTime.Stub(t =&amp;gt; { var readProperty = t.Now; })&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  41:&lt;/span&gt;                 .Return(TestHelper.When(clientReportExecutionTime).Is(11).minutes_in_the_past);&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  42:&lt;/span&gt;             var result = system_under_test.CanIssueReportFor(&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;new&lt;/span&gt; ClientEscalationInfo(&lt;span style=&quot;color: rgb(0, 96, 128);&quot;&gt;&quot;client_id&quot;&lt;/span&gt;, clientReportExecutionTime, &lt;span style=&quot;color: rgb(0, 96, 128);&quot;&gt;&quot;recipients&quot;&lt;/span&gt;));&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  43:&lt;/span&gt;&amp;nbsp; &lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  44:&lt;/span&gt;             result.should_be_false();&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  45:&lt;/span&gt;         }&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  46:&lt;/span&gt;&amp;nbsp; &lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  47:&lt;/span&gt;         [Test]&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  48:&lt;/span&gt;         &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;void&lt;/span&gt; Should_not_allow_report_execution_when_escalation_time_is_outside_of_executable_threshold_in_the_future()&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  49:&lt;/span&gt;         {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  50:&lt;/span&gt;             systemDateTime.Stub(t =&amp;gt; { var readProperty = t.Now; })&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  51:&lt;/span&gt;                 .Return(TestHelper.When(clientReportExecutionTime).Is(11).minutes_in_the_future);&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  52:&lt;/span&gt;&amp;nbsp; &lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  53:&lt;/span&gt;             var result = system_under_test.CanIssueReportFor(&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;new&lt;/span&gt; ClientEscalationInfo(&lt;span style=&quot;color: rgb(0, 96, 128);&quot;&gt;&quot;client_id&quot;&lt;/span&gt;, clientReportExecutionTime, &lt;span style=&quot;color: rgb(0, 96, 128);&quot;&gt;&quot;recipients&quot;&lt;/span&gt;));&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  54:&lt;/span&gt;&amp;nbsp; &lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  55:&lt;/span&gt;             result.should_be_false();&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  56:&lt;/span&gt;         }&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  57:&lt;/span&gt; }&lt;/pre&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;The TestHelper in this case was a private class that implemented the fluent interface.&lt;/p&gt;&#xA;&#xA;&lt;div style=&quot;border: 1px solid gray; margin: 20px 0px 10px; padding: 4px; overflow: auto; font-size: 8pt; width: 97.5%; cursor: text; max-height: 200px; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&#xA;  &lt;div style=&quot;border-style: none; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   1:&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;class&lt;/span&gt; TestHelper&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   2:&lt;/span&gt; {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   3:&lt;/span&gt;     &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;private&lt;/span&gt; DateTime anchorTime;&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   4:&lt;/span&gt;     &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;int&lt;/span&gt; minutesToUse;&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   5:&lt;/span&gt;&amp;nbsp; &lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   6:&lt;/span&gt;     &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;private&lt;/span&gt; TestHelper(DateTime anchorTime)&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   7:&lt;/span&gt;     {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   8:&lt;/span&gt;         &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;this&lt;/span&gt;.anchorTime = anchorTime;&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;   9:&lt;/span&gt;     }&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  10:&lt;/span&gt;&amp;nbsp; &lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  11:&lt;/span&gt;     &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;static&lt;/span&gt; TestHelper When(DateTime anchorTime)&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  12:&lt;/span&gt;     {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  13:&lt;/span&gt;         &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;new&lt;/span&gt; TestHelper(anchorTime);&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  14:&lt;/span&gt;     }&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  15:&lt;/span&gt;&amp;nbsp; &lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  16:&lt;/span&gt;     &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;public&lt;/span&gt; TestHelper Is(&lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;int&lt;/span&gt; minutes)&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  17:&lt;/span&gt;     {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  18:&lt;/span&gt;         minutesToUse = minutes;&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  19:&lt;/span&gt;         &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;this&lt;/span&gt;;&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  20:&lt;/span&gt;     }&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  21:&lt;/span&gt;&amp;nbsp; &lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  22:&lt;/span&gt;     &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;public&lt;/span&gt; DateTime minutes_in_the_future&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  23:&lt;/span&gt;     {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  24:&lt;/span&gt;         get&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  25:&lt;/span&gt;         {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  26:&lt;/span&gt;             &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;return&lt;/span&gt; anchorTime.AddMinutes(minutesToUse);&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  27:&lt;/span&gt;         }&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  28:&lt;/span&gt;     }&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  29:&lt;/span&gt;&amp;nbsp; &lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  30:&lt;/span&gt;     &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;public&lt;/span&gt; DateTime minutes_in_the_past&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  31:&lt;/span&gt;     {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  32:&lt;/span&gt;         get&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  33:&lt;/span&gt;         {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  34:&lt;/span&gt;             &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;return&lt;/span&gt; anchorTime.AddMinutes(-minutesToUse);&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  35:&lt;/span&gt;         }&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: rgb(244, 244, 244);&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  36:&lt;/span&gt;     }&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;&quot;&gt;&lt;span style=&quot;color: rgb(96, 96, 96);&quot;&gt;  37:&lt;/span&gt; }&lt;/pre&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;An interesting observation we made for ourselves was that just by doing it this way, not only we simplified tests reading, but also have taken the concern of date/time math out of the real concern – testing the real SUT, the strategy. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;b&gt;Conclusions&lt;/b&gt;&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;  &lt;li&gt;I am not a 100% confident this is the best way to implement a test, but this is something that my team likes, and we will keep exploring it and getting better in expressiveness in our tests.&lt;/li&gt;&#xA;&#xA;  &lt;li&gt;Tests should be ‘clean’ (&lt;a href=&quot;http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882&quot; mce_href=&quot;http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882&quot; target=&quot;_blank&quot;&gt;according to Uncle Bob&lt;/a&gt;) or they are not communicating the idea, become un-maintainable down the road, and abandoned eventually.&lt;/li&gt;&#xA;&#xA;  &lt;li&gt;If it feels wrong, it is wrong. Do everything it takes to feel right.&lt;/li&gt;&#xA;&lt;/ol&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-11-29T08:06:00Z" PublishedUtc="2014-04-19T20:33:23.6861176Z" ModifiedUtc="2008-11-29T08:06:00Z" />
      <TagsPart Tags="Agile,OO,TDD" />
      <AutoroutePart Alias="test-helpers-and-fluent-interfaces" UseCustomPattern="false" />
      <TitlePart Title="Test Helpers and Fluent Interfaces" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=depend-upon-abstractions-reiteration" Status="Published">
      <BodyPart Text="&lt;p&gt;I was reading through the &lt;a href=&quot;http://weblogs.asp.net/sfeldman/archive/2008/11/14/clean-code-a-handbook-of-agile-software-craftsmanship.aspx&quot; mce_href=&quot;http://weblogs.asp.net/sfeldman/archive/2008/11/14/clean-code-a-handbook-of-agile-software-craftsmanship.aspx&quot; target=&quot;_blank&quot;&gt;book&lt;/a&gt; when combined several subjects together, such as &quot;help tests&quot; and &quot;error handling&quot;, and realized that the core &quot;Depend upon abstraction.&amp;nbsp; Do not depend upon concretions.&quot; principle is underused by myself. &lt;/p&gt;  &lt;p&gt;Normally, I apply this great principle when thinking of another not less good one - &quot;Design to an interface and not an implementation&quot;. And usually it happens when I generate new pieces of code. But this can and should be applies to an existing code as well, especially if it's a 3rd party code. I am going to demo the concept along with the other subjects based on the book example, sorry for luck of 'creativity on an early weekend morning' :)&lt;/p&gt;  &lt;p&gt;Lets pretend our code depends on the 3rd party component that has some strict rules about values it can operate on (for the sake of simplicity). It documents that 0 and 100 should never be used. Thirst thing is to verify this behaviour, document it and make sure we learn it and can verify the same behaviour or capture any changes in the next versions of the 3rd party component when we upgrade it (another reason to have learning/exploratory tests)&lt;/p&gt;  &lt;div class=&quot;csharpcode&quot;&gt;   &lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;lnum&quot;&gt;   1:  &lt;/span&gt; [TestsOn(&lt;span class=&quot;kwrd&quot;&gt;typeof&lt;/span&gt; (ThirdPartyComponent))]&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   2:  &lt;/span&gt;  [TestFixture]&lt;/pre&gt;&#xA;&#xA;  &lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;lnum&quot;&gt;   3:  &lt;/span&gt;  &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;class&lt;/span&gt; ThirdPartyComponent_LearningTests &lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   4:  &lt;/span&gt;  {&lt;/pre&gt;&#xA;&#xA;  &lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;lnum&quot;&gt;   5:  &lt;/span&gt;    [Test]&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   6:  &lt;/span&gt;    [ExpectedException(&lt;span class=&quot;kwrd&quot;&gt;typeof&lt;/span&gt;(InitializationException))]&lt;/pre&gt;&#xA;&#xA;  &lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;lnum&quot;&gt;   7:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; When_passing_zero_Should_get_an_exception()&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   8:  &lt;/span&gt;    {&lt;/pre&gt;&#xA;&#xA;  &lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;lnum&quot;&gt;   9:  &lt;/span&gt;      var sut = &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; ThirdPartyComponent();&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  10:  &lt;/span&gt;      sut.ActOn(0);&lt;/pre&gt;&#xA;&#xA;  &lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;lnum&quot;&gt;  11:  &lt;/span&gt;    }&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  12:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;&#xA;&#xA;  &lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;lnum&quot;&gt;  13:  &lt;/span&gt;    [Test]&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  14:  &lt;/span&gt;    [ExpectedException(&lt;span class=&quot;kwrd&quot;&gt;typeof&lt;/span&gt;(ExceptionalValueException))]&lt;/pre&gt;&#xA;&#xA;  &lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;lnum&quot;&gt;  15:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; When_passing_a_hundred_Should_get_an_exception()&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  16:  &lt;/span&gt;    {&lt;/pre&gt;&#xA;&#xA;  &lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;lnum&quot;&gt;  17:  &lt;/span&gt;      var sut = &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; ThirdPartyComponent();&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  18:  &lt;/span&gt;      sut.ActOn(100);&lt;/pre&gt;&#xA;&#xA;  &lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;lnum&quot;&gt;  19:  &lt;/span&gt;    }&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  20:  &lt;/span&gt;  }&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;&#xA;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&lt;/style&gt;&#xA;&#xA;&lt;p&gt;Result - behaviour &lt;u&gt;verified&lt;/u&gt; and &lt;u&gt;documented&lt;/u&gt;. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;http://gallio.org&quot; mce_href=&quot;http://gallio.org&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/DependUponAbstractionsreiteration_82B8/image_5.png&quot; style=&quot;border: 0px none ;&quot; alt=&quot;image&quot; mce_src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/DependUponAbstractionsreiteration_82B8/image_5.png&quot; border=&quot;0&quot; height=&quot;97&quot; width=&quot;586&quot;&gt;&lt;/a&gt; &lt;/p&gt;&#xA;&#xA;&lt;p&gt;You can leave the job, knowing that someday someone will thank you for doing that. Or maybe not. Well, don't quit yet ;) Using the component now is quiet simple, we don't have the 'surprise' factor, but painful:&lt;/p&gt;&#xA;&#xA;&lt;div class=&quot;csharpcode&quot;&gt;&#xA;  &lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;lnum&quot;&gt;   1:  &lt;/span&gt;      &lt;span class=&quot;kwrd&quot;&gt;try&lt;/span&gt;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   2:  &lt;/span&gt;      {&lt;/pre&gt;&#xA;&#xA;  &lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;lnum&quot;&gt;   3:  &lt;/span&gt;        &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; ThirdPartyComponent().ActOn(0);&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   4:  &lt;/span&gt;      }&lt;/pre&gt;&#xA;&#xA;  &lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;lnum&quot;&gt;   5:  &lt;/span&gt;      &lt;span class=&quot;kwrd&quot;&gt;catch&lt;/span&gt; (InitializationException e)&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   6:  &lt;/span&gt;      {&lt;/pre&gt;&#xA;&#xA;  &lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;lnum&quot;&gt;   7:  &lt;/span&gt;        Logger.Log(e.Message);&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   8:  &lt;/span&gt;      }&lt;/pre&gt;&#xA;&#xA;  &lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;lnum&quot;&gt;   9:  &lt;/span&gt;      &lt;span class=&quot;kwrd&quot;&gt;catch&lt;/span&gt; (ExceptionalValueException e)&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  10:  &lt;/span&gt;      {&lt;/pre&gt;&#xA;&#xA;  &lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;lnum&quot;&gt;  11:  &lt;/span&gt;        Logger.Log(e.Message);&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  12:  &lt;/span&gt;      }&lt;/pre&gt;&#xA;&#xA;  &lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;lnum&quot;&gt;  13:  &lt;/span&gt;      &lt;span class=&quot;rem&quot;&gt;// more exceptions cases&lt;/span&gt;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  14:  &lt;/span&gt;      &lt;span class=&quot;kwrd&quot;&gt;finally&lt;/span&gt;&lt;/pre&gt;&#xA;&#xA;  &lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;lnum&quot;&gt;  15:  &lt;/span&gt;      {&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  16:  &lt;/span&gt;        Logger.Log(&lt;span class=&quot;str&quot;&gt;&quot;Done with 3rd party component.&quot;&lt;/span&gt;);&lt;/pre&gt;&#xA;&#xA;  &lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;lnum&quot;&gt;  17:  &lt;/span&gt;      }&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;&#xA;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&lt;/style&gt;&#xA;&#xA;&lt;p&gt;This will hunt you down if you use the component several times several places. Solution (as per &lt;a href=&quot;http://weblogs.asp.net/sfeldman/archive/2008/11/14/clean-code-a-handbook-of-agile-software-craftsmanship.aspx&quot; mce_href=&quot;http://weblogs.asp.net/sfeldman/archive/2008/11/14/clean-code-a-handbook-of-agile-software-craftsmanship.aspx&quot; target=&quot;_blank&quot;&gt;book&lt;/a&gt;) - abstract it from the system in a way that suites our needs (logging in this case) and does not affect the client code when test cases are added/removed in the future. Again, through the test we define the interface of the abstracted component:&lt;/p&gt;&#xA;&#xA;&lt;div class=&quot;csharpcode&quot;&gt;&#xA;  &lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;lnum&quot;&gt;   1:  &lt;/span&gt; [TestFixture]&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   2:  &lt;/span&gt;  &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;class&lt;/span&gt; When_abstracted_component_is_asked_to_&lt;/pre&gt;&#xA;&#xA;  &lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;lnum&quot;&gt;   3:  &lt;/span&gt;                                         act_on_special_case_values&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   4:  &lt;/span&gt;  {&lt;/pre&gt;&#xA;&#xA;  &lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;lnum&quot;&gt;   5:  &lt;/span&gt;    [Test]&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   6:  &lt;/span&gt;    [Row(0)]&lt;/pre&gt;&#xA;&#xA;  &lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;lnum&quot;&gt;   7:  &lt;/span&gt;    [Row(100)]&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   8:  &lt;/span&gt;    [ExpectedException(&lt;span class=&quot;kwrd&quot;&gt;typeof&lt;/span&gt;(AbstractedComponentException))]&lt;/pre&gt;&#xA;&#xA;  &lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;lnum&quot;&gt;   9:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; Should_throw_an_abstracted_exception(&lt;span class=&quot;kwrd&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;value&lt;/span&gt;)&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  10:  &lt;/span&gt;    {&lt;/pre&gt;&#xA;&#xA;  &lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;lnum&quot;&gt;  11:  &lt;/span&gt;      create_system_under_test().ActOn(&lt;span class=&quot;kwrd&quot;&gt;value&lt;/span&gt;);&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  12:  &lt;/span&gt;    }&lt;/pre&gt;&#xA;&#xA;  &lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;lnum&quot;&gt;  13:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  14:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; AbstractedComponent create_system_under_test()&lt;/pre&gt;&#xA;&#xA;  &lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;lnum&quot;&gt;  15:  &lt;/span&gt;    {&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  16:  &lt;/span&gt;      &lt;span class=&quot;kwrd&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; AbstractedComponent();&lt;/pre&gt;&#xA;&#xA;  &lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;lnum&quot;&gt;  17:  &lt;/span&gt;    }&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  18:  &lt;/span&gt;  }&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;&#xA;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&lt;/style&gt;&#xA;&#xA;&lt;p&gt;Now the client code is shielded from all the different exceptions specific to the 3rd party component an instance can throw, allowing other exceptions to propogate as normal. Implementation of &lt;i&gt;AbstractedComponent&lt;/i&gt; encapsulates what used to be in the client code:&lt;/p&gt;&#xA;&#xA;&lt;div class=&quot;csharpcode&quot;&gt;&#xA;  &lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;lnum&quot;&gt;   1:  &lt;/span&gt;  &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;class&lt;/span&gt; AbstractedComponent : IAbstractedComponent&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   2:  &lt;/span&gt;  {&lt;/pre&gt;&#xA;&#xA;  &lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;lnum&quot;&gt;   3:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; ThirdPartyComponent component;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   4:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;&#xA;&#xA;  &lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;lnum&quot;&gt;   5:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; AbstractedComponent()&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   6:  &lt;/span&gt;    {&lt;/pre&gt;&#xA;&#xA;  &lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;lnum&quot;&gt;   7:  &lt;/span&gt;      component = &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; ThirdPartyComponent();&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   8:  &lt;/span&gt;    }&lt;/pre&gt;&#xA;&#xA;  &lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;lnum&quot;&gt;   9:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  10:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; ActOn(&lt;span class=&quot;kwrd&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;value&lt;/span&gt;)&lt;/pre&gt;&#xA;&#xA;  &lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;lnum&quot;&gt;  11:  &lt;/span&gt;    {&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  12:  &lt;/span&gt;      &lt;span class=&quot;kwrd&quot;&gt;try&lt;/span&gt;&lt;/pre&gt;&#xA;&#xA;  &lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;lnum&quot;&gt;  13:  &lt;/span&gt;      {&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  14:  &lt;/span&gt;        component.ActOn(&lt;span class=&quot;kwrd&quot;&gt;value&lt;/span&gt;);&lt;/pre&gt;&#xA;&#xA;  &lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;lnum&quot;&gt;  15:  &lt;/span&gt;      }&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  16:  &lt;/span&gt;      &lt;span class=&quot;kwrd&quot;&gt;catch&lt;/span&gt; (InitializationException e)&lt;/pre&gt;&#xA;&#xA;  &lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;lnum&quot;&gt;  17:  &lt;/span&gt;      {&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  18:  &lt;/span&gt;        &lt;strike&gt;Logger.Log(e.Message);&lt;/strike&gt;&lt;/pre&gt;&#xA;&#xA;  &lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;lnum&quot;&gt;  19:  &lt;/span&gt;        &lt;span class=&quot;kwrd&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; AbstractedComponentException(e);&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  20:  &lt;/span&gt;      }&lt;/pre&gt;&#xA;&#xA;  &lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;lnum&quot;&gt;  21:  &lt;/span&gt;      &lt;span class=&quot;kwrd&quot;&gt;catch&lt;/span&gt; (ExceptionalValueException e)&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  22:  &lt;/span&gt;      {&lt;/pre&gt;&#xA;&#xA;  &lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;lnum&quot;&gt;  23:  &lt;/span&gt;        &lt;strike&gt;Logger.Log(e.Message);&lt;/strike&gt;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  24:  &lt;/span&gt;        &lt;span class=&quot;kwrd&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; AbstractedComponentException(e);&lt;/pre&gt;&#xA;&#xA;  &lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;lnum&quot;&gt;  25:  &lt;/span&gt;      }&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  26:  &lt;/span&gt;      &lt;span class=&quot;rem&quot;&gt;// more exceptions&lt;/span&gt;&lt;/pre&gt;&#xA;&#xA;  &lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;lnum&quot;&gt;  27:  &lt;/span&gt;    }&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  28:  &lt;/span&gt;  }&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;&#xA;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&lt;/style&gt;&#xA;&#xA;&lt;p&gt;&lt;i&gt;AbstractedComponentException&lt;/i&gt; is basically a DTO to carry &lt;i&gt;ThirdPartyComponent&lt;/i&gt; various current (and future) exceptions, allowing the client concentrate on component work/failure without going into the implementation details of possible failures. &lt;/p&gt;&#xA;&#xA;&lt;div class=&quot;csharpcode&quot;&gt;&#xA;  &lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;lnum&quot;&gt;   1:  &lt;/span&gt;  &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;class&lt;/span&gt; AbstractedComponentException : Exception&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   2:  &lt;/span&gt;  {&lt;/pre&gt;&#xA;&#xA;  &lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;lnum&quot;&gt;   3:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; AbstractedComponentException(Exception exception)&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   4:  &lt;/span&gt;      : &lt;span class=&quot;kwrd&quot;&gt;base&lt;/span&gt;(&lt;span class=&quot;str&quot;&gt;&quot;AbstractedComponent exception&quot;&lt;/span&gt;, exception)    {  }&lt;/pre&gt;&#xA;&#xA;  &lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;lnum&quot;&gt;   5:  &lt;/span&gt;  }&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;&#xA;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&lt;/style&gt;&#xA;&#xA;&lt;p&gt;The new client code now looks cleaner and DRYer.&lt;/p&gt;&#xA;&#xA;&lt;div class=&quot;csharpcode&quot;&gt;&#xA;  &lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;lnum&quot;&gt;   1:  &lt;/span&gt;      &lt;span class=&quot;kwrd&quot;&gt;try&lt;/span&gt;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   2:  &lt;/span&gt;      {&lt;/pre&gt;&#xA;&#xA;  &lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;lnum&quot;&gt;   3:  &lt;/span&gt;        &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; AbstractedComponent().ActOn(0);&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   4:  &lt;/span&gt;      }&lt;/pre&gt;&#xA;&#xA;  &lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;lnum&quot;&gt;   5:  &lt;/span&gt;      &lt;span class=&quot;kwrd&quot;&gt;catch&lt;/span&gt; (AbstractedComponentException e)&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   6:  &lt;/span&gt;      {&lt;/pre&gt;&#xA;&#xA;  &lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;lnum&quot;&gt;   7:  &lt;/span&gt;        Logger.Log(e.Message);&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   8:  &lt;/span&gt;      }&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;&#xA;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&lt;/style&gt;&#xA;&#xA;&lt;p&gt;The exception message can be improved to provide the required information without too much of hassle, but that's not the main point. The point is that client code is not shielded from unnecessary details, is not replicated, simple to read, and most of all verifiable/testable down the road. Change of the 3rd party component is not an agony for the application, but a routine exercise of already existing learning tests (personally like the word 'exploratory' more).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/DependUponAbstractionsreiteration_82B8/image_7.png&quot; mce_href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/DependUponAbstractionsreiteration_82B8/image_7.png&quot;&gt;&lt;img src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/DependUponAbstractionsreiteration_82B8/image_thumb_2.png&quot; style=&quot;border: 0px none ;&quot; alt=&quot;image&quot; mce_src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/DependUponAbstractionsreiteration_82B8/image_thumb_2.png&quot; border=&quot;0&quot; height=&quot;110&quot; width=&quot;633&quot;&gt;&lt;/a&gt; &lt;/p&gt;&#xA;&#xA;&lt;p&gt;As always, comments and notes are welcomed. Have a great week! &lt;/p&gt;&#xA;&#xA;&lt;div class=&quot;wlWriterSmartContent&quot; id=&quot;scid:8eb9d37f-1541-4f29-b6f4-1eea890d4876:6c1d118e-3b00-4d0c-b52f-bac841808a34&quot; style=&quot;margin: 0px; padding: 0px; display: inline;&quot;&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;div&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/DependUponAbstractionsreiteration_82B8/WrappingExceptions.zip&quot; mce_href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/DependUponAbstractionsreiteration_82B8/WrappingExceptions.zip&quot; target=&quot;_blank&quot;&gt;WrappingExceptions.zip&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp;&lt;/div&gt;&lt;div&gt;Update: side note - I used R# 4.1 and Gallio for example.&lt;br&gt;&lt;/div&gt;&lt;/div&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-11-22T16:17:00Z" PublishedUtc="2008-11-22T16:17:00Z" ModifiedUtc="2008-11-22T16:17:00Z" />
      <TagsPart Tags="OO,TDD" />
      <AutoroutePart Alias="depend-upon-abstractions-reiteration" UseCustomPattern="false" />
      <TitlePart Title="Depend Upon Abstractions - reiteration." />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=clean-code-a-handbook-of-agile-software-craftsmanship" Status="Published">
      <BodyPart Text="&lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/CleanCodeAHandbookofAgileSoftwareCrafts_1468F/image_2.png&quot;&gt;&lt;img style=&quot;border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px&quot; height=&quot;181&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/CleanCodeAHandbookofAgileSoftwareCrafts_1468F/image_thumb.png&quot; width=&quot;181&quot; align=&quot;right&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; I finally got a chance to get to the &lt;a href=&quot;http://www.amazon.ca/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882&quot; target=&quot;_blank&quot;&gt;next book&lt;/a&gt; on my reading list. Highly recommended book. &amp;quot;Uncle Bob&amp;quot; not only has produced a quality book, but also has captured a significant amount of wisdom that helps to make coding more rational.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-11-15T06:13:17Z" PublishedUtc="2008-11-15T06:13:17Z" ModifiedUtc="2008-11-15T06:13:17Z" />
      <TagsPart Tags="Books" />
      <AutoroutePart Alias="clean-code-a-handbook-of-agile-software-craftsmanship" UseCustomPattern="false" />
      <TitlePart Title="Clean Code - A Handbook of Agile Software Craftsmanship." />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=nunit-vs-mbunit" Status="Published">
      <BodyPart Text="&lt;p&gt;It's not a secret that I prefer certain tools/frameworks/applications over other ones. So is true with unit testing framework. My currently preferred one is MbUnit. My team was using NUnit so far, and honestly I respected the choice and didn't mind that much. Until this week.&lt;/p&gt;  &lt;p&gt;This week we moved to MbUnit (yupi!). Several reasons for that:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;Row testing was not possible - despite the &lt;a href=&quot;http://www.andreas-schlapsi.com/projects/rowtest-extension-for-nunit/&quot; target=&quot;_blank&quot;&gt;NUnit.Rowtest extension&lt;/a&gt;, it was not working with R# unit tests runner &lt;/li&gt;    &lt;li&gt;Multiple assertions would fail if the first one would not pass &lt;/li&gt;    &lt;li&gt;&lt;em&gt;Assert.AreEqual&lt;/em&gt; behaved weirdly &lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;The last item was quiet a surprise. What happened is that we decided to try to be more expressive in our tests, and therefor substitute &lt;em&gt;Assert.AreEqual()&lt;/em&gt; with extension method &lt;em&gt;should_be_equal_to()&lt;/em&gt; allowing a more fluent syntax and human expressiveness (yes, side effect is abstracting away the unit testing framework, but that was &lt;u&gt;not&lt;/u&gt; the primarily intent).&lt;/p&gt;  &lt;p&gt;One interesting fact about how we implemented it. As I have mentioned, with extension method. The code is quiet simple:&lt;/p&gt;  &lt;div style=&quot;border-right: gray 1px solid; padding-right: 4px; border-top: gray 1px solid; padding-left: 4px; font-size: 8pt; padding-bottom: 4px; margin: 20px 0px 10px; overflow: auto; border-left: gray 1px solid; width: 97.5%; cursor: text; max-height: 200px; line-height: 12pt; padding-top: 4px; border-bottom: gray 1px solid; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; background-color: #f4f4f4&quot;&gt;   &lt;div style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;     &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;class&lt;/span&gt; AssertionsExtensions&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;{&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;    &lt;span style=&quot;color: #0000ff&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;void&lt;/span&gt; should_be_equal_to(&lt;span style=&quot;color: #0000ff&quot;&gt;this&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;object&lt;/span&gt; actual, &lt;span style=&quot;color: #0000ff&quot;&gt;object&lt;/span&gt; expected)&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;    {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;blockquote dir=&quot;ltr&quot; style=&quot;margin-right: 0px&quot;&gt;&lt;p&gt;    Assert.AreEqual(expected, actual);&lt;/p&gt;&lt;/blockquote&gt;&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;    }&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;}&lt;/pre&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;It was working just fine. So an expression like&lt;/p&gt;&#xA;&#xA;&lt;div style=&quot;border-right: gray 1px solid; padding-right: 4px; border-top: gray 1px solid; padding-left: 4px; font-size: 8pt; padding-bottom: 4px; margin: 20px 0px 10px; overflow: auto; border-left: gray 1px solid; width: 97.5%; cursor: text; max-height: 200px; line-height: 12pt; padding-top: 4px; border-bottom: gray 1px solid; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; background-color: #f4f4f4&quot;&gt;&#xA;  &lt;div style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;var result = CreateSystemUnderTest();&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;result.Id.should_be_equal_to(1);&lt;/pre&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;would work. Until we introduced MbUnit and it started complaining. It complained about the fact that if result would be a string &amp;quot;1&amp;quot; value, and expected value would have been 1 numeric, still it would report it as equal, despite the fact that they are not of the same type. Our fix was to get away from an &lt;em&gt;object &lt;/em&gt;type and use generics: &lt;/p&gt;&#xA;&#xA;&lt;div style=&quot;border-right: gray 1px solid; padding-right: 4px; border-top: gray 1px solid; padding-left: 4px; font-size: 8pt; padding-bottom: 4px; margin: 20px 0px 10px; overflow: auto; border-left: gray 1px solid; width: 97.5%; cursor: text; max-height: 200px; line-height: 12pt; padding-top: 4px; border-bottom: gray 1px solid; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; background-color: #f4f4f4&quot;&gt;&#xA;  &lt;div style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;class&lt;/span&gt; AssertionsExtensions&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;{&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;    &lt;span style=&quot;color: #0000ff&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;void&lt;/span&gt; should_be_equal_to&amp;lt;T&amp;gt;(&lt;span style=&quot;color: #0000ff&quot;&gt;this&lt;/span&gt; T actual, T expected)&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;    {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;        Assert.AreEqual(expected, actual);&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;    }&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&quot;&gt;}&lt;/pre&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;Now MbUnit was satisfied and we were happy - tests passing again. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;So what happened? Apperently &lt;em&gt;Assert.AreEqual() &lt;/em&gt;expects either two strings or two objects. When a string and another type are supplied, it does &lt;em&gt;ToString()&lt;/em&gt; and compares the values. 1.&lt;em&gt;ToString()&lt;/em&gt; would be the same as &amp;quot;1&amp;quot;. But these two are not equal in the normal context. MbUnit was smart enough to pick that and warn about it. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Kudos to MbUnit. Good for us :)&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-11-13T05:07:36Z" PublishedUtc="2014-04-19T20:33:25.6261561Z" ModifiedUtc="2008-11-13T05:07:36Z" />
      <TagsPart Tags="TDD" />
      <AutoroutePart Alias="nunit-vs-mbunit" UseCustomPattern="false" />
      <TitlePart Title="NUnit vs. MbUnit" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=visualsvn-issue" Status="Published">
      <BodyPart Text="&lt;p&gt;I have &lt;a href=&quot;http://groups.google.com/group/visualsvn/browse_thread/thread/2e877ba7e2ab3080&quot;&gt;posted a question&lt;/a&gt; at VisualSVN user group in regards to reverting delete operation on an item in a project. The workaround is very much manual, and feels wrong. At this point I was either able to revert the change for the deleted file only and manually add it to the project, or revert both deleted file and modified project file, and manually remove the references to the files that are reported as 'missing'.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-11-13T04:40:57Z" PublishedUtc="2014-04-19T20:33:25.8918013Z" ModifiedUtc="2008-11-13T04:40:57Z" />
      <TagsPart Tags="Other" />
      <AutoroutePart Alias="visualsvn-issue" UseCustomPattern="false" />
      <TitlePart Title="VisualSVN - Issue" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=hp-laptop-service" Status="Published">
      <BodyPart Text="&lt;p&gt;Lately I had an accident with my HP Pavilion laptop and wanted to share the HP service story with you. Hopefully it will save people time and money.&lt;/p&gt;  &lt;p&gt;Less than a year ago I bought&amp;#160; a brand new HP Pavilion dv9000 17&amp;quot; laptop. The price was high, I was naive, and have decided to purchase an extended warranty provided by the store (Future Shop in my case).&lt;/p&gt;  &lt;p&gt;11 months of a very&amp;#160; heavy usage, I happened to forget half a glass of Sprite beside the laptop. Boy that was a mistake. My 'little pup' (accelerate Golden Retreiver) waved his tail and boom! Sprite on the keyboard. The fact that I shut it down, removed the battery, and turned it up side down has helped. The only issue was with a keyboard. Because of the sugar (this is probably another blog entry) in Sprite, keyboard became sticky inside and typing was impossible.&lt;/p&gt;  &lt;p&gt;What do you do? Try to claim the extended warranty. Nope. Future shop will cover anything, but not the real damage. So I called HP to have an idea what are my options. Man I was surprised.&amp;#160; Apparently, I could have warrant my laptop with HP for the same amount of money and have spillage and accidental drops &lt;strong&gt;covered&lt;/strong&gt;. Like a mad bull I took the receipt to the Future Shop to claim my 'wasted' money back. Interestingly, they did not even try to argue and reimbursed the whole amount. Nice, as a customer I felt good. But still my laptop has an issue.&lt;/p&gt;  &lt;p&gt;So I called HP customers service again, and told them the whole truth and truth only. They assured me that it's still under 1 year warranty, and I can safely ship it over for a fix. Cool, life is sweet. Not so fast. Later I am receiving a phone call from HP - &amp;quot;our technicians have discovered traces of a liquid spillage on the keyboard... spillage is not covered, so as a general test/fix it will cost you $650 or more.&amp;quot;&lt;/p&gt;  &lt;p&gt;WHAAAAT?! You gotta be kidding me. $650 for a keyboard replacement? And why did you have to &amp;quot;investigate&amp;quot; when I said it in plain English what happened when opened the support case. Hallo, are you insane?! No thank you, give it back to me and I will handle the situation. The technical support manager kindly agreed that as a person she understands me, but these are the rules. &lt;u&gt;Also I was warned that if I plan to open the computer, the remaining warranty will be voided, and only HP certified technician should perform the replacement&lt;/u&gt;. Right. Keep the warning in mind, we'll get to it later.&lt;/p&gt;  &lt;p&gt;Next step (besides cursing) - eBay. HP Pavilion dv96XX keyboard, $30 including shipping. Done. A week of waiting and it arrived. &lt;/p&gt;  &lt;p&gt;Next step - Google. Quick search brought a few useful results, especially the one at &lt;a href=&quot;http://www.insidemylaptop.com&quot;&gt;http://www.insidemylaptop.com&lt;/a&gt;. Folks, thank you so much for putting all the information online.&lt;/p&gt;  &lt;p&gt;Final step - quick (about 10 minutes with no rush) operation on laptop itself. Done. But wait a second, the screw holding the keyboard from beneath (mounting screw) is missing. Oh, now I get it, those were the HP certified technicians. Aaaa, now I see. You have to be HP certified to do some sloppy job and screw hardware. Clear as mud. &lt;/p&gt;  &lt;p&gt;&lt;strong&gt;Morals of the story&lt;/strong&gt;&lt;/p&gt;  &lt;ol&gt;   &lt;li&gt;Extended warranties / service plans - don't get those from retailers, rather consider the one from manufacturer, and even then think twice&lt;/li&gt;    &lt;li&gt;If as a customer you get screwed, don't give up. Customer is always right, remember that&lt;/li&gt;    &lt;li&gt;Don't blindly assume that people that are suppose to know their job will necessarily do it proper, especially if you are going through layers on indirect communication&lt;/li&gt;    &lt;li&gt;Don't be afraid to experiment. A good saying tells &amp;quot;Who's not taking risks does not drink Champaign&amp;quot;.&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;/li&gt; &lt;/ol&gt;  &lt;p&gt;(Some pictures of the patient before and after the surgery)&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/HPLaptopService_1368E/30102008018_2.jpg&quot;&gt;&lt;img style=&quot;border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px&quot; height=&quot;244&quot; alt=&quot;30102008018&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/HPLaptopService_1368E/30102008018_thumb.jpg&quot; width=&quot;324&quot; border=&quot;0&quot; /&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/HPLaptopService_1368E/28102008017_2.jpg&quot;&gt;&lt;img style=&quot;border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px&quot; height=&quot;124&quot; alt=&quot;28102008017&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/HPLaptopService_1368E/28102008017_thumb.jpg&quot; width=&quot;324&quot; border=&quot;0&quot; /&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/HPLaptopService_1368E/30102008020_2.jpg&quot;&gt;&lt;img style=&quot;border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px&quot; height=&quot;198&quot; alt=&quot;30102008020&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/HPLaptopService_1368E/30102008020_thumb.jpg&quot; width=&quot;244&quot; border=&quot;0&quot; /&gt;&lt;/a&gt;&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-10-31T03:36:14Z" PublishedUtc="2008-10-31T03:36:14Z" ModifiedUtc="2008-10-31T03:36:14Z" />
      <TagsPart Tags="Personal" />
      <AutoroutePart Alias="hp-laptop-service" UseCustomPattern="false" />
      <TitlePart Title="HP Laptop Service" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=recommended-podcast" Status="Published">
      <BodyPart Text="&lt;p&gt;This is late news, but I really recommend listening to the podcast with &lt;a href=&quot;http://www.dotnetrocks.com/default.aspx?showNum=388&quot; target=&quot;_blank&quot;&gt;Robert C. Martin&lt;/a&gt; on .NET Rocks! Decided to listen to this one as a result of the book have read a while ago, &lt;a href=&quot;http://www.amazon.ca/Agile-Principles-Patterns-Practices-C/dp/0131857258/&quot; target=&quot;_blank&quot;&gt;Agile Principles, Patterns, and Practices in C#&lt;/a&gt;. The guy who has spent over 30 years trying to figure out how to do software, has some ideas to inspire how you do things. Audience? Developers, managers, users. Anyone. This is a great content to listen to.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-10-30T04:01:47Z" PublishedUtc="2014-04-19T20:33:27.3449098Z" ModifiedUtc="2008-10-30T04:01:47Z" />
      <TagsPart Tags="Agile" />
      <AutoroutePart Alias="recommended-podcast" UseCustomPattern="false" />
      <TitlePart Title="Recommended Podcast" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=writing-a-test" Status="Published">
      <BodyPart Text="&lt;p&gt;Naming conventions is always brought up when a team is trying to standardize the way code is expressed. Tab size of 2 vs. size of 4, Camel case vs. Pascal case, blog opening on a new line vs. same line with expression, member fields prefixed vs. underscored vs. nothing, control names with Hungarian notation or without it. The list goes on and on. The truth is that this is really doesn't matter. I have learned to accept what team decides to go with and once you embrace the style it's all good. What really matters is the code being produces, not the size of the font it's printed in (well, probably not the best example, but you get the idea).&lt;/p&gt;  &lt;p&gt;Testing is not an exception. Test code lives along with production code, yet we want to be able visually be able quickly identify it. Many individuals and team do it in various ways, but an interesting fact is that the influence of TDD/BDD has caused to be more &quot;expressive&quot;. What I mean by &quot;expressiveness&quot; is the will to make it as close to the human language as possible to describe what are we testing and document it that way. I owe &lt;a href=&quot;http://mokhan.ca/blog/&quot; mce_href=&quot;http://mokhan.ca/blog/&quot; target=&quot;_blank&quot;&gt;Mo&lt;/a&gt; a big one for giving me this insight and breaking it into small pieces so my tortoise brain could get it. &lt;/p&gt;  &lt;pre class=&quot;csharpcode&quot;&gt;[Test]&lt;br&gt;&lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; ShouldGetTheNumberOfHoursFromDays() {//..}&lt;/pre&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;&#xA;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&lt;/style&gt;&#xA;&#xA;&lt;p&gt;The example is somewhat cryptic. Reading this think is painful, yet compliant with CLR naming standards. On the other hand, having underscores, spices up the name:&lt;/p&gt;&#xA;&#xA;&lt;pre class=&quot;csharpcode&quot;&gt;[Test]&lt;br&gt;&lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; should_get_the_number_of_hours_from_days() {//..}&lt;/pre&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;&#xA;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&lt;/style&gt;&#xA;&#xA;&lt;p&gt;Suddenly it's easier to read! Also the interesting part is that if we really wish, the test name now could be easily read by a home-grown utility and converted in some sort of documentation where underscores are omitted and readable sentences by human show up. Thanks to &lt;a href=&quot;http://blog.jpboodhoo.com/&quot; mce_href=&quot;http://blog.jpboodhoo.com/&quot; target=&quot;_blank&quot;&gt;JP&lt;/a&gt; for entertaining with this idea during the course.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Now if we think about this, it makes even more sense to name this way test &lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/writing_a_test_13F20/image_2.png&quot; mce_href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/writing_a_test_13F20/image_2.png&quot;&gt;&lt;img src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/writing_a_test_13F20/image_thumb.png&quot; style=&quot;border: 0px none ;&quot; alt=&quot;image&quot; mce_src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/writing_a_test_13F20/image_thumb.png&quot; align=&quot;right&quot; border=&quot;0&quot; width=&quot;240&quot; height=&quot;118&quot;&gt;&lt;/a&gt;classes (or specifications). Next screenshot makes it really easy to see the benefits of underscored naming convention for the testing purposes. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;i&gt;Note&lt;/i&gt;: I agree that seeing all when_* is a bit weird, but there are ways to get over it and make sure that the tested class footprint is left. TestsOnAttribute or custom ConcernAttribute would do it. I welcome any other suggestions that would be less configuration for the team and more of a convention.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Also it looks very natural to keep this type of style to the rest of the testing code. For your judgement:&lt;/p&gt;&#xA;&#xA;&lt;pre class=&quot;csharpcode&quot;&gt;result.should_be_equal_to(expected);&lt;/pre&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;&#xA;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&lt;/style&gt;&#xA;&#xA;&lt;p&gt;over&lt;/p&gt;&#xA;&#xA;&lt;pre class=&quot;csharpcode&quot;&gt;Assert.AreEqual(expected, result);&lt;/pre&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;&#xA;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&lt;/style&gt;&#xA;&#xA;&lt;p&gt;As our team goes through the adventure of maturing our own naming conventions, we are opened and welcoming any thoughtful advises you can share. What would you consider to be a good practice and solid way of doing things, what would be discouraged. We want to learn from your experience!&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-10-28T04:40:00Z" PublishedUtc="2008-10-28T04:40:00Z" ModifiedUtc="2008-10-28T04:40:00Z" />
      <TagsPart Tags="TDD" />
      <AutoroutePart Alias="writing-a-test" UseCustomPattern="false" />
      <TitlePart Title="naming_a_test" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=domain-object-and-contracts" Status="Published">
      <BodyPart Text="&lt;p&gt;As a team we have found ourselves in a very delicate situation where we had to make a group design decision and it was quiet an interesting experience. What happens if your opinion does not align with the decision? How do you express your opinion without suppressing others opinions, promoting your concepts without falling into the nasty habit of ignoring anything that is different?&lt;/p&gt;  &lt;p&gt;You discus. Can't prove that what your idea is all about is the way to go, that means it's either not better or you haven't really tried to explain it to others so they would see the benefit and be convinced. Conclusion - take your time, step back, see what's going to happen, accept what the team has decided, and if you really thing that's not the way to march, start thinking of a better way to debate your case and have some solid proof of concept.&lt;/p&gt;  &lt;p&gt;What's the noise about? Domain objects and contracts (aka interfaces) for those. As a team we have decided today to have contracts for all of our domain objects. Valid decision, that will keep consistency in our code, and tests (where the debate started). But why this was an issue, after all, isn't it a fact that contracts are good and promote healthy way of coding?&lt;/p&gt;  &lt;p&gt;The answer is Absolutely. Yet why to have an artificial contract on something that is a contract on its own? Domain objects are contracts for the whole application from bones to skin. If any of these objects (contracts) is changing, it's not like swapping out a component that was coded to a contract, it's pretty much reviewing the whole application and touching the code. Naturally a doubt sneaks into your soul and the question bubbles up - then why do I have to have a contract for a contract?&lt;/p&gt;  &lt;p&gt;As a team we run into mocking issue. Mocking would have required a solid object to have either a contract or methods/attributes defined as virtual to allow mocks proper creations (proxies), but due to the fact those were missing the virtual keyword, tests were really misbehaving. Using a simple Root Cause Analysis we've determined that it's the fault of the 'coding process' that allowed this whole issue to happen, and that having contracts in place would not let developers go the path of cracking what's wrong.&lt;/p&gt;  &lt;p&gt;As a team we decided that despite the fact domain objects are de-facto the contracts, we still will use contracts to simplify the process of software development, and have conventions over configurations.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-10-24T03:59:13Z" PublishedUtc="2014-04-19T20:33:28.2667731Z" ModifiedUtc="2008-10-24T03:59:13Z" />
      <TagsPart Tags="Agile,DDD" />
      <AutoroutePart Alias="domain-object-and-contracts" UseCustomPattern="false" />
      <TitlePart Title="Domain Object and Contracts" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=strict-mocks" Status="Published">
      <BodyPart Text="&lt;p&gt;I am extremely excited to be a part of a team that has deliberately decided to follow the Agile path and TDD way of producing results. Along with that I am learning myself tones.&lt;/p&gt;  &lt;p&gt;As a team, the decision was made to use strict mocks to understand better what mocking is all about and how dependencies should be tested for interactions, but not the their state (i.e. don't test dependencies themselves within the tests that are exercising System Under Test). IMO while this is a valid and good way of grasping the concepts and wrap around the whole idea of mocking, this is not necessarily the best way to express tests. Once basic understanding is there, strict mocks should not be forced upon all the tests. Reasons? Personal reason for myself - it doesn't feel right. Once it doesn't feel right, question it, doubt it, dig for alternatives and a better answer.&lt;/p&gt;  &lt;p&gt;After googleing for about 5 minutes and reading different types of posts and comments, I run into a &lt;a href=&quot;http://devlicio.us/blogs/derik_whittaker/archive/2008/05/19/strict-mocking-semantics-is-the-only-way-to-mock.aspx&quot; target=&quot;_blank&quot;&gt;post&lt;/a&gt;, where Scott Bellware commented in a few nicely formatted sentences what I was carrying inside as a doubt, but could not formulate and express as a stated fact:&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/StrictMocks_14B4A/image_6.png&quot;&gt;&lt;img style=&quot;border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px&quot; height=&quot;306&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/StrictMocks_14B4A/image_thumb_2.png&quot; width=&quot;628&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;Cannot disagree with the stated. The whole purpose of TDD is to drive out the design and behaviour of the tested subject prior to going into its' implementation details (intimacy). Strict mocking forces to plan ahead the internal process of achieving the final result, going into the needy greedy details of a concrete implementation. And if so, it's not much different from doing code first and later hacking a test to confirm what code is doing. &lt;/p&gt;  &lt;p&gt;To play the devil's advocate role, we can say that by using the strict mode we &amp;quot;document&amp;quot; better what should be done. Are we? The only documentation we should really worry about is the behaviour of the component, final results, and the interaction with components it depends upon that contribute directly to the successful final result. &lt;/p&gt;  &lt;p&gt;This may raise another question - maybe state base testing should be preferred to interaction based testing? With state based testing there's really no exposure of the intimate aspects of the SUT, therefore no coupling of test code to internal code design of the tested component and that's the way to go?&lt;/p&gt;  &lt;p&gt;Either way, as a team we will have this resolved and get to the right answers. Would love to hear opinions, especially experiences from those that were in teams with heterogeneous unit testing / mocking skills. &lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-10-23T05:35:01Z" PublishedUtc="2008-10-23T05:35:01Z" ModifiedUtc="2008-10-23T05:35:01Z" />
      <TagsPart Tags="Agile,TDD" />
      <AutoroutePart Alias="strict-mocks" UseCustomPattern="false" />
      <TitlePart Title="Strict Mocks" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=singletonitis" Status="Published">
      <BodyPart Text="&lt;p&gt;While reading Joshua Kerievsky book &lt;a href=&quot;http://www.amazon.ca/Refactoring-Patterns-Addison-Wesley-Signature-Kerievsky/dp/0321213351&quot; target=&quot;_blank&quot;&gt;&amp;quot;Refactoring to Patterns&amp;quot;&lt;/a&gt; could not go silent about abuse of &lt;a href=&quot;http://en.wikipedia.org/wiki/Singleton_pattern&quot; target=&quot;_blank&quot;&gt;Singleton pattern&lt;/a&gt; he described. The question that was asked in the book &amp;quot;When is a Singleton unnecessary?&amp;quot; - &amp;quot;Most of the time&amp;quot;. Honestly, I can recall at least a few times when I was sick with Singletonitis: different Utilities, Session related classes, Context related classes, Resources related classes, you name it.&lt;/p&gt;  &lt;p&gt;From my own experience this is so true. While Singleton allows only one instance of a class (pro), it also makes testing virtually impossible, coupling components dependent upon Singleton to a concrete implementation (con).&lt;/p&gt;  &lt;p&gt;Bragging about this would not be really pragmatic (and how a wise man has told me - be a bit more positive and thing will be great, so I am trying to do ;), so to make it more practical/optimistic, I am going to show how to keep the Singleton in place in order not to break the legacy code that cannot be refactored, yet allow the new code to break the hard-coded dependency and allow testing, using what I call a &amp;quot;Dynamic Singleton&amp;quot; (sorry, I do not remember the terminology from Michael Feathers book &lt;a href=&quot;http://www.amazon.ca/Working-Effectively-Legacy-Robert-Martin/dp/0131177052&quot; target=&quot;_blank&quot;&gt;&amp;quot;Working Effectively with Legacy Code&amp;quot;&lt;/a&gt;). &lt;/p&gt;  &lt;p&gt;Lets assume we have a very simplistic application, that is leveraging a component to report the location of the hidden folder. &lt;/p&gt;  &lt;pre class=&quot;csharpcode&quot;&gt;    &lt;span class=&quot;kwrd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; Main(&lt;span class=&quot;kwrd&quot;&gt;string&lt;/span&gt;[] args)&#xA;    {&#xA;      var component = &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; Component();&#xA;      Console.WriteLine(component.ReportWhereFilesAreHidden());&#xA;      Console.ReadLine();&#xA;    }&lt;/pre&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;&#xA;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&lt;/style&gt;&#xA;&#xA;&lt;p&gt;&lt;em&gt;Component&lt;/em&gt; is dependent on a Singleton &lt;em&gt;Utility &lt;/em&gt;that is used across the whole solution (all projects/layers).&lt;/p&gt;&#xA;&#xA;&lt;pre class=&quot;csharpcode&quot;&gt;  &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;class&lt;/span&gt; Component&#xA;  {&#xA;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;string&lt;/span&gt; ReportWhereFilesAreHidden()&#xA;    {&#xA;      &lt;span class=&quot;kwrd&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;str&quot;&gt;&amp;quot;location:&amp;quot;&lt;/span&gt; + Utility.GetHiddenFolderLocation();&#xA;    }&#xA;  }&lt;/pre&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;&#xA;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&lt;/style&gt;&#xA;&#xA;&lt;p&gt;Utility is a typical Singleton implemented the next way:&lt;/p&gt;&#xA;&#xA;&lt;pre class=&quot;csharpcode&quot;&gt;  &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;class&lt;/span&gt; Utility&#xA;  {&#xA;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;string&lt;/span&gt; GetHiddenFolderLocation()&#xA;    {&#xA;      &lt;span class=&quot;kwrd&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;str&quot;&gt;&amp;quot;somevalue&amp;quot;&lt;/span&gt;;&#xA;    }&#xA;  }&lt;/pre&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;&#xA;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&lt;/style&gt;&#xA;&#xA;&lt;p&gt;What are the issues?&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;  &lt;li&gt;No testing possible of &lt;em&gt;Component&lt;/em&gt; due to tight coupling to &lt;em&gt;Utility&lt;/em&gt;.&lt;/li&gt;&#xA;&#xA;  &lt;li&gt;&lt;em&gt;Utility&lt;/em&gt; is not swap-able, i.e. hard-coded.&lt;/li&gt;&#xA;&#xA;  &lt;li&gt;Multiple locations depend on &lt;em&gt;Utility&lt;/em&gt; and we are not going to refactor that code right away.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;This is where I use &amp;quot;Dynamic Singleton&amp;quot;. First, refactor the existing &lt;em&gt;Utility&lt;/em&gt; and remove the static keyword from the class.&lt;/p&gt;&#xA;&#xA;&lt;pre class=&quot;csharpcode&quot;&gt;&lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;&lt;strike&gt;static&lt;/strike&gt;&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;class&lt;/span&gt; Utility&lt;/pre&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;&#xA;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&lt;/style&gt;&#xA;&#xA;&lt;p&gt;None of the old code is affected by this change, due to the fact that the methods are still static. Next step is to &amp;quot;extract an interface from static part&amp;quot;. This probably sounds stupid, since a tool like R# will not allow it, but pretend there would be an option like that, currently it's under ReSharper-&amp;gt;DoItYourseld. Seriously, remove the static keyword from methods, and extract interface. Later undo static keyword removal from methods. The result is a contract:&lt;/p&gt;&#xA;&#xA;&lt;pre class=&quot;csharpcode&quot;&gt;  &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;interface&lt;/span&gt; IUtility&#xA;  {&#xA;    &lt;span class=&quot;kwrd&quot;&gt;string&lt;/span&gt; GetHiddenFolderLocation();&#xA;  }&lt;/pre&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;&#xA;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&lt;/style&gt;&#xA;&#xA;&lt;p&gt;&lt;em&gt;Utility&lt;/em&gt; can now have both static and non static versions of the methods, where non-static ones are enforced by the contract. The non-static version is going to be implicitly implemented.&lt;/p&gt;&#xA;&#xA;&lt;pre class=&quot;csharpcode&quot;&gt;  &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;class&lt;/span&gt; Utility : IUtility&#xA;  {&#xA;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;string&lt;/span&gt; GetHiddenFolderLocation()&#xA;    {&#xA;      &lt;span class=&quot;kwrd&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;str&quot;&gt;&amp;quot;somevalue&amp;quot;&lt;/span&gt;;&#xA;    }&#xA;&#xA;    &lt;span class=&quot;kwrd&quot;&gt;string&lt;/span&gt; &lt;strong&gt;IUtility&lt;/strong&gt;.GetHiddenFolderLocation()&#xA;    {&#xA;      &lt;span class=&quot;kwrd&quot;&gt;return&lt;/span&gt; GetHiddenFolderLocation();&#xA;    }&#xA;  }&lt;/pre&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;&#xA;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&lt;/style&gt;&#xA;&#xA;&lt;p&gt;First it looks like an issue, but it doesn't. If we use the instance of &lt;em&gt;Utility &lt;/em&gt;as &lt;em&gt;IUtility&lt;/em&gt;, then all the non-static are there (including Intellisense). The new code can use it either by direct instantiation and assignment to a variable of the contract type, or through some sort of container and dependency resolving mechanism (a better way of doing it).&lt;/p&gt;&#xA;&#xA;&lt;pre class=&quot;csharpcode&quot;&gt;  &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;class&lt;/span&gt; Component&#xA;  {&#xA;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;string&lt;/span&gt; ReportWhereFilesAreHidden()&#xA;    {&#xA;      IUtility utility = &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; Utility();&#xA;      &lt;span class=&quot;kwrd&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;str&quot;&gt;&amp;quot;location:&amp;quot;&lt;/span&gt; + utility.GetHiddenFolderLocation();&#xA;    }&#xA;  }&lt;/pre&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;&#xA;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&lt;/style&gt;&#xA;&#xA;&lt;p&gt;This code is ugly you might think. Agree! Lets make it a bit nicer (and sort-of ready for dependency resolving at the same time).&lt;/p&gt;&#xA;&#xA;&lt;div class=&quot;csharpcode&quot;&gt;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   1:  &lt;/span&gt;  &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;class&lt;/span&gt; Component&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   2:  &lt;/span&gt;  {&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   3:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;readonly&lt;/span&gt; IUtility utility;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   4:  &lt;/span&gt;&amp;#160;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   5:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; Component() : &lt;span class=&quot;kwrd&quot;&gt;this&lt;/span&gt;(&lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; Utility()) {}&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   6:  &lt;/span&gt;&amp;#160;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   7:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; Component(IUtility utility)&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   8:  &lt;/span&gt;    {&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   9:  &lt;/span&gt;      &lt;span class=&quot;kwrd&quot;&gt;this&lt;/span&gt;.utility = utility;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  10:  &lt;/span&gt;    }&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  11:  &lt;/span&gt;&amp;#160;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  12:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;string&lt;/span&gt; ReportWhereFilesAreHidden()&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  13:  &lt;/span&gt;    {&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  14:  &lt;/span&gt;      &lt;span class=&quot;kwrd&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;str&quot;&gt;&amp;quot;location:&amp;quot;&lt;/span&gt; + utility.GetHiddenFolderLocation();&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  15:  &lt;/span&gt;    }&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  16:  &lt;/span&gt;  }&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;&#xA;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&lt;/style&gt;&#xA;&#xA;&lt;p&gt;By adding a parameterized constructor we are allowing constructor dependency injection (aka DIP). Since we don't have a dependency resolver, a &amp;quot;poor man&amp;quot; version is going to fulfill that role. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;So what do we have now? We have a static &lt;em&gt;Utility &lt;/em&gt;that is used by the legacy that cannot be refactored due to different &amp;quot;political forces&amp;quot;, and at the same time same utility being exposed as an implementation of a contract &lt;em&gt;IUtility&lt;/em&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Another question that may raise is &amp;quot;what if I want the contract implementer to be a real Singleton, i.e. not to allocate resources or run expansive calculations more than once&amp;quot;. Not sure why, but there are always things that are beyond current understanding of things, so lets do that as well.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Rather than instantiating a new &lt;em&gt;Utility &lt;/em&gt;upon each default constructor call, we will leverage a static instance to do the work.&lt;/p&gt;&#xA;&#xA;&lt;div class=&quot;csharpcode&quot;&gt;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   1:  &lt;/span&gt;  &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;class&lt;/span&gt; Utility : IUtility&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   2:  &lt;/span&gt;  {&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   3:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;readonly&lt;/span&gt; IUtility Instance = &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; Utility();&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   4:  &lt;/span&gt;&amp;#160;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   5:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;string&lt;/span&gt; GetHiddenFolderLocation()&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   6:  &lt;/span&gt;    {&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   7:  &lt;/span&gt;      &lt;span class=&quot;kwrd&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;str&quot;&gt;&amp;quot;somevalue&amp;quot;&lt;/span&gt;;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   8:  &lt;/span&gt;    }&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   9:  &lt;/span&gt;&amp;#160;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  10:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;string&lt;/span&gt; IUtility.GetHiddenFolderLocation()&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  11:  &lt;/span&gt;    {&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  12:  &lt;/span&gt;      &lt;span class=&quot;kwrd&quot;&gt;return&lt;/span&gt; GetHiddenFolderLocation();&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  13:  &lt;/span&gt;    }&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  14:  &lt;/span&gt;  }&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;&#xA;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&lt;/style&gt;&#xA;&#xA;&lt;p&gt;Line 3 is a new addition to &lt;em&gt;Utility &lt;/em&gt;code.&lt;/p&gt;&#xA;&#xA;&lt;div class=&quot;csharpcode&quot;&gt;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   1:  &lt;/span&gt;  &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;class&lt;/span&gt; Component&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   2:  &lt;/span&gt;  {&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   3:  &lt;/span&gt;    &lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   4:  &lt;/span&gt;&amp;#160;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   5:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;readonly&lt;/span&gt; IUtility utility;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   6:  &lt;/span&gt;&amp;#160;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   7:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; Component() : &lt;span class=&quot;kwrd&quot;&gt;this&lt;/span&gt;(Utility.Instance) {}&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   8:  &lt;/span&gt;&amp;#160;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   9:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; Component(IUtility utility)&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  10:  &lt;/span&gt;    {&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  11:  &lt;/span&gt;      &lt;span class=&quot;kwrd&quot;&gt;this&lt;/span&gt;.utility = utility;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  12:  &lt;/span&gt;    }&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  13:  &lt;/span&gt;&amp;#160;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  14:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;string&lt;/span&gt; ReportWhereFilesAreHidden()&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  15:  &lt;/span&gt;    {&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  16:  &lt;/span&gt;      &lt;span class=&quot;kwrd&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;str&quot;&gt;&amp;quot;location:&amp;quot;&lt;/span&gt; + utility.GetHiddenFolderLocation();&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  17:  &lt;/span&gt;    }&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  18:  &lt;/span&gt;  }&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;&#xA;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&lt;/style&gt;&#xA;&#xA;&lt;p&gt;Line 7 reflects the change.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Mission accomplished. Is it? I guess not until the soul can rest. And it will rest when the last usage of a static Singleton for &lt;em&gt;Utility&lt;/em&gt; like classes will be removed.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;And last, but not the least - was it worth to go through the troubles 'just-to-replace-a-Singleton'? Look at the code below and judge for yourself :)&lt;/p&gt;&#xA;&#xA;&lt;pre class=&quot;csharpcode&quot;&gt;    [Test]&#xA;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; should_leverage_utility_to_retrive_the_answer()&#xA;    {&#xA;      &lt;span class=&quot;kwrd&quot;&gt;using&lt;/span&gt;(mockery.Record())&#xA;      {&#xA;        Expect.Call(utility.GetHiddenFolderLocation())&#xA;          .Return(&lt;span class=&quot;str&quot;&gt;&amp;quot;somevalue&amp;quot;&lt;/span&gt;);&#xA;      }&#xA;      &lt;span class=&quot;kwrd&quot;&gt;using&lt;/span&gt;(mockery.Playback())&#xA;      {&#xA;        var result = CreateSystemUnderTest().ReportWhereFilesAreHidden();&#xA;        Assert.AreEqual(&lt;span class=&quot;str&quot;&gt;&amp;quot;somevalue&amp;quot;&lt;/span&gt;, result);&#xA;      }&#xA;    }&lt;/pre&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;&#xA;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&lt;/style&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-10-22T06:28:53Z" PublishedUtc="2014-04-19T20:33:29.5037046Z" ModifiedUtc="2008-10-22T06:28:53Z" />
      <TagsPart Tags=".NET,Books,OO,Patterns" />
      <AutoroutePart Alias="singletonitis" UseCustomPattern="false" />
      <TitlePart Title="Singletonitis" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=nhibernate-guid-alternative" Status="Published">
      <BodyPart Text="&lt;p&gt;A good identifier for an entity is considered to be a number. A unique identifier for an entity, such as identifier that can be synchronized across multiple databases, is considered to be GUID. The only issue with a GUID is that it's generated on the DB side, and therefor has&amp;#160; a certain performance hit (an extra roundtrip to the DB to generate the GUID and let NHibernate know about it on insert of a new record). The alternative is to use a generator strategy guid.comb - a guid generated on the client side and as a result of that eliminate an extra roundtrip to the DB. The other benefit is that the value generated by this strategy is sequential, and therefore the GUID values are somewhat more traceable in terms of their order of creation.&lt;/p&gt;  &lt;p&gt;A sample mapping file would look like this:&lt;/p&gt;  &lt;pre class=&quot;csharpcode&quot;&gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;lt;?&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;xml&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&amp;quot;1.0&amp;quot;&lt;/span&gt;?&lt;span class=&quot;kwrd&quot;&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;span class=&quot;kwrd&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;hibernate-mapping&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;xmlns&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&amp;quot;urn:nhibernate-mapping-2.2&amp;quot;&lt;/span&gt; &#xA;                   &lt;span class=&quot;attr&quot;&gt;auto-import&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&amp;quot;true&amp;quot;&lt;/span&gt; &#xA;                   &lt;span class=&quot;attr&quot;&gt;assembly&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&amp;quot;Example.Domain&amp;quot;&lt;/span&gt; &#xA;                   &lt;span class=&quot;attr&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&amp;quot;Example.Domain.Mappings&amp;quot;&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;gt;&lt;/span&gt;&#xA;  &lt;span class=&quot;kwrd&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&amp;quot;Message&amp;quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&amp;quot;Messages&amp;quot;&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;gt;&lt;/span&gt;&#xA;    &lt;span class=&quot;kwrd&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&amp;quot;Id&amp;quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;column&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&amp;quot;Id&amp;quot;&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;strong&gt;      &lt;span class=&quot;kwrd&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;generator&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&amp;quot;guid.comb&amp;quot;&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;/&amp;gt;&lt;/span&gt;&#xA;&lt;/strong&gt;    &lt;span class=&quot;kwrd&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;gt;&lt;/span&gt;&#xA;    &lt;span class=&quot;kwrd&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&amp;quot;Text&amp;quot;&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;/&amp;gt;&lt;/span&gt;&#xA;  &lt;span class=&quot;kwrd&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;span class=&quot;kwrd&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;hibernate-mapping&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;&#xA;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&lt;/style&gt;&#xA;&#xA;&lt;p&gt;Quick run generated these values:&lt;/p&gt;&#xA;&#xA;&lt;pre class=&quot;csharpcode&quot;&gt;2636fb13-a23d-4d2c-b5b5-&lt;strong&gt;9b2d016cb9b&lt;/strong&gt;2    1st&#xA;81514f25-15c5-4a86-802d-&lt;strong&gt;9b2d016cb9b&lt;/strong&gt;7    2nd&#xA;544746af-8749-4e4c-9b65-&lt;strong&gt;9b2d016cb9b&lt;/strong&gt;7    3rd&lt;/pre&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;&#xA;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&lt;/style&gt;&#xA;&#xA;&lt;p&gt;Ideas on having a better strategy when dealing with IDs of GUID type?&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-10-07T04:20:47Z" PublishedUtc="2014-04-19T20:33:29.8162007Z" ModifiedUtc="2008-10-07T04:20:47Z" />
      <TagsPart Tags="NHibernate" />
      <AutoroutePart Alias="nhibernate-guid-alternative" UseCustomPattern="false" />
      <TitlePart Title="NHibernate GUID Alternative" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=law-of-demeter" Status="Published">
      <BodyPart Text="&lt;p&gt;&lt;a href=&quot;http://resharper.blogspot.com/2008/10/resharper-combos-breaking-aggregation.html&quot; target=&quot;_blank&quot; mce_href=&quot;http://resharper.blogspot.com/2008/10/resharper-combos-breaking-aggregation.html&quot;&gt;This post&lt;/a&gt; shows a good example of how to refactor your code to preserve Law of Demeter. Very clean and simple example. R# is there for the refactoring part, to make things less manual and friction free. As a reminder, Law of Demeter:&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold;&quot;&gt; Each unit should have only limited&#xA;knowledge about other units: only units &quot;closely&quot; related to the&#xA;current unit. Or: Each unit should only talk to its friends; Don't talk&#xA;to strangers.&lt;/span&gt; &lt;br&gt;&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-10-06T12:49:00Z" PublishedUtc="2014-04-19T20:33:30.0818666Z" ModifiedUtc="2008-10-06T12:49:00Z" />
      <TagsPart Tags="" />
      <AutoroutePart Alias="law-of-demeter" UseCustomPattern="false" />
      <TitlePart Title=" Law of Demeter" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=enumerations-and-extension-methods" Status="Published">
      <BodyPart Text="&lt;p&gt;Enumerations are for enumeration. Obvious. Often, though, it's used also for some metadata knowledge. For example, an enumeration for gender might look like:&lt;/p&gt;  &lt;pre class=&quot;csharpcode&quot;&gt;  &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;enum&lt;/span&gt; Gender&#xA;  {&#xA;    Male,&#xA;    Female&#xA;  }&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;style type=&quot;text/css&quot;&gt;&#xA;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&lt;/style&gt;Two options, simple. Now let's say I want to populate&amp;#160; a drop down list with these values and some meta data. It's simple when it's English (a proper enumeration value would mostly match the metadata, but not always), what about another language? Normally I would build a workaround this, to have a utility class that would get a gender value and based on it return the metadata for the required culture. Does the work, but leaves bad taste after.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This is where extension methods can make it nicer. I will not go for the cultures, but capital and lower cases, but culture solution should not be that different.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Gender is closed for changes, but we need to be able to 'extend' it's functionality without 're-opening' it. The next code snippet shows how to achieve the required functionality:&lt;/p&gt;&#xA;&#xA;&lt;pre class=&quot;csharpcode&quot;&gt;  &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;class&lt;/span&gt; GenderExtensions&#xA;  {&#xA;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;string&lt;/span&gt; ToNiceName(&lt;span class=&quot;kwrd&quot;&gt;this&lt;/span&gt; Gender gender,&#xA;                              IGenderFormattingStrategy formattingStrategy)&#xA;    {&#xA;      &lt;span class=&quot;kwrd&quot;&gt;return&lt;/span&gt; formattingStrategy.ToStringWithFormatting(gender);&#xA;    }&#xA;  }&lt;/pre&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;&#xA;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&lt;/style&gt;&#xA;&#xA;&lt;p&gt;In this case I used a strategy pattern for formatting. What is nice, is that now we can test the extension method, knowing that &lt;em&gt;Gender&lt;/em&gt; is not something we should be testing at all, but the result of &lt;em&gt;ToNiceName()&lt;/em&gt; method.&lt;/p&gt;&#xA;&#xA;&lt;div class=&quot;csharpcode&quot;&gt;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   1:  &lt;/span&gt;  [Concern(&lt;span class=&quot;kwrd&quot;&gt;typeof&lt;/span&gt;(GenderExtensions))]&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   2:  &lt;/span&gt;  [TestFixture]&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   3:  &lt;/span&gt;  &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;class&lt;/span&gt; when_converting_gender_to_string_with_strategy &lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   4:  &lt;/span&gt;                                    : SpecificationContext&amp;lt;Gender&amp;gt;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   5:  &lt;/span&gt;  {&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   6:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;string&lt;/span&gt; resultMaleCapitalized;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   7:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;string&lt;/span&gt; resultMaleLowered;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   8:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; IGenderFormattingStrategy capitalizedStrategy;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   9:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; IGenderFormattingStrategy loweredStrategy;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  10:  &lt;/span&gt;&amp;#160;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  11:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;override&lt;/span&gt; Gender EstablishContext()&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  12:  &lt;/span&gt;    {&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  13:  &lt;/span&gt;      capitalizedStrategy = Stub&amp;lt;IGenderFormattingStrategy&amp;gt;();&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  14:  &lt;/span&gt;      loweredStrategy = Stub&amp;lt;IGenderFormattingStrategy&amp;gt;();&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  15:  &lt;/span&gt;&amp;#160;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  16:  &lt;/span&gt;      capitalizedStrategy.Expect(&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  17:  &lt;/span&gt;           strategy =&amp;gt; strategy.ToStringWithFormatting(Gender.Male))&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  18:  &lt;/span&gt;            .Return(&lt;span class=&quot;str&quot;&gt;&amp;quot;MALE&amp;quot;&lt;/span&gt;);&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  19:  &lt;/span&gt;      loweredStrategy.Expect(&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  20:  &lt;/span&gt;           strategy =&amp;gt; strategy.ToStringWithFormatting(Gender.Male))&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  21:  &lt;/span&gt;            .Return(&lt;span class=&quot;str&quot;&gt;&amp;quot;male&amp;quot;&lt;/span&gt;);&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  22:  &lt;/span&gt;&amp;#160;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  23:  &lt;/span&gt;      &lt;span class=&quot;kwrd&quot;&gt;return&lt;/span&gt; Gender.Male;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  24:  &lt;/span&gt;    }&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  25:  &lt;/span&gt;&amp;#160;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  26:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; BecauseOf()&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  27:  &lt;/span&gt;    {&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  28:  &lt;/span&gt;      resultMaleCapitalized = sut.ToNiceName(capitalizedStrategy);&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  29:  &lt;/span&gt;      resultMaleLowered = sut.ToNiceName(loweredStrategy);&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  30:  &lt;/span&gt;    }&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  31:  &lt;/span&gt;&amp;#160;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  32:  &lt;/span&gt;    [Test]&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  33:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; should_return_string_formatted_according_to_strategy&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;                                                                   _rules()&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  34:  &lt;/span&gt;    {&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  35:  &lt;/span&gt;      resultMaleCapitalized.ShouldBeEqualTo(&lt;span class=&quot;str&quot;&gt;&amp;quot;MALE&amp;quot;&lt;/span&gt;);&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  36:  &lt;/span&gt;      resultMaleLowered.ShouldBeEqualTo(&lt;span class=&quot;str&quot;&gt;&amp;quot;male&amp;quot;&lt;/span&gt;);&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  37:  &lt;/span&gt;    }&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  38:  &lt;/span&gt;  }&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;&#xA;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&lt;/style&gt;&#xA;&#xA;&lt;p&gt;I am still not sure how much this test actually tests the extension method, or more serves as documentation to what it should be doing, but personally find it a good way to make sure that tested only one thing, and the implementation of the rest get deferred to later. In this case strategies are dead simply:&lt;/p&gt;&#xA;&#xA;&lt;pre class=&quot;csharpcode&quot;&gt;  &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;class&lt;/span&gt; CapitalizedStrategy : IGenderFormattingStrategy&#xA;  {&#xA;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;string&lt;/span&gt; ToStringWithFormatting(Gender gender)&#xA;    {&#xA;      &lt;span class=&quot;kwrd&quot;&gt;return&lt;/span&gt; gender.ToString().ToUpper();&#xA;    }&#xA;  }&lt;/pre&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;&#xA;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&lt;/style&gt;&#xA;&#xA;&lt;p&gt;So what it's good for besides the metadata? Allows OCP for enumerations, brings a cleaner syntax. If you happened to have another neat usages, welcome to share those.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-10-04T04:19:41Z" PublishedUtc="2014-04-19T20:33:30.4099435Z" ModifiedUtc="2008-10-04T04:19:41Z" />
      <TagsPart Tags="C#" />
      <AutoroutePart Alias="enumerations-and-extension-methods" UseCustomPattern="false" />
      <TitlePart Title="Enumerations And Extension Methods" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=moving-on" Status="Published">
      <BodyPart Text="&lt;p&gt;This is my goodbye post to &lt;a href=&quot;http://sunwaptasolutions.com/&quot; target=&quot;_blank&quot;&gt;Sunwapta&lt;/a&gt;, the company I spent 3 years with. Definitely, this was one of the most exciting experiences that have happened to me during my career as a software developer. People there have helped me to grow and mature, and for that I owe them my gratitude. I have learned tones. Thank you for keeping up with me and listening to all of the things I was bringing in. I hope when you run into code I had contribution to, it will bring up more of the positive thoughts and not the opposite. It is a bit sad to leave things not entirely finished, but I am more than confident that they will be done in the best way. After all, together we have done a &lt;a href=&quot;http://weblogs.asp.net/sfeldman/archive/2008/07/23/challenge-listing-achievements.aspx&quot; target=&quot;_blank&quot;&gt;long way&lt;/a&gt; and learned awesome things that not only made us better developers, but also taught that pounding in code is not everything that matters, but thinking, analyzing, constantly improving, and most of all, never settling on mediocre, always striving to better.&amp;#160; &lt;/p&gt;  &lt;p&gt;I am stepping up to new challenges and moving to another company to gain more wisdom and hopefully contribute my knowledge. I can sense this is going to be an exciting journey packed with awesome challenges. So &lt;a href=&quot;http://cortex.net/&quot; target=&quot;_blank&quot;&gt;Cortex&lt;/a&gt;, here I come!&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-10-04T03:36:02Z" PublishedUtc="2014-04-19T20:33:30.7610072Z" ModifiedUtc="2008-10-04T03:36:02Z" />
      <TagsPart Tags="Personal" />
      <AutoroutePart Alias="moving-on" UseCustomPattern="false" />
      <TitlePart Title="Moving On" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=nokia" Status="Published">
      <BodyPart Text="&lt;p&gt; This post is not sponsored by the manufacturer. Neither do I get dividends from the sales. This is pure lips service to a great product line I've used for years.&lt;/p&gt;  &lt;p&gt;We all have cell phones. Well, if you don't (I wonder were you managed to hide all these years), no worries, soon you will. A joke was once told that rather than giving people social identification number, they better be given a cell phone number - that way it's unique and you always keep in touch. As they say, in every joke there's a little portion of joke.&lt;/p&gt;  &lt;p&gt;My first cell phone was Nokia 2110i. &lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/Nokia_13A05/2110i_2.png&quot;&gt;&lt;img style=&quot;border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px&quot; height=&quot;171&quot; alt=&quot;2110i&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/Nokia_13A05/2110i_thumb.png&quot; width=&quot;59&quot; align=&quot;right&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; A bit bulky, TDMA sound quality, but very user friendly, reliable and simple. I loved that phone - made me feel cool in high school and was helpful when I was missing the last bus.&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/Nokia_13A05/5120_2.png&quot;&gt;&lt;img style=&quot;border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px&quot; height=&quot;156&quot; alt=&quot;5120&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/Nokia_13A05/5120_thumb.png&quot; width=&quot;56&quot; align=&quot;left&quot; border=&quot;0&quot; /&gt;&lt;/a&gt;I learned the wonderful meaning of the word &amp;quot;contract&amp;quot; and once could get out of that, got Nokia 5120. That was c-o-o-l. Brand new technology, smaller size, more functionality, improved every single aspect of phone with one important thing - consistency. Nokia managed to keep the learning curve low by leaving the familiar user experience, yet overloading with new and improved functionalities and features (SMS, Wake alarm, better profiles, etc).&lt;/p&gt;  &lt;p&gt;Nokia 9110 a.k.a. Communicator was a wet dream of those days, but I never got a chance to own one. Yet playing with it was great - guess what, same familiarity despite the WAP browsing, sophisticated records management and fax capabilities.&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/Nokia_13A05/9110i_2.jpg&quot;&gt;&lt;img style=&quot;border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px&quot; height=&quot;159&quot; alt=&quot;9110i&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/Nokia_13A05/9110i_thumb.jpg&quot; width=&quot;100&quot; align=&quot;right&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/Nokia_13A05/nokia-3510_2.jpg&quot;&gt;&lt;img style=&quot;border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px&quot; height=&quot;122&quot; alt=&quot;nokia-3510&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/Nokia_13A05/nokia-3510_thumb.jpg&quot; width=&quot;79&quot; align=&quot;left&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; Nokia - Connecting People. With 3510 I felt it was more than a slogan. It was a reality. I loved every feature. Not to mention the colour it brought into the life. Playing more than a snake on your cell - yahoo. Calendar that looked both decent and be useful - again, with same familiar style and ease of use.&lt;/p&gt;  &lt;p&gt;While working at Mushroom Interactive, I had a real chance to see what differentiates a good cell phone from a crappy popular toy. Nokia 6600, N-Gage, 3600 went through our office along with other &amp;quot;competitors&amp;quot;. What a joke. I will never forget the one we struggled with just to render properly a drop down list (Mobile ASP.NET) - Panasonic. Felt like a merchandise sold a kilo for a buck. &lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/Nokia_13A05/nokia-3600_2.jpg&quot;&gt;&lt;img style=&quot;border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px&quot; height=&quot;111&quot; alt=&quot;nokia-3600&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/Nokia_13A05/nokia-3600_thumb.jpg&quot; width=&quot;111&quot; align=&quot;left&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/Nokia_13A05/nokia_6600_2.jpg&quot;&gt;&lt;img style=&quot;border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px&quot; height=&quot;106&quot; alt=&quot;nokia_6600&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/Nokia_13A05/nokia_6600_thumb.jpg&quot; width=&quot;129&quot; align=&quot;left&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/Nokia_13A05/Nokia_N-Gage_2.jpg&quot;&gt;&lt;img style=&quot;border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px&quot; height=&quot;102&quot; alt=&quot;Nokia_N-Gage&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/Nokia_13A05/Nokia_N-Gage_thumb.jpg&quot; width=&quot;148&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;Then the regression days began - we moved to North America and I discovered that being the best is not enough, you also have to know how to do the domestic politics and promote sales. The best I could get through a provider was 3220. &lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/Nokia_13A05/3220_2.jpg&quot;&gt;&lt;img style=&quot;border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px&quot; height=&quot;109&quot; alt=&quot;3220&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/Nokia_13A05/3220_thumb.jpg&quot; width=&quot;109&quot; align=&quot;right&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; I'd rather have an intermediate Noka than an advanced Samsung. Man I was right. My wife got Samsung :)&lt;/p&gt;  &lt;p&gt;These days seems like changes are coming. Nokia N95 (8GB model) made it's debut here, and despite all the sexiness and coolness of iPhone and it's imitators, proves that if you want functionality with UX that just make sense you will find the truth. Now my wife is on N75 and I am (finally) moving on N95.&lt;/p&gt;  &lt;p&gt;What's the point in telling all this besides going over the history of some Finish company and it's line of products? They made it right. Not from the beginning, but gradually and consistently. They wanted to be the number one and they became. They put quality on top and they served it. I think this is a great sample and a lesson how we can build software - value user experience and&amp;#160; business value. Listen to what customer desires for, and at the same time be bold enough to innovate. Don't imitate your competitors, let them copy you, be ahead. &lt;strong&gt;Don't settle on achieved, wish for more. &lt;/strong&gt;&lt;/p&gt;  &lt;p&gt;PS: if you are interested in time Nokia phones timeline - &lt;a href=&quot;http://www.newlaunches.com/entry_images/1107/12/nokia_timeline.php&quot; target=&quot;_blank&quot;&gt;this&lt;/a&gt; will give you a clue :)&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-10-01T04:27:16Z" PublishedUtc="2008-10-01T04:27:16Z" ModifiedUtc="2008-10-01T04:27:16Z" />
      <TagsPart Tags="Personal" />
      <AutoroutePart Alias="nokia" UseCustomPattern="false" />
      <TitlePart Title="Nokia" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=oss-with-ms" Status="Published">
      <BodyPart Text="&lt;p&gt;&lt;a href=&quot;http://weblogs.asp.net/scottgu/archive/2008/09/28/jquery-and-microsoft.aspx&quot; target=&quot;_blank&quot;&gt;This&lt;/a&gt; is definitely interesting turn of things. Rather than come with it's own exact copy of an existing product, MS will provide an OSS product as a part of a bundle. I wonder if there are more interesting and welcomed surprises coming from this direction. &lt;/p&gt;  &lt;p&gt;We have used jQuery for a couple of recent project to save ourselves headaches on the client side, and the library is quiet impressive. Definitely good news. &lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-09-29T03:23:47Z" PublishedUtc="2014-04-19T20:33:33.9496359Z" ModifiedUtc="2008-09-29T03:23:47Z" />
      <TagsPart Tags="ASP.NET" />
      <AutoroutePart Alias="oss-with-ms" UseCustomPattern="false" />
      <TitlePart Title="OSS with MS" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=vmware-workstation-6-5-unity-feature" Status="Published">
      <BodyPart Text="&lt;p&gt;VMWare has released the 6.5 version with some nice updates (better USB support, Bluetooth support, DirectX support, and last but not the least - Unity feature. What it allows is to run the application from virtual machine in the host as those would be applications running on the host itself - sweet. So now if you need to work on several programs from several virtual machines, you can execute all of them with Unity (in Unity mode) and switching programs/windows would be just a matter of tabbing between those (ALT-Tab) and not a bunch of keystrokes and guest OS get focus / loose focus. Really love this feature.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-09-26T06:15:30Z" PublishedUtc="2014-04-19T20:33:34.168383Z" ModifiedUtc="2008-09-26T06:15:30Z" />
      <TagsPart Tags="Other" />
      <AutoroutePart Alias="vmware-workstation-6-5-unity-feature" UseCustomPattern="false" />
      <TitlePart Title="VMWare Workstation 6.5 - Unity Feature" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=the-art-of-agile-development-book" Status="Published">
      <BodyPart Text="&lt;p&gt;This &lt;a href=&quot;http://www.amazon.com/gp/product/0596527675&quot;&gt;book&lt;/a&gt; is gold. Dig it!&amp;nbsp; &lt;a href=&quot;http://www.amazon.com/gp/product/0596527675&quot;&gt;&lt;img style=&quot;border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px&quot; height=&quot;240&quot; alt=&quot;book cover&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/TheArtofAgileDevelopmentBook_AA36/image_5.png&quot; width=&quot;185&quot; align=&quot;right&quot; border=&quot;0&quot;&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;The timing is amazing. Right after I posted the &lt;a href=&quot;http://weblogs.asp.net/sfeldman/archive/2008/09/17/team-work.aspx&quot;&gt;Team Work&lt;/a&gt; entry, I received the book and couldn't stop reading it. Should read it to the end, but had to comment and let others know how good it is. Amazon rating was quite successful this time (12 five stars, 1 one star). &lt;/p&gt; &lt;p&gt;The book is not packed with code and patterns, but with other type of wisdom that is required no less than good programming skills IMO. I could definitely associate written with myself and mistakes I have done in the past and reflect the ways I was dealing with those and how authors of the books have done that. Learning from others mistakes is valuable, learning how to prevent future mistakes be applying techniques and analyzing situations - real gem. &lt;/p&gt; &lt;p&gt;To add to that, the &lt;a href=&quot;http://weblogs.asp.net/sfeldman/archive/2008/07/24/fearless-change-patterns-for-introducing-new-ideas.aspx&quot;&gt;references&lt;/a&gt; that authors are giving are excellent as well, (books/materials) I definitely find useful for myself.&lt;/p&gt; &lt;p&gt;Note: make sure you are going to the .com site - this one has the Search Inside feature on the book. I went to the local site (.ca) and it was missing.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-09-24T18:23:20Z" PublishedUtc="2008-09-24T18:23:20Z" ModifiedUtc="2008-09-24T18:23:20Z" />
      <TagsPart Tags="" />
      <AutoroutePart Alias="the-art-of-agile-development-book" UseCustomPattern="false" />
      <TitlePart Title="The Art of Agile Development (Book)" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=team-work" Status="Published">
      <BodyPart Text="&lt;p&gt;&amp;quot;I am a team player&amp;quot; - another buzz expression of this days that anyone will bring up if are asked. &amp;quot;Why are you team player?&amp;quot; this is the question to ask and answer.&lt;/p&gt;  &lt;p&gt;Personally I find the saying &amp;quot;one had is good, two is better&amp;quot; quite true. It's not just in pairing, it's in everything. When a few people working together (and not necessarily developers only, those can be different skills individuals), they bring up to the table a variety of skills and knowledge. The amount of useful thoughts and information exchanged over a short period of time being is enormous. As a part of the team, even the smallest contribution produces higher chances of success, and as a result of that builds up the confidence and productivity. So being a part of the team is not just being a monkey, but an equal citizen with all the right and responsibilities.&lt;/p&gt;  &lt;p&gt;Responsibilities are important. Team player should be responsible to contribute the most to the group effort towards success, and at the same time not to alienate team mates against itself by making them secondary players. Tasks are solely responsibilities of those that have committed to tackle them. Suggesting help is important as much as offering it when being asked. Yet forcing help, or worse, providing the slack in form of completing others tasks constantly is creating a huge flaw IMO. As a responsible team player you have to let others know and understand that help is always there, but it doesn't mean that a person can just write the tasks off to someone else. That way team is no longer a properly functional team.&lt;/p&gt;  &lt;p&gt;Every team player has the right to ask for help and not be afraid of that. If you never ask, you never learn, right? Historically we were lead into thinking that if you are asking for help, then you just can't pull it off (common, as a software developers our ego is riding kilometres ahead of us). Wrong thinking. Asking for help is vital when it's required. Pride is not going to solve the problem, but waste time and value that could be provided if only the problem/task would have being solved. Yet one sign of warning with the right to ask for help - not to abuse it. It is easy to go down the road of just shifting it on someone else&amp;#160; plate. True team player doesn't do it.&lt;/p&gt;  &lt;p&gt;All this being said, I am not trying to define what team player is. This is more a reflective thinking, personal experience and how I see the team work working successfully. &lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-09-18T04:00:10Z" PublishedUtc="2014-04-19T20:33:34.7168624Z" ModifiedUtc="2008-09-18T04:00:10Z" />
      <TagsPart Tags="Agile,Personal" />
      <AutoroutePart Alias="team-work" UseCustomPattern="false" />
      <TitlePart Title="Team Work" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=wpf-visual-logical-tree-s" Status="Published">
      <BodyPart Text="&lt;p&gt;Coming from the ASP.NET development, I am quit used to the fact that a page has a tree of controls and by traversing the tree you can navigate to the elements.&lt;/p&gt; &lt;p&gt;With WPF is it a bit more sophisticated. WPF application has both visual and logical tree or several of those. Josh Smith has wrote a very useful &lt;a href=&quot;http://www.codeproject.com/KB/WPF/WpfElementTrees.aspx&quot; target=&quot;_blank&quot;&gt;post&lt;/a&gt; to start understanding about the subject. Also there is a VS.NET debugger visualizer &lt;a href=&quot;http://www.codeproject.com/KB/WPF/WoodstockForWPF.aspx&quot; target=&quot;_blank&quot;&gt;Woodstock&lt;/a&gt; to assist in understanding WPF trees. &lt;/p&gt; &lt;p&gt;The need to have to separate trees comes out of the fact that WPF has several different base classes for elements: ContentElement, Visual and Visual3D. &lt;/p&gt; &lt;p&gt;Visual is a base class for (the list is quit long, so it's not complete)&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/WPFVisualLogicalTrees_8220/image_2.png&quot;&gt;&lt;img style=&quot;border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px&quot; height=&quot;477&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/WPFVisualLogicalTrees_8220/image_thumb.png&quot; width=&quot;411&quot; border=&quot;0&quot;&gt;&lt;/a&gt; &lt;/p&gt; &lt;p&gt;Where ContentElement is a base class for:&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/WPFVisualLogicalTrees_8220/image_4.png&quot;&gt;&lt;img style=&quot;border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px&quot; height=&quot;419&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/WPFVisualLogicalTrees_8220/image_thumb_1.png&quot; width=&quot;328&quot; border=&quot;0&quot;&gt;&lt;/a&gt; &lt;/p&gt; &lt;p&gt;What is important to mention is that ContentElement derived instances are not a part of the visual tree, but the logical tree. In order to be rendered at all, ContentElement has to be hosted by a Visual control (which makes sense). &lt;/p&gt; &lt;p&gt;An example where it's becoming critical is when trying to traverse the tree from a given element, the order matters. First the logical path attempt and then the visual. &lt;/p&gt; &lt;p&gt;Two .NET framework classes that assist with the task are LogicalTreeHelper and VisualTreeHelper.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-09-10T15:29:09Z" PublishedUtc="2008-09-10T15:29:09Z" ModifiedUtc="2008-09-10T15:29:09Z" />
      <TagsPart Tags="WPF" />
      <AutoroutePart Alias="wpf-visual-logical-tree-s" UseCustomPattern="false" />
      <TitlePart Title="WPF Visual / Logical Tree(s)" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=google-chrome" Status="Published">
      <BodyPart Text="&lt;p&gt;This is old news, but Google apparently has release a browser to speed things up (according to Google most of the current browsers are not performing well with CSS, JavaScript, and whole rendering). From a scratch approach worked not bad at all. Though there are several things that are working against this new browser:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Keyboard shortcuts - right now you have to use a mouse to close a tab, or open a new one, or access downloaded files and much more.&lt;/li&gt; &lt;li&gt;Absence of add-ins - one of the strong promoting features for FireFox was a massive support for custom add-ins. Having at least a few and showing that it's the direction would not heart at all. On the other hand, maybe it's not necessarily the direction Google wants to go (and not follow).&lt;/li&gt;&lt;/ol&gt; &lt;p&gt;Overall - quick, clean, will evaluate more.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-09-05T17:57:55Z" PublishedUtc="2014-04-19T20:33:35.8262222Z" ModifiedUtc="2008-09-05T17:57:55Z" />
      <TagsPart Tags="Personal" />
      <AutoroutePart Alias="google-chrome" UseCustomPattern="false" />
      <TitlePart Title="Google Chrome" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=wpf" Status="Published">
      <BodyPart Text="&lt;p&gt;Recently I started to work on a new project in our company that is using WPF technology. As a web developer with almost no experience with desktop applications I find it interesting and challenging at the same time (statefull environment,&amp;nbsp; no need in intermediate DTO objects, rich UI support, XAML abilities that are beyond regular markup capabilities, etc). Yet there are many questions that have an answer, but feel very weird. A few of those for example&lt;/p&gt; &lt;ol&gt; &lt;li&gt;I have a domain object Client. When binding its' properties, I have to implement INotifyPropertyChanged and &quot;pollute&quot; the code with Notifications for UI. When a property is calculated (getter only), another property has to do the notification, which may end up in cascading notification. As a result of this, the responsibility of a Client now also includes UI notification responsibilities. Feels wrong.  &lt;li&gt;XAML - expressing if not everything, but 99% in XAML is cool, but this brings the question of concerns as well. Should bindings be determined in code and not markup? It's easier and faster to refactor code, rather than markup.  &lt;li&gt;VS.NET support for XAML - well, if not R#, I honestly would not manage to do a lot. SP1 does help, but R# is still pulling off a lot more. Seems like IDE is not ready for the XAML yet. Blend 2.5 is an option, but just the designer, which makes code development a bit challenged.  &lt;li&gt;Resources - there are lots of them, and at the same time not many that are nicely arranged/grouped/catalogued. I loved Prism&amp;nbsp; for WPF - structured, unified, dealing with real-life applications issues. Also connects between WPF and other things no project can exist without. &lt;li&gt;Updated: Controls support - No DatePicker or Calendar control. There's a lot of attempts to provide a substitute, but IMO MS should care for that as a part of the bandle. TabControl - a bug with validation and switching tabs (validation is not happening). For a control like tabs, this is a bit sloppy.&lt;/li&gt;&lt;/ol&gt; &lt;p&gt;For myself, I think I need to dig dipper to understand the core concepts and principles of WPF/XAML. The implementation details will be less significant if I grasp the concepts first (as always). You are welcome to share your opinions or advices in terms of where to dig first.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-09-05T16:58:07Z" PublishedUtc="2014-04-19T20:33:36.4824595Z" ModifiedUtc="2008-09-05T16:58:07Z" />
      <TagsPart Tags="WPF" />
      <AutoroutePart Alias="wpf" UseCustomPattern="false" />
      <TitlePart Title="WPF" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=sp1-and-scott-guthrie" Status="Published">
      <BodyPart Text="&lt;p&gt;Ok, so I was really upset and spilled a bit more than probably should have to. ScottGu has picked my desperate yell from the blog and suggested a help (2nd time I believe - 1st one occurred when .NET 2.0 SP1 has broken our production web sites, wow, he's good). Apparently there was an issue with SP1 &lt;strong&gt;Beta&lt;/strong&gt; and R# 4.0. I already went through refresh on installs (including removal of addins and components). Plan vanilla .NET FW with Service Packs with no addins installed works fine (well, not crushing, working without R# is impossible). &lt;/p&gt; &lt;p&gt;Since JetBrains just released version 4.1 of R#, it was natural to install it with the refreshed installation I had and see if it's all working or now. It worked, wow, interesting...&lt;/p&gt; &lt;p&gt;Taking a moment and stepping back from this v.XX sp.YY madness I would like to express a huge thank you to Scott -- he didn't have to read the blog, neither I was asking for help, yet he did get involved, and involved a team as well. &lt;/p&gt; &lt;p&gt;My vote goes to replicate this man at MS and assign to more products! Thanks Scott.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-09-03T04:50:30Z" PublishedUtc="2014-04-19T20:33:37.4511962Z" ModifiedUtc="2008-09-03T04:50:30Z" />
      <TagsPart Tags=".NET,Personal,VS.NET" />
      <AutoroutePart Alias="sp1-and-scott-guthrie" UseCustomPattern="false" />
      <TitlePart Title="SP1 and Scott Guthrie" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=sp1" Status="Published">
      <BodyPart Text="&lt;p&gt;As you probably know, the all new and shiny SP1 for both .NET framework and VS.NET 2008 are out. So I waited a bit, saw that other developers are accepting it and installed it. Great, worked smooth. Till I dared to restart. After that VS.NET 2008 designer &quot;empowered by new abilities deployed with SP1&quot; has showed own of it's hidden jams - complete crash of the IDE with no traces to what has just happened.&lt;/p&gt; &lt;p&gt;Google it. And so I did, reading wondering MS responses to others complaining about the same issue, such as &quot;are you having the admin privileges&quot;? Or better &quot;make sure you uninstall A prior to installing C, but make sure D is not there, or you run the E utility to let you know that F is missing&quot;. &lt;/p&gt; &lt;p&gt;And I have a question - WTF?! Can't you guys deploy a normal SP and that's it? If there's a bunch of hotfixes, CTPs and betas that a developer is not using, why to let him go through the pain? And as well, why not to puck utilities to remove thins along or at least provide the link and not just on the forums?&lt;/p&gt; &lt;p&gt;I learned my lesson -- develop in a virtual box. At least that way the pain is not lasting for long (a few hours to recover, rather than a whole day to get to the same square you started from initially).&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-09-03T02:26:00Z" PublishedUtc="2014-04-19T20:33:38.0449395Z" ModifiedUtc="2008-09-03T02:26:00Z" />
      <TagsPart Tags=".NET,Personal,VS.NET" />
      <AutoroutePart Alias="sp1" UseCustomPattern="false" />
      <TitlePart Title="SP1" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=nhibernate-2-0-ga-is-out" Status="Published">
      <BodyPart Text="&lt;div class=&quot;wlWriterSmartContent&quot; id=&quot;scid:605EEA63-B54B-4e6d-A290-F5E9E8229FC1:9a110799-318c-4762-baae-fa597f1f551b&quot; style=&quot;padding-right: 0px; display: inline; padding-left: 0px; padding-bottom: 0px; margin: 0px; padding-top: 0px&quot;&gt;&lt;/div&gt;Download it &lt;a href=&quot;http://sourceforge.net/project/showfiles.php?group_id=73818&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;." />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-08-24T17:26:38Z" PublishedUtc="2014-04-19T20:33:39.154299Z" ModifiedUtc="2008-08-24T17:26:38Z" />
      <TagsPart Tags=".NET" />
      <AutoroutePart Alias="nhibernate-2-0-ga-is-out" UseCustomPattern="false" />
      <TitlePart Title="NHibernate 2.0 GA Is Out" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=re-inventing-wheel" Status="Published">
      <BodyPart Text="&lt;p&gt;It doesn't matter how much we try to avoid it, it is unavoidable. Re-inventing wheel phenomena is always going to take place here and there. Doing a little BDD tests made it clear that I need to mark and specification with the type of the the system under tests I am testing, or the &lt;em&gt;Concern&lt;/em&gt; of the test. One way I was showed to do it was to introduce a custom ConcernAttribute and mark with it the TestFixute - specification. Code looks like this:&lt;/p&gt; &lt;div class=&quot;csharpcode&quot;&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   1:  &lt;/span&gt;  &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;class&lt;/span&gt; ConcernAttribute : Attribute&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   2:  &lt;/span&gt;  {&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   3:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; Type SystemUnderTestType { get; &lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; set; }&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   4:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;string&lt;/span&gt; Message { get; &lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; set; }&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   5:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   6:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; ConcernAttribute(Type systemUnderTestType, &lt;span class=&quot;kwrd&quot;&gt;string&lt;/span&gt; message)&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   7:  &lt;/span&gt;    {&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   8:  &lt;/span&gt;      SystemUnderTestType = systemUnderTestType;&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   9:  &lt;/span&gt;      Message = message;&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  10:  &lt;/span&gt;    }&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  11:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  12:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; ConcernAttribute(Type systemUnderTestType) : &lt;span class=&quot;kwrd&quot;&gt;this&lt;/span&gt;(systemUnderTestType, &lt;span class=&quot;kwrd&quot;&gt;string&lt;/span&gt;.Empty) {}&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  13:  &lt;/span&gt;  }&lt;/pre&gt;&lt;/div&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&#xA;&lt;/style&gt;&#xA;&#xA;&lt;p&gt;Not the smartest code in the world, but does it's work:&lt;/p&gt;&lt;pre class=&quot;csharpcode&quot;&gt;  [Concern(&lt;span class=&quot;kwrd&quot;&gt;typeof&lt;/span&gt;(CurrencyConverter))]&#xA;  [TestFixture]&#xA;  &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;class&lt;/span&gt; when_bla_bla_bla&#xA;&lt;/pre&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&#xA;&lt;/style&gt;&#xA;&#xA;&lt;p&gt;Apperently, MbUnit creators have had this idea before, and where kind enough to create an attribute for this purpose - TestsOnAttribute:&lt;/p&gt;&lt;pre class=&quot;csharpcode&quot;&gt;  [TestsOn(&lt;span class=&quot;kwrd&quot;&gt;typeof&lt;/span&gt;(CurrencyConverter))]&#xA;  [TestFixture]&#xA;  &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;class&lt;/span&gt; when_bla_bla_bla&lt;/pre&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&#xA;&lt;/style&gt;&#xA;&#xA;&lt;p&gt;Wheel re-invention :) &lt;/p&gt;&#xA;&lt;p&gt;Now why would you prefer to use the original wheel? Well, personally just to save this step from occurring each time...&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/ReinventingWheel_14A0A/image_4.png&quot;&gt;&lt;img style=&quot;border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px&quot; height=&quot;57&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/ReinventingWheel_14A0A/image_thumb_1.png&quot; width=&quot;312&quot; border=&quot;0&quot;&gt;&lt;/a&gt;&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-08-14T05:35:20Z" PublishedUtc="2008-08-14T05:35:20Z" ModifiedUtc="2008-08-14T05:35:20Z" />
      <TagsPart Tags=".NET,TDD" />
      <AutoroutePart Alias="re-inventing-wheel" UseCustomPattern="false" />
      <TitlePart Title="Re-inventing Wheel" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=bdd-vs-tdd" Status="Published">
      <BodyPart Text="&lt;p&gt;I wanted to put a simple test in place to document the behaviour of a value converter WPF application I am working on is using. First I did it the standard TDD way (sort of spiking multicultural support of MbUnit framework). The result worked great.&lt;/p&gt; &lt;div class=&quot;csharpcode&quot;&gt;&lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;lnum&quot;&gt;   1:  &lt;/span&gt;  [Concern(&lt;span class=&quot;kwrd&quot;&gt;typeof&lt;/span&gt; (CurrencyConverter))]&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   2:  &lt;/span&gt;  [TestFixture]&lt;/pre&gt;&lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;lnum&quot;&gt;   3:  &lt;/span&gt;  &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;class&lt;/span&gt; when_converting_with_CurrencyConverter&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   4:  &lt;/span&gt;  {&lt;/pre&gt;&lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;lnum&quot;&gt;   5:  &lt;/span&gt;    [Test]&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   6:  &lt;/span&gt;    [&lt;strong&gt;MultipleCulture&lt;/strong&gt;(&lt;span class=&quot;str&quot;&gt;&quot;en-US,fr-CA&quot;&lt;/span&gt;)]&lt;/pre&gt;&lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;lnum&quot;&gt;   7:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; should_format_to_currency_using_current_culture_with_no_decimals()&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   8:  &lt;/span&gt;    {&lt;/pre&gt;&lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;lnum&quot;&gt;   9:  &lt;/span&gt;      var &lt;span class=&quot;kwrd&quot;&gt;value&lt;/span&gt; = 2000d;&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  10:  &lt;/span&gt;      IValueConverter sut = &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; CurrencyConverter();&lt;/pre&gt;&lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;lnum&quot;&gt;  11:  &lt;/span&gt;      var result = sut.Convert(&lt;span class=&quot;kwrd&quot;&gt;value&lt;/span&gt;, &lt;span class=&quot;kwrd&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;kwrd&quot;&gt;null&lt;/span&gt;, Thread.CurrentThread.CurrentCulture);&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  12:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;&lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;lnum&quot;&gt;  13:  &lt;/span&gt;      result.ShouldBeEqualTo(&lt;span class=&quot;kwrd&quot;&gt;value&lt;/span&gt;.ToString(&lt;span class=&quot;str&quot;&gt;&quot;C0&quot;&lt;/span&gt;));&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  14:  &lt;/span&gt;    }&lt;/pre&gt;&lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;lnum&quot;&gt;  15:  &lt;/span&gt;  }&lt;/pre&gt;&lt;/div&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&#xA;&lt;/style&gt;&#xA;&#xA;&lt;p&gt;The MultiCultureAttribute was very handy and it did not report the single test as 2 tests in the headcount (having same thing done with RowTest would count test for two, or actually for each RowAttribute applied along with RowTestAttribute).&lt;/p&gt;&#xA;&lt;p&gt;Now I wanted this to be expressed in a BDD style, since BDD makes more sense from both readability and maintainability perspectives. The code looked like:&lt;/p&gt;&#xA;&lt;div class=&quot;csharpcode&quot;&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   1:  &lt;/span&gt;  [Concern(&lt;span class=&quot;kwrd&quot;&gt;typeof&lt;/span&gt; (CurrencyConverter))]&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   2:  &lt;/span&gt;  [TestFixture]&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   3:  &lt;/span&gt;  &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;class&lt;/span&gt; when_converting_with_CurrencyConverter : SpecificationContext&amp;lt;IValueConverter&amp;gt;&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   4:  &lt;/span&gt;  {&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   5:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;value&lt;/span&gt;;&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   6:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;object&lt;/span&gt; result;&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   7:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   8:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;override&lt;/span&gt; IValueConverter EstablishContext()&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   9:  &lt;/span&gt;    {&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  10:  &lt;/span&gt;      &lt;span class=&quot;kwrd&quot;&gt;value&lt;/span&gt; = 2000d;&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  11:  &lt;/span&gt;      &lt;span class=&quot;kwrd&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; CurrencyConverter();&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  12:  &lt;/span&gt;    }&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  13:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  14:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; BecauseOf()&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  15:  &lt;/span&gt;    {&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  16:  &lt;/span&gt;      result = sut.Convert(&lt;span class=&quot;kwrd&quot;&gt;value&lt;/span&gt;, &lt;span class=&quot;kwrd&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;kwrd&quot;&gt;null&lt;/span&gt;, &lt;strong&gt;Thread.CurrentThread.CurrentCulture&lt;/strong&gt;);&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  17:  &lt;/span&gt;    }&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  18:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  19:  &lt;/span&gt;    [Test]&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  20:  &lt;/span&gt;   &lt;strong&gt; [&lt;/strong&gt;MultipleCulture&lt;strong&gt;(&lt;span class=&quot;str&quot;&gt;&quot;en-US,fr-CA&quot;&lt;/span&gt;)]&lt;/strong&gt;&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  21:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; should_format_to_currency_using_current_culture_with_no_decimals()&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  22:  &lt;/span&gt;    {&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  23:  &lt;/span&gt;      result.ShouldBeEqualTo(&lt;span class=&quot;kwrd&quot;&gt;value&lt;/span&gt;.ToString(&lt;span class=&quot;str&quot;&gt;&quot;C0&quot;&lt;/span&gt;));&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  24:  &lt;/span&gt;    }&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  25:  &lt;/span&gt;  }&lt;/pre&gt;&lt;/div&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&#xA;&lt;/style&gt;&#xA;&#xA;&lt;p&gt;Unfortunately this failed. Reason - EstablishContext() and BecauseOf() are both executed upon SetUp of the TextFixture. Therefore the sut being created is there for both tests - with the first culture (en-US).&lt;/p&gt;&#xA;&lt;p&gt;Listing of the SpecificationContext&amp;lt;T&amp;gt; base class:&lt;/p&gt;&#xA;&lt;div class=&quot;csharpcode&quot;&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   1:  &lt;/span&gt;  [TestFixture]&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   2:  &lt;/span&gt;  &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;class&lt;/span&gt; SpecificationContext&amp;lt;SystemUnderTestType&amp;gt;&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   3:  &lt;/span&gt;  {&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   4:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;protected&lt;/span&gt; SystemUnderTestType sut;&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   5:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   6:  &lt;/span&gt;    [SetUp]&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   7:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; Setup()&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   8:  &lt;/span&gt;    {&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   9:  &lt;/span&gt;      sut = EstablishContext();&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  10:  &lt;/span&gt;      BecauseOf();&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  11:  &lt;/span&gt;    }&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  12:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  13:  &lt;/span&gt;    [TearDown]&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  14:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; Cleanup(){}&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  15:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  16:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;abstract&lt;/span&gt; SystemUnderTestType EstablishContext();&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  17:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; BecauseOf();&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  18:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;protected&lt;/span&gt; TypeToStub Stub&amp;lt;TypeToStub&amp;gt;()&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  19:  &lt;/span&gt;    {&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  20:  &lt;/span&gt;      &lt;span class=&quot;kwrd&quot;&gt;return&lt;/span&gt; MockRepository.GenerateStub&amp;lt;TypeToStub&amp;gt;();&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  21:  &lt;/span&gt;    }&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  22:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;protected&lt;/span&gt; TypeToMock Mock&amp;lt;TypeToMock&amp;gt;()&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  23:  &lt;/span&gt;    {&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  24:  &lt;/span&gt;      &lt;span class=&quot;kwrd&quot;&gt;return&lt;/span&gt; MockRepository.GenerateMock&amp;lt;TypeToMock&amp;gt;();&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  25:  &lt;/span&gt;    }&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  26:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  27:  &lt;/span&gt;  }&lt;/pre&gt;&lt;/div&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&#xA;&lt;/style&gt;&#xA;&#xA;&lt;p&gt;As you can see, the problem is that for both cultures the test is running with only once executed Setup, where the context is established and reason for test is created. &lt;/p&gt;&#xA;&lt;p&gt;One way to solve it is to split the TestFixute into to. I am not likely to prefer this due to the fact that it defeats the purpose of testing - simple and quick. Another way, the one I will probably implement, is revert from BDD to classic TDD. &lt;/p&gt;&#xA;&lt;p&gt;Although this is what I've decided for this particular test, this does have implications on other UI testing where multicultural support is important. In case any of you my dear readers has run into similar situation and managed to figure out a solution for BDD way, please share your experience.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-08-14T05:22:34Z" PublishedUtc="2014-04-19T20:33:40.1542846Z" ModifiedUtc="2008-08-14T05:22:34Z" />
      <TagsPart Tags=".NET,TDD" />
      <AutoroutePart Alias="bdd-vs-tdd" UseCustomPattern="false" />
      <TitlePart Title="BDD vs TDD" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=wpf-datacontext-and-ivalueconverter-thoughts" Status="Published">
      <BodyPart Text="&lt;p&gt;I am a total newbie in WPF development. One of the things I wanted to have is to format the values coming out of my domain object into UI, and being able to parse those values back into business objects.&lt;/p&gt; &lt;p&gt;I am coming from a web environment, where no state exists in between requests. I started with an approach usually apply in the web applications, quickly realizing it will not work that way. The fact that DataContext (like a ViewData) is there and doesn't have to be reconstructed is great. The down side - it's not strongly typed. At the same time maybe the only way to use it is one, when assigning the data(object) and that's it. Also bugging the fact that the properties are used for binding as string texts, but that I have to understand better.&lt;/p&gt; &lt;p&gt;Since the DataContext is going nowhere, and it's a reference to domain object, DataBinding done in TwoWay mode (which is the default) assures that any change (as long as it is valid) will propagate back into the domain object (it's property). Converters are another piece of this not so trivial puzzle - they make life easy. By implementing IValueConverter, it is possible to implement the logic for value transformations upon each way of binding. Handy, since it allowed me to decorate currency attributes of my domain object to show currency details on UI, and strip that off and get a plain number when taking the currency value back into the domain object.&lt;/p&gt; &lt;p&gt;The XAML way - not sure I like it completely at this stage. Being able to express binding and converter for the binding in a codeless way is nice. The facts that:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;You have to create a static resource on each &quot;view&quot; (window/user control) did not sound well&lt;/li&gt; &lt;li&gt;The loose control over the binding gives you now firm understanding of what's going on behind the scene&lt;/li&gt;&lt;/ul&gt; &lt;p&gt;So I started to poke around the idea of using a single converter all over the place. And found it. Again, declaratively, it was a mess, since WPF XAML parse had an issue with it, even though it was compiling. Pure code approach was simple, and XAML parser did not complain. &lt;/p&gt; &lt;p&gt;I put converter into a single location where it can be used by any &quot;view&quot; and it looked like this:&lt;/p&gt;&lt;pre class=&quot;csharpcode&quot;&gt;&lt;span class=&quot;kwrd&quot;&gt;namespace&lt;/span&gt; WpfApplication1&#xA;{&#xA;  &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;class&lt;/span&gt; Converters&#xA;  {&#xA;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;static&lt;/span&gt; CurrencyConverter CurrencyConverter = &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; CurrencyConverter();&#xA;  }&#xA;}&lt;/pre&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&#xA;&lt;/style&gt;&#xA;&#xA;&lt;p&gt;And the code that was doing binding looked like the following snippet:&lt;/p&gt;&lt;pre class=&quot;csharpcode&quot;&gt;var binding = &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; Binding(&lt;span class=&quot;str&quot;&gt;&quot;Amount&quot;&lt;/span&gt;);&#xA;binding.Source = myObject;&#xA;binding.Converter = Converters.CurrencyConverter;&#xA;txt.SetBinding(TextBox.TextProperty, binding);&lt;/pre&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&#xA;&lt;/style&gt;&#xA;&#xA;&lt;p&gt;The declarative way looked uglier:&lt;/p&gt;&lt;pre class=&quot;csharpcode&quot;&gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;Window&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;x:Class&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&quot;WpfApplication1.MainWindow&quot;&lt;/span&gt;&#xA;    &lt;span class=&quot;attr&quot;&gt;xmlns&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;&lt;/span&gt;&#xA;    &lt;span class=&quot;attr&quot;&gt;xmlns:x&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;&lt;/span&gt;&#xA;    &lt;span class=&quot;attr&quot;&gt;xmlns:app&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&quot;clr-namespace:WpfApplication1&quot;&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;gt;&lt;/span&gt;&#xA;  &lt;span class=&quot;kwrd&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;Grid&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;gt;&lt;/span&gt;&#xA;    &lt;span class=&quot;kwrd&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;Grid.RowDefinitions&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;gt;&lt;/span&gt;&#xA;      &lt;span class=&quot;kwrd&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;RowDefinition&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;/&amp;gt;&lt;/span&gt;&#xA;      &lt;span class=&quot;kwrd&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;RowDefinition&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;/&amp;gt;&lt;/span&gt;&#xA;    &lt;span class=&quot;kwrd&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;Grid.RowDefinitions&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;gt;&lt;/span&gt;&#xA;        &lt;span class=&quot;kwrd&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;TextBox&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;Grid&lt;/span&gt;.&lt;span class=&quot;attr&quot;&gt;Row&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&quot;0&quot;&lt;/span&gt; &#xA;                     &lt;span class=&quot;attr&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&quot;{Binding Path=Amount, Converter={x:Static app:Converters.CurrencyConverter}}&quot;&lt;/span&gt; &#xA;                    &lt;span class=&quot;attr&quot;&gt;Height&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&quot;20&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;Width&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&quot;100&quot;&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;TextBox&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;gt;&lt;/span&gt;&#xA;    &lt;span class=&quot;kwrd&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;Button&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;Grid&lt;/span&gt;.&lt;span class=&quot;attr&quot;&gt;Row&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&quot;1&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&quot;btn&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;Height&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&quot;20&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;Content&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&quot;Report value&quot;&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;gt;&lt;/span&gt;&#xA;  &lt;span class=&quot;kwrd&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;Grid&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;span class=&quot;kwrd&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;Window&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&#xA;&lt;/style&gt;&#xA;&#xA;&lt;p&gt;The currency converter is dead simple:&lt;/p&gt;&lt;pre class=&quot;csharpcode&quot;&gt;&lt;span class=&quot;kwrd&quot;&gt;namespace&lt;/span&gt; WpfApplication1&#xA;{&#xA;  [ValueConversion(&lt;span class=&quot;kwrd&quot;&gt;typeof&lt;/span&gt;(&lt;span class=&quot;kwrd&quot;&gt;double&lt;/span&gt;), &lt;span class=&quot;kwrd&quot;&gt;typeof&lt;/span&gt;(&lt;span class=&quot;kwrd&quot;&gt;string&lt;/span&gt;))] &#xA;  &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;class&lt;/span&gt; CurrencyConverter : IValueConverter&#xA;  {&#xA;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;object&lt;/span&gt; Convert(&lt;span class=&quot;kwrd&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;value&lt;/span&gt;, Type targetType, &lt;span class=&quot;kwrd&quot;&gt;object&lt;/span&gt; parameter, CultureInfo culture)&#xA;    {&#xA;      &lt;span class=&quot;kwrd&quot;&gt;return&lt;/span&gt; ((&lt;span class=&quot;kwrd&quot;&gt;double&lt;/span&gt;) &lt;span class=&quot;kwrd&quot;&gt;value&lt;/span&gt;).ToString(&lt;span class=&quot;str&quot;&gt;&quot;C2&quot;&lt;/span&gt;, culture);&#xA;    }&#xA;&#xA;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;object&lt;/span&gt; ConvertBack(&lt;span class=&quot;kwrd&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;value&lt;/span&gt;, Type targetType, &lt;span class=&quot;kwrd&quot;&gt;object&lt;/span&gt; parameter, CultureInfo culture)&#xA;    {&#xA;      &lt;span class=&quot;kwrd&quot;&gt;double&lt;/span&gt; result;&#xA;      &lt;span class=&quot;kwrd&quot;&gt;double&lt;/span&gt;.TryParse(&lt;span class=&quot;kwrd&quot;&gt;value&lt;/span&gt;.ToString(), NumberStyles.Currency, culture, &lt;span class=&quot;kwrd&quot;&gt;out&lt;/span&gt; result);&#xA;      &lt;span class=&quot;kwrd&quot;&gt;return&lt;/span&gt; result;&#xA;    }&#xA;  }&#xA;}&lt;/pre&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&#xA;&lt;/style&gt;&#xA;&#xA;&lt;p&gt;Thoughts, comments, sources for more information are more than appreciated.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-08-13T15:48:04Z" PublishedUtc="2014-04-19T20:33:40.5605356Z" ModifiedUtc="2008-08-13T15:48:04Z" />
      <TagsPart Tags=".NET,WPF" />
      <AutoroutePart Alias="wpf-datacontext-and-ivalueconverter-thoughts" UseCustomPattern="false" />
      <TitlePart Title="WPF - DataContext And IValueConverter Thoughts" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=think-vss-is-ok-think-again" Status="Published">
      <BodyPart Text="&lt;p&gt;Issues are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Constant requirement to defrag the VSS database  &lt;li&gt;Loosing checked in code  &lt;li&gt;Merging is absolute on block, and not partial merging  &lt;li&gt;VSS client for VS.NET sucks, when getting latest version and focus away, the VSS dialog box hangs, along with VS.NET itself  &lt;li&gt;Deleting checked out files leaves them on server  &lt;li&gt;Checking in files that were touched, but final result was not different from original (1) &lt;li&gt;Patching?&lt;/li&gt;&lt;/ul&gt; &lt;p&gt;What did you find that I didn't list here? Help me to convince my good fellow coworkers to move away from the beast. Thank you.&lt;/p&gt; &lt;p&gt;(1) Checked out file for change and reverted change to original code (i.e. file has not changed)&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-08-01T18:16:33Z" PublishedUtc="2014-04-19T20:33:41.1073977Z" ModifiedUtc="2008-08-01T18:16:33Z" />
      <TagsPart Tags="" />
      <AutoroutePart Alias="think-vss-is-ok-think-again" UseCustomPattern="false" />
      <TitlePart Title="Think VSS is OK? Think Again." />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=logging" Status="Published">
      <BodyPart Text="&lt;p&gt;Logging is the process in which trees are cut down for forest management and&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/60340555f10f_B992/image_2.png&quot;&gt;&lt;img style=&quot;border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px&quot; height=&quot;208&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/60340555f10f_B992/image_thumb.png&quot; width=&quot;204&quot; align=&quot;right&quot; border=&quot;0&quot;&gt;&lt;/a&gt; timber. Logging is controversial due to its potential environmental and aesthetic impacts.&amp;nbsp; &lt;/p&gt; &lt;p&gt;I am going to talk about other one, the one that is vital, helpful, and has positive impacts. Software logging. &lt;/p&gt; &lt;p&gt;Hosted projects are easier in terms of debugging and tracing issues - you have got all the control in case you are the host. Though in some cases even the fact that you hosting the application does not help. Then troubleshooting becomes painful if not impossible. &lt;/p&gt; &lt;p&gt;This is where Diagnostics Trace class was helpful to provide the data that would help to resolve an issue or two. But for the logging part - it wasn't the best tool out there. So I have decided to have a look at what others are using, and quite a dominant candidate was log4net OSS component. Any objections?&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-07-28T19:33:53Z" PublishedUtc="2008-07-28T19:33:53Z" ModifiedUtc="2008-07-28T19:33:53Z" />
      <TagsPart Tags=".NET" />
      <AutoroutePart Alias="logging" UseCustomPattern="false" />
      <TitlePart Title="Logging" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=fearless-change-patterns-for-introducing-new-ideas" Status="Published">
      <BodyPart Text="&lt;p&gt;I'd like to drop a few word for the book was lucky to read lately - &lt;b&gt;Fearless Change: Patterns for Introducing New Ideas&lt;/b&gt;.&amp;nbsp; Authors of the book have &lt;a href=&quot;http://www.amazon.ca/Fearless-Change-Patterns-Introducing-Ideas/dp/0201741571&quot; target=&quot;_blank&quot;&gt;&lt;img style=&quot;border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px&quot; height=&quot;240&quot; alt=&quot;&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/7f08911e0633_11834/image_3.png&quot; width=&quot;163&quot; align=&quot;right&quot; border=&quot;0&quot;&gt;&lt;/a&gt;succeeded to capture ways to apply changes in amazingly accurate way. Written as a pattern book with orientation for software development (and not only) this book makes a perfect read for those who are willing to make changes and affect others.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-07-25T02:31:41Z" PublishedUtc="2008-07-25T02:31:41Z" ModifiedUtc="2008-07-25T02:31:41Z" />
      <TagsPart Tags="Books" />
      <AutoroutePart Alias="fearless-change-patterns-for-introducing-new-ideas" UseCustomPattern="false" />
      <TitlePart Title="Fearless Change: Patterns for Introducing New Ideas" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=taking-out-fires" Status="Published">
      <BodyPart Text="&lt;p&gt;Firefighters are not analyzing the situation, they are taking several plans to consider leaving the simplest and the least harmful to be executed. Can be this applied anywhere? No. When you have stressful times in software development you need to enrich your knowledge and learn about the problem. Doesn't mean to put on hold the development. Neither it means to implement the firemen approach and forget about it. It means take out the fire and learn how to avoid fires in the future by implementing the proper solution when you can.&lt;/p&gt; &lt;p&gt;Note on that: I teach myself to respond and not to react. Reacting is more reflex style, where response is more weighted and analyzed answer. That way a dialog can take place that leads to a quicker decision on how to take the fire out, and not a spontaneous acts driven by emotions that lead to nothing, but fire swallowing more than it should have in first place.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-07-24T21:50:19Z" PublishedUtc="2014-04-19T20:33:43.5761183Z" ModifiedUtc="2008-07-24T21:50:19Z" />
      <TagsPart Tags="Personal" />
      <AutoroutePart Alias="taking-out-fires" UseCustomPattern="false" />
      <TitlePart Title="Taking Out Fires" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=challenge-listing-achievements" Status="Published">
      <BodyPart Text="&lt;p&gt;So today I was challenged. Challenged to talk about my achievements at the company I work for. Why is it a challenge? Simply because I don't like to brag about my personal achievements when know how much I still have to achieve. But in this case this is different, as I would like to have a chance to look back and review what are the achievements I managed to generate in the company (Note: compensations are not linked to this :).&lt;/p&gt;  &lt;p&gt;Three years ago, joining the company, I was going to be a web developer with database background. I found myself in a code base entirely .NET 1.1 with VB.NET roots taking place in classic ASP with VB script, a lot looking like a procedural recreation in a object oriented environment, doing a lot of things I've never done before. Being a C# developer mostly, I set a technical mission to convert the whole company to C#. That conversion took a while along with porting to .NET 2.0. We got there. &lt;/p&gt;  &lt;p&gt;Components where the second step I took in that direction. Since we are dealing with web UI and it has quite a limited amount of standard UI elements, I pushed towards innovating and creating new web controls that would allow us slicker UI and UX along with re-usability. This had a price. Not sure if I managed to convince anyone to create those, but developers do use it heavily on the daily basis and raise issues and concerns that push all of us as a development team to think through and design better. This probably leads to another achievement - a move from innovator to early adopter.&lt;/p&gt;  &lt;p&gt;I used to be a cutting edge innovator. Not the best thing if you ask me. Jumping into a new technology without being concerned about business side is too risky and frankly speaking doesn't give you any credibility in eyes of other developers/management. So I changed to become an early adopter instead, i.e. through my personal passion and example show and prove that certain things I believe in are worth adopting.&lt;/p&gt;  &lt;p&gt;As my knowledge about what we were trying to achieve was expanding, I started to work on the idea of an internal framework. A few leaps and a lot of bugs with assistance from all of our developers this became a reality. Nowadays most of the applications we build are based on it.&amp;nbsp;&amp;nbsp; &lt;/p&gt;  &lt;p&gt;The next major influence I had was the layered design. No, I haven't re-invented the wheel, but I showed the way. And I pushed it all the way till we've got it. This was a great experience with the whole team. Just by doing that we opened so many worm-cans, there was enough for a while to keep us busy. Now looking back it makes me feel good to realize that the team didn't kill me for doing it :)&lt;/p&gt;  &lt;p&gt;Another step in the right direction was to get away from the standard plain ADO.NET - a step I am still taking. Working with meaningful objects rather than with object-representation of tables and views was more appealing to me. So I initiated the migration. We ended up having our internally developed Entities Framework. This step allowed us to realize something I was about to learn - back to the core principles.&lt;/p&gt;  &lt;p&gt;Still hungry for better results I pushed our boundaries to go from plain vanilla web forms to an MVP implementation. Slowly it caught up. Today I think there's no developer on the team that does not realize the importance and effectiveness of simple core principle - separation of concerns. Talking about core...&lt;/p&gt;  &lt;p&gt;Gladly I can state that the biggest achievement throughout these 3 years was the realization that we didn't do proper object-oriented code. I lucked core principles, better understanding of patterns, refactoring. This is where I started to look for alternative, search for the answers. This is the point in time where I introduced the management and the developers to the design patterns, principles, agile methodology (pushing this was an interesting experience we are just starting to experience). Self awareness as professional developers started to raise. I feel definitely satisfied about that.&lt;/p&gt;  &lt;p&gt;This could go on for a while, but I don't really want to keep going. No point. Rather I would like to re-cap the most important achievement the team allowed me to put in place:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;Pushing the professional boundaries&lt;/li&gt;    &lt;li&gt;Turning to better object oriented development&lt;/li&gt;    &lt;li&gt;Accent on core principles, patterns and idioms&lt;/li&gt;    &lt;li&gt;Move towards the agility (even we are not, the bug is there)&lt;/li&gt;    &lt;li&gt;Awareness of constant improvement required by each one of us&lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;To summarize this - we've went a long way and a lot was achieved. Looking back should not prevent from moving forward. Achievements can become your personal &quot;bullies&quot; blocking from going towards more significant achievements. This is why it's good to remember that you have achieved a lot, and yet have to achieve a lot more.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-07-24T04:32:00Z" PublishedUtc="2014-04-19T20:33:43.9354874Z" ModifiedUtc="2008-07-24T04:32:00Z" />
      <TagsPart Tags="Personal" />
      <AutoroutePart Alias="challenge-listing-achievements" UseCustomPattern="false" />
      <TitlePart Title="Challenge - Listing Achievements" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=depends-how-you-look-at-it" Status="Published">
      <BodyPart Text="&lt;p&gt;Some call it science, I call it art. Watch the &lt;a href=&quot;http://www.maseratigranturismo-s.com/&quot;&gt;video&lt;/a&gt;.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-07-23T18:13:45Z" PublishedUtc="2014-04-19T20:33:44.2953636Z" ModifiedUtc="2008-07-23T18:13:45Z" />
      <TagsPart Tags="" />
      <AutoroutePart Alias="depends-how-you-look-at-it" UseCustomPattern="false" />
      <TitlePart Title="Depends How You Look At It" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=break-it-down-into-bits" Status="Published">
      <BodyPart Text="&lt;p&gt;I had to refactor a portion of code and decided to go with strategy pattern. Interesting thing is that the final result might look more complex, but when discussed with a fellow developer, got green light in terms of &quot;more maintainable&quot; and &quot;self documenting&quot; code result. So here I am sharing it with others for review and opinions.&lt;/p&gt; &lt;p&gt;The problem&lt;/p&gt; &lt;p&gt;A person is associated with a plan it is member of. Association is expressed in a plan code assigned to the person. Based on the code a person is assigned, different fields from his plan details record are pulled into calculation. Possible plan codes are PlanA, PlanB, PlanZ. Each plan is driving out the price for member, spouse, and total costs. Fields involved in calculations are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;For PlanA: &lt;/li&gt; &lt;ul&gt; &lt;li&gt;MemberCost = PlanA&lt;strong&gt;Member1&lt;/strong&gt; + PlanA&lt;strong&gt;Member2&lt;/strong&gt;&lt;/li&gt; &lt;li&gt;SpouseCost = PlanA&lt;strong&gt;Spouse1&lt;/strong&gt; + PlanA&lt;strong&gt;Spouse2&lt;/strong&gt;&lt;/li&gt; &lt;li&gt;TotalCost = MemberCost + SpouseCost&lt;/li&gt;&lt;/ul&gt; &lt;li&gt;For PlanB and PlanZ - same story&lt;/li&gt;&lt;/ul&gt; &lt;p&gt;The original code was using reflection and retrieving values based of reflective code that extracted property values based on the fact that attributes (properties) of an object would have the names that are consistent and are prefixed with the plan code. The code then would do everything-in-one-shot.&lt;/p&gt; &lt;div class=&quot;csharpcode&quot;&gt; &lt;div class=&quot;csharpcode&quot;&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   1:  &lt;/span&gt;&lt;font color=&quot;#0000ff&quot;&gt;var&lt;/font&gt; planDetails = PlanDetails.Load();&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   2:  &lt;/span&gt;Type type = &lt;span class=&quot;kwrd&quot;&gt;typeof&lt;/span&gt;(PlanDetails);&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   3:  &lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;double&lt;/span&gt; memberCost &lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   4:  &lt;/span&gt;   = type.GetProperty(planCode + &lt;span class=&quot;str&quot;&gt;&quot;Member1&quot;&lt;/span&gt;).GetValue(planDetails, &lt;span class=&quot;kwrd&quot;&gt;null&lt;/span&gt;) &lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   5:  &lt;/span&gt;   + type.GetProperty(planCode + &lt;span class=&quot;str&quot;&gt;&quot;Member2&quot;&lt;/span&gt;).GetValue(planDetails, &lt;span class=&quot;kwrd&quot;&gt;null&lt;/span&gt;);&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   6:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   7:  &lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;double&lt;/span&gt; spouseCost = &lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   8:  &lt;/span&gt;   type.GetProperty(planCode + &lt;span class=&quot;str&quot;&gt;&quot;Spouse1&quot;&lt;/span&gt;).GetValue(planDetails, &lt;span class=&quot;kwrd&quot;&gt;null&lt;/span&gt;) &lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   9:  &lt;/span&gt;   + type.GetProperty(planCode + &lt;span class=&quot;str&quot;&gt;&quot;Spouse2&quot;&lt;/span&gt;).GetValue(planDetails, &lt;span class=&quot;kwrd&quot;&gt;null&lt;/span&gt;);&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  10:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  11:  &lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;double&lt;/span&gt; totalCost = memberCost + spouseCost;&lt;/pre&gt;&lt;/div&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&#xA;&lt;/style&gt;&#xA;&#xA;&lt;style type=&quot;text/css&quot;&gt;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&#xA;&lt;/style&gt;&#xA;&lt;/div&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&#xA;&lt;/style&gt;&#xA;&#xA;&lt;p&gt;What are the down sides of this code - fragility. &lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Plan code found for a person might not be in the database, the code will explode&lt;/li&gt;&#xA;&lt;li&gt;When &lt;em&gt;PlanDetail&lt;/em&gt; property(s) name is different from the assumed pattern, the code will definitely break&lt;/li&gt;&#xA;&lt;li&gt;Not flexible - calculations logic might vary in the future and that will over complex everything-in-one-shot code&lt;/li&gt;&#xA;&lt;li&gt;Readability of the code lucks simplicity - overwhelming details&lt;/li&gt;&lt;/ul&gt;&#xA;&lt;p&gt;Strategy sounded like a right ways to go. Divide and rule - split each plan calculations into its own class - &lt;em&gt;PlanA&lt;/em&gt;, &lt;em&gt;PlanB&lt;/em&gt;, and &lt;em&gt;PlanZ&lt;/em&gt;. Also adding a &lt;em&gt;Default&lt;/em&gt; plan to have a fallback mechanism. To make it all sing, a factory would create one of the plans based on the required argument - plan code. To glue it all together an abstraction for all plans is required. I considered an interface first, but since the plans share the calculations at this point, decided to do the simple thing - abstract base class &lt;em&gt;Plan&lt;/em&gt; that would capture all the similarities and leave the descendents to fill the rest. This is an oversimplified result code (removed extra details and client-associated stuff).&lt;/p&gt;&#xA;&lt;p&gt;Factory&lt;/p&gt;&#xA;&lt;div class=&quot;csharpcode&quot;&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   1:  &lt;/span&gt;  &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;class&lt;/span&gt; PlanFactory&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   2:  &lt;/span&gt;  {&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   3:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;static&lt;/span&gt; GetPlanFor(&lt;span class=&quot;kwrd&quot;&gt;string&lt;/span&gt; planCode, IPlanDetails planDetails)&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   4:  &lt;/span&gt;    {&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   5:  &lt;/span&gt;      &lt;span class=&quot;kwrd&quot;&gt;switch&lt;/span&gt; (planCode)&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   6:  &lt;/span&gt;      {&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   7:  &lt;/span&gt;        &lt;span class=&quot;kwrd&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;str&quot;&gt;&quot;PlanA&quot;&lt;/span&gt;:&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   8:  &lt;/span&gt;          &lt;span class=&quot;kwrd&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; PlanA(planDetails);&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   9:  &lt;/span&gt;        &lt;span class=&quot;kwrd&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;str&quot;&gt;&quot;PlanB&quot;&lt;/span&gt;:&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  10:  &lt;/span&gt;          &lt;span class=&quot;kwrd&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; PlanB(planDetails);&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  11:  &lt;/span&gt;        &lt;span class=&quot;kwrd&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;str&quot;&gt;&quot;PlanZ&quot;&lt;/span&gt;:&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  12:  &lt;/span&gt;          &lt;span class=&quot;kwrd&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; PlanZ(planDetails);&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  13:  &lt;/span&gt;        &lt;span class=&quot;kwrd&quot;&gt;default&lt;/span&gt;:&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  14:  &lt;/span&gt;          &lt;span class=&quot;kwrd&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; Default();&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  15:  &lt;/span&gt;      }&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  16:  &lt;/span&gt;    }&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  17:  &lt;/span&gt;}&lt;/pre&gt;&lt;/div&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&#xA;&lt;/style&gt;&#xA;&#xA;&lt;p&gt;Plan&lt;/p&gt;&#xA;&lt;div class=&quot;csharpcode&quot;&gt;&#xA;&lt;div class=&quot;csharpcode&quot;&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   1:  &lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;class&lt;/span&gt; Plan   &lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   2:  &lt;/span&gt;{   &lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   3:  &lt;/span&gt;     &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;readonly&lt;/span&gt; IPlanDetails planDetails;&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   4:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   5:  &lt;/span&gt;     &lt;span class=&quot;kwrd&quot;&gt;protected&lt;/span&gt; Plan(IPlanDetails pd)&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   6:  &lt;/span&gt;     {&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   7:  &lt;/span&gt;       planDetails = pd;&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   8:  &lt;/span&gt;     }&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   9:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  10:  &lt;/span&gt;      &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;double&lt;/span&gt; MemberCost { get; }   &lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  11:  &lt;/span&gt;      &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;double&lt;/span&gt; SpouseCost { get; }   &lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  12:  &lt;/span&gt;      &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;double&lt;/span&gt; TotalSpouseCore    &lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  13:  &lt;/span&gt;      {    &lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  14:  &lt;/span&gt;        get { &lt;span class=&quot;kwrd&quot;&gt;return&lt;/span&gt; MemberCost + SpouseCost; }    &lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  15:  &lt;/span&gt;      }   &lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  16:  &lt;/span&gt;}&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&#xA;&lt;/style&gt;&#xA;&#xA;&lt;p&gt;PlanA (similar are PlanB and PlanZ):&lt;/p&gt;&#xA;&lt;div class=&quot;csharpcode&quot;&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   1:  &lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;class&lt;/span&gt; PlanA : Plan&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   2:  &lt;/span&gt;{&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   3:  &lt;/span&gt;     &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; PlanA(IPlanDetails pd) : &lt;span class=&quot;kwrd&quot;&gt;base&lt;/span&gt;(pd) {}&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   4:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   5:  &lt;/span&gt;      &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;double&lt;/span&gt; MemberCost&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   6:  &lt;/span&gt;      {&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   7:  &lt;/span&gt;        get { &lt;span class=&quot;kwrd&quot;&gt;return&lt;/span&gt; planData.PlanAMember1 + planData.PlanAMember2; }&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   8:  &lt;/span&gt;      }&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   9:  &lt;/span&gt;}&lt;/pre&gt;&lt;/div&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&#xA;&lt;/style&gt;&#xA;&#xA;&lt;p&gt;Usage:&lt;/p&gt;&#xA;&lt;div class=&quot;csharpcode&quot;&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   1:  &lt;/span&gt;&lt;font color=&quot;#0000ff&quot;&gt;var&lt;/font&gt; plan &lt;/pre&gt;&lt;pre&gt;           = PlanFactory.GetPlanFor(user.GetPlanCode(), PlanDetails.Load());&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   2:  &lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;double&lt;/span&gt; memberCost = plan.MemberCost;&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   3:  &lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;double&lt;/span&gt; spouseCost = plan.SpouseCost&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   4:  &lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;double&lt;/span&gt; totalCost = plan.TotalCost;&lt;/pre&gt;&lt;/div&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&#xA;&lt;/style&gt;&#xA;&#xA;&lt;p&gt;Now comparing the last chunk of code to the original code - some difference. &lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Conclusions&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;With simplified for maintainability and readability code, the complexity went up significantly. With power comes responsibility - if you want code that is easy to maintain and change, test and trace, you have to lift your skills and play by the rules. And the rules are simple&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Strive to have a network of objects each handling a single responsibility, rather than procedural one giant class that does it all&lt;/li&gt;&#xA;&lt;li&gt;Learn core principles (patterns, idioms, etc)&lt;/li&gt;&#xA;&lt;li&gt;Don't be afraid of complexity if it is based on core principles&lt;/li&gt;&lt;/ul&gt;&#xA;&lt;p&gt;PS: to spice it up, the real code did actually have a more sophisticated behaviour down the road, which was taken into the &lt;em&gt;Plan&lt;/em&gt; code (in case it is shared by all plans) or into individual plans when it's unique to that particular plan. The bottom line is the the 'user' code, the usage of the factory, has not changed at all, and the details of each plan where left to the plans themselves, a place where they naturally belong.&lt;/p&gt;&#xA;&lt;p&gt;PSS: there's something bugging me down - the switch statement in the factory. I would rather have something that would eliminate that switch statement as it feels not right. Ideas?&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-07-23T15:01:49Z" PublishedUtc="2014-04-19T20:33:44.7323553Z" ModifiedUtc="2008-07-23T15:01:49Z" />
      <TagsPart Tags="OO,Patterns" />
      <AutoroutePart Alias="break-it-down-into-bits" UseCustomPattern="false" />
      <TitlePart Title="Break It Down Into Bits" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=data-driven-or-domain-driven-application" Status="Published">
      <BodyPart Text="&lt;p&gt;The company I work for has a significant amount of web applications of a specific line of business. This line of applications started 8 years ago (I am with the company just for the last 3 only). Since I started to be interested in Domain Driven Design, felt strongly that this line of applications should be re-addressed with a DDD approach. But the resistance was enormous, motivating that &amp;quot;these are the pure data centric applications and there's no place for domain, the data is the domain and as a result of that it is a DATA driven design application&amp;quot;.&lt;/p&gt;  &lt;p&gt;I disagree.&lt;/p&gt;  &lt;p&gt;Why do I disagree? Here's the theory I have that might be applicable not only to this case. &lt;/p&gt;  &lt;p&gt;As a company that started web development 8 years ago under Microsoft wing, the natural choice for developers was classic ASP and SQL Server. With or without DDD, the business these applications were intended for had it's behaviour, rules, entities. Now with something like VB Script in classic ASP I cannot imagine proper tool for DDD, and on the other side, database was there to enforce the feeling of key components of design in shape and form of tables (Users, Selections, Benefits, etc.) So DB was a natural selection to grow the domain design, and incorporate some of the business logic (default values, calculations, etc).&lt;/p&gt;  &lt;p&gt;Today, when we moved to C# and have a solid language to support good object oriented practices, database gets a role it should have had from the beginning -&amp;#160; persistence medium of the domain objects state. No logic, no design driving power, nothing of that. &lt;/p&gt;  &lt;p&gt;How I can be sure about the theory? Over the years I see how painful the maintenance becomes, what challenges our developers face when they need refractor code, how non-trivial it occurs to do a trivial feature addition. The biggest from my point of view, is the fact that looking into the code, you cannot understand the business (behaviour, rules, logic). &lt;/p&gt;  &lt;p&gt;This is why I believe those so called &amp;quot;data driven applications&amp;quot; should be reviewed closer, some of them are really &amp;quot;domain driven applications&amp;quot; not expressed well due to the luck of the proper tools at the time of creation.&lt;/p&gt;  &lt;p&gt;Question. Doubt. Don't accept just because it's widely accepted.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-07-18T05:42:11Z" PublishedUtc="2014-04-19T20:33:44.9979738Z" ModifiedUtc="2008-07-18T05:42:11Z" />
      <TagsPart Tags="Personal" />
      <AutoroutePart Alias="data-driven-or-domain-driven-application" UseCustomPattern="false" />
      <TitlePart Title="Data Driven Or Domain Driven Application?" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=db-trigger-a-friend-or-a-foe" Status="Published">
      <BodyPart Text="&lt;p&gt;Database triggers are useful, and I am not going to bush it completely. In some cases, like the one I run into, triggers are more of a distraction and source of issues, rather than help and ease of headache-free maintenance. In order to understand the case, players must be introduced first.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;An application that collects information from user inputs to be stored in database at a very specific table that is uniquely assigned for the purpose of persisting user selections.&lt;/li&gt; &lt;li&gt;An external service that is asked from time to time to perform a job based on the inputs user has provided from the application.&lt;/li&gt; &lt;li&gt;Results of the job are stored in database, and for optimization purposes, some metadata stored as well, in a table of its own. What kind of metadata? Well, lets keep it simple and say that a certain job was executed or not. So the next time job (pretend that it's scheduled) has to be run, it will first validate that it wasn't executed before.&lt;/li&gt;&lt;/ul&gt; &lt;p&gt;Some business process rules around the user inputs are defined as well&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Once a user has updated inputs from the application, any scheduled job running after the fact inputs were changed, has to ignore the fact that the job was run before in order to take in account the new inputs.&lt;/li&gt;&lt;/ul&gt; &lt;p&gt;What is the standard DB approach and the simplest one to implement - put triggers in place. This is an absolutely valid approach. You observe the Inputs table, on updates to that table you trigger updates to the Metadata table and voilà it's working. Each time user makes an update to inputs, metadata is wiped and job is forced to re-run the calculations when it kicks in. Simple, elegant, but non trivial down the road.&lt;/p&gt; &lt;p&gt;The application evolves, you add down the road more inputs and suddenly - the magic of triggers is done. You validate the fact that they are in place, but it is very easy to skip the fact that within the trigger the newly added fields to the inputs table are not processed.&lt;/p&gt; &lt;p&gt;Another scenario - you want to be able to test the code, and see that changes to the inputs are actually triggering the metadata changes. But how would you do it, unless running in a debug with a real database attached?&lt;/p&gt; &lt;p&gt;One idea is to remove the triggers from the database and implement them in the code, after all it is really an &lt;strong&gt;application behaviour&lt;/strong&gt; we are trying to capture and express. Depending on how data access is implemented, the way to implement the code differs. We still are using home grown sort-of entities framework (hopefully not for long), and inputs table has a reflection in the application as an object of it's own. Initial idea was to create a proxy and it would update the metadata once inputs are persisted. Due to technical limitations of the framework we are using, the implementation went in a different technical route, but still, allowed to remove triggers and have it expressed as code, that can be tested and refactored.&lt;/p&gt; &lt;p&gt;What were the goal of this exercise?&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Simplify application maintenance&lt;/li&gt; &lt;li&gt;Easier refactoring&lt;/li&gt; &lt;li&gt;Capturing application behaviour in application, and not database&lt;/li&gt;&lt;/ul&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-07-15T13:54:57Z" PublishedUtc="2014-04-19T20:33:46.4667056Z" ModifiedUtc="2008-07-15T13:54:57Z" />
      <TagsPart Tags="" />
      <AutoroutePart Alias="db-trigger-a-friend-or-a-foe" UseCustomPattern="false" />
      <TitlePart Title="DB Trigger - A Friend Or A Foe?" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=how-did-i-get-started-in-software-development" Status="Published">
      <BodyPart Text="&lt;p&gt;&lt;a href=&quot;http://blog.jpboodhoo.com/&quot; mce_href=&quot;http://blog.jpboodhoo.com/&quot; target=&quot;_blank&quot;&gt;JP&lt;/a&gt; called me out, so here I am, trying to travel back in time to recall how the heck I ended up coding.&lt;/p&gt; &lt;p&gt;&lt;b&gt;How old were you when you first started in programming?&lt;/b&gt;&lt;/p&gt; &lt;p&gt;I was 16 years old when I touched computer for the first time with intension of more than just playing a video game. Not that I was a big gamer before that - I was not. I got my 1st computer when I was 16.&lt;/p&gt; &lt;p&gt;&lt;b&gt;How did you get started in programming?&lt;/b&gt;&lt;/p&gt; &lt;p&gt;By accident, accident that took place at school. I had a subject called &quot;Programming&quot;, and was doing well on everything, besides this one. My mom met the teacher who advised to purchase a computer for me, so I could practice more and get better grades in programming. So my mom did. Anticipated results were confirmed, partially. I improved my marks on programming significantly, abandoning the rest of the subjects behind. Got myself into programing graphics, demos, 3D. And that probably what can be tagged as the source of the decease.&lt;/p&gt; &lt;p&gt;&lt;b&gt;What was your first programming language?&lt;/b&gt;&lt;/p&gt; &lt;p&gt;Pascal.&lt;/p&gt; &lt;p&gt;&lt;b&gt;What was the first real program you wrote?&lt;/b&gt;&lt;/p&gt; &lt;p&gt;A demo for the local demo competition my friend and I put together. This was the first time I actually exposed what I was into publicly, letting the word &quot;geek&quot; stick to my first name, partially replacing the last name.&lt;/p&gt; &lt;p&gt;&lt;b&gt;What languages have you used since you started programming?&lt;/b&gt;&lt;/p&gt; &lt;p&gt;Hebrew, English, Russian... ah, programming languages!&lt;/p&gt; &lt;p&gt;Pascal, Delphi, C, C++, Java, JavaScript, DHTML, Assembly x86, T-SQL, VB6, VB.NET, C#.&lt;/p&gt; &lt;p&gt;&lt;b&gt;What was your first professional programming gig?&lt;/b&gt;&lt;/p&gt; &lt;p&gt;Back in 2001, putting together the theory and the practicality at my first workplace.&lt;/p&gt; &lt;p&gt;&lt;b&gt;If you knew then what you know now, would you have started programming?&lt;/b&gt;&lt;/p&gt; &lt;p&gt;Yes, yes, and yes. I would not change a thing in a way it started (at what age and circumstances), but I would definitely pay more attention to the wise advices I disposed through so many years, especially in the begriming.&lt;/p&gt; &lt;p&gt;&lt;b&gt;If there is one thing you learned along the way that you would tell new developers, what would it be?&lt;/b&gt;&lt;/p&gt; &lt;p&gt;Stick to what you believe into, go forward to achieve your targets, but be careful not to become an ego-bully. Perfect yourself as a developer, knowing that perfect does not exist in nature, and yet not loosing your dream of doing better than you've done so far. Remember that as developers we use computers to accomplish our mission, but worked, working, and will work with real human beings, that are not computers.&lt;/p&gt; &lt;p&gt;&lt;b&gt;What's the most fun you've ever had programming?&lt;/b&gt;&lt;/p&gt; &lt;p&gt;Being able to affect other developers. The power of satisfaction from being able to positively affect other developers around, constantly improve myself to allow surrounding do the same - is amazing. Finding friends that are also developers and as crazy about things that we do as I am, is the most fun, knowing that you are not the only one, and if locked up in an institution, you will have your good friends with ya.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Who am I calling out?&lt;/b&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;http://www.connicus.com/&quot; mce_href=&quot;http://www.connicus.com/&quot; target=&quot;_blank&quot;&gt;Terry Thibodeau&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;http://codebetter.com/blogs/karlseguin&quot; mce_href=&quot;http://codebetter.com/blogs/karlseguin&quot;&gt;Karl Seguin&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;http://www.linkedin.com/in/glenlittle&quot; mce_href=&quot;http://www.linkedin.com/in/glenlittle&quot;&gt;Glen Little&lt;/a&gt;&lt;/p&gt;&lt;hints id=&quot;hah_hints&quot;&gt;&lt;/hints&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-07-12T16:13:00Z" PublishedUtc="2014-04-19T20:33:46.7167096Z" ModifiedUtc="2008-07-12T16:13:00Z" />
      <TagsPart Tags="Personal" />
      <AutoroutePart Alias="how-did-i-get-started-in-software-development" UseCustomPattern="false" />
      <TitlePart Title="How Did I Get Started In Software Development?" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=foundations-of-programming-by-karl-seguin" Status="Published">
      <BodyPart Text="&lt;p&gt;Going through the &lt;a href=&quot;http://www.openmymind.net/FoundationsOfProgramming.pdf &quot; target=&quot;_blank&quot;&gt;PDF&lt;/a&gt; document Karl Seguin was kind enough to share with all of us, could not not to agree with the written - quoting:&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;The real reason we’re spending a whole chapter on decoupling (which layering is a high-level implementation of) is because it’s a key ingredient in writing testable code. It wasn’t until I started unit testing that I realized how tangled and fragile my code was. I quickly became frustrated because method X relied on a functional class Y which needed a database up and running. In order to avoid the headaches I went through, we’ll first cover coupling and then look at unit testing in the next chapter. &lt;/p&gt;&lt;/blockquote&gt; &lt;p&gt;Recommended reading. &lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-07-10T15:06:05Z" PublishedUtc="2014-04-19T20:33:46.9667172Z" ModifiedUtc="2008-07-10T15:06:05Z" />
      <TagsPart Tags="ALT.NET" />
      <AutoroutePart Alias="foundations-of-programming-by-karl-seguin" UseCustomPattern="false" />
      <TitlePart Title="Foundations of Programming by Karl Seguin" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=you-have-got-to-be-persistent" Status="Published">
      <BodyPart Text="&lt;p&gt;[Purely Personal] &lt;p&gt;“Never give up, never surrender” was my favourite part from the Space Odyssey. Today it proved to be true again. How do you lift the skills of the team? By lifting the overall skills, by raising the bar for the whole team. This was the GCD is lifted, forcing the less strong developers to invest more, rather than doing an opposite, forcing the strong developers to play dummy. &lt;p&gt;Why do I writing this at all? Because I appreciate when people are brave enough to call white a white and black a black, and not just call it a shade of grey. Today I managed to bring back the skills lifting back to the team. This is a great opportunity to prove that by sharing the knowledge more can be achieved. Admitting mistakes made to fix those is the right step in a better direction.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-07-05T06:41:34Z" PublishedUtc="2014-04-19T20:33:47.2010733Z" ModifiedUtc="2008-07-05T06:41:34Z" />
      <TagsPart Tags="Personal" />
      <AutoroutePart Alias="you-have-got-to-be-persistent" UseCustomPattern="false" />
      <TitlePart Title="You Have Got To Be Persistent" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=jamming-with-mr-mo" Status="Published">
      <BodyPart Text="&lt;p&gt;Today I had a friend of mine, &lt;a href=&quot;http://mokhan.ca/blog/&quot; target=&quot;_blank&quot;&gt;Mr. Mo&lt;/a&gt;, visiting us for a dinner and then having a little code jam (with a cup of tea and some crackers). A few things I would like to comment on: &lt;p&gt;- Thank you Mo for discovering the great taste of &lt;a href=&quot;http://www.ayende.com/Blog/&quot; target=&quot;_blank&quot;&gt;Oren&lt;/a&gt;’s triple A stake. &lt;a href=&quot;http://www.ayende.com/projects/rhino-mocks/downloads.aspx&quot; target=&quot;_blank&quot;&gt;Rhino Mocks 3.5&lt;/a&gt; is awesome. Not only it is more natural to read, but also blends the differences between state based and interaction based testing into more cohesive testing. I loved it. &lt;p&gt;- I am not the only one who has strong negative feelings about not-so-sexy stored procedures and logic in DB &lt;p&gt;- &lt;a href=&quot;http://edgibbs.com/2006/01/22/ping-pong-development-to-teach-tdd/&quot; target=&quot;_blank&quot;&gt;TDD PPP&lt;/a&gt; (ping pong pairing) with a developer that has same attitude as you are is amazing. Ready to push the boundaries, ready to be bold with code. Willing to experiment to have it done better. &lt;p&gt;- &lt;a href=&quot;http://agilemanifesto.org/&quot; target=&quot;_blank&quot;&gt;People over processes&lt;/a&gt; is so much valid. I have burned so many bridges in the past. No longer willing to do it. Serving as a good example is way better than a target for hatred. &lt;p&gt;- Fear and Pride are the worse enemies of almost any developer. Fear of an unknown. Pride of the old achievements. When you free of thus bargain, you are able to achieve more. Much more. &lt;p&gt;PS: Mo, relocate to SW!&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-07-05T06:33:42Z" PublishedUtc="2014-04-19T20:33:47.4666943Z" ModifiedUtc="2008-07-05T06:33:42Z" />
      <TagsPart Tags="Personal" />
      <AutoroutePart Alias="jamming-with-mr-mo" UseCustomPattern="false" />
      <TitlePart Title="Jamming With Mr. Mo" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=visual-studio-floating-windows-and-keyboard-shortcuts" Status="Published">
      <BodyPart Text="&lt;p&gt;Update: Mark Capaldi has revealed a great VS.NET shortcut that does the work (Shift-ESC).&lt;/p&gt; &lt;p&gt;Visual Studio floating windows are not playing nicely with keyboard shortcuts. If you only using a keyboard, and want to be able to navigate around without constantly getting destructed by a mice, it's ok. But floating windows are impossible to close without touching a mouse. At least I am not familiar with a way to do it. Imagine you could do something like this - press ALT-Space on floating window and... close!&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/VisualStudioFloatingWindowsandKeyboardSh_A15B/image_2.png&quot;&gt;&lt;img style=&quot;border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px&quot; height=&quot;245&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/VisualStudioFloatingWindowsandKeyboardSh_A15B/image_thumb.png&quot; width=&quot;488&quot; border=&quot;0&quot;&gt;&lt;/a&gt; &lt;/p&gt; &lt;p&gt;Wouldn't it be nice? :)&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-07-04T13:31:29Z" PublishedUtc="2008-07-04T13:31:29Z" ModifiedUtc="2008-07-04T13:31:29Z" />
      <TagsPart Tags="VS.NET" />
      <AutoroutePart Alias="visual-studio-floating-windows-and-keyboard-shortcuts" UseCustomPattern="false" />
      <TitlePart Title="Visual Studio Floating Windows and Keyboard Shortcuts" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=mbunit-2-4-plugin-for-resharper-4-0" Status="Published">
      <BodyPart Text="&lt;p&gt;&lt;a href=&quot;http://der-albertcom/&quot;&gt;Albert Weinert&lt;/a&gt; has release an update to his &lt;a href=&quot;http://der-albert.de/archive/2008/06/13/mbunit-2.4-plugin-for-resharper-4.0-final.aspx&quot; target=&quot;_blank&quot;&gt;plugin&lt;/a&gt; to allow execution of R# 4.0 from within Visual Studio .NET 2005 / 2008. The only Unit Testing framework supported by R# 4.0 out of box is NUnit, so this is a useful plugin for those who prefer MbUnit to NUnit.&lt;/p&gt; &lt;p&gt;I recall that one of the final features for R# 4.0 was planned to provide out-of-box plugins and support for several Unit Testing frameworks. Wonder what happened to that plan.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-07-02T14:50:05Z" PublishedUtc="2014-04-19T20:33:48.654178Z" ModifiedUtc="2008-07-02T14:50:05Z" />
      <TagsPart Tags="TDD" />
      <AutoroutePart Alias="mbunit-2-4-plugin-for-resharper-4-0" UseCustomPattern="false" />
      <TitlePart Title="MbUnit 2.4 PlugIn for ReSharper 4.0" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=happy-canada-day-the-alt-net-open-spaces-conference" Status="Published">
      <BodyPart Text="&lt;p&gt;It's Canada Day today. And it's opening of The &lt;a href=&quot;http://www.altnetconfcanada.com/home/index.castle&quot; target=&quot;_blank&quot; mce_href=&quot;http://www.altnetconfcanada.com/home/index.castle&quot;&gt;ALT.NET Open Spaces&lt;/a&gt; conference in Calgary, taking place August 15-17, 2008 (at the University of Calgary).&lt;/p&gt;&lt;p&gt;Hurry to &lt;a href=&quot;http://www.altnetconfcanada.com/registration/index.castle&quot; target=&quot;_blank&quot; mce_href=&quot;http://www.altnetconfcanada.com/registration/index.castle&quot;&gt;register &lt;/a&gt;as places are limited. &lt;/p&gt;&lt;p&gt;This is going to be sweet! &lt;br&gt;&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-07-01T16:30:00Z" PublishedUtc="2014-04-19T20:33:48.9048948Z" ModifiedUtc="2008-07-01T16:30:00Z" />
      <TagsPart Tags="" />
      <AutoroutePart Alias="happy-canada-day-the-alt-net-open-spaces-conference" UseCustomPattern="false" />
      <TitlePart Title="Happy Canada Day - The ALT.NET Open Spaces Conference" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=what-would-you-not-like-to-be-today" Status="Published">
      <BodyPart Text="&lt;p&gt;The leading bargeman&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/WhatWouldYouNotLikeToBeToday_D3FF/image_2.png&quot;&gt;&lt;img style=&quot;border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px&quot; height=&quot;300&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/WhatWouldYouNotLikeToBeToday_D3FF/image_thumb.png&quot; width=&quot;400&quot; border=&quot;0&quot;&gt;&lt;/a&gt;&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-06-27T21:03:34Z" PublishedUtc="2008-06-27T21:03:34Z" ModifiedUtc="2008-06-27T21:03:34Z" />
      <TagsPart Tags="Personal" />
      <AutoroutePart Alias="what-would-you-not-like-to-be-today" UseCustomPattern="false" />
      <TitlePart Title="What Would You Not Like To Be Today?" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=ids-to-objects" Status="Published">
      <BodyPart Text="&lt;p&gt;A few months ago I blogged about &lt;a href=&quot;http://weblogs.asp.net/sfeldman/archive/2008/02/03/domain-objects-vs-primitive-types.aspx&quot; mce_href=&quot;http://weblogs.asp.net/sfeldman/archive/2008/02/03/domain-objects-vs-primitive-types.aspx&quot; target=&quot;_blank&quot;&gt;Domain Objects vs. Primitive Types&lt;/a&gt;. Back then it felt right to me to transform a primitive type, like a Guid that represented an organization ID, to an Organization domain object. Unfortunately at that time I was not educated enough to know that this is a common idiom among many object designers. Apparently it is. &lt;a href=&quot;http://www.amazon.com/Applying-UML-Patterns-Introduction-Object-Oriented/dp/0131489062&quot; mce_href=&quot;http://www.amazon.com/Applying-UML-Patterns-Introduction-Object-Oriented/dp/0131489062&quot; target=&quot;_blank&quot;&gt;Craig Larman&lt;/a&gt; writes it nicely in his book (in my case Organization is what Craig references to as a Customer):&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;&lt;i&gt;Why bother? Having a true Customer object that encapsulates a set of information about the customer, and which can have behaviour , frequently becomes beneficial and flexible as the design grows, even if the designer does not originally perceive a need for a true object and thought instead&amp;nbsp; that a plain number of ID would be sufficient.&lt;/i&gt;&lt;/p&gt;&lt;/blockquote&gt; &lt;p&gt;The other important note is when this transformation is taking place - when an ID or a Key leaves the UI layer and gets to the Domain Layer. &lt;/p&gt;&lt;hints id=&quot;hah_hints&quot;&gt;&lt;/hints&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-06-27T16:05:00Z" PublishedUtc="2014-04-19T20:33:49.7791639Z" ModifiedUtc="2008-06-27T16:05:00Z" />
      <TagsPart Tags="DDD,Patterns" />
      <AutoroutePart Alias="ids-to-objects" UseCustomPattern="false" />
      <TitlePart Title="IDs to Objects" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=have-honest-opinion" Status="Published">
      <BodyPart Text="&lt;p&gt;It is very hard to provide an honest opinion when you are involved in a situation. I found it always difficult for myself and admired people of being able to do it, lifting themselves from emotional attachments to the matter. &lt;/p&gt; &lt;p&gt;I am a big fan (if not huge) of the whole Google Apps platform. I use heavily Gmail, rely a lot on Google Calendar, abandoned Excel for simple-to-average stuff and went with Google spreadsheets. I used Google Maps, because it was better than Microsoft's competitive version of the product. Till I had a chance to re-evaluate it again. This time around Microsoft has produces a better result. &lt;a href=&quot;http://maps.live.com&quot; target=&quot;_blank&quot;&gt;Microsoft Live Maps&lt;/a&gt; gives me more than &lt;a href=&quot;http://maps.google.com/&quot; target=&quot;_blank&quot;&gt;Google Maps&lt;/a&gt; does (weird even to think it, not mentioning writing it :). &lt;/p&gt; &lt;p&gt;What made the difference? The level of details, an option of having a closer look, real images. Anyway, I am not using Live Maps.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-06-19T17:09:02Z" PublishedUtc="2014-04-19T20:33:50.1072826Z" ModifiedUtc="2008-06-19T17:09:02Z" />
      <TagsPart Tags="Personal" />
      <AutoroutePart Alias="have-honest-opinion" UseCustomPattern="false" />
      <TitlePart Title="Have Honest Opinion" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=command-query-separate-principle" Status="Published">
      <BodyPart Text="&lt;p&gt;A few days ago read in Larman's book about Command-Query Separation Principle. Funny to mention&amp;nbsp; that I heard about the concept many times ago, but this is the only source that stated it as a principle. And it makes total sense once you evaluate all the pros and cons of the idea.&lt;/p&gt; &lt;p&gt;What's the principle? Simple. There are two kinds of messages to objects: &lt;/p&gt; &lt;ul&gt; &lt;li&gt;Commands - ones that are affecting the state of the object&lt;/li&gt; &lt;li&gt;Queries - ones that are querying an object for its' state &lt;u&gt;without&lt;/u&gt; affecting its' state at all&lt;/li&gt;&lt;/ul&gt; &lt;p&gt;A Command message would be &quot;void Calculate()&quot; or &quot;void Add(double value)&quot;. Command message never returns a value, and that's for clear separation of the messages and easier maintenance of the object state (i.e. no surprises). A Query message would be what Command isn't &quot;int GetValue()&quot; or &quot;IsVisible()&quot;.&lt;/p&gt; &lt;p&gt;One exception the author brought up was internal/private messages that are not a part of the interface, and therefore can violate the principle - I guess this is a matter of personal preference.&lt;/p&gt; &lt;p&gt;An example is an implementation of a Die (for a monopoly game) modified by myself.&lt;/p&gt;&lt;pre class=&quot;csharpcode&quot;&gt;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;interface&lt;/span&gt; IDie &lt;br&gt;    {&lt;br&gt;        &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; Roll();&lt;br&gt;        &lt;span class=&quot;kwrd&quot;&gt;int&lt;/span&gt; GetFaceValue();&lt;br&gt;    }&lt;br&gt;    &lt;br&gt;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;class&lt;/span&gt; Die : IDie&lt;br&gt;    {&lt;br&gt;        &lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;int&lt;/span&gt; faceValue;&lt;br&gt;        &lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; Random rand = &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; Random();&lt;br&gt;        &lt;br&gt;        &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; Roll()&lt;br&gt;        {&lt;br&gt;            faceValue = rand.Next(6) + 1;&lt;br&gt;        }&lt;br&gt;        &lt;br&gt;        &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;int&lt;/span&gt; GetFaceValue()&lt;br&gt;        {&lt;br&gt;            &lt;span class=&quot;kwrd&quot;&gt;return&lt;/span&gt; faceValue;&lt;br&gt;        }&lt;br&gt;    }&lt;/pre&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&#xA;&lt;/style&gt;&#xA;&#xA;&lt;p&gt;I added the interface on purpose, to have DbC, where implementation doesn't matter that much, because the contract is expressing well enough the intension of how to use an implementer of&amp;nbsp; an IDie. Thanks to the CQS Principle it becomes crystal clear. It is easy to determine a value of a die, and there's no surprises when a die is queried for it's value.&lt;/p&gt;&#xA;&lt;p&gt;Now imagine a system with a significant number of components that violate this principle versus a system where components follow it. Can you imagine the difference?&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&quot;http://www.amazon.com/Applying-UML-Patterns-Introduction-Object-Oriented/dp/0130925691/ref=sr_1_1?ie=UTF8&amp;amp;s=books&amp;amp;qid=1213679659&amp;amp;sr=1-1&quot; mce_href=&quot;http://www.amazon.com/Applying-UML-Patterns-Introduction-Object-Oriented/dp/0130925691/ref=sr_1_1?ie=UTF8&amp;amp;s=books&amp;amp;qid=1213679659&amp;amp;sr=1-1&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://ecx.images-amazon.com/images/I/51997V9J7QL._SL500_BO2,204,203,200_PIlitb-dp-500-arrow,TopRight,45,-64_OU01_AA240_SH20_.jpg&quot; mce_src=&quot;http://ecx.images-amazon.com/images/I/51997V9J7QL._SL500_BO2,204,203,200_PIlitb-dp-500-arrow,TopRight,45,-64_OU01_AA240_SH20_.jpg&quot;&gt;&lt;/a&gt;&lt;/p&gt;&lt;hints id=&quot;hah_hints&quot;&gt;&lt;/hints&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-06-17T05:12:00Z" PublishedUtc="2014-04-19T20:33:50.8572822Z" ModifiedUtc="2008-06-17T05:12:00Z" />
      <TagsPart Tags=".NET,OO,Patterns" />
      <AutoroutePart Alias="command-query-separate-principle" UseCustomPattern="false" />
      <TitlePart Title="Command-Query Separation Principle" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=3-years" Status="Published">
      <BodyPart Text="&lt;p&gt;Today is 3 years since I started working with the company I work today. It's being a long journey from figuring out what I want, till realizing what I am and need to be. The team has accepted all of my wildest ideas about the code and was very tolerant to the fact that I cannot wait to get something done. We've made a long way. &lt;/p&gt; &lt;p&gt;Besides improving as a software developer, I also realized a few bitter realities - it doesn't matter how good I am, still need to strive to be better. Besides the excellence in code, there must be a proficiency in human relationships. The code is not only about a single developer level, but about team level, because if you are the only one who can have fun with it, it is no longer fun.&lt;/p&gt; &lt;p&gt;Lessons are good, but I have to look forward and setup certain goals for myself, what do I want to achieve the next year? A lot.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;I want the team to get to the point where I am right now, and I can do more for that&lt;/li&gt; &lt;li&gt;I want to have more fun while working, because without it work is useless&lt;/li&gt; &lt;li&gt;I want be more influencing people, help them realize themselves better, without getting into conflicts&lt;/li&gt; &lt;li&gt;I want to improve a lot myself, and by doing that to show, that you can achieve if you want to&lt;/li&gt;&lt;/ul&gt; &lt;p&gt;Some of my targets will change or get updated, but the core set of goals will remain.&lt;/p&gt; &lt;p&gt;A lot ahead, I better start moving towards it.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-06-16T04:24:43Z" PublishedUtc="2014-04-19T20:33:51.8572765Z" ModifiedUtc="2008-06-16T04:24:43Z" />
      <TagsPart Tags="Personal" />
      <AutoroutePart Alias="3-years" UseCustomPattern="false" />
      <TitlePart Title="3 Years" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=code-smell-vs-code-stench" Status="Published">
      <BodyPart Text="&lt;p&gt;Interesting difference I picked up from a book this morning - code smell vs. code stench. &lt;/p&gt; &lt;p&gt;Code smell might indicate there's a problem in code that requires refactoring, but a closer evaluation might prove the smell is false alarm. &lt;/p&gt; &lt;p&gt;Code stench is an obviously bad/poor code that has to be refactored.&lt;/p&gt; &lt;p&gt;From now on I will be more accurate on describing the code issues :)&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-06-12T15:54:59Z" PublishedUtc="2014-04-19T20:33:52.1853829Z" ModifiedUtc="2008-06-12T15:54:59Z" />
      <TagsPart Tags="Personal" />
      <AutoroutePart Alias="code-smell-vs-code-stench" UseCustomPattern="false" />
      <TitlePart Title="Code Smell vs. Code Stench" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=google-shortcut-keys-awesome" Status="Published">
      <BodyPart Text="&lt;p&gt;For all keyboard junkies out there - if you are also hooked on Google products (GMail, Reader, Calendar, etc), don't miss the option of using GMail with &lt;a href=&quot;http://mail.google.com/support/bin/answer.py?hl=en&amp;amp;ctx=mail&amp;amp;answer=6594&quot; target=&quot;_blank&quot;&gt;keyboard shortcuts&lt;/a&gt;. The are awesome. I loved the navigation shortcut (combination of pressing first G and then another key, neat). &lt;/p&gt; &lt;p&gt;To enable keyboard shortcuts, you will have to go to the settings under you GMail account and check off the option to enable it.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-06-12T15:01:48Z" PublishedUtc="2014-04-19T20:33:52.4978784Z" ModifiedUtc="2008-06-12T15:01:48Z" />
      <TagsPart Tags="Personal" />
      <AutoroutePart Alias="google-shortcut-keys-awesome" UseCustomPattern="false" />
      <TitlePart Title="Google Shortcut Keys - Awesome" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=two-loosely-coupled-code-part-2" Status="Published">
      <BodyPart Text="&lt;p&gt;In the  &lt;div class=&quot;wlWriterSmartContent&quot; id=&quot;scid:605EEA63-B54B-4e6d-A290-F5E9E8229FC1:1f7fba02-bf47-4ecd-9486-68f0a015a9b7&quot; style=&quot;padding-right: 0px; display: inline; padding-left: 0px; padding-bottom: 0px; margin: 0px; padding-top: 0px&quot;&gt;&lt;/div&gt; I raised the question of &quot;Too loosely coupled design&quot;. There's a lot to discuss about it, and I am not going more time on it, except showing one more sample that IMHO shows the benefits and outcomes of the principle being applies, or consequences of not doing so.&lt;/p&gt; &lt;p align=&quot;center&quot;&gt;Table 1&lt;/p&gt;&lt;pre class=&quot;csharpcode&quot;&gt;&lt;span class=&quot;kwrd&quot;&gt;namespace&lt;/span&gt; Local.ADL.Home&#xA;{&#xA;  &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;class&lt;/span&gt; HomePresenter : IPresenter&#xA;  {&#xA;    &lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;readonly&lt;/span&gt; IHomeModel model;&#xA;    &lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;readonly&lt;/span&gt; IHomeView view;&#xA;&#xA;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; HomePresenter(IHomeView view): &#xA;                        &lt;span class=&quot;kwrd&quot;&gt;this&lt;/span&gt;(view, &lt;u&gt;&lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; HomeModel()&lt;/u&gt;){}&#xA;&#xA;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; HomePresenter(IHomeView view, IHomeModel model)&#xA;    {&#xA;      &lt;span class=&quot;kwrd&quot;&gt;this&lt;/span&gt;.view = view;&#xA;      &lt;span class=&quot;kwrd&quot;&gt;this&lt;/span&gt;.model = model;&#xA;    }&#xA;&#xA;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; Initialize()&#xA;    {&#xA;      view.Load += View_OnLoad;&#xA;    }&#xA;&#xA;    &lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; View_OnLoad(&lt;span class=&quot;kwrd&quot;&gt;object&lt;/span&gt; sender, EventArgs e)&#xA;    {&#xA;      &lt;span class=&quot;kwrd&quot;&gt;if&lt;/span&gt; (!view.IsPostBack)&#xA;      {&#xA;        view.AssignInitialData(model.IsUserMemberOfPlanAOrPlanB(),&#xA;                model.CanShowSomething());&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/pre&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&#xA;&lt;/style&gt;&#xA;&#xA;&lt;p align=&quot;center&quot;&gt;Table 2&lt;/p&gt;&lt;pre class=&quot;csharpcode&quot;&gt;&lt;span class=&quot;kwrd&quot;&gt;namespace&lt;/span&gt; Local.ADL.Home&#xA;{&#xA;  &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;class&lt;/span&gt; HomeModel : IHomeModel&#xA;  {&#xA;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;bool&lt;/span&gt; IsUserMemberOfPlanAOrPlanB()&#xA;    {&#xA;      &lt;span class=&quot;kwrd&quot;&gt;return&lt;/span&gt; &lt;u&gt;UserSession.IsPlanAorB&lt;/u&gt;;&#xA;    }&#xA;&#xA;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;bool&lt;/span&gt; CanShowSomething()&#xA;    {&#xA;      &lt;span class=&quot;kwrd&quot;&gt;return&lt;/span&gt; &lt;u&gt;UserSession.ShouldSeeSomething&lt;/u&gt;;&#xA;    }&#xA;  }&#xA;}&lt;/pre&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&#xA;&lt;/style&gt;&#xA;&#xA;&lt;p&gt;&lt;b&gt;Q:&lt;/b&gt; Can HomePresenter be tested based on the code in Table 1?&#xA;&lt;p&gt;&lt;b&gt;A:&lt;/b&gt; Yes. It has a parameterized constructor that accepts all dependencies for HomePresenter as contracts (interfaces) without knowing or carrying who are the real components that implement those contracts. Loosely coupled code, where we depend upon abstraction and not concrete implementation.&#xA;&lt;p&gt;&lt;b&gt;Q:&lt;/b&gt; Does HomePresenter is loosely coupled at run-time?&#xA;&lt;p&gt;&lt;b&gt;A:&lt;/b&gt; No. It has a direct dependency on HomeModel class. This is a tight coupling, meaning that anywhere in the code we used this type of coupling, we made HomeModel “visible” for HomePresenter, i.e. we violated the principle of depending upon abstraction and not concrete implementation. What would be a solution? Dependency Injection Principle with a standard container (lets call it DependencyResolver). Using this simple principle would change the code to be something similar to the code in Table 3. Now HomePresenter is loosely coupled to the implementer of the IHomeModel contract. Some configuration file / startup code will determine who is the actual implementer at run-time. Testing is still possible.&#xA;&lt;p align=&quot;center&quot;&gt;Table 3&lt;/p&gt;&lt;pre class=&quot;csharpcode&quot;&gt;&lt;span class=&quot;kwrd&quot;&gt;namespace&lt;/span&gt; Local.ADL.Home&#xA;{&#xA;  &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;class&lt;/span&gt; HomePresenter : IPresenter&#xA;  {&#xA;    &lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;readonly&lt;/span&gt; IHomeModel model;&#xA;    &lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;readonly&lt;/span&gt; IHomeView view;&#xA;&#xA;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; HomePresenter(IHomeView view): &#xA;       &lt;span class=&quot;kwrd&quot;&gt;this&lt;/span&gt;(view, &lt;u&gt;DependencyResolver.GetImplementerOf(IHomeModel)&lt;/u&gt;){}&#xA;&#xA;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; HomePresenter(IHomeView view, IHomeModel model)&#xA;    {&#xA;      &lt;span class=&quot;kwrd&quot;&gt;this&lt;/span&gt;.view = view;&#xA;      &lt;span class=&quot;kwrd&quot;&gt;this&lt;/span&gt;.model = model;&#xA;    }&#xA;&#xA;    &lt;span class=&quot;rem&quot;&gt;// ...&lt;/span&gt;&#xA;&lt;/pre&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&#xA;&lt;/style&gt;&#xA;&#xA;&lt;p&gt;&lt;b&gt;Q:&lt;/b&gt; Can HomeModel be tested based on the code in Table 2? &#xA;&lt;p&gt;&lt;b&gt;A:&lt;/b&gt; No. It is tightly coupled to the UserSession, which in its’ case is a static class and cannot be mocked / faked / taken out as a component that is not required to be tested at this moment.&#xA;&lt;p&gt;To solve it:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;UserSession has to be implementer of a contract, lets call it IUserSession&lt;/li&gt;&#xA;&lt;li&gt;The implementer of IUserSession has to be supplied / injected as a dependency during construction time either directly or through container, similar to the example in HomePresenter code in Table 3&lt;/li&gt;&lt;/ul&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-06-11T15:15:40Z" PublishedUtc="2014-04-19T20:33:52.8572493Z" ModifiedUtc="2008-06-11T15:15:40Z" />
      <TagsPart Tags=".NET,OO" />
      <AutoroutePart Alias="two-loosely-coupled-code-part-2" UseCustomPattern="false" />
      <TitlePart Title="Two Loosely Coupled Code - Part 2" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=too-loosely-coupled-code" Status="Published">
      <BodyPart Text="&lt;p&gt;&lt;em&gt;&lt;strong&gt;Strive for loosely coupled designs between objects that interact.&lt;/strong&gt; &lt;/em&gt;&lt;/p&gt;  &lt;p&gt;By minimizing the knowledge one class has of another, you decrease dependency between those classes. Independent classes provide more flexibility in design.&lt;/p&gt;  &lt;p&gt;Does this mean your application becomes more difficult to understand? Yes to a certain degree. You have to understand a few things before trying to work with loosely coupled code, things like the idea behind this principle. Why coupling is bad in first place. Determine how coupled your code that you normally created. Why you need loosely coupled code (or &amp;quot;what's in it for me&amp;quot;). &lt;/p&gt;  &lt;p&gt;One of the benefits of TDD I figured out for myself is that it forces you (yes, forces) to stick to the loosely coupled design. &lt;strong&gt;&lt;em&gt;Program to an interface, not an implementation.&lt;/em&gt; &lt;/strong&gt;By defining interface/contract first, and deferring it's implementation for later, you defer the concrete implementation of other components that are not the primarily target at the moment. That is a loose coupling, since you minimize the dependency on details of those components. &lt;strong&gt;&lt;em&gt;Depend upon abstractions. Do not depend upon concrete classes.&lt;/em&gt;&lt;/strong&gt; Interface is the abstraction, allowing to substitute implementer of it. Combined with &lt;strong&gt;&lt;em&gt;Dependency Injection Principle&lt;/em&gt;&lt;/strong&gt;, you achieve a true loose coupling. &lt;/p&gt;  &lt;p&gt;So the code like the one at the bottom (that doesn't really do anything significant) is loosely coupled to the component of type IComponentA, which is an abstraction. We don't know who is the implementer of this contract unless look into either a startup code or configuration file that sets the implementers for the contracts. &lt;/p&gt;  &lt;p&gt;How difficult to learn that from looking briefly at the code? Probably not the easiest task. But you would never get it in first place, without understanding the principles. So saying that the code is 'hard to trace' indicated that there's no understanding of the principles. When you understand what DependencyResolver is, and concepts it implements, you immediately understand what the chained constructor is doing. TDD is forcing to expose the 2nd (parameterized) constructor for easier dependency supply. You could configure DependencyResolver for tests, but then it adds complexity to the testing.&lt;/p&gt;  &lt;p&gt;So my question is can code be too loosely, or your code is so coupled, that anything else is difficult to digest?&lt;/p&gt;  &lt;div class=&quot;csharpcode&quot;&gt;   &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   1:  &lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;class&lt;/span&gt; ComponentB : IComponentB&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   2:  &lt;/span&gt;{&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   3:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; IComponentA dependency;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   4:  &lt;/span&gt;    &lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   5:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; ComponentB() :&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   6:  &lt;/span&gt;          &lt;span class=&quot;kwrd&quot;&gt;this&lt;/span&gt;(DependencyResolver.GetImplementationOf&amp;lt;IComponentA&amp;gt;()) &lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;           {}&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   7:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; ComponentB(IComponentA dependency) &lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   8:  &lt;/span&gt;    {&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   9:  &lt;/span&gt;       &lt;span class=&quot;kwrd&quot;&gt;this&lt;/span&gt;.dependency = dependency;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  10:  &lt;/span&gt;    }&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  11:  &lt;/span&gt;&amp;#160;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  12:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; SomeFunctionality(&lt;span class=&quot;kwrd&quot;&gt;string&lt;/span&gt; param)&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  13:  &lt;/span&gt;    {&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  14:  &lt;/span&gt;       var result = &lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;                   dependency.OperationDefinedByDependencyContract(param);&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  15:  &lt;/span&gt;       &lt;span class=&quot;kwrd&quot;&gt;return&lt;/span&gt; DoSomethingWith(result); &lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  16:  &lt;/span&gt;    }&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  17:  &lt;/span&gt;}&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;&#xA;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&lt;/style&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-06-10T02:41:49Z" PublishedUtc="2014-04-19T20:33:53.2009933Z" ModifiedUtc="2008-06-10T02:41:49Z" />
      <TagsPart Tags="OO,Patterns,TDD" />
      <AutoroutePart Alias="too-loosely-coupled-code" UseCustomPattern="false" />
      <TitlePart Title="Too Loosely Coupled Code" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=a-month-of-silence" Status="Published">
      <BodyPart Text="&lt;p&gt;[Pure personal content]&amp;nbsp;&lt;/p&gt;&lt;p&gt;My vacation with family in Israel almost over - packing luggage, sitting for the last time at cafes with people I will miss, enjoying the extra hot weather while it's more fun than burden. This vacation was a great refresh for the entire family: kids, wife, myself. Having a break from daily thoughts, code, work - feels that it has gave me more will to kick in and go forward that it felt a month ago. Speaking about going forward...&lt;/p&gt;&lt;p&gt;Going forward has to be directed. A list like JP and Mr. Mo suggested is a great idea. Having a master plan partitioned by timeline can be another concept. Sitting back and analyzing what has being accomplished, with what costs, and was it worth it or not is another way. I guess this is the path I went while staying on vacation. I see better what fights I should not go into - they are just not worth it and I have better things to do in my life. I can definitely distinguish better between friend and foe. I realize that tolerance is blessing, and a curse at the same time, and that it's my responsibility to make the judgment and deciding call what persist on and what to let go.&lt;/p&gt;&lt;p&gt;I am returning from vacation this time, knowing better what I want from myself. This will allow me to manage better my expectations from others, and hopefully, communicate better and spread the ideas I believe in. This time around I also know that I am coming back and there are friends waiting. This time the concept of &quot;everything should be with good proportion&quot; fits better than never. Enough of vacation, let's code!&lt;br&gt;&lt;/p&gt;&lt;hints id=&quot;hah_hints&quot;&gt;&lt;/hints&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-06-04T13:49:00Z" PublishedUtc="2014-04-19T20:33:53.8572367Z" ModifiedUtc="2008-06-04T13:49:00Z" />
      <TagsPart Tags="Personal" />
      <AutoroutePart Alias="a-month-of-silence" UseCustomPattern="false" />
      <TitlePart Title="A Month of Silence" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=ocp-principle" Status="Published">
      <BodyPart Text="&lt;p&gt;Jeremy Miller (aka The Shade Tree Developer) has a very good article about OCP principle printed by MSDN magazine. This is a valuable article for any developer that strives to work according to law of &quot;measure twice, cut once&quot;, and not just cook spaghetti. http://msdn.microsoft.com/en-us/magazine/cc546578.aspx&amp;nbsp;&lt;/p&gt;&lt;p&gt;This is not the only principle to consider, but one of many that are not widely explained in textbooks during your school years. OCP, LSP, DIP, ISP, and much more. I am more than happy ALT.NET folks are bringing these subjects over the new brand shiny new technologies under the hood of .NET&lt;br&gt;&lt;/p&gt;&lt;hints id=&quot;hah_hints&quot;&gt;&lt;/hints&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-06-04T13:39:00Z" PublishedUtc="2014-04-19T20:33:54.2478558Z" ModifiedUtc="2008-06-04T13:39:00Z" />
      <TagsPart Tags="OO,Patterns" />
      <AutoroutePart Alias="ocp-principle" UseCustomPattern="false" />
      <TitlePart Title="OCP Principle" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=going-to-see-my-family" Status="Published">
      <BodyPart Text="&lt;p&gt;This is not a technical post. Nor it's related to software development or the theory behind it. It is a pure human post about principles that are much more basic and important in life then anything else - family.&lt;/p&gt;  &lt;p&gt;My wife and kids have left for their spring-summer vacation about two months leaving me behind to catch up later. Two days and I am on my way to see them, reunite and spend a one hell of the month in the place I love - Israel.&lt;/p&gt;  &lt;p&gt;These two month were an interesting period of time for myself. I have made a few decisions two change the way I do things. Realized how much I care and love my family. Learned to appreciate my own time, and see the things normally I cannot see from a distance of a meter - time goes by quickly and I have to make the difference every single day. Difference as dad, as husband, as a software developer, as a human. &lt;/p&gt;  &lt;p&gt;Saying this I realize how much I still have to go/do. Very exciting. The vacation will give me some rest I need. Seeing my family will boost my moral. My family is great. I love you Anna, Liam and Liz. Here's &lt;a href=&quot;http://animoto.com/play/Y61qgxWY9jlGqtwZgvxiTw&quot; target=&quot;_blank&quot;&gt;my family on current vacation&lt;/a&gt; (thanks to &lt;a href=&quot;http://weblogs.asp.net/rosherove/&quot; target=&quot;_blank&quot;&gt;Roy Osherov&lt;/a&gt; for pointing out the web service, sorry, the track is the same - tried to be original, but this one is really good:).&lt;/p&gt;  &lt;p&gt;PS: yes, and the warm weather - that is an important ingredient for a fun time! Make it double please.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-04-28T06:29:25Z" PublishedUtc="2014-04-19T20:33:54.6384761Z" ModifiedUtc="2008-04-28T06:29:25Z" />
      <TagsPart Tags="Personal" />
      <AutoroutePart Alias="going-to-see-my-family" UseCustomPattern="false" />
      <TitlePart Title="Going To See My Family" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=windsor-container-bug" Status="Published">
      <BodyPart Text="&lt;p&gt;Today run into what I think is a bug in Windsor Container. After googling a bit, found a post that is similar to what I have - need to have a constructor in implementer component (ctor(string)) and configure Windsor to call it, rather than overloaded version of constructor. For some reason Windsor is not going to the default constructor. &lt;/p&gt;  &lt;div style=&quot;border-right: gray 1px solid; padding-right: 4px; border-top: gray 1px solid; padding-left: 4px; font-size: 8pt; padding-bottom: 4px; margin: 20px 0px 10px; overflow: auto; border-left: gray 1px solid; width: 97.5%; cursor: text; max-height: 200px; line-height: 12pt; padding-top: 4px; border-bottom: gray 1px solid; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; background-color: #f4f4f4&quot;&gt;   &lt;div style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;     &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   1:&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;interface&lt;/span&gt; IService&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   2:&lt;/span&gt; {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   3:&lt;/span&gt;   &lt;span style=&quot;color: #008000&quot;&gt;//...&lt;/span&gt;&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   4:&lt;/span&gt; }&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   5:&lt;/span&gt;&amp;#160; &lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   6:&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;class&lt;/span&gt; Component : IService&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   7:&lt;/span&gt; {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   8:&lt;/span&gt;     &lt;span style=&quot;color: #0000ff&quot;&gt;public&lt;/span&gt; Component() : &lt;span style=&quot;color: #0000ff&quot;&gt;this&lt;/span&gt;(DependencyResolver&amp;lt;IService&amp;gt;()) {}&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   9:&lt;/span&gt;     &lt;span style=&quot;color: #0000ff&quot;&gt;public&lt;/span&gt; Component(IService service){}&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  10:&lt;/span&gt; }&lt;/pre&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;The component was registered as:&lt;/p&gt;&#xA;&#xA;&lt;div style=&quot;border-right: gray 1px solid; padding-right: 4px; border-top: gray 1px solid; padding-left: 4px; font-size: 8pt; padding-bottom: 4px; margin: 20px 0px 10px; overflow: auto; border-left: gray 1px solid; width: 97.5%; cursor: text; max-height: 200px; line-height: 12pt; padding-top: 4px; border-bottom: gray 1px solid; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; background-color: #f4f4f4&quot;&gt;&#xA;  &lt;div style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   1:&lt;/span&gt; var type = &lt;span style=&quot;color: #0000ff&quot;&gt;typeof&lt;/span&gt;(IService);&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   2:&lt;/span&gt; DependencyResolver.Register(type.FullName, type, &lt;span style=&quot;color: #0000ff&quot;&gt;typeof&lt;/span&gt;(Component));&lt;/pre&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;the proposed workaround was :&lt;/p&gt;&#xA;&#xA;&lt;div style=&quot;border-right: gray 1px solid; padding-right: 4px; border-top: gray 1px solid; padding-left: 4px; font-size: 8pt; padding-bottom: 4px; margin: 20px 0px 10px; overflow: auto; border-left: gray 1px solid; width: 97.5%; cursor: text; max-height: 200px; line-height: 12pt; padding-top: 4px; border-bottom: gray 1px solid; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; background-color: #f4f4f4&quot;&gt;&#xA;  &lt;div style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   1:&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;class&lt;/span&gt; Component : IService&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   2:&lt;/span&gt; {&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   3:&lt;/span&gt;     &lt;span style=&quot;color: #0000ff&quot;&gt;public&lt;/span&gt; Component(&lt;span style=&quot;color: #0000ff&quot;&gt;string&lt;/span&gt; ignored) &lt;span style=&quot;color: #0000ff&quot;&gt;this&lt;/span&gt;() {} &lt;span style=&quot;color: #008000&quot;&gt;// call default ctor&lt;/span&gt;&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   4:&lt;/span&gt;     &lt;span style=&quot;color: #0000ff&quot;&gt;public&lt;/span&gt; Component() : &lt;span style=&quot;color: #0000ff&quot;&gt;this&lt;/span&gt;(DependencyResolver&amp;lt;IService&amp;gt;()) {}&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   5:&lt;/span&gt;     &lt;span style=&quot;color: #0000ff&quot;&gt;public&lt;/span&gt; Component(IService service){}&lt;/pre&gt;&#xA;&#xA;    &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   6:&lt;/span&gt; }&lt;/pre&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;and through Container.Kernel.Handler register Dictionary of parameters (string in this case) that would determine what constructor to use.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Has anyone solved this problem in a more delicate way rather that creating a workaround constructor and registering parameters?&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-04-23T05:28:15Z" PublishedUtc="2014-04-19T20:33:55.1228469Z" ModifiedUtc="2008-04-23T05:28:15Z" />
      <TagsPart Tags="" />
      <AutoroutePart Alias="windsor-container-bug" UseCustomPattern="false" />
      <TitlePart Title="Windsor Container - Bug" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=whiteboard-vs-excel-part-2" Status="Published">
      <BodyPart Text="&lt;p&gt;I have posted &lt;a href=&quot;http://weblogs.asp.net/sfeldman/archive/2008/04/01/whiteboard-with-stickers-vs-excel.aspx&quot; target=&quot;_blank&quot;&gt;before&lt;/a&gt; about the subject, and there was a strong hold on both sides (for and against). Yesterday I run into a blog that mentioned a software called Mingle 2.0 - obviously not the first version according to the name, but I have never heard of it before, so it might be a naming game (all the Web 2.0 thing) - who knows? And probably someone knows. If you a successful survivor of the software or have&amp;nbsp; a few words to drop, leave your comment after the beep. &lt;/p&gt; &lt;p&gt;Beeeeep.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-04-21T13:58:00Z" PublishedUtc="2014-04-19T20:33:55.5290891Z" ModifiedUtc="2008-04-21T13:58:00Z" />
      <TagsPart Tags="Personal" />
      <AutoroutePart Alias="whiteboard-vs-excel-part-2" UseCustomPattern="false" />
      <TitlePart Title="Whiteboard vs. Excel - Part 2" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=what-about-alt-net-calgary-group" Status="Published">
      <BodyPart Text="&lt;p&gt;We have some very talented and blade sharp people here. So why can't we start ALT.NET Calgary local group? This would definitely promote excellent ideas around, enrich our dev community, put more stress on quality, agility, and much more. Feel free to contact me if interested. &lt;/p&gt; &lt;p&gt;PS: I am quite inspired by what is going on right now at the ALT.NET conference. Wish would be there...&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-04-21T05:39:26Z" PublishedUtc="2014-04-19T20:33:55.8415845Z" ModifiedUtc="2008-04-21T05:39:26Z" />
      <TagsPart Tags="Agile,ALT.NET" />
      <AutoroutePart Alias="what-about-alt-net-calgary-group" UseCustomPattern="false" />
      <TitlePart Title="What About ALT.NET Calgary Group?" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=the-matrix" Status="Published">
      <BodyPart Text="&lt;P align=right&gt;Inspired by people like JP. Thank you.&lt;/P&gt;&#xA;&lt;P align=left&gt;&lt;EM&gt;&lt;STRONG&gt;The Matrix has you...&lt;/STRONG&gt;&lt;/EM&gt;&lt;/P&gt;&#xA;&lt;P&gt;&lt;EM&gt;- Ever have that feeling where you're not sure if you're awake or dreaming?&lt;/EM&gt;&lt;/P&gt;&#xA;&lt;P&gt;&lt;EM&gt;- How did you do that? &lt;/EM&gt;&lt;/P&gt;&#xA;&lt;P&gt;&lt;EM&gt;- Right now, all I can tell you... is that you're in danger. They're watching you, Neo.&lt;/EM&gt;&lt;/P&gt;&#xA;&lt;P&gt;&lt;EM&gt;- Who is?&lt;/EM&gt;&lt;/P&gt;&#xA;&lt;P&gt;&lt;EM&gt;- Please just listen. I know why you're here, Neo. I know what you've been doing. I know why you hardly sleep... why you live alone and why, night after night... you sit at your computer. You're looking for him. I know, because I was once looking for the same thing. And when he found me... he told me I wasn't really looking for him... &lt;/EM&gt;&lt;/P&gt;&#xA;&lt;P&gt;&lt;EM&gt;- ...I was looking for an answer. It's the question that drives us, Neo. &lt;/EM&gt;&lt;/P&gt;&#xA;&lt;P&gt;&lt;EM&gt;- It's the question that brought you here. You know the question... just as I did.&lt;/EM&gt;&lt;/P&gt;&#xA;&lt;P&gt;&lt;EM&gt;- What is the Matrix?&lt;/EM&gt;&lt;/P&gt;&#xA;&lt;P&gt;So what is the Matrix? Matrix is the existing software culture that has us all playing by it's rules. Matrix is the classic waterfall with the big fat design up front, if you wish. Matrix is the culture of lonely stars &quot;ruling&quot; the code-world, or at least the imaginary worlds they create. &lt;/P&gt;&#xA;&lt;P&gt;What is the question? Question is what doesn't let you fit nicely into the Matrix, causing discomfort and feeling of bad taste in your mouth, while you trying to digest it. Question is your passion to something that can be better, and you know that Matrix is not it.&lt;/P&gt;&#xA;&lt;P&gt;&lt;EM&gt;- The answer is out there, Neo. It's looking for you. And it will find you... if you want it to. &lt;/EM&gt;&lt;/P&gt;&#xA;&lt;P&gt;The answer is not single,&amp;nbsp;these are multiple&amp;nbsp;answers. Answers are Alternatives. You won't have answers, until you embrace alternatives. You won't have answers, until you try the alternatives. You won't have answers, until you are honest enough with yourself and make the decision.&lt;/P&gt;&#xA;&lt;P&gt;&lt;EM&gt;Bzzz - bzzz - bzzz - bzzzz&lt;/EM&gt;&lt;/P&gt;&#xA;&lt;P&gt;&lt;EM&gt;-Oh shit!&lt;/EM&gt;&lt;/P&gt;&#xA;&lt;P&gt;Shit - that's how reality looks like when you wake up to it in the morning, with a great tune of the buzzing clock. But is it? You know this is not the reality you want to leave, you know that you can do more and better. You know that the answers will help you to get where you want to be. All you need to do is answer the question(s). Or at least try to. Yes, you will try to get the answer to your question(s) and by that change the stinky reality. And right then the reality kicks into the next gear. Reverse.&lt;/P&gt;&#xA;&lt;P&gt;&lt;EM&gt;- You believe that you are special, that the rules do not apply to you. Obviously, you are mistaken. This is one of the top software companies in the world... because employees understand they are part of a whole. &lt;/EM&gt;&lt;/P&gt;&#xA;&lt;P&gt;And back you are to your beloved desk and sad reality. &lt;/P&gt;&#xA;&lt;P&gt;&lt;EM&gt;- Hello, Neo. Do you know who this is?&lt;/EM&gt;&lt;/P&gt;&#xA;&lt;P&gt;&lt;EM&gt;- Morpheus.&lt;/EM&gt;&lt;/P&gt;&#xA;&lt;P&gt;&lt;EM&gt;- Yes. I don't know if you're ready to see what I want to show you. But unfortunately, you and I have run out of time. &lt;/EM&gt;&lt;/P&gt;&#xA;&lt;P&gt;We all need such a call. A wake up call. A call that will make it clear that something has to change in how you do things. The way you think, the way you work. A wake up call to realize that time is not your ally, but the worse enemy, and if you don't act, answers will remain unrevealed. &lt;/P&gt;&#xA;&lt;P&gt;&lt;EM&gt;- Please, Neo, you have to trust me. &lt;/EM&gt;&lt;/P&gt;&#xA;&lt;P&gt;&lt;EM&gt;- Why?&lt;/EM&gt;&lt;/P&gt;&#xA;&lt;P&gt;&lt;EM&gt;- Because you have been down there. You know that road. You know exactly where it ends. And I know that's not where you want to be.&lt;/EM&gt;&lt;/P&gt;&#xA;&lt;P&gt;When the time comes to make some painful decisions, we chicken out. We normally do, because it's different, it's new, it's unknown, it doesn't feel familiar and the comfort is gone. Unknown feels so heavy when possession of already accumulated knowledge makes you feel so great about yourself. But deep inside you know that that road is not for you, there's nothing left for you. You have traveled that road and it's not the one that takes you to the answers.&lt;/P&gt;&#xA;&lt;P&gt;&lt;EM&gt;- Let me give you one piece of advice. Be honest.&lt;/EM&gt;&lt;/P&gt;&#xA;&lt;P&gt;Giving and taking advices is easy. Following those is tougher. Be honest with yourself, your skills, you abilities. Am I as good as I want to be thought of? Am I adding value by what I do? Am I making any difference, or just doing the same old thing is some other trivial way? Am I honest about answering the questions I face? Honesty is the key to loose the unnecessary fears that are roadblocks to the answers you are looking for. At least it serves as a good kick off point.&lt;/P&gt;&#xA;&lt;P&gt;&lt;EM&gt;- I imagine... that right now you're feeling a bit like Alice... tumbling down the rabbit hole?&lt;/EM&gt;&lt;/P&gt;&#xA;&lt;P&gt;&lt;EM&gt;- You could say that.&lt;/EM&gt;&lt;/P&gt;&#xA;&lt;P&gt;&lt;EM&gt;- I can see it in your eyes.&lt;/EM&gt;&lt;/P&gt;&#xA;&lt;P&gt;&lt;EM&gt;- You have the look of a man who accepts what he sees... because he's expecting to wake up. Ironically, this is not far from the truth.&lt;/EM&gt;&lt;/P&gt;&#xA;&lt;P&gt;Find the people who will see what you going through in your eyes, wise people who can sense what you going through to show you a hint to what you are looking for.&lt;/P&gt;&#xA;&lt;P&gt;&lt;EM&gt;- It is the world that has been pulled over your eyes... to blind you from the truth.&lt;/EM&gt;&lt;/P&gt;&#xA;&lt;P&gt;&lt;EM&gt;- What truth?&lt;/EM&gt;&lt;/P&gt;&#xA;&lt;P&gt;&lt;EM&gt;- That you are a slave. Like everyone else, you were born into bondage... born into a prison that you cannot smell or taste or touch. A prison for your mind. This is your last chance. After this, there is no turning back. You take the blue pill the story ends, you wake up in your bed and believe whatever you want to believe. You take the red pill, you stay in Wonderland, and I show you how deep the rabbit hole goes.&lt;/EM&gt;&lt;/P&gt;&#xA;&lt;P&gt;&lt;EM&gt;Remember... &lt;STRONG&gt;all I'm offering is the truth. Nothing more.&lt;/STRONG&gt;&lt;/EM&gt;&lt;/P&gt;&#xA;&lt;P&gt;The blue pill for me is falling back into old habits. Waterfall, BDUFs, cubical, DB driven designs. The red pill for me is Agile, TDD, open communication, team, openness. I choose the red pill not only to know how deep the rabbit hole goes, but also to test my abilities to go even deeper. I choose the red pill, because I prefer bitter truth to sweeter illusion. I choose the red pill because I want the truth. And my truth is that I still have the dream and on my way of achieving it.&lt;/P&gt;&#xA;&lt;P&gt;Don't abandon your dream. Don't live in Matrix.&lt;/P&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-04-19T07:54:00Z" PublishedUtc="2014-04-19T20:33:56.4040769Z" ModifiedUtc="2008-04-19T07:54:00Z" />
      <TagsPart Tags="Personal" />
      <AutoroutePart Alias="the-matrix" UseCustomPattern="false" />
      <TitlePart Title="The MAtrix" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=changes" Status="Published">
      <BodyPart Text="&lt;p&gt;After a long time I had the book sitting idle, finally I had a chance to get my hands &lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/Changes_EEBD/image_2.png&quot;&gt;&lt;img style=&quot;border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px&quot; height=&quot;240&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/Changes_EEBD/image_thumb.png&quot; width=&quot;240&quot; align=&quot;right&quot; border=&quot;0&quot;&gt;&lt;/a&gt; on it - Who Moved My Cheese. A very nice, fairy tale kind-of book teaching how to cope with changes. I loved it, especially it's nice to read if you are trying to wrap around the agility concept. &lt;/p&gt; &lt;p&gt;Be ready for changes, be ready to change. Be ready for things become and stay dynamic. You have to be dynamic. Don't be a littlepeople, with a two complicated brain analysis to adopt to changes, be quick and pragmatic, adopt and period. Nice book, worth reading.&lt;/p&gt; &lt;p&gt;PS: I think I will introduce my son to this nice story. His brain is much better of adopting then mine :)&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-04-10T23:02:14Z" PublishedUtc="2008-04-10T23:02:14Z" ModifiedUtc="2008-04-10T23:02:14Z" />
      <TagsPart Tags="Books,Personal" />
      <AutoroutePart Alias="changes" UseCustomPattern="false" />
      <TitlePart Title="Changes" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=pair-programming-keyboard-and-mice" Status="Published">
      <BodyPart Text="&lt;p&gt;While pairing today with one of the developers from our team, we decided not to let the mice to distract us, and unplugged it. That was awesome - within seconds we diagnosed ourselves with a mouse-have-to-touch addiction symptom. Every single moment a hand was reaching to the sacred location two things happened:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;The mouse wasn't working  &lt;li&gt;The brain was realizing that there's an alternative - keyboard&lt;/li&gt;&lt;/ol&gt; &lt;p&gt;It probably took an hour to digest the great loss, but we started to rely on R# and keyboard shortcuts to do the job. I can definitely see the difference between the start and the finish. &lt;/p&gt; &lt;p&gt;The other challenge is how to practice something similar with a person who is pairing remotely - you can ask to disconnect the mice and drop it to the bin, but it's not always working. A typical reply would be &quot;Sure! What for? I simply won't touch it&quot;. And 3 seconds after that you see the sneaky mouse making it's way from one corner of the screen to the opposite one (or worse, expressing the thoughts of the confused 'master', while trying to thing what is needed to be done). &lt;/p&gt; &lt;p&gt;So I can't unplug the beast, can I then mute it? Wow, that would be nice, an application to temporarily disable mouse. What do you think? (This&amp;nbsp; is where I solicit for a utility name).&lt;/p&gt; &lt;p&gt;&lt;em&gt;Confession&lt;/em&gt;: I am not using mouse for a while while developing, and the whole purpose of the experiment was to prove to my team mates that they can do with no problems at all. It's all in the head, Pinky, all in the head.&lt;/p&gt; &lt;p&gt;Reminds me words of Morpheus from Matrix movie in context to the importance of the mice to be able to work: &quot;Do you think it's the air that you breath? Hmmm. Interesting....&quot;&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-04-09T23:56:39Z" PublishedUtc="2014-04-19T20:33:57.4665733Z" ModifiedUtc="2008-04-09T23:56:39Z" />
      <TagsPart Tags="Personal" />
      <AutoroutePart Alias="pair-programming-keyboard-and-mice" UseCustomPattern="false" />
      <TitlePart Title="Pair-Programming, Keyboard, and Mice" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=nhibernate-2-0-tutorials" Status="Published">
      <BodyPart Text="&lt;p&gt;Over the weekend I had a chance to play a bit with the &lt;a href=&quot;http://blogs.hibernatingrhinos.com/nhibernate/Default.aspx&quot; target=&quot;_blank&quot;&gt;tutorials&lt;/a&gt; provided by Gabriel Schenker for NHibernate 2.0 TDD style. A few thoughts on the subjects:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;NHibernate is powerful for especially Domain oriented solutions&lt;/li&gt;    &lt;li&gt;Feels a few orders more mature than the ADO.NET* approaches (Have to admit, I am not a big fan of ADO.NET - and at work people don't like that. Hopefully they will be able to see in NHibernate what I saw for myself)&lt;/li&gt;    &lt;li&gt; Definitely helps to shift the focus on the right problems (not how to persist and cache, but how to resolve the real problem - logic of the solution for the domain, not technology)&lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;I will be continuing with those tutorial, trying to learn more and see how and when can introduce it in our code. The fact that you can do you testing without having an actual database is thrilling (in a good way) and exciting. What I am missing at this point is some good literature recommendation that is more .NET oriented, with accent on the version that supports Generics and HCQ (HQL is a bit too SQL-ish to me).&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-04-07T04:02:51Z" PublishedUtc="2014-04-19T20:33:57.7478147Z" ModifiedUtc="2008-04-07T04:02:51Z" />
      <TagsPart Tags="" />
      <AutoroutePart Alias="nhibernate-2-0-tutorials" UseCustomPattern="false" />
      <TitlePart Title="NHibernate 2.0 Tutorials" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=the-dip-by-seth-godin" Status="Published">
      <BodyPart Text="&lt;p&gt;An interesting book where author sharpens things that are quiet simple and have lots of common sense. I loved a few things that are very applicable to myself:&lt;/p&gt;  &lt;p&gt;&lt;em&gt;Quit the wrong stuff. Stick with the right stuff. Have the guts to do one or the other.&lt;/em&gt;&lt;/p&gt;  &lt;p&gt;&lt;em&gt;People settle. They settle for less than they are capable of.&lt;/em&gt;&lt;/p&gt;  &lt;p&gt;&lt;em&gt;It's easier to be mediocre than it is to confront the reality and quit.&lt;/em&gt;&lt;/p&gt;  &lt;p&gt;&lt;em&gt;Time to look for a new job is when you don't need one. The time to switch jobs is before it feels comfortable. Challenge yourself. &lt;/em&gt;&lt;/p&gt;  &lt;p&gt;&lt;em&gt;&lt;u&gt;Failing means your dream is over.&lt;/u&gt;&lt;/em&gt;&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-04-06T02:38:53Z" PublishedUtc="2014-04-19T20:33:58.2009373Z" ModifiedUtc="2008-04-06T02:38:53Z" />
      <TagsPart Tags="Books,Personal" />
      <AutoroutePart Alias="the-dip-by-seth-godin" UseCustomPattern="false" />
      <TitlePart Title="The Dip by Seth Godin" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=whiteboard-with-stickers-vs-excel" Status="Published">
      <BodyPart Text="&lt;p&gt;At the company I work for we are trying to do things in a more agile way. And one of the things that people hesitate to do is to stick to something to 'taste' it. It doesn't necessarily means that there will be no value delivered to the client, or the work will be entirely stalled. To me it means don't turn down right away something until you know what are you talking about. And you won't know what you are talking about unless you do it. So this one is about whiteboard with stickers vs excel spreadsheet.&lt;/p&gt;  &lt;p&gt;Why excel spreadsheet? Shared easily with remote people, supports the paperless office, and.... that's it.&lt;/p&gt;  &lt;p&gt;Why not excel? Don't have to scroll, by looking at the whiteboard you can have a quick idea how good or bad things are. Allow multiple team members concentrate on a few things at the same time due to the fact that there's no restriction on the viewport&amp;nbsp; (computer screen). &lt;/p&gt;  &lt;p&gt;So we have now a few post-it notes on the whiteboard in the column In-Process, none in done (hopefully not for long), and more in not started. This is definitely feels better when you walk in into the office and see the &quot;big picture&quot;, realizing&amp;nbsp; that the value has to be produces, and not just the status updated to XY% in the spreadsheet. &lt;/p&gt;  &lt;p&gt;I would love to hear ideas on how to make it work better, especially from people who have done it already. &lt;/p&gt;&lt;hints id=&quot;hah_hints&quot;&gt;&lt;/hints&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-04-02T03:13:00Z" PublishedUtc="2014-04-19T20:33:58.6071725Z" ModifiedUtc="2008-04-02T03:13:00Z" />
      <TagsPart Tags="Agile" />
      <AutoroutePart Alias="whiteboard-with-stickers-vs-excel" UseCustomPattern="false" />
      <TitlePart Title="Whiteboard With Stickers vs. Excel" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=jp-in-the-house" Status="Published">
      <BodyPart Text="&lt;p&gt;Today JP Boodhoo has visited the place I am working for to give a short idea what we should be doing to become more agile and walk the path of true developers. It was short, and we didn't have a chance to hit the base code (code never lies), but this is definitely will wake some up from the Matrix (later on this one). &lt;/p&gt;  &lt;p&gt;So what did JP said? Mostly the same things he's being saying lately everywhere - be masters of your profession, put proud in what you are doing by perfecting it, and always remembering that client value is the priority number one. Do not stop trying to do better than you doing now, build you expertise in cores, don't chase the latest technology trends. Value communication with your fellow developers. Be honest with yourself and others on how well you perform and how much you need to improve. &lt;/p&gt;  &lt;p&gt;My thoughts on this is - software you create is your face, do it the way you want others to see yourself, so you would not be ashamed, but proud, knowing that one day you will look back later and be able to do even better than that without having any regrets about earlier implementation. Love your profession or quit it.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-03-28T03:44:13Z" PublishedUtc="2014-04-19T20:33:59.3727951Z" ModifiedUtc="2008-03-28T03:44:13Z" />
      <TagsPart Tags="Personal" />
      <AutoroutePart Alias="jp-in-the-house" UseCustomPattern="false" />
      <TitlePart Title="JP in the House" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=var-to-keep-it-simple" Status="Published">
      <BodyPart Text="&lt;p&gt;Among various things in C# 3.0, one of the syntactical sweets that I find quiet useful is the 'var' keyword. Combined with R# intelligence, you create a very readable code that is not cluttered with excessive type reminders. Just enough to keep it strongly typed and readable. &lt;/p&gt;  &lt;p&gt;Personally, I favor:&lt;/p&gt;  &lt;div&gt;   &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;var people = &lt;span style=&quot;color: #0000ff&quot;&gt;new&lt;/span&gt; Dictionary&amp;lt;&lt;span style=&quot;color: #0000ff&quot;&gt;string&lt;/span&gt;, IPerson&amp;gt;();&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;over:&lt;/p&gt;&#xA;&#xA;&lt;div&gt;&#xA;  &lt;pre style=&quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&quot;&gt;Dictionary&amp;lt;&lt;span style=&quot;color: #0000ff&quot;&gt;string&lt;/span&gt;, IPerson&amp;gt; people = &lt;span style=&quot;color: #0000ff&quot;&gt;new&lt;/span&gt; Dictionary&amp;lt;&lt;span style=&quot;color: #0000ff&quot;&gt;string&lt;/span&gt;, IPerson&amp;gt;();&lt;/pre&gt;&#xA;&lt;/div&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-03-27T05:57:36Z" PublishedUtc="2014-04-19T20:33:59.6696602Z" ModifiedUtc="2008-03-27T05:57:36Z" />
      <TagsPart Tags=".NET,Personal" />
      <AutoroutePart Alias="var-to-keep-it-simple" UseCustomPattern="false" />
      <TitlePart Title="VAR To Keep It Simple" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=tentity" Status="Published">
      <BodyPart Text="&lt;p&gt;Tentity - Database mirrored Table representation in code to mimic the concept of entity, bringing DB awareness, cache and persistence concerns in it, with design driven mostly for the state and some functionality dictated by DB operations to be performed on the data. A complete anti-POCO.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-03-26T14:02:51Z" PublishedUtc="2014-04-19T20:34:02.3264583Z" ModifiedUtc="2008-03-26T14:02:51Z" />
      <TagsPart Tags="Personal" />
      <AutoroutePart Alias="tentity" UseCustomPattern="false" />
      <TitlePart Title="Tentity" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=fun-respect-and-money" Status="Published">
      <BodyPart Text="&lt;p&gt;There was an interesting observation made once, that to be happy with what you do, you have to have 2 out of 3 things which are Fun, Respect, and Money. If you have all three, then you are doing great. In case there is only one out of three, it is really up to your spirit, until you move on. Two is a reasonable number if you passionate about what you doing. &lt;/p&gt; &lt;p&gt;From my personal observations, if you are really passionate, you can even have one out of three, and in most cases that would be the Fun of improving yourself, learning, and going forward giant steps, ignoring some of the reality pains associated with it. But if you loose the Fun, you loose the passion. &lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-03-26T13:50:26Z" PublishedUtc="2014-04-19T20:34:02.6227487Z" ModifiedUtc="2008-03-26T13:50:26Z" />
      <TagsPart Tags="Personal" />
      <AutoroutePart Alias="fun-respect-and-money" UseCustomPattern="false" />
      <TitlePart Title="Fun, Respect, and Money" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=svn-1click-setup-setting-up-subversion-server" Status="Published">
      <BodyPart Text="&lt;p&gt;Svn 1Click Setup - did a very nice job from specifying environment locations and variable to configuring the server and service. Simplifies a lot the whole experience. &lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-03-23T02:44:32Z" PublishedUtc="2014-04-19T20:34:02.9352531Z" ModifiedUtc="2008-03-23T02:44:32Z" />
      <TagsPart Tags="" />
      <AutoroutePart Alias="svn-1click-setup-setting-up-subversion-server" UseCustomPattern="false" />
      <TitlePart Title="Svn 1Click Setup - Setting Up Subversion Server" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=testing-specs-style" Status="Published">
      <BodyPart Text="&lt;p&gt;Something I have learned from JP Boodhoo lately (and NOT the only thing):&lt;/p&gt;  &lt;p&gt;Filename: {SomeComponent}Specs&lt;/p&gt;  &lt;p&gt;&amp;#160;&amp;#160;&amp;#160; TestFixture: When{specification}&lt;/p&gt;  &lt;blockquote&gt;   &lt;p&gt;SetUp: establish the context&lt;/p&gt; &lt;/blockquote&gt;  &lt;blockquote&gt;   &lt;p&gt;Test: Should {expected behaviour}&lt;/p&gt; &lt;/blockquote&gt;  &lt;blockquote&gt;   &lt;p&gt;SUT: exercised component&lt;/p&gt; &lt;/blockquote&gt;  &lt;p&gt;&amp;#160;&amp;#160; TestFixture: When {next specification}&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;Something like SpecUnit.NET would produce&lt;/strong&gt;&lt;/p&gt;  &lt;p&gt;SomeComponentSpecs&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;When specification      &lt;ul&gt;       &lt;li&gt;Should expected behaviour &lt;/li&gt;     &lt;/ul&gt;   &lt;/li&gt;    &lt;li&gt;When next specification      &lt;ul&gt;       &lt;li&gt;Should &lt;/li&gt;        &lt;li&gt;Should &lt;/li&gt;     &lt;/ul&gt;   &lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;Intent-revealing documentation/report&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-03-15T00:09:10Z" PublishedUtc="2014-04-19T20:34:03.6071197Z" ModifiedUtc="2008-03-15T00:09:10Z" />
      <TagsPart Tags="Agile,TDD" />
      <AutoroutePart Alias="testing-specs-style" UseCustomPattern="false" />
      <TitlePart Title="Testing - Specs Style" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=training-session-observation" Status="Published">
      <BodyPart Text="&lt;p&gt;It is nice once in a while to get back to the course or training session you took and make sure that you haven't wasted your time for nothing. This is not about ego, this is about making sure that what ever you know today will be absolutely no enough tomorrow and constantly remind yourself this basic law of software development.&lt;/p&gt; &lt;p&gt;I am lucky to TA at JP's Nothing But .NET boot camp. Unlike MSDN events, NBDN is a whole different story. If you heard of it and were hesitating, or doubting if it is for you at all - my answer would be short - if you are hungry for knowledge and always looking how to improve yourself - get it. &lt;/p&gt; &lt;p&gt;It takes a little to generate a big change, a boot camp like this is that little that you can do to change how you work and what you produce. Check it out!&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-03-11T05:10:09Z" PublishedUtc="2014-04-19T20:34:03.9196149Z" ModifiedUtc="2008-03-11T05:10:09Z" />
      <TagsPart Tags="Personal" />
      <AutoroutePart Alias="training-session-observation" UseCustomPattern="false" />
      <TitlePart Title="Training Session Observation" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=c-3-0-auto-property-and-nhibernate" Status="Published">
      <BodyPart Text="&lt;p&gt;I was reading about NHibernate mapping of the properties that have no setter, and how it's done through the backing field (reflection I assume). The setting looks like this:&lt;/p&gt;  &lt;div class=&quot;csharpcode&quot;&gt;   &lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&amp;quot;Name&amp;quot;&lt;/span&gt; &lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;          &lt;span class=&quot;attr&quot;&gt;access&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&amp;quot;nosetter.&lt;strong&gt;camelcase-underscore&lt;/strong&gt;&amp;quot;&lt;/span&gt; &lt;/pre&gt;&#xA;&#xA;  &lt;pre class=&quot;alt&quot;&gt;          &lt;span class=&quot;attr&quot;&gt;column&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&amp;quot;string&amp;quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&amp;quot;20&amp;quot;&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;&#xA;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&lt;/style&gt;&#xA;&#xA;&lt;p&gt;And then I got curious what would be that with the new C# 3.0 auto properties.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;As a test I made a simple class with a simple string property that looks like this:&lt;/p&gt;&#xA;&#xA;&lt;div class=&quot;csharpcode&quot;&gt;&#xA;  &lt;pre class=&quot;alt&quot;&gt;      &lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;string&lt;/span&gt; test;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;      &lt;/pre&gt;&#xA;&#xA;  &lt;pre class=&quot;alt&quot;&gt;      &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;string&lt;/span&gt; Test&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;      {&lt;/pre&gt;&#xA;&#xA;  &lt;pre class=&quot;alt&quot;&gt;        get { &lt;span class=&quot;kwrd&quot;&gt;return&lt;/span&gt; test; }&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;        &lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; set { test = &lt;span class=&quot;kwrd&quot;&gt;value&lt;/span&gt;; }&lt;/pre&gt;&#xA;&#xA;  &lt;pre class=&quot;alt&quot;&gt;      }&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;&#xA;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&lt;/style&gt;&#xA;&#xA;&lt;p&gt;And with auto property this looks much sexier:&lt;/p&gt;&#xA;&#xA;&lt;pre class=&quot;csharpcode&quot;&gt;      &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;string&lt;/span&gt; Test { get; set; }&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;But what about backing field? Reflector shows the next:&lt;/p&gt;&#xA;&#xA;&lt;div class=&quot;csharpcode&quot;&gt;&#xA;  &lt;pre class=&quot;alt&quot;&gt;    [CompilerGenerated]&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;    &lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;string&lt;/span&gt; &amp;lt;Test&amp;gt;k__BackingField;&lt;/pre&gt;&#xA;&#xA;  &lt;pre class=&quot;alt&quot;&gt;&amp;#160;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;string&lt;/span&gt; Test &lt;/pre&gt;&#xA;&#xA;  &lt;pre class=&quot;alt&quot;&gt;    { &lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;         [CompilerGenerated] get; &lt;/pre&gt;&#xA;&#xA;  &lt;pre class=&quot;alt&quot;&gt;         &lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt;[CompilerGenerated] set; &lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;    }&lt;/pre&gt;&#xA;&#xA;  &lt;pre class=&quot;alt&quot;&gt;&amp;#160;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;t&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;&#xA;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&lt;/style&gt;&#xA;&#xA;&lt;p&gt;Now I was wandering how&amp;#160; that should be communicated in the mapper file for NHibernate?... Googled.... nothing. Any ideas?&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-03-01T03:45:14Z" PublishedUtc="2014-04-19T20:34:04.2477374Z" ModifiedUtc="2008-03-01T03:45:14Z" />
      <TagsPart Tags=".NET" />
      <AutoroutePart Alias="c-3-0-auto-property-and-nhibernate" UseCustomPattern="false" />
      <TitlePart Title="C# 3.0 Auto Property And NHibernate" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=pair-programming-and-sharing-knowledge" Status="Published">
      <BodyPart Text="&lt;p&gt;Pair programming is a proven technique for sharing knowledge among team members and teams. Benefits of that are felt after relatively a short period of time, boosting not just the productivity, but self-confidence of the developers (which is playing an important role even though is not admitted), and most of all, improving the maintainability of the code when it comes later. And it comes. It always comes.&lt;/p&gt; &lt;p&gt;But I would like to review additional alternatives to the knowledge sharing with team members (both direct team members, and those that are a part of another teams that might not come into direct contact with what your team is doing). What are the ways to share the knowledge?&lt;/p&gt; &lt;p&gt;From my personal experience, group lectures are in-effective. People are coming into those, hating it, and taking almost nothing valuable as they leave. Code camps are excellent, but the majority of the people who are attending those are doing it out of their own curiosity, enthusiasm, or just will to be better developer.&lt;/p&gt; &lt;p&gt;What I was doing in the company I work for, is a short (30-45 minutes) meetings once a week or two, hands on code. And the presenter was elected at the end to present his/her topic. IMHO this was working, but others may disagree. I think this was working for the developers who believed that it's not just a task of presenting, but a responsibility not to waste others time and let them learn from others what they would not learn on their own due to the lack of time or opportunity.&lt;/p&gt; &lt;p&gt;So what are you practicing if at all?&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-02-29T17:46:01Z" PublishedUtc="2014-04-19T20:34:05.6383357Z" ModifiedUtc="2008-02-29T17:46:01Z" />
      <TagsPart Tags="Agile,Personal" />
      <AutoroutePart Alias="pair-programming-and-sharing-knowledge" UseCustomPattern="false" />
      <TitlePart Title="Pair Programming And Sharing Knowledge" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=sucks-to-work-blind" Status="Published">
      <BodyPart Text="&lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/SucksToWorkBlind_C919/image_2.png&quot;&gt;&lt;img style=&quot;border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px&quot; height=&quot;480&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/SucksToWorkBlind_C919/image_thumb.png&quot; width=&quot;606&quot; border=&quot;0&quot;&gt;&lt;/a&gt; &lt;/p&gt; &lt;p&gt;I was holding off using R# when it's not even in an EAP mode. But today I have had it. Uninstalled R# 3.1 for Visual Studio .NET 2008 and went to R# 4 nightly build.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-02-26T21:18:06Z" PublishedUtc="2008-02-26T21:18:06Z" ModifiedUtc="2008-02-26T21:18:06Z" />
      <TagsPart Tags="" />
      <AutoroutePart Alias="sucks-to-work-blind" UseCustomPattern="false" />
      <TitlePart Title="Sucks To Work Blind" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=know-your-friends-well-know-your-enemies-better" Status="Published">
      <BodyPart Text="&lt;p&gt;Long time ago I had to deal with a case where the famous ViewState generated by WebForms was quiet heavy. This post is not going to wine about how bad ViewState is for the environment. This post is to show that even working with something big and nasty such as web forms, you still have to give a thought what are you trying to do and what is out there that can help you to accomplish the mission.&lt;/p&gt;  &lt;p&gt;Before getting into the &quot;solution&quot; (well, it is a solution, but kind-of stinky if you are asking me), I would really recommend the &lt;a href=&quot;http://weblogs.asp.net/infinitiesloop/archive/2006/08/03/Truly-Understanding-Viewstate.aspx&quot; mce_href=&quot;http://weblogs.asp.net/infinitiesloop/archive/2006/08/03/Truly-Understanding-Viewstate.aspx&quot; target=&quot;_blank&quot;&gt;post&lt;/a&gt; about what is ViewState and it's influence on your nervous system. &lt;/p&gt;  &lt;p&gt;So what is solution - not to use ViewState :) Weak solution.&lt;/p&gt;  &lt;p&gt;Spike and invent something - bad idea. The wheel in already invented.&lt;/p&gt;  &lt;p&gt;Spike on WebForms implementation and learning - that's the one.&lt;/p&gt;  &lt;p&gt;&amp;nbsp;&lt;/p&gt;  &lt;p&gt;First we need to look at the &quot;container&quot; of the ViewState which is nothing but a Page. This is where one of my favourite tools for reflection is making its' big entrance - &lt;a href=&quot;http://www.aisto.com/roeder/dotnet/&quot; mce_href=&quot;http://www.aisto.com/roeder/dotnet/&quot; target=&quot;_blank&quot;&gt;Reflector&lt;/a&gt;. Looking at the page, you shall see that a page has an interesting getter called &quot;PageStatePersister&quot;.&lt;/p&gt;  &lt;p&gt;&amp;nbsp;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/KnowYourFriendsWellKnowYourEnemiesBetter_126B/image_2.png&quot; mce_href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/KnowYourFriendsWellKnowYourEnemiesBetter_126B/image_2.png&quot;&gt;&lt;img src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/KnowYourFriendsWellKnowYourEnemiesBetter_126B/image_thumb.png&quot; style=&quot;border: 0px none ;&quot; alt=&quot;Page class using reflector&quot; mce_src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/KnowYourFriendsWellKnowYourEnemiesBetter_126B/image_thumb.png&quot; border=&quot;0&quot; height=&quot;58&quot; width=&quot;392&quot;&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;Digging deeper provides an insight into the intension of this property:&lt;/p&gt;  &lt;div class=&quot;csharpcode&quot;&gt;   &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   1:  &lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;virtual&lt;/span&gt; PageStatePersister PageStatePersister&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   2:  &lt;/span&gt;{&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   3:  &lt;/span&gt;    get&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   4:  &lt;/span&gt;    {&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   5:  &lt;/span&gt;        &lt;span class=&quot;kwrd&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;kwrd&quot;&gt;this&lt;/span&gt;._persister == &lt;span class=&quot;kwrd&quot;&gt;null&lt;/span&gt;)&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   6:  &lt;/span&gt;        {&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   7:  &lt;/span&gt;            PageAdapter pageAdapter = &lt;span class=&quot;kwrd&quot;&gt;this&lt;/span&gt;.PageAdapter;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   8:  &lt;/span&gt;            &lt;span class=&quot;kwrd&quot;&gt;if&lt;/span&gt; (pageAdapter != &lt;span class=&quot;kwrd&quot;&gt;null&lt;/span&gt;)&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   9:  &lt;/span&gt;            {&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  10:  &lt;/span&gt;                &lt;span class=&quot;kwrd&quot;&gt;this&lt;/span&gt;._persister = pageAdapter.GetStatePersister();&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  11:  &lt;/span&gt;            }&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  12:  &lt;/span&gt;            &lt;span class=&quot;kwrd&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;kwrd&quot;&gt;this&lt;/span&gt;._persister == &lt;span class=&quot;kwrd&quot;&gt;null&lt;/span&gt;)&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  13:  &lt;/span&gt;            {&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  14:  &lt;/span&gt;                &lt;span class=&quot;kwrd&quot;&gt;this&lt;/span&gt;._persister = &lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  15:  &lt;/span&gt;                    &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; HiddenFieldPageStatePersister(&lt;span class=&quot;kwrd&quot;&gt;this&lt;/span&gt;);&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  16:  &lt;/span&gt;            }&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  17:  &lt;/span&gt;        }&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  18:  &lt;/span&gt;        &lt;span class=&quot;kwrd&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;this&lt;/span&gt;._persister;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  19:  &lt;/span&gt;    }&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  20:  &lt;/span&gt;}&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;&#xA;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&lt;/style&gt;&#xA;&#xA;&lt;p&gt;A few interesting things in particular we can learn from the code:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;  &lt;li&gt;The default state persister fro ANY page is a HiddenFieldPagePersister, the one that generates a hidden field with all the gibberish &lt;/li&gt;&#xA;&#xA;  &lt;li&gt;A page can have an Adapter that could potentially redefine what's the default persister for pages (bookmark this concept for a while, for people like myself, write it down on a piece of paper with a title &quot;review this later&quot;)&lt;/li&gt;&#xA;&#xA;  &lt;li&gt;Regardless of the fact what persister is going to be used, this is a Template Method that acts as a Factory to return back an object that was derived from an abstract PageStatePersist class&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;What a world of opportunities in such a limited world of ViewState! Let's use reflection to find out what are the possibilities. And the winners are:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/KnowYourFriendsWellKnowYourEnemiesBetter_126B/image_4.png&quot; mce_href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/KnowYourFriendsWellKnowYourEnemiesBetter_126B/image_4.png&quot;&gt;&lt;img src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/KnowYourFriendsWellKnowYourEnemiesBetter_126B/image_thumb_1.png&quot; style=&quot;border: 0px none ;&quot; alt=&quot;PageStatePersist class&quot; mce_src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/KnowYourFriendsWellKnowYourEnemiesBetter_126B/image_thumb_1.png&quot; border=&quot;0&quot; height=&quot;79&quot; width=&quot;306&quot;&gt;&lt;/a&gt;&amp;nbsp; &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Not that much of options, but hey, we can have an option of keeping it at &quot;home&quot; on the server side, rather than sending to the client EVERY-SINGLE-ROUNDTRIP! &lt;/p&gt;&#xA;&#xA;&lt;p&gt;There are a few options:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;  &lt;li&gt;Act on a page level and override the Templated Method to return an instance of SessionPageStatePersister rather than HiddenFieldPageStatePersiter&lt;/li&gt;&#xA;&#xA;  &lt;li&gt;Create an adapter for the entire application&lt;/li&gt;&#xA;&#xA;  &lt;li&gt;Choose between option 1 or 2 with a custom persister class, inherited from abstract PageStatePersist&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;Option 3 is for your wild and kinky imagination, option 1 is too trivial, option 2 is what I would like to expand on a bit more.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;So we want to reconfigure the entire web application for a different persister (Session one for the application that has lots of stuff in ViewState, and should produce a slim HTML). Adding a folder App_Browsers allows us to register different controls adapters. Page is a control as well, see for yourself:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/KnowYourFriendsWellKnowYourEnemiesBetter_126B/image_6.png&quot; mce_href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/KnowYourFriendsWellKnowYourEnemiesBetter_126B/image_6.png&quot;&gt;&lt;img src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/KnowYourFriendsWellKnowYourEnemiesBetter_126B/image_thumb_2.png&quot; style=&quot;border: 0px none ;&quot; alt=&quot;image&quot; mce_src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/KnowYourFriendsWellKnowYourEnemiesBetter_126B/image_thumb_2.png&quot; border=&quot;0&quot; height=&quot;66&quot; width=&quot;160&quot;&gt;&lt;/a&gt; &lt;/p&gt;&#xA;&#xA;&lt;p&gt;In this folder, we can specify adapters per browser, or all of them (ahh, my old days of WAP development with Mobile ASP.NET are bubbling up, causing me a horror moment). Something like BrowserFile.browser file should do it - use VS.NET add new item option to add a .browser file. Then register an adapter for a page. The adapter code would be simple as this:&lt;/p&gt;&#xA;&#xA;&lt;div class=&quot;csharpcode&quot;&gt;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   1:  &lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;using&lt;/span&gt; System.Web.UI.Adapters;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   2:  &lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;using&lt;/span&gt; System.Web.UI;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   3:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   4:  &lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;class&lt;/span&gt; SesionPageStateAdapter : PageAdapter&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   5:  &lt;/span&gt;{&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   6:  &lt;/span&gt;  &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;override&lt;/span&gt; PageStatePersister GetStatePersister()&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   7:  &lt;/span&gt;  {&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   8:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; SessionPageStatePersister(&lt;span class=&quot;kwrd&quot;&gt;this&lt;/span&gt;.Page);&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   9:  &lt;/span&gt;  }&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  10:  &lt;/span&gt;}&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;&#xA;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&lt;/style&gt;&#xA;&#xA;&lt;p&gt;.browser file would be a trivial mapping guided by the Intellisense as you type:&lt;/p&gt;&#xA;&#xA;&lt;div class=&quot;csharpcode&quot;&gt;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   1:  &lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;browsers&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   2:  &lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;browser&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;refID&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&quot;Default&quot;&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   3:  &lt;/span&gt;   &lt;span class=&quot;kwrd&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;controlAdapters&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   4:  &lt;/span&gt;      &lt;span class=&quot;kwrd&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;adapter&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;controlType&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&quot;System.Web.UI.Page&quot;&lt;/span&gt; &lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   5:  &lt;/span&gt;               &lt;span class=&quot;attr&quot;&gt;adapterType&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&quot;SesionPageStateAdapter&quot;&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   6:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;controlAdapters&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   7:  &lt;/span&gt;   &lt;span class=&quot;kwrd&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   8:  &lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;browsers&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;&#xA;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&lt;/style&gt;&#xA;&#xA;&lt;p&gt;Unfortunately it will not remove the ViewState completely, but it will definitely minimize it. Sometime several dozens of KB can be prevented from going back and forth. Also keep in mind that ControlState (from ASP.NET 2.0 and later) is possible contributing, and that one is not disableable.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Hopefully this helps to those who are in pain of watching hundreds of Kilobytes traveling there, taking more &quot;page weight&quot; than the page content itself.&lt;/p&gt;&lt;hints id=&quot;hah_hints&quot;&gt;&lt;/hints&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-02-22T08:18:00Z" PublishedUtc="2008-02-22T08:18:00Z" ModifiedUtc="2008-02-22T08:18:00Z" />
      <TagsPart Tags="ASP.NET" />
      <AutoroutePart Alias="know-your-friends-well-know-your-enemies-better" UseCustomPattern="false" />
      <TitlePart Title="Know Your Friends Well, Know Your Enemies Better" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=understanding-ioc-container-part-2" Status="Published">
      <BodyPart Text="&lt;p&gt;I try to lower expectations in order not to be disappointed, but in this case I was asked by several individuals to address the fact that IoC container power is in the ability to &amp;quot;hook&amp;quot; implementer with the contract through an external file, leaving application code unaware of the actual implementer till the run-time, having no reference to implementers' assembly or whatsoever. I am going to expand the sample from the &lt;a href=&quot;http://weblogs.asp.net/sfeldman/archive/2008/02/14/understanding-ioc-container.aspx&quot; target=&quot;_blank&quot;&gt;part 1&lt;/a&gt; post to achieve that goal &lt;strike&gt;in a couple of days&lt;/strike&gt;.&lt;/p&gt;  &lt;p&gt;In the last post we left with the application with an ApplicationStartup() method that would register all implementers against the contracts they implement. That causes a serious coupling between the ConsoleApp assembly and the one that implements the XmlLogger, AssemblyTwo. This is not a good idea, especially when we want to be able to replace the implementer without touching/modifying the application itself (by recompiling it). &lt;/p&gt;  &lt;p&gt;Solution would be to take the code found in ApplicationStartup() method out of the code and express in a form of some configuration file that container would process. By doing that, we minimize coupling of the AssemblyTwo to Core only, and completely removing coupling of ConsoleApp on AssemblyTwo.&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/UnderstandingIoCContainerPart2_143D6/ioc_configuration_file_1_2.png&quot;&gt;&lt;img style=&quot;border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px&quot; height=&quot;302&quot; alt=&quot;ioc_configuration_file_1&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/UnderstandingIoCContainerPart2_143D6/ioc_configuration_file_1_thumb.png&quot; width=&quot;455&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;Now ConsoleApp has only references to what it really utilizes directly.&lt;/p&gt;  &lt;pre class=&quot;csharpcode&quot;&gt;&lt;span class=&quot;kwrd&quot;&gt;using&lt;/span&gt; System;&#xA;&lt;span class=&quot;kwrd&quot;&gt;using&lt;/span&gt; AssemblyOne; &lt;span class=&quot;rem&quot;&gt;// IGadget&lt;/span&gt;&#xA;&lt;span class=&quot;kwrd&quot;&gt;using&lt;/span&gt; Core.IoC;    &lt;span class=&quot;rem&quot;&gt;// ILogger and Container&lt;/span&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;style type=&quot;text/css&quot;&gt;&#xA;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&lt;/style&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Next step is to describe the relationships between contracts and implementers. Something like an XML file should be ok.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/UnderstandingIoCContainerPart2_143D6/ioc_configuration_file_2_2.png&quot;&gt;&lt;img style=&quot;border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px&quot; height=&quot;312&quot; alt=&quot;ioc_configuration_file_2&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/UnderstandingIoCContainerPart2_143D6/ioc_configuration_file_2_thumb.png&quot; width=&quot;454&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Once this is place, the rest is just forcing Container to scan a file and look for Container.xml, registering all of the contracts and their implementers and passing that information back to the container for registration. To transform from a string presentation into a .NET type, I use reflection and that takes care of loading the desired assembly into memory. From there we get the type and register in container, allowing later instantiation.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The code that loads the XML file:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&amp;#160;&lt;/p&gt;&#xA;&#xA;&lt;pre class=&quot;csharpcode&quot;&gt;&lt;span class=&quot;kwrd&quot;&gt;namespace&lt;/span&gt; Core.IoC&#xA;{&#xA;  &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;sealed&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;class&lt;/span&gt; XmlConfiguration&#xA;  {&#xA;    &lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;string&lt;/span&gt; filename;&#xA;&#xA;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; XmlConfiguration() : &lt;span class=&quot;kwrd&quot;&gt;this&lt;/span&gt;(&lt;span class=&quot;str&quot;&gt;&amp;quot;Container.xml&amp;quot;&lt;/span&gt;)&#xA;    {&#xA;    }&#xA;&#xA;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; XmlConfiguration(&lt;span class=&quot;kwrd&quot;&gt;string&lt;/span&gt; filename)&#xA;    {&#xA;      &lt;span class=&quot;kwrd&quot;&gt;this&lt;/span&gt;.filename = filename;&#xA;    }&#xA;&#xA;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; Dictionary&amp;lt;Type, Type&amp;gt; GetAllRegistrations()&#xA;    {&#xA;      Dictionary&amp;lt;Type, Type&amp;gt; result = &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; Dictionary&amp;lt;Type, Type&amp;gt;();&#xA;      &lt;span class=&quot;kwrd&quot;&gt;string&lt;/span&gt; fileWithPath = GetPathAndName();&#xA;&#xA;      &lt;span class=&quot;kwrd&quot;&gt;if&lt;/span&gt; (File.Exists(fileWithPath))&#xA;      {&#xA;        XmlReader reader = XmlTextReader.Create(fileWithPath);&#xA;        reader.MoveToContent();&#xA;        &lt;span class=&quot;kwrd&quot;&gt;while&lt;/span&gt; (reader.Read())&#xA;        {&#xA;          &lt;span class=&quot;kwrd&quot;&gt;if&lt;/span&gt; (reader.LocalName == &lt;span class=&quot;str&quot;&gt;&amp;quot;Register&amp;quot;&lt;/span&gt;)&#xA;          {&#xA;            Type contract = BuildTypeFromAssemblyAndTypeName(&#xA;                                          reader.GetAttribute(&lt;span class=&quot;str&quot;&gt;&amp;quot;Contract&amp;quot;&lt;/span&gt;));&#xA;            Type implementer = BuildTypeFromAssemblyAndTypeName(&#xA;                                       reader.GetAttribute(&lt;span class=&quot;str&quot;&gt;&amp;quot;Implementer&amp;quot;&lt;/span&gt;));&#xA;            result.Add(contract, implementer);&#xA;          }&#xA;        }&#xA;      }&#xA;&#xA;      &lt;span class=&quot;kwrd&quot;&gt;return&lt;/span&gt; result;&#xA;    }&#xA;&#xA;    &lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; Type BuildTypeFromAssemblyAndTypeName(&lt;span class=&quot;kwrd&quot;&gt;string&lt;/span&gt; fullTypeName)&#xA;    {&#xA;      &lt;span class=&quot;kwrd&quot;&gt;int&lt;/span&gt; commaIndex = fullTypeName.IndexOf(&lt;span class=&quot;str&quot;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;);&#xA;      &lt;span class=&quot;kwrd&quot;&gt;string&lt;/span&gt; typeName = fullTypeName.Substring(0, commaIndex).Trim();&#xA;      &lt;span class=&quot;kwrd&quot;&gt;string&lt;/span&gt; assemblyName = fullTypeName.Substring(commaIndex + 1).Trim();&#xA;      &lt;span class=&quot;kwrd&quot;&gt;return&lt;/span&gt; Assembly.Load(assemblyName).GetType(typeName, &lt;span class=&quot;kwrd&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;kwrd&quot;&gt;false&lt;/span&gt;);&#xA;    }&#xA;&#xA;    &lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;string&lt;/span&gt; GetPathAndName()&#xA;    {&#xA;      &lt;span class=&quot;kwrd&quot;&gt;string&lt;/span&gt;[] split =&#xA;        Path.Combine(AppDomain.CurrentDomain.BaseDirectory, filename)&#xA;                .Split(&lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;string&lt;/span&gt;[] {&amp;quot;\\bin\\&amp;quot;},&#xA;                       StringSplitOptions.RemoveEmptyEntries);&#xA;      &lt;span class=&quot;kwrd&quot;&gt;return&lt;/span&gt; Path.Combine(split[0], filename);&#xA;    }&#xA;  }&#xA;}&lt;/pre&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;&#xA;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&lt;/style&gt;&#xA;&#xA;&lt;p&gt;Updated Container class will have to reflect changes:&lt;/p&gt;&#xA;&#xA;&lt;pre class=&quot;csharpcode&quot;&gt;&lt;span class=&quot;kwrd&quot;&gt;using&lt;/span&gt; System;&#xA;&lt;span class=&quot;kwrd&quot;&gt;using&lt;/span&gt; System.Collections.Generic;&#xA;&#xA;&lt;span class=&quot;kwrd&quot;&gt;namespace&lt;/span&gt; Core.IoC&#xA;{&#xA;  &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;class&lt;/span&gt; Container : IContainer&#xA;  {&#xA;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;readonly&lt;/span&gt; IContainer Instance = &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; Container();&#xA;&#xA;    &lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;readonly&lt;/span&gt; Dictionary&amp;lt;Type, Type&amp;gt; container;&#xA;&#xA;    &lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; Container() : &lt;span class=&quot;kwrd&quot;&gt;this&lt;/span&gt;(&lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; XmlConfiguration())&#xA;    {&#xA;    }&#xA;&#xA;&lt;strong&gt;    &lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; Container(XmlConfiguration xmlConfiguration)&#xA;    {&#xA;      container = &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; Dictionary&amp;lt;Type, Type&amp;gt;();&#xA;&#xA;      &lt;span class=&quot;kwrd&quot;&gt;foreach&lt;/span&gt; (KeyValuePair&amp;lt;Type, Type&amp;gt; pair &lt;span class=&quot;kwrd&quot;&gt;in&lt;/span&gt; &#xA;                                    xmlConfiguration.GetAllRegistrations())&#xA;      {&#xA;        AddImplemeterTypeForContractType(pair.Key, pair.Value);&#xA;      }&#xA;    }&lt;/strong&gt;&#xA;&#xA;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; AddImplementerFor&amp;lt;ContractType&amp;gt;(Type implementer)&#xA;    {&#xA;      AddImplemeterTypeForContractType(&lt;span class=&quot;kwrd&quot;&gt;typeof&lt;/span&gt; (ContractType), implementer);&#xA;    }&#xA;&#xA;    &lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; AddImplemeterTypeForContractType(Type contractType, &#xA;                                                  Type implementerType)&#xA;    {&#xA;      container.Add(contractType, implementerType);&#xA;    }&#xA;&#xA;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; ContractType GetImplementerOf&amp;lt;ContractType&amp;gt;()&#xA;    {&#xA;      &lt;span class=&quot;kwrd&quot;&gt;return&lt;/span&gt; (ContractType) Activator.CreateInstance(&#xA;                              container[&lt;span class=&quot;kwrd&quot;&gt;typeof&lt;/span&gt; (ContractType)]);&#xA;    }&#xA;  }&#xA;}&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;What we've got now? An option of specifying implementers outside of the application code. Having this, teams (team members) can split up, code, and configure an external file to do the mapping between contract and implementer&amp;#160; without touching the application code itself. Implementer is only coupled to the Core (where contract ILogger) is defined. The Core / AssemblyOne&amp;#160; / ConsoleApp know nothing about implementer, but are able to leverage it to do the work.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/UnderstandingIoCContainerPart2_143D6/ioc_configuration_file_3_2.png&quot;&gt;&lt;img style=&quot;border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px&quot; height=&quot;325&quot; alt=&quot;ioc_configuration_file_3&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/UnderstandingIoCContainerPart2_143D6/ioc_configuration_file_3_thumb.png&quot; width=&quot;523&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Next steps? Well, we could talk about chains of dependencies, parameterized constructors,&amp;#160; factories, etc. But this is where I am pausing and suggesting not to re-invent the wheel. Go grab some existing IoC container and pump your application to achieve it's best relying on technology that now you do not consider to be a magical anymore.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Updated code is &lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/UnderstandingIoCContainerPart2_143D6/IoC_xml.zip&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;&#xA;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&lt;/style&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-02-21T05:36:53Z" PublishedUtc="2008-02-21T05:36:53Z" ModifiedUtc="2008-02-21T05:36:53Z" />
      <TagsPart Tags=".NET,OO" />
      <AutoroutePart Alias="understanding-ioc-container-part-2" UseCustomPattern="false" />
      <TitlePart Title="Understanding IoC Container - Part 2" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=free-oss-virtual-machine-software-virtualbox" Status="Published">
      <BodyPart Text="&lt;p&gt;I was exposed to an interesting product from innotek called &lt;a href=&quot;http://www.virtualbox.org/&quot; target=&quot;_blank&quot;&gt;VirtualBox&lt;/a&gt;. If you like MS VPC or VMWare, check this one out. It's free, it's not bad (so far I was just playing with it installing Windows XP and running some applications on a quiet slow host machine). Would love to hear others comments on this one, or any other alternative that is welcomed.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-02-16T16:21:00Z" PublishedUtc="2014-04-19T20:34:09.9976532Z" ModifiedUtc="2008-02-16T16:21:00Z" />
      <TagsPart Tags="Personal" />
      <AutoroutePart Alias="free-oss-virtual-machine-software-virtualbox" UseCustomPattern="false" />
      <TitlePart Title="Free (OSS) Virtual Machine Software - VirtualBox" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=understanding-ioc-container" Status="Published">
      <BodyPart Text="&lt;meta content=&quot;IoC, Container, Inversion of Control, DIP, Dependency Injection&quot; name=&quot;DESCRIPTION&quot;&gt;  &lt;p&gt;In a multi layered application architecture, loosely coupled code is more than a important. It's the basic which can either help the entire project progress, or drive it down the slope to the end (in the bad meaning of the word). One of the basics to keep coupling as low as possible is Inversion of Control (IoC) container. &lt;/p&gt;  &lt;p&gt;I will try to show how to put in place a simple version of IoC container to allow loosely coupled design. The solution will contain several projects to emulate a layered application as much as possible. The choice of console application is only driven by intent to keep it as simple as possible.&lt;/p&gt;  &lt;p&gt;In our application we do basic logging at all layers. Logger that does it is following the next contract:&lt;/p&gt;  &lt;pre class=&quot;csharpcode&quot;&gt;  &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;interface&lt;/span&gt; ILogger&lt;br&gt;  {&lt;br&gt;    &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; Log(&lt;span class=&quot;kwrd&quot;&gt;string&lt;/span&gt; message);&lt;br&gt;  }&lt;/pre&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;&#xA;&#xA;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&lt;/style&gt;&#xA;&#xA;&lt;p&gt;Lets assume that the initial version of logger is implemented as a simple Console logger:&lt;/p&gt;&#xA;&#xA;&lt;pre class=&quot;csharpcode&quot;&gt;  &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;class&lt;/span&gt; ConsoleLogger : ILogger&lt;br&gt;  {&lt;br&gt;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; Log(&lt;span class=&quot;kwrd&quot;&gt;string&lt;/span&gt; message)&lt;br&gt;    {&lt;br&gt;      System.Console.WriteLine(message);&lt;br&gt;    }&lt;br&gt;  }&lt;/pre&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;&#xA;&#xA;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&lt;/style&gt;&#xA;&#xA;&lt;p&gt;Now lets look what the layered structure looks like. The lowest layer in the stack is going to be Core. This one will contain the interfaces (such as ILogger for instance) all other layers have to consume. This is a sort of tight coupling, but it is not bad as upper layers will depend on abstraction and not concrete implementation (DIP).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/UnderstandingIoCContainer_12237/ioc_layered_structure_2.jpg&quot; mce_href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/UnderstandingIoCContainer_12237/ioc_layered_structure_2.jpg&quot;&gt;&lt;img src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/UnderstandingIoCContainer_12237/ioc_layered_structure_thumb.jpg&quot; style=&quot;border-width: 0px;&quot; alt=&quot;ioc_layered_structure&quot; mce_src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/UnderstandingIoCContainer_12237/ioc_layered_structure_thumb.jpg&quot; border=&quot;0&quot; height=&quot;173&quot; width=&quot;250&quot;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;AssemblyOne, Two, Three, and others are all potential layers you could have (and I am not necessarily insisting on having them - there should be a rational limit). ConsoleApp is the top layer that represent the application. This could be easily a Windows application or a web application.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;To spice up our life, we have to implement a gadget in AssemblyOne that will follow a certain contract (IGadget) and each operation defined by the contract, has to be logged when implementation is invoked. The contract is:&lt;/p&gt;&#xA;&#xA;&lt;pre class=&quot;csharpcode&quot;&gt;  &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;interface&lt;/span&gt; IGadget&lt;br&gt;  {&lt;br&gt;    &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; TurnOn();&lt;br&gt;    &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; TurnOff();&lt;br&gt;  }&lt;/pre&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;&#xA;&#xA;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&lt;/style&gt;&#xA;&#xA;&lt;p&gt;Now the implementation of the Gadget will be quiet simple:&lt;/p&gt;&#xA;&#xA;&lt;div class=&quot;csharpcode&quot;&gt;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   1:  &lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;using&lt;/span&gt; Core;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   2:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   3:  &lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;namespace&lt;/span&gt; AssemblyOne&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   4:  &lt;/span&gt;{&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   5:  &lt;/span&gt;  &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;class&lt;/span&gt; Gadget : IGadget&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   6:  &lt;/span&gt;  {&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   7:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;readonly&lt;/span&gt; ILogger logger;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   8:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   9:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; Gadget(ILogger logger)&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  10:  &lt;/span&gt;    {&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  11:  &lt;/span&gt;      &lt;span class=&quot;kwrd&quot;&gt;this&lt;/span&gt;.logger = logger;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  12:  &lt;/span&gt;    }&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  13:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  14:  &lt;/span&gt;    &lt;span class=&quot;rem&quot;&gt;// Default constructor will be discussed a bit later &lt;/span&gt;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  15:  &lt;/span&gt;    &lt;span class=&quot;rem&quot;&gt;// public Gadget() {}&lt;/span&gt;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  16:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  17:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; TurnOn()&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  18:  &lt;/span&gt;    {&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  19:  &lt;/span&gt;      logger.Log(&lt;span class=&quot;str&quot;&gt;&quot;TurnOn&quot;&lt;/span&gt;);&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  20:  &lt;/span&gt;    }&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  21:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  22:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; TurnOff()&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  23:  &lt;/span&gt;    {&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  24:  &lt;/span&gt;      logger.Log(&lt;span class=&quot;str&quot;&gt;&quot;TurnOff&quot;&lt;/span&gt;);&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  25:  &lt;/span&gt;    }&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  26:  &lt;/span&gt;  }&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  27:  &lt;/span&gt;}&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;The program in the upper (ConsoleApp) layer will look this way:&lt;/p&gt;&#xA;&#xA;&lt;div class=&quot;csharpcode&quot;&gt;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   1:  &lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;using&lt;/span&gt; System;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   2:  &lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;using&lt;/span&gt; AssemblyOne;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   3:  &lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;using&lt;/span&gt; Core;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   4:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   5:  &lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;namespace&lt;/span&gt; ConsoleApp&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   6:  &lt;/span&gt;{&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   7:  &lt;/span&gt;  &lt;span class=&quot;kwrd&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;class&lt;/span&gt; Program&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   8:  &lt;/span&gt;  {&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   9:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; Main()&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  10:  &lt;/span&gt;    {&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  11:  &lt;/span&gt;      AppCode();&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  12:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  13:  &lt;/span&gt;      Console.WriteLine(&lt;span class=&quot;str&quot;&gt;&quot;done.&quot;&lt;/span&gt;);&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  14:  &lt;/span&gt;      Console.ReadLine();&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  15:  &lt;/span&gt;    }&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  16:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  17:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; AppCode()&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  18:  &lt;/span&gt;    {&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  19:  &lt;/span&gt;      ConsoleLogger logger = &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; ConsoleLogger();&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  20:  &lt;/span&gt;      Gadget gadget = &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; Gadget(logger);&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  21:  &lt;/span&gt;      gadget.TurnOn();&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  22:  &lt;/span&gt;      gadget.TurnOff();&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  23:  &lt;/span&gt;    }&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  24:  &lt;/span&gt;  }&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  25:  &lt;/span&gt;}&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;&#xA;&#xA;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&lt;/style&gt;&#xA;&#xA;&lt;p&gt;AppCode method (lines 19-22) is what we are interested in. A few question can be raised at this point:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;  &lt;li&gt;Why logger is of type ConsoleLogger and not ILogger? Isn't this wrong? &lt;/li&gt;&#xA;&#xA;  &lt;li&gt;Why gadget is of type Gadget and not IGadget? Same smell? &lt;/li&gt;&#xA;&#xA;  &lt;li&gt;What if we need to move logger implementer to a different layer than the ConsoleApp? &lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;These are all excellent questions. The first two are definetely a bad smell. Why? Well, because we should be really sticking to what contracts were obligating implementers, and not be even able to use the &quot;extras&quot; provided by contract implementers &quot;outside&quot; of the contract. This will eliminate any chance that an &quot;undocumented&quot; by contract method will extinct from existing, causing our client code to break. The third question is the one that shows that current design is not going to work - current ILogger implementer is located in ConsoleApp layer and we have to pass it as a dependency into gadget. But what if we introduce another implementation of ILogger, like XML logger, and it will live in another layer, AssemblyTwo? And what if we want to be able to create gadget without specifying logger, relying on a default one? This is where IoC container would help.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The idea behind container is simple: lower layer provides an option of registering a contract implementer, and later, retrieve that contract implementer instance, by just using the contract type. Expressing this in code would look like the next snippet:&lt;/p&gt;&#xA;&#xA;&lt;pre class=&quot;csharpcode&quot;&gt;&lt;span class=&quot;kwrd&quot;&gt;namespace&lt;/span&gt; Core.IoC&lt;br&gt;{&lt;br&gt;  &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;interface&lt;/span&gt; IContainer&lt;br&gt;  {&lt;br&gt;    &lt;span class=&quot;rem&quot;&gt;// register contract implementer&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; AddImplementerFor&amp;lt;ContractType&amp;gt;(Type implementer);&lt;br&gt;    &lt;span class=&quot;rem&quot;&gt;// retrieve contract implementer&lt;/span&gt;&lt;br&gt;    ContractType GetImplementerOf&amp;lt;ContractType&amp;gt;();&lt;br&gt;  }&lt;br&gt;}&lt;/pre&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;&#xA;&#xA;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&lt;/style&gt;&#xA;&#xA;&lt;p&gt;Implementation of this contract is a subject to a separate discussion. To keep it simple, I have decided to use the simplest way out there:&lt;/p&gt;&#xA;&#xA;&lt;div class=&quot;csharpcode&quot;&gt;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   1:  &lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;using&lt;/span&gt; System;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   2:  &lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;using&lt;/span&gt; System.Collections.Generic;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   3:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   4:  &lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;namespace&lt;/span&gt; Core.IoC&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   5:  &lt;/span&gt;{&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   6:  &lt;/span&gt;  &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;class&lt;/span&gt; Container : IContainer&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   7:  &lt;/span&gt;  {&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   8:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;readonly&lt;/span&gt; IContainer Instance = &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; Container();&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   9:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  10:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  11:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;readonly&lt;/span&gt; Dictionary&amp;lt;Type, Type&amp;gt; container;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  12:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  13:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; Container()&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  14:  &lt;/span&gt;    {&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  15:  &lt;/span&gt;      container = &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; Dictionary&amp;lt;Type, Type&amp;gt;();&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  16:  &lt;/span&gt;    }&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  17:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  18:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; AddImplementerFor&amp;lt;ContractType&amp;gt;(Type implementer)&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  19:  &lt;/span&gt;    {&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  20:  &lt;/span&gt;      container.Add(&lt;span class=&quot;kwrd&quot;&gt;typeof&lt;/span&gt;(ContractType), implementer);&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  21:  &lt;/span&gt;    }&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  22:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  23:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; ContractType GetImplementerOf&amp;lt;ContractType&amp;gt;()&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  24:  &lt;/span&gt;    {&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  25:  &lt;/span&gt;      &lt;span class=&quot;kwrd&quot;&gt;return&lt;/span&gt; &lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;  (ContractType)Activator.CreateInstance(container[&lt;span class=&quot;kwrd&quot;&gt;typeof&lt;/span&gt; (ContractType)]);&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  26:  &lt;/span&gt;    }&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  27:  &lt;/span&gt;  }&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  28:  &lt;/span&gt;}&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;&#xA;&#xA;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&lt;/style&gt;&#xA;&#xA;&lt;p&gt;Yes, the core secret is in Activator class, provided by .NET framework. No magic.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;With this in hand, we can start using container all other the place, breaking the dangerous coupling. First thing first, registering contracts and their implementers for the application. This will change how we start our application:&lt;/p&gt;&#xA;&#xA;&lt;div class=&quot;csharpcode&quot;&gt;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   1:  &lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;using&lt;/span&gt; System;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   2:  &lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;using&lt;/span&gt; AssemblyOne;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   3:  &lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;using&lt;/span&gt; Core;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   4:  &lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;using&lt;/span&gt; Core.IoC;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   5:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   6:  &lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;namespace&lt;/span&gt; ConsoleApp&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   7:  &lt;/span&gt;{&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   8:  &lt;/span&gt;  &lt;span class=&quot;kwrd&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;class&lt;/span&gt; Program&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   9:  &lt;/span&gt;  {&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  10:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; Main()&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  11:  &lt;/span&gt;    {&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  12:  &lt;/span&gt;      ApplicationStartup();&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  13:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  14:  &lt;/span&gt;      AppCode();&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  15:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  16:  &lt;/span&gt;      Console.WriteLine(&lt;span class=&quot;str&quot;&gt;&quot;done.&quot;&lt;/span&gt;);&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  17:  &lt;/span&gt;      Console.ReadLine();&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  18:  &lt;/span&gt;    }&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  19:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  20:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; ApplicationStartup()&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  21:  &lt;/span&gt;    {&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  22:  &lt;/span&gt;      Container.Instance.AddImplementerFor&amp;lt;ILogger&amp;gt;(&lt;span class=&quot;kwrd&quot;&gt;typeof&lt;/span&gt;(&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;                                                           ConsoleLogger));&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  23:  &lt;/span&gt;      Container.Instance.AddImplementerFor&amp;lt;IGadget&amp;gt;(&lt;span class=&quot;kwrd&quot;&gt;typeof&lt;/span&gt;(Gadget));&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  24:  &lt;/span&gt;    }&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  25:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  26:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; AppCode()&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  27:  &lt;/span&gt;    {&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  28:  &lt;/span&gt;      IGadget gadget = &lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;                            Container.Instance.GetImplementerOf&amp;lt;IGadget&amp;gt;();&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  29:  &lt;/span&gt;      gadget.TurnOn();&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  30:  &lt;/span&gt;      gadget.TurnOff();&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  31:  &lt;/span&gt;    }&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  32:  &lt;/span&gt;  }&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  33:  &lt;/span&gt;}&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;&#xA;&#xA;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&lt;/style&gt;&#xA;&#xA;&lt;p&gt;Line 12 introduces a new (quiet old actually) concept - application startup point. In web application something like Application_Start in Global.asax would be an equivevalent. What it does is teaching the container about contracts, and who are the implementers. That way, we can get an instance of an IGadget without worrying who implements it (line 28). Also we don't need to directly inject the logger dependency, due to the fact that gadget can query for the default logger through the container. Updated logger looks like this:&lt;/p&gt;&#xA;&#xA;&lt;div class=&quot;csharpcode&quot;&gt;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   1:  &lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;using&lt;/span&gt; Core;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   2:  &lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;using&lt;/span&gt; Core.IoC;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   3:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   4:  &lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;namespace&lt;/span&gt; AssemblyOne&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   5:  &lt;/span&gt;{&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   6:  &lt;/span&gt;  &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;class&lt;/span&gt; Gadget : IGadget&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   7:  &lt;/span&gt;  {&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   8:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;readonly&lt;/span&gt; ILogger logger;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   9:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  10:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; Gadget(ILogger logger)&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  11:  &lt;/span&gt;    {&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  12:  &lt;/span&gt;      &lt;span class=&quot;kwrd&quot;&gt;this&lt;/span&gt;.logger = logger;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  13:  &lt;/span&gt;    }&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  14:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  15:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; Gadget() : &lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;                    &lt;span class=&quot;kwrd&quot;&gt;this&lt;/span&gt;(Container.Instance.GetImplementerOf&amp;lt;ILogger&amp;gt;()) {}&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  16:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  17:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; TurnOn()&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  18:  &lt;/span&gt;    {&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  19:  &lt;/span&gt;      logger.Log(&lt;span class=&quot;str&quot;&gt;&quot;TurnOn&quot;&lt;/span&gt;);&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  20:  &lt;/span&gt;    }&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  21:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  22:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; TurnOff()&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  23:  &lt;/span&gt;    {&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  24:  &lt;/span&gt;      logger.Log(&lt;span class=&quot;str&quot;&gt;&quot;TurnOff&quot;&lt;/span&gt;);&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  25:  &lt;/span&gt;    }&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  26:  &lt;/span&gt;  }&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  27:  &lt;/span&gt;}&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;&#xA;&#xA;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&lt;/style&gt;&#xA;&#xA;&lt;p&gt;Line 15 defines a default constructor that leverages container to get the default implementation of logger.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Now we will substitute the default logger by another implementer, from another assembly (AssemblyTwo) that logs information into an XML file:&lt;/p&gt;&#xA;&#xA;&lt;div class=&quot;csharpcode&quot;&gt;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   1:  &lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;using&lt;/span&gt; System;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   2:  &lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;using&lt;/span&gt; System.IO;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   3:  &lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;using&lt;/span&gt; System.Xml;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   4:  &lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;using&lt;/span&gt; Core;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   5:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   6:  &lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;namespace&lt;/span&gt; AssemblyTwo&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   7:  &lt;/span&gt;{&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   8:  &lt;/span&gt;  &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;class&lt;/span&gt; XmlLogger : ILogger&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   9:  &lt;/span&gt;  {&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  10:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;string&lt;/span&gt; fileName;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  11:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  12:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; XmlLogger() : &lt;span class=&quot;kwrd&quot;&gt;this&lt;/span&gt;(&lt;span class=&quot;str&quot;&gt;&quot;log.xml&quot;&lt;/span&gt;)&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  13:  &lt;/span&gt;    {&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  14:  &lt;/span&gt;    }&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  15:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  16:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; XmlLogger(&lt;span class=&quot;kwrd&quot;&gt;string&lt;/span&gt; fileName)&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  17:  &lt;/span&gt;    {&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  18:  &lt;/span&gt;      &lt;span class=&quot;kwrd&quot;&gt;this&lt;/span&gt;.fileName = fileName;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  19:  &lt;/span&gt;    }&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  20:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  21:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; Log(&lt;span class=&quot;kwrd&quot;&gt;string&lt;/span&gt; message)&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  22:  &lt;/span&gt;    {&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  23:  &lt;/span&gt;      XmlDocument document = &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; XmlDocument();&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  24:  &lt;/span&gt;      &lt;span class=&quot;kwrd&quot;&gt;string&lt;/span&gt; filePath = Path.GetFullPath(fileName);&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  25:  &lt;/span&gt;      CreateFileIfDoesntExist(filePath);&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  26:  &lt;/span&gt;      document.Load(filePath);&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  27:  &lt;/span&gt;      XmlElement root = document.DocumentElement;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  28:  &lt;/span&gt;      XmlElement element = document.CreateElement(&lt;span class=&quot;str&quot;&gt;&quot;log&quot;&lt;/span&gt;);&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  29:  &lt;/span&gt;      element.SetAttribute(&lt;span class=&quot;str&quot;&gt;&quot;timestamp&quot;&lt;/span&gt;, &lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;                         DateTime.Now.ToString(&lt;span class=&quot;str&quot;&gt;&quot;yyyy-MM-dd HH:mm:ss.fff&quot;&lt;/span&gt;));&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  30:  &lt;/span&gt;      element.InnerText = message;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  31:  &lt;/span&gt;      root.AppendChild(element);&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  32:  &lt;/span&gt;      document.Save(fileName);&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  33:  &lt;/span&gt;    }&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  34:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  35:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; CreateFileIfDoesntExist(&lt;span class=&quot;kwrd&quot;&gt;string&lt;/span&gt; filePath)&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  36:  &lt;/span&gt;    {&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  37:  &lt;/span&gt;      &lt;span class=&quot;kwrd&quot;&gt;if&lt;/span&gt; (!File.Exists(filePath))&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  38:  &lt;/span&gt;      {&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  39:  &lt;/span&gt;        XmlWriter writer = XmlTextWriter.Create(fileName);&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  40:  &lt;/span&gt;        writer.WriteProcessingInstruction(&lt;span class=&quot;str&quot;&gt;&quot;xml&quot;&lt;/span&gt;, &lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;                                       &lt;span class=&quot;str&quot;&gt;&quot;version='1.0' encoding='UTF-8'&quot;&lt;/span&gt;);&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  41:  &lt;/span&gt;        writer.WriteStartElement(&lt;span class=&quot;str&quot;&gt;&quot;logs&quot;&lt;/span&gt;);&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  42:  &lt;/span&gt;        writer.Close();&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  43:  &lt;/span&gt;      }&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  44:  &lt;/span&gt;    }&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  45:  &lt;/span&gt;  }&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  46:  &lt;/span&gt;}&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;&#xA;&#xA;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&lt;/style&gt;&#xA;&#xA;&lt;p&gt;The adjustment has to be done to the startup method to register the new implementer in the container:&lt;/p&gt;&#xA;&#xA;&lt;pre class=&quot;csharpcode&quot;&gt;    &lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; ApplicationStartup()&lt;br&gt;    {&lt;br&gt;      Container.Instance.AddImplementerFor&amp;lt;ILogger&amp;gt;(&lt;span class=&quot;kwrd&quot;&gt;typeof&lt;/span&gt;(XmlLogger));&lt;br&gt;      Container.Instance.AddImplementerFor&amp;lt;IGadget&amp;gt;(&lt;span class=&quot;kwrd&quot;&gt;typeof&lt;/span&gt;(Gadget));&lt;br&gt;    }&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Now the entire system uses XML logger as a default logger:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/UnderstandingIoCContainer_12237/ioc_layered_structure_container_2.jpg&quot; mce_href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/UnderstandingIoCContainer_12237/ioc_layered_structure_container_2.jpg&quot;&gt;&lt;img src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/UnderstandingIoCContainer_12237/ioc_layered_structure_container_thumb.jpg&quot; style=&quot;border-width: 0px;&quot; alt=&quot;ioc_layered_structure_container&quot; mce_src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/UnderstandingIoCContainer_12237/ioc_layered_structure_container_thumb.jpg&quot; border=&quot;0&quot; height=&quot;280&quot; width=&quot;410&quot;&gt;&lt;/a&gt; &lt;/p&gt;&#xA;&#xA;&lt;p&gt;There is a scenario when contract implementer is in an assembly that should not be referenced from the code (due to the fact that it is just not available during the development time)? Then something like an external file for container configuration can/should be used. We will have to specify the assembly name as well, so the activator would be able through the reflection to invoke constructor.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Bottom line - this is far from being perfect, but it was not intended to do the heavy lifting (though could be used to do IoC container work). My recommendation would be to understand what power it gives you and take one of the existing containers such as Windsor, Spring.NET, StructureMap, etc.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;...hey, what's up with the log there? Was it working at all? See for yourself, get the &lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/UnderstandingIoCContainer_12237/IoC_2.zip&quot; target=&quot;_blank&quot;&gt;code&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Part 2 of this blog is &lt;a href=&quot;/sfeldman/archive/2008/02/20/understanding-ioc-container-part-2.aspx&quot; mce_href=&quot;/sfeldman/archive/2008/02/20/understanding-ioc-container-part-2.aspx&quot;&gt;here&lt;/a&gt;.&amp;nbsp;&lt;/p&gt;&#xA;&#xA;&lt;div class=&quot;wlWriterSmartContent&quot; id=&quot;scid:8eb9d37f-1541-4f29-b6f4-1eea890d4876:13bf8ba7-8afa-4fd1-bb40-5e23ee4bc8a2&quot; style=&quot;margin: 0px; padding: 0px; display: inline;&quot;&gt;&lt;div class=&quot;wlWriterSmartContent&quot; id=&quot;scid:8eb9d37f-1541-4f29-b6f4-1eea890d4876:13bf8ba7-8afa-4fd1-bb40-5e23ee4bc8a2&quot; style=&quot;margin: 0px; padding: 0px; display: inline;&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;hints id=&quot;hah_hints&quot;&gt;&lt;/hints&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-02-15T05:58:00Z" PublishedUtc="2008-02-15T05:58:00Z" ModifiedUtc="2008-02-15T05:58:00Z" />
      <TagsPart Tags=".NET,OO,Patterns" />
      <AutoroutePart Alias="understanding-ioc-container" UseCustomPattern="false" />
      <TitlePart Title="Understanding IoC Container" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=immutable-collection-secure-proxy-pattern-example" Status="Published">
      <BodyPart Text="&lt;p&gt;Mr. Mo has wrote a nice &lt;a href=&quot;http://mokhan.ca/blog/2008/02/02/Keep+The+Ruffians+Out.aspx&quot; target=&quot;_blank&quot;&gt;post&lt;/a&gt; about securing collection and turning it into an immutable object. I am adding my 20 cents by reminding a great example JP Boodhoo has showed during his &lt;a href=&quot;http://www.jpboodhoo.com/blog/NothinButNetAustinTXApril7th11th.aspx&quot; target=&quot;_blank&quot;&gt;&quot;Nothin But .NET&quot;&lt;/a&gt; training session, leveraging &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms132474(VS.80).aspx&quot; target=&quot;_blank&quot;&gt;ReadOnlyCollection&amp;lt;T&amp;gt;&lt;/a&gt; class to make a collection immutable. &lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-02-04T16:21:57Z" PublishedUtc="2014-04-19T20:34:12.5913797Z" ModifiedUtc="2008-02-04T16:21:57Z" />
      <TagsPart Tags=".NET,Patterns" />
      <AutoroutePart Alias="immutable-collection-secure-proxy-pattern-example" UseCustomPattern="false" />
      <TitlePart Title="Immutable Collection (Secure Proxy Pattern) Example" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=domain-objects-vs-primitive-types" Status="Published">
      <BodyPart Text="&lt;p&gt;Lately I am paying more and more attention to aspects of Domain Driven Development (DDD), development where code is looking more at the domain in which it is trying to resolve problem(s), rather than technologies it is using. One of the biggest headaches that you getting into when trying to adopt DDD is persistence. Normally persistence is done in Relational database such as SQL server, Oracle, or another vendor database. And this is exactly the problem - Object Oriented model vs. Relational Data model. So what is more important, a software that is written in DDD way,&amp;#160; that forces you to put DB on a lower priority, or DB efficiency as a priority pushing your software from Domain driven development to become a Data Driven development? If you asking me - domain is more&amp;#160; valuable. I will show an example that to me serves the best proof for those who still try to save the &amp;quot;extra round trips to DB&amp;quot; or &amp;quot;we could combine the queries and have a single call to the DB&amp;quot;. Keep in mind, I am not going against DB efficiency, after all a sloppy data access can kill the best application out there. But having a great data access model will not make you application writing easier, on contrary. &lt;/p&gt;  &lt;p&gt;The example is simple. The system defines Organizations. One of the views has to list all the organizations in the system with one business rule that is coming from a client as a requirement - &amp;quot;the default&amp;quot; organization has always to appear on top.&lt;/p&gt;  &lt;p&gt;So having a list of Organizations I need to apply the rule to transform the list and pass to the view. Simple. This is where differences between Domain DD and Data DD are starting to bubble up. &lt;/p&gt;  &lt;p&gt;Note: according to the client, default organization is setup once per application and is not changing. The development team has decided to store the default organization id (Guid) in a configuration file for simplicity.&lt;/p&gt;  &lt;p&gt;The first code does the next:&lt;/p&gt;  &lt;div class=&quot;csharpcode&quot;&gt;   &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;&#xA;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&lt;/style&gt;&#xA;&#xA;&lt;div class=&quot;csharpcode&quot;&gt;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   1:  &lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;namespace&lt;/span&gt; Sample&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   2:  &lt;/span&gt;{&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   3:  &lt;/span&gt;  &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;class&lt;/span&gt; DefaultOrganizationIsOnTopBusinessRule&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   4:  &lt;/span&gt;  {&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   5:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;readonly&lt;/span&gt; Organization defaultOrganization;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   6:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;readonly&lt;/span&gt; List&amp;lt;Organization&amp;gt; originalOrganizationList;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   7:  &lt;/span&gt;&amp;#160;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   8:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; DefaultOrganizationIsOnTopBusinessRule(&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   9:  &lt;/span&gt;                IEnumerable&amp;lt;Organization&amp;gt; organizations, &lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  10:  &lt;/span&gt;                &lt;em&gt;Organization&lt;/em&gt; defaultOrganization)&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  11:  &lt;/span&gt;    {&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  12:  &lt;/span&gt;      originalOrganizationList = &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; List&amp;lt;Organization&amp;gt;(organizations);&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  13:  &lt;/span&gt;      &lt;span class=&quot;kwrd&quot;&gt;this&lt;/span&gt;.defaultOrganization = defaultOrganization;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  14:  &lt;/span&gt;    }&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  15:  &lt;/span&gt;&amp;#160;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  16:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; IList&amp;lt;Organization&amp;gt; Apply()&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  17:  &lt;/span&gt;    {&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  18:  &lt;/span&gt;      &lt;span class=&quot;kwrd&quot;&gt;if&lt;/span&gt; (originalOrganizationList.Contains(defaultOrganization))&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  19:  &lt;/span&gt;      {&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  20:  &lt;/span&gt;        List&amp;lt;Organization&amp;gt; newList = &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; List&amp;lt;Organization&amp;gt;();&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  21:  &lt;/span&gt;        newList.Add(originalOrganizationList&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  22:  &lt;/span&gt;                    .Find(&lt;span class=&quot;kwrd&quot;&gt;delegate&lt;/span&gt;(Organization org)&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  23:  &lt;/span&gt;                    {&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  24:  &lt;/span&gt;                       &lt;strong&gt;&lt;span class=&quot;kwrd&quot;&gt;return&lt;/span&gt; org.Equals(defaultOrganization)&lt;/strong&gt;;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  25:  &lt;/span&gt;                    }));&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  26:  &lt;/span&gt;        newList.AddRange(originalOrganizationList&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  27:  &lt;/span&gt;                   .FindAll(&lt;span class=&quot;kwrd&quot;&gt;delegate&lt;/span&gt;(Organization org)&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  28:  &lt;/span&gt;                   {&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  29:  &lt;/span&gt;                      &lt;span class=&quot;kwrd&quot;&gt;return&lt;/span&gt; &lt;strong&gt;!org.Equals(defaultOrganization)&lt;/strong&gt;;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  30:  &lt;/span&gt;                   }));&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  31:  &lt;/span&gt;        &lt;span class=&quot;kwrd&quot;&gt;return&lt;/span&gt; newList;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  32:  &lt;/span&gt;      }&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  33:  &lt;/span&gt;&amp;#160;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  34:  &lt;/span&gt;      &lt;span class=&quot;kwrd&quot;&gt;return&lt;/span&gt; originalOrganizationList;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  35:  &lt;/span&gt;    }&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  36:  &lt;/span&gt;  }&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  37:  &lt;/span&gt;}&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;&#xA;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&lt;/style&gt;&#xA;&#xA;&lt;p&gt;The second code, does almost the same, except that it tries to &amp;quot;save a trip to DB&amp;quot; in terms of supplying just the default organization id, and not the entity. the code is:&lt;/p&gt;&#xA;&#xA;&lt;div class=&quot;csharpcode&quot;&gt;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   1:  &lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;namespace&lt;/span&gt; Sample&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   2:  &lt;/span&gt;{&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   3:  &lt;/span&gt;  &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;class&lt;/span&gt; DefaultOrganizationIsOnTopBusinessRule&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   4:  &lt;/span&gt;  {&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   5:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;readonly&lt;/span&gt; Guid defaultOrganizationGuid;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   6:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;readonly&lt;/span&gt; List&amp;lt;Organization&amp;gt; originalOrganizationList;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   7:  &lt;/span&gt;&amp;#160;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   8:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; DefaultOrganizationIsOnTopBusinessRule(&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   9:  &lt;/span&gt;                IEnumerable&amp;lt;Organization&amp;gt; organizations, &lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  10:  &lt;/span&gt;                &lt;em&gt;Guid&lt;/em&gt; defaultOrganizationGuid)&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  11:  &lt;/span&gt;    {&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  12:  &lt;/span&gt;      originalOrganizationList = &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; List&amp;lt;Organization&amp;gt;(organizations);&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  13:  &lt;/span&gt;      &lt;span class=&quot;kwrd&quot;&gt;this&lt;/span&gt;.defaultOrganizationGuid = defaultOrganizationGuid;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  14:  &lt;/span&gt;    }&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  15:  &lt;/span&gt;&amp;#160;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  16:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; IList&amp;lt;Organization&amp;gt; Apply()&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  17:  &lt;/span&gt;    {&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  18:  &lt;/span&gt;      Organization &lt;span class=&quot;kwrd&quot;&gt;defaultOrg&lt;/span&gt; = originalOrganizationList&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  19:  &lt;/span&gt;                    .Find(&lt;span class=&quot;kwrd&quot;&gt;delegate&lt;/span&gt;(Organization org)&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  20:  &lt;/span&gt;                    {&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  21:  &lt;/span&gt;                       &lt;span class=&quot;kwrd&quot;&gt;return&lt;/span&gt; &lt;strong&gt;org.Guid == defaultOrganizationGuid&lt;/strong&gt;;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  22:  &lt;/span&gt;                    });&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  23:  &lt;/span&gt;      &lt;span class=&quot;kwrd&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;kwrd&quot;&gt;defaultOrg&lt;/span&gt; != &lt;span class=&quot;kwrd&quot;&gt;null&lt;/span&gt;)&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  24:  &lt;/span&gt;      {&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  25:  &lt;/span&gt;        List&amp;lt;Organization&amp;gt; newList = &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; List&amp;lt;Organization&amp;gt;();&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  26:  &lt;/span&gt;        newList.Add(&lt;span class=&quot;kwrd&quot;&gt;defaultOrg&lt;/span&gt;);&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  27:  &lt;/span&gt;        newList.AddRange(originalOrganizationList&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  28:  &lt;/span&gt;                   .FindAll(&lt;span class=&quot;kwrd&quot;&gt;delegate&lt;/span&gt;(Organization org)&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  29:  &lt;/span&gt;                   {&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  30:  &lt;/span&gt;                      &lt;span class=&quot;kwrd&quot;&gt;return&lt;/span&gt; &lt;strong&gt;org.Guid != defaultOrganizationGuid&lt;/strong&gt;;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  31:  &lt;/span&gt;                   }));&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  32:  &lt;/span&gt;        &lt;span class=&quot;kwrd&quot;&gt;return&lt;/span&gt; newList;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  33:  &lt;/span&gt;      }&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  34:  &lt;/span&gt;&amp;#160;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  35:  &lt;/span&gt;      &lt;span class=&quot;kwrd&quot;&gt;return&lt;/span&gt; originalOrganizationList;&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  36:  &lt;/span&gt;    }&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  37:  &lt;/span&gt;  }&lt;/pre&gt;&#xA;&#xA;  &lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  38:  &lt;/span&gt;}&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;&#xA;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&lt;/style&gt;&#xA;&#xA;&lt;p&gt;but this is an illusion of &amp;quot;quick&amp;quot; and &amp;quot;quality&amp;quot; code - several reasons:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;  &lt;li&gt;Who said we need to reconstruct the default organization all the time? We can leverage caching to keep it available to us without hitting DB each time&lt;/li&gt;&#xA;&#xA;  &lt;li&gt;Who said that organization entity is going to be identified by a Guid in the next few iterations? &lt;/li&gt;&#xA;&#xA;  &lt;li&gt;We are violating encapsulation by reaching out into the internals of an entity (object) - an object should know how to do things on itself&lt;/li&gt;&#xA;&#xA;  &lt;li&gt;Maintainability - what is easy to understand, a code that requires an object, or a code that expects a Guid?&lt;/li&gt;&#xA;&#xA;  &lt;li&gt;How easy it is to break the code if rather than sending a Guid of an organization we will send a Guid of another entity type that is also identified by a Guid?&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;If you answer these questions and you find yourself preferring the 1st code snippet, then domain is what you care for more, and along with it maintainability of what you build. In case the second code snippet is more appealing to your heart, then DB is all you care and get ready for some serious hacks and workarounds in your code to keep it running for the sake of efficient DB access.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;To finish this post, I would like to comment a few sentences from Eric Evans book:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&amp;quot;&lt;em&gt;The goal of domain-driven design is to create better software by focusing on a model of the domain rather than the technology. By the time a developer has constructed an SQL query, passed it to a query service in the infrastructure layer, obtained a result set of table rows, pulled the necessary information out, and passed it to a constructor or FACTORY, the model focus is gone. It becomes natural to think of the objects as containers for the data that the queries provide, and the whole design shifts toward a data-processing style. The details of the technology vary, but the problem remains that the client is dealing with technology, rather than model concepts.&lt;/em&gt;&amp;quot;&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-02-04T04:25:44Z" PublishedUtc="2014-04-19T20:34:12.9663752Z" ModifiedUtc="2008-02-04T04:25:44Z" />
      <TagsPart Tags=".NET,OO,Personal" />
      <AutoroutePart Alias="domain-objects-vs-primitive-types" UseCustomPattern="false" />
      <TitlePart Title="Domain Objects vs. Primitive Types" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=don-t-be-a-slave-of-visual-studio-amp-don-t-workship-file-system" Status="Published">
      <BodyPart Text="&lt;p&gt;Understanding what are you working on is the priority #1. If you not sure, then you don't know what are you working on. How do you keep several items linked logically while working on them - you try to keep something common between them. To be more particular, I will bring an example of an application I was exposed to with my team, and show several approaches, including the one I am so against.&lt;/p&gt; &lt;p&gt;The application has several sections. Each section has its' views. All the views are a part of the MVP pattern. One of the sections is called Product Management, where you can list all Product Releases in the system for a given Product, or create a new Product Release, or update an existing one. First image will show how the section file structure looks like.&lt;/p&gt; &lt;p&gt;Note: the team is using R# and is trying to be compliant as much as possible to all its' requirements (such as folder structure should be driving the namespaces, etc).&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/DontBeASlaveOfVisualStudioDontWorkshipFi_14D63/image_2.png&quot;&gt;&lt;img style=&quot;border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px&quot; height=&quot;189&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/DontBeASlaveOfVisualStudioDontWorkshipFi_14D63/image_thumb.png&quot; width=&quot;224&quot; align=&quot;left&quot; border=&quot;0&quot;&gt;&lt;/a&gt; &lt;/p&gt; &lt;p&gt;&amp;nbsp;&lt;/p&gt; &lt;p&gt;First thing first. ProductManage - sounds good, but DM? As I learned it was an abbreviation of &quot;Domain Model&quot; - but wait a minute, there's view and presenter exist in that same folder as well, so it's no longer just DM.&lt;/p&gt; &lt;p&gt;IViewEdit - bad. Not only it twist the logical naming of the class, but also copies the name of a different contract that belongs to a different section... and only because they partitioned by folders, they do not collide in name. They don't? Yes they do! When you work on those, you want to know what view contract is that. Not mentioning the inverted logic naming convention (IViewEdit, ViewEdit, IModelProduct, ModelProduct, DtoProduct, etc. - Long live Hungarian notation?!). After a few months a name like IProductReleaseEditView will ring a bell faster than IViewEdit, and then digging in what folder/sub-folder it lives in.&lt;/p&gt; &lt;p&gt;To myself this is a slavery to VS.NET and file system.&amp;nbsp; Rather than trying to arrange all views, models, presenters nicely in a solution window, we should care about meaningful names classes/interfaces are given. Besides, R# is not looking for the file name, it is looking for the class/interface name on a search. And I would definitely put more trust in re-factoring tool, rather than in file editor... but these are personal preferences.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-01-25T07:01:55Z" PublishedUtc="2008-01-25T07:01:55Z" ModifiedUtc="2008-01-25T07:01:55Z" />
      <TagsPart Tags="Personal,VS.NET" />
      <AutoroutePart Alias="don-t-be-a-slave-of-visual-studio-amp-don-t-workship-file-system" UseCustomPattern="false" />
      <TitlePart Title="Don't Be A Slave Of Visual Studio &amp; Don't Workship File System" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=lambda-expressions" Status="Published">
      <BodyPart Text="&lt;p&gt;I was looking at anonymous delegates today in .NET 2.0 and thinking how much &amp;quot;syntactical noise&amp;quot; it has and how clean and delicate it is with Lambda expressions. Remember though how it used to be?&lt;/p&gt;  &lt;pre class=&quot;csharpcode&quot;&gt;obj.SomeEvent += &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; EventHandler(HandlerMethod);&#xA;&lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; HandlerMethod(&lt;span class=&quot;kwrd&quot;&gt;object&lt;/span&gt; sender, EventArgs e) {}&lt;/pre&gt;&#xA;&#xA;&lt;pre class=&quot;csharpcode&quot;&gt;obj.SomeEvent += &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; EventHandler(&lt;span class=&quot;kwrd&quot;&gt;delegate&lt;/span&gt;(&lt;span class=&quot;kwrd&quot;&gt;object&lt;/span&gt; sender, EventArgs e) {  });&lt;/pre&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;&#xA;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&lt;/style&gt;&lt;style type=&quot;text/css&quot;&gt;&#xA;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&lt;/style&gt;&#xA;&#xA;&lt;pre class=&quot;csharpcode&quot;&gt;obj.SomeEvent += &lt;span class=&quot;kwrd&quot;&gt;delegate&lt;/span&gt;(&lt;span class=&quot;kwrd&quot;&gt;object&lt;/span&gt; sender, EventArgs e) { };&lt;/pre&gt;&#xA;&#xA;&lt;pre class=&quot;csharpcode&quot;&gt;obj.SomeEvent += (sender, e) =&amp;gt; Console.WriteLine(&lt;span class=&quot;str&quot;&gt;&amp;quot;nice!&amp;quot;&lt;/span&gt;);&lt;/pre&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;&#xA;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&lt;/style&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-01-25T06:14:33Z" PublishedUtc="2014-04-19T20:34:14.4663923Z" ModifiedUtc="2008-01-25T06:14:33Z" />
      <TagsPart Tags=".NET" />
      <AutoroutePart Alias="lambda-expressions" UseCustomPattern="false" />
      <TitlePart Title="Lambda Expressions" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=orm-poll" Status="Published">
      <BodyPart Text="&lt;p&gt;Looking for some feedback from ASP.NET community - &lt;em&gt;are you using ORM mapping tool and how disconnected your business logic from the persistence during initial development&lt;/em&gt;?&lt;/p&gt;  &lt;p&gt;To give a hint, I was looking at NHibernate, Microsoft Entities Framework, and in-house grown entities framework based on DB schema-first as opposed to the pure ADO.NET direct access. Thanks.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-01-23T07:38:51Z" PublishedUtc="2014-04-19T20:34:15.1069716Z" ModifiedUtc="2008-01-23T07:38:51Z" />
      <TagsPart Tags="" />
      <AutoroutePart Alias="orm-poll" UseCustomPattern="false" />
      <TitlePart Title="ORM Poll" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=expectations" Status="Published">
      <BodyPart Text="&lt;p&gt;This is a non-technical post (contains no code).&lt;/p&gt;  &lt;p&gt;&amp;quot;&lt;strong&gt;The size of disappointments is proportional to the size of expectations.&amp;quot;&lt;/strong&gt; -- translation from Hebrew (גודל האכזבות כגודל הציפיות). This is one I have to write down and stick in front of my eyes. I was expecting my team members to pick up the bug I got not so long ago on doing unit testing, TDD, DDD, Patterns and Principles, automation, pragmatic approach, etc. As much as I was expecting them to pick up the stuff and run with it, that much I was amazed to see that it is not going to happen. What is my conclusion? Don't over-expect (as over-design), don't ask what-if, act based on what-now. And the most important - don't have expectations for others, only for yourself.&lt;/p&gt;  &lt;p&gt;Why do I post it? Because some good people are going through similar hoops in their development careers and looking for some sanity. So &lt;a href=&quot;http://mokhan.ca/blog/&quot; target=&quot;_blank&quot;&gt;Mr. Mo&lt;/a&gt; - don't expect from the &amp;quot;great and mighty&amp;quot; what you have pictured to yourself, but picture yourself what you want to be and strive to that.&lt;/p&gt;  &lt;p&gt;Myself? Stick to the &lt;u&gt;right people&lt;/u&gt;, do not hesitate to &lt;u&gt;challenge yourself and others&lt;/u&gt;, knowing that challenging others might not answer the questions and and you will have to either live with those unsolved, or &lt;u&gt;do whatever it takes to get the answer&lt;/u&gt;.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-01-23T07:26:19Z" PublishedUtc="2014-04-19T20:34:16.4819643Z" ModifiedUtc="2008-01-23T07:26:19Z" />
      <TagsPart Tags="Personal" />
      <AutoroutePart Alias="expectations" UseCustomPattern="false" />
      <TitlePart Title="Expectations" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=tdd-by-sample-search-criteria" Status="Published">
      <BodyPart Text="&lt;p&gt;The goal of the application is to allow specifications for search (criteria’s) to be &lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/TDDBySampleSearchCriteria_1691/clip_image003_2.jpg&quot; mce_href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/TDDBySampleSearchCriteria_1691/clip_image003_2.jpg&quot;&gt;&lt;img src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/TDDBySampleSearchCriteria_1691/clip_image003_thumb.jpg&quot; style=&quot;border: 0px none ;&quot; alt=&quot;required view&quot; mce_src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/TDDBySampleSearchCriteria_1691/clip_image003_thumb.jpg&quot; align=&quot;right&quot; border=&quot;0&quot; height=&quot;166&quot; hspace=&quot;hspace&quot; width=&quot;331&quot;&gt;&lt;/a&gt;specified by the client in order to perform a custom search. Figure 1 demonstrates the requirement. I intestinally keep it simple for the sake of the exercise.&lt;/p&gt;&#xA;&lt;p&gt;&lt;b&gt;Where do I start?&lt;/b&gt; &lt;/p&gt;&#xA;&lt;p&gt;This is probably the most difficult question – where do I start? From the beginning, of course. I will try to make it sort of TDD way, and keeping the Agile concepts in head to respect some of the OO principles I have learned lately – no over-designing.&lt;/p&gt;&#xA;&lt;p&gt;So what’s the plan? The plan is to have a plan! (Valiant cartoon, recommended). What do we have?&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Criteria &lt;/li&gt;&#xA;&lt;li&gt;Search results provided by some service based on criteria that customer has provided&lt;/li&gt;&lt;/ul&gt;&#xA;&lt;p&gt;But what if criteria are wrong? We should be able to handle it&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Error message if criteria are wrong&lt;/li&gt;&lt;/ul&gt;&#xA;&lt;p&gt;Now the question – should the service for search result handle the validity of criteria? Nope, it only should consume it as-is, trusting it to be valid. Therefore Criteria has to be an object with its own behavior and “business rules” around it, that can be tested and become a dependency for the search service. Let’s hit the design through the tests.&lt;/p&gt;&#xA;&lt;p&gt;My first tests are all about the SearchService component. The concern of this component is to invoke the model to bring some data based on SearchCriteria. I can almost smell 2 different dependencies it will rely on:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Model&lt;/li&gt;&#xA;&lt;li&gt;SearchCriteria&lt;/li&gt;&lt;/ol&gt;&#xA;&lt;p&gt;I will not expand on the Model due to the complexity of the entire exercise and my limited knowledge at this point on Domain Driven Design, but will definitely come back to this subject sooner or later, as it seems to me THE way to write complex logic applications. I will cover SearchCriteria to make the example work.&lt;/p&gt;&#xA;&lt;p&gt;&lt;b&gt;SearchServiceTest as showed in Listing 1&lt;/b&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Sanity check – can we get the object at all? --&amp;gt; Should_be_able_to_instanciate_service() – state based test&lt;/li&gt;&#xA;&lt;li&gt;Given a certain SearchCriteria as a dependency, will the system under test (SUT) leverage the dependency, i.e. will be SearchCriteria used when SearchService is required to return result --&amp;gt; Should_be_able_to_return_search_results_with_a_given_search_criteria() – interaction based test using mocked dependency&lt;/li&gt;&lt;/ul&gt;&#xA;&lt;p&gt;Later, when SearchCriteria is tested and implemented, we add more tests to SearchService&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Is NullSearchResult object (Null Object pattern) returned on an invalid SearchCriteria as a result of min date being bigger than the max date --&amp;gt; Should_return_empty_search_result_due_to_bad_dates&lt;/li&gt;&#xA;&lt;li&gt;Is NullSearchResult object (Null Object pattern) returned on an invalid SearchCriteria as a result of min status being bigger than the max status--&amp;gt; Should_return_empty_search_result_due_to_bad_dates()&lt;/li&gt;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;b&gt;Listing 1&lt;/b&gt;&lt;/p&gt;&#xA;&lt;table bordercolordark=&quot;#ffffff&quot; bordercolorlight=&quot;#ffffff&quot; bgcolor=&quot;#000000&quot; border=&quot;1&quot; bordercolor=&quot;#c0c0c0&quot; width=&quot;100%&quot;&gt;&#xA;&lt;tbody&gt;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;&#xA;&lt;div class=&quot;csharpcode&quot;&gt;&lt;pre class=&quot;alt&quot;&gt;  [TestFixture]&lt;/pre&gt;&lt;pre&gt;  &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;class&lt;/span&gt; SearchServiceTest&lt;/pre&gt;&lt;pre class=&quot;alt&quot;&gt;  {&lt;/pre&gt;&lt;pre&gt;    &lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; MockRepository mock;&lt;/pre&gt;&lt;pre class=&quot;alt&quot;&gt;&amp;nbsp;&lt;/pre&gt;&lt;pre&gt;    [SetUp]&lt;/pre&gt;&lt;pre class=&quot;alt&quot;&gt;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; Setup()&lt;/pre&gt;&lt;pre&gt;    {&lt;/pre&gt;&lt;pre class=&quot;alt&quot;&gt;      mock = &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; MockRepository();&lt;/pre&gt;&lt;pre&gt;    }&lt;/pre&gt;&lt;pre class=&quot;alt&quot;&gt;&amp;nbsp;&lt;/pre&gt;&lt;pre&gt;    [TearDown]&lt;/pre&gt;&lt;pre class=&quot;alt&quot;&gt;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; TearDown()&lt;/pre&gt;&lt;pre&gt;    {&lt;/pre&gt;&lt;pre class=&quot;alt&quot;&gt;    }&lt;/pre&gt;&lt;pre&gt;&amp;nbsp;&lt;/pre&gt;&lt;pre class=&quot;alt&quot;&gt;    [Test]&lt;/pre&gt;&lt;pre&gt;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; Should_be_able_to_instanciate_service()&lt;/pre&gt;&lt;pre class=&quot;alt&quot;&gt;    {&lt;/pre&gt;&lt;pre&gt;      ISearchService sut = CreateSUT();&lt;/pre&gt;&lt;pre class=&quot;alt&quot;&gt;      Assert.IsNotNull(sut, &lt;span class=&quot;str&quot;&gt;&quot;failed to instantiate service&quot;&lt;/span&gt;);&lt;/pre&gt;&lt;pre&gt;    }&lt;/pre&gt;&lt;pre class=&quot;alt&quot;&gt;&amp;nbsp;&lt;/pre&gt;&lt;pre&gt;    [Test]&lt;/pre&gt;&lt;pre class=&quot;alt&quot;&gt;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; Should_be_able_to_return_search_results_with_a_given_search_criteria()&lt;/pre&gt;&lt;pre&gt;    {&lt;/pre&gt;&lt;pre class=&quot;alt&quot;&gt;      ISearchCriteria mockSearchCriteria = mock.CreateMock&amp;lt;ISearchCriteria&amp;gt;();&lt;/pre&gt;&lt;pre&gt;      ISearchService sut = CreateSUT(mockSearchCriteria);&lt;/pre&gt;&lt;pre class=&quot;alt&quot;&gt;&amp;nbsp;&lt;/pre&gt;&lt;pre&gt;      &lt;span class=&quot;kwrd&quot;&gt;using&lt;/span&gt; (mock.Record())&lt;/pre&gt;&lt;pre class=&quot;alt&quot;&gt;      {&lt;/pre&gt;&lt;pre&gt;        Expect.Call(mockSearchCriteria.IsValid()).IgnoreArguments().Return(&lt;span class=&quot;kwrd&quot;&gt;true&lt;/span&gt;);&lt;/pre&gt;&lt;pre class=&quot;alt&quot;&gt;      }&lt;/pre&gt;&lt;pre&gt;&amp;nbsp;&lt;/pre&gt;&lt;pre class=&quot;alt&quot;&gt;      &lt;span class=&quot;kwrd&quot;&gt;using&lt;/span&gt; (mock.Playback())&lt;/pre&gt;&lt;pre&gt;      {&lt;/pre&gt;&lt;pre class=&quot;alt&quot;&gt;        ISearchResult result = sut.GetResults();&lt;/pre&gt;&lt;pre&gt;        Assert.IsNotNull(result);&lt;/pre&gt;&lt;pre class=&quot;alt&quot;&gt;      }&lt;/pre&gt;&lt;pre&gt;    }&lt;/pre&gt;&lt;pre class=&quot;alt&quot;&gt;&amp;nbsp;&lt;/pre&gt;&lt;pre&gt;    [Test]&lt;/pre&gt;&lt;pre class=&quot;alt&quot;&gt;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; Should_return_empty_search_result_due_to_bad_dates()&lt;/pre&gt;&lt;pre&gt;    {&lt;/pre&gt;&lt;pre class=&quot;alt&quot;&gt;      ISearchService sut = CreateSUT(&lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; SearchCriteria(DateTime.Today.AddYears(1), DateTime.Today, 0, 0));&lt;/pre&gt;&lt;pre&gt;      Assert.AreEqual(SearchResult.NullSearchResult, sut.GetResults());&lt;/pre&gt;&lt;pre class=&quot;alt&quot;&gt;    }&lt;/pre&gt;&lt;pre&gt;&amp;nbsp;&lt;/pre&gt;&lt;pre class=&quot;alt&quot;&gt;    [Test]&lt;/pre&gt;&lt;pre&gt;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; Should_return_empty_search_result_due_to_bad_statuses()&lt;/pre&gt;&lt;pre class=&quot;alt&quot;&gt;    {&lt;/pre&gt;&lt;pre&gt;      ISearchService sut = CreateSUT(&lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; SearchCriteria(DateTime.Today, DateTime.Today, 3, 2));&lt;/pre&gt;&lt;pre class=&quot;alt&quot;&gt;      Assert.AreEqual(SearchResult.NullSearchResult, sut.GetResults());&lt;/pre&gt;&lt;pre&gt;    }&lt;/pre&gt;&lt;pre class=&quot;alt&quot;&gt;    &lt;/pre&gt;&lt;pre&gt;    &lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; ISearchService CreateSUT(ISearchCriteria searchCriteria)&lt;/pre&gt;&lt;pre class=&quot;alt&quot;&gt;    {&lt;/pre&gt;&lt;pre&gt;      &lt;span class=&quot;kwrd&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; SearchService(searchCriteria);&lt;/pre&gt;&lt;pre class=&quot;alt&quot;&gt;    }&lt;/pre&gt;&lt;pre&gt;&amp;nbsp;&lt;/pre&gt;&lt;pre class=&quot;alt&quot;&gt;&amp;nbsp;&lt;/pre&gt;&lt;pre&gt;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; ISearchService CreateSUT()&lt;/pre&gt;&lt;pre class=&quot;alt&quot;&gt;    {&lt;/pre&gt;&lt;pre&gt;      &lt;span class=&quot;kwrd&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; SearchService(&lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; SearchCriteria(&lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; DateTime(), &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; DateTime(), 0, 0));&lt;/pre&gt;&lt;pre class=&quot;alt&quot;&gt;    }&lt;/pre&gt;&lt;pre&gt;  }&lt;/pre&gt;&lt;/div&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;.csharpcode {&#xA;&#x9;FONT-SIZE: small; COLOR: black; FONT-FAMILY: consolas, &quot;Courier New&quot;, courier, monospace; BACKGROUND-COLOR: #ffffff&#xA;}&#xA;.csharpcode PRE {&#xA;&#x9;FONT-SIZE: small; COLOR: black; FONT-FAMILY: consolas, &quot;Courier New&quot;, courier, monospace; BACKGROUND-COLOR: #ffffff&#xA;}&#xA;.csharpcode PRE {&#xA;&#x9;MARGIN: 0em&#xA;}&#xA;.csharpcode .rem {&#xA;&#x9;COLOR: #008000&#xA;}&#xA;.csharpcode .kwrd {&#xA;&#x9;COLOR: #0000ff&#xA;}&#xA;.csharpcode .str {&#xA;&#x9;COLOR: #006080&#xA;}&#xA;.csharpcode .op {&#xA;&#x9;COLOR: #0000c0&#xA;}&#xA;.csharpcode .preproc {&#xA;&#x9;COLOR: #cc6633&#xA;}&#xA;.csharpcode .asp {&#xA;&#x9;BACKGROUND-COLOR: #ffff00&#xA;}&#xA;.csharpcode .html {&#xA;&#x9;COLOR: #800000&#xA;}&#xA;.csharpcode .attr {&#xA;&#x9;COLOR: #ff0000&#xA;}&#xA;.csharpcode .alt {&#xA;&#x9;MARGIN: 0em; WIDTH: 100%; BACKGROUND-COLOR: #f4f4f4&#xA;}&#xA;.csharpcode .lnum {&#xA;&#x9;COLOR: #606060&#xA;}&#xA;&lt;/style&gt;&#xA;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&#xA;&lt;p mce_keep=&quot;true&quot;&gt;&amp;nbsp;&lt;/p&gt;&#xA;&lt;p&gt;SearchCriteriaTest as showed in Listing 2&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Sanity check --&amp;gt; Should_be_able_to_instanciate_search_criteria()&lt;/li&gt;&#xA;&lt;li&gt;Test validity based on criteria parameters (the rules I came up with are as long as minimum is less or equal to the maximum, criteria is considered to be valid) à Should_be_able_to_return_search_criteria_validity(int minYear, int minMonth, int minDay, int maxYear, int maxMonth, int maxDay, int minStatus, int maxStatus, bool result) df- in this test case I am utilizing the MbUnit’s ability to run same test with different input values&lt;/li&gt;&lt;/ul&gt;&#xA;&lt;p&gt;Listing 2&lt;/p&gt;&#xA;&lt;table bordercolordark=&quot;#ffffff&quot; bordercolorlight=&quot;#ffffff&quot; bgcolor=&quot;#000000&quot; border=&quot;1&quot; bordercolor=&quot;#c0c0c0&quot; width=&quot;100%&quot;&gt;&#xA;&lt;tbody&gt;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;&#xA;&lt;div class=&quot;csharpcode&quot;&gt;&lt;pre class=&quot;alt&quot;&gt;[Test]&lt;/pre&gt;&lt;pre&gt;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; Should_be_able_to_instanciate_search_criteria()&lt;/pre&gt;&lt;pre class=&quot;alt&quot;&gt;    {&lt;/pre&gt;&lt;pre&gt;      ISearchCriteria sut = CreateSUT();&lt;/pre&gt;&lt;pre class=&quot;alt&quot;&gt;      Assert.IsNotNull(sut, &lt;span class=&quot;str&quot;&gt;&quot;failed to instantiate service&quot;&lt;/span&gt;);&lt;/pre&gt;&lt;pre&gt;    }&lt;/pre&gt;&lt;pre class=&quot;alt&quot;&gt;&amp;nbsp;&lt;/pre&gt;&lt;pre&gt;    [RowTest]&lt;/pre&gt;&lt;pre class=&quot;alt&quot;&gt;    [Row(2008, 1, 1, 2008, 1, 15, 0, 0, &lt;span class=&quot;kwrd&quot;&gt;true&lt;/span&gt;)]&lt;/pre&gt;&lt;pre&gt;    [Row(2008, 1, 15, 2008, 1, 1, 0, 0, &lt;span class=&quot;kwrd&quot;&gt;false&lt;/span&gt;)]&lt;/pre&gt;&lt;pre class=&quot;alt&quot;&gt;    [Row(2008, 1, 1, 2008, 1, 15, 1, 3, &lt;span class=&quot;kwrd&quot;&gt;true&lt;/span&gt;)]&lt;/pre&gt;&lt;pre&gt;    [Row(2008, 1, 1, 2008, 1, 15, 3, 1, &lt;span class=&quot;kwrd&quot;&gt;false&lt;/span&gt;)]&lt;/pre&gt;&lt;pre class=&quot;alt&quot;&gt;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; Should_be_able_to_return_search_criteria_validity(&lt;/pre&gt;&lt;pre class=&quot;alt&quot;&gt;         &lt;span class=&quot;kwrd&quot;&gt;int&lt;/span&gt; minYear, &lt;span class=&quot;kwrd&quot;&gt;int&lt;/span&gt; minMonth, &lt;span class=&quot;kwrd&quot;&gt;int&lt;/span&gt; minDay, &lt;span class=&quot;kwrd&quot;&gt;int&lt;/span&gt; maxYear, &lt;span class=&quot;kwrd&quot;&gt;int&lt;/span&gt; maxMonth, &lt;span class=&quot;kwrd&quot;&gt;int&lt;/span&gt; maxDay, &lt;span class=&quot;kwrd&quot;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;kwrd&quot;&gt;         int&lt;/span&gt; minStatus, &lt;span class=&quot;kwrd&quot;&gt;int&lt;/span&gt; maxStatus, &lt;span class=&quot;kwrd&quot;&gt;bool&lt;/span&gt; result)&lt;/pre&gt;&lt;pre&gt;    {&lt;/pre&gt;&lt;pre class=&quot;alt&quot;&gt;      DateTime minDate = &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; DateTime(minYear, minMonth, minDay);&lt;/pre&gt;&lt;pre&gt;      DateTime maxDate = &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; DateTime(maxYear, maxMonth, maxDay);&lt;/pre&gt;&lt;pre class=&quot;alt&quot;&gt;      ISearchCriteria sut = CreateSUT(minDate, maxDate, minStatus, maxStatus);&lt;/pre&gt;&lt;pre&gt;      Assert.AreEqual(result, sut.IsValid());&lt;/pre&gt;&lt;pre class=&quot;alt&quot;&gt;    }&lt;/pre&gt;&lt;pre&gt;&amp;nbsp;&lt;/pre&gt;&lt;pre class=&quot;alt&quot;&gt;    &lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; ISearchCriteria CreateSUT(DateTime minDate, DateTime maxDate, &lt;span class=&quot;kwrd&quot;&gt;int&lt;/span&gt; minStatus, &lt;span class=&quot;kwrd&quot;&gt;int&lt;/span&gt; maxStatus)&lt;/pre&gt;&lt;pre&gt;    {&lt;/pre&gt;&lt;pre class=&quot;alt&quot;&gt;      &lt;span class=&quot;kwrd&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; SearchCriteria(minDate, maxDate, minStatus, maxStatus);&lt;/pre&gt;&lt;pre&gt;    }&lt;/pre&gt;&lt;pre class=&quot;alt&quot;&gt;&amp;nbsp;&lt;/pre&gt;&lt;pre&gt;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; ISearchCriteria CreateSUT()&lt;/pre&gt;&lt;pre class=&quot;alt&quot;&gt;    {&lt;/pre&gt;&lt;pre&gt;      &lt;span class=&quot;kwrd&quot;&gt;return&lt;/span&gt; CreateSUT(&lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; DateTime(), &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; DateTime(), 0, 0);&lt;/pre&gt;&lt;pre class=&quot;alt&quot;&gt;    }&lt;/pre&gt;&lt;pre&gt;  }&lt;/pre&gt;&lt;/div&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;.csharpcode {&#xA;&#x9;FONT-SIZE: small; COLOR: black; FONT-FAMILY: consolas, &quot;Courier New&quot;, courier, monospace; BACKGROUND-COLOR: #ffffff&#xA;}&#xA;.csharpcode PRE {&#xA;&#x9;FONT-SIZE: small; COLOR: black; FONT-FAMILY: consolas, &quot;Courier New&quot;, courier, monospace; BACKGROUND-COLOR: #ffffff&#xA;}&#xA;.csharpcode PRE {&#xA;&#x9;MARGIN: 0em&#xA;}&#xA;.csharpcode .rem {&#xA;&#x9;COLOR: #008000&#xA;}&#xA;.csharpcode .kwrd {&#xA;&#x9;COLOR: #0000ff&#xA;}&#xA;.csharpcode .str {&#xA;&#x9;COLOR: #006080&#xA;}&#xA;.csharpcode .op {&#xA;&#x9;COLOR: #0000c0&#xA;}&#xA;.csharpcode .preproc {&#xA;&#x9;COLOR: #cc6633&#xA;}&#xA;.csharpcode .asp {&#xA;&#x9;BACKGROUND-COLOR: #ffff00&#xA;}&#xA;.csharpcode .html {&#xA;&#x9;COLOR: #800000&#xA;}&#xA;.csharpcode .attr {&#xA;&#x9;COLOR: #ff0000&#xA;}&#xA;.csharpcode .alt {&#xA;&#x9;MARGIN: 0em; WIDTH: 100%; BACKGROUND-COLOR: #f4f4f4&#xA;}&#xA;.csharpcode .lnum {&#xA;&#x9;COLOR: #606060&#xA;}&#xA;&lt;/style&gt;&#xA;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&#xA;&lt;p&gt;So what do I have so far:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Design for SearchService and SearchCriteria based on practical usage&lt;/li&gt;&#xA;&lt;li&gt;Design by Contract of the listed above&lt;/li&gt;&#xA;&lt;li&gt;Principle of Dipendency Injection (SearchCriteria is a dependency for SearchService) and Inversion of Control&lt;/li&gt;&#xA;&lt;li&gt;Dependency on abstraction and not concrete type for search criteria&lt;/li&gt;&#xA;&lt;li&gt;Encapsulation of business rules around searching criteria in an object&lt;/li&gt;&#xA;&lt;li&gt;Distinguished separation of concerns – SearchService knows nothing about SearchCriteria details and nuances, except what it should know – is criteria valid or not. &lt;/li&gt;&lt;/ol&gt;&#xA;&lt;p&gt;The implementation of the listed below classes and their contracts (interfaces) in Listing 3, Listing 4, Listing 5, and Listing 6 are entirely based on the tests I conducted. This ensures not only that the code is tested, but also documents well what should be the expected behavior, i.e. an alternative documentation for the design.&lt;/p&gt;&#xA;&lt;p mce_keep=&quot;true&quot;&gt;&amp;nbsp;&lt;/p&gt;&#xA;&lt;p&gt;Listings 3-6&lt;/p&gt;&#xA;&lt;table bordercolordark=&quot;#ffffff&quot; bordercolorlight=&quot;#ffffff&quot; bgcolor=&quot;#000000&quot; border=&quot;1&quot; bordercolor=&quot;#c0c0c0&quot; width=&quot;100%&quot;&gt;&#xA;&lt;tbody&gt;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;&#xA;&lt;div class=&quot;csharpcode&quot;&gt;&lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;interface&lt;/span&gt; ISearchService&lt;/pre&gt;&lt;pre&gt;  {&lt;/pre&gt;&lt;pre class=&quot;alt&quot;&gt;    ISearchResult GetResults();&lt;/pre&gt;&lt;pre&gt;  }&lt;/pre&gt;&lt;pre class=&quot;alt&quot;&gt;&amp;nbsp;&lt;/pre&gt;&lt;pre&gt;  &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;interface&lt;/span&gt; ISearchCriteria&lt;/pre&gt;&lt;pre class=&quot;alt&quot;&gt;  {&lt;/pre&gt;&lt;pre&gt;    &lt;span class=&quot;kwrd&quot;&gt;bool&lt;/span&gt; IsValid();&lt;/pre&gt;&lt;pre class=&quot;alt&quot;&gt;  }&lt;/pre&gt;&lt;pre&gt;&amp;nbsp;&lt;/pre&gt;&lt;pre class=&quot;alt&quot;&gt;  &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;interface&lt;/span&gt; ISearchResult&lt;/pre&gt;&lt;pre&gt;  {&lt;/pre&gt;&lt;pre class=&quot;alt&quot;&gt;    &lt;span class=&quot;rem&quot;&gt;// details are omitted to simplify example    &lt;/span&gt;&lt;/pre&gt;&lt;pre&gt;  }&lt;/pre&gt;&lt;/div&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;.csharpcode {&#xA;&#x9;FONT-SIZE: small; COLOR: black; FONT-FAMILY: consolas, &quot;Courier New&quot;, courier, monospace; BACKGROUND-COLOR: #ffffff&#xA;}&#xA;.csharpcode PRE {&#xA;&#x9;FONT-SIZE: small; COLOR: black; FONT-FAMILY: consolas, &quot;Courier New&quot;, courier, monospace; BACKGROUND-COLOR: #ffffff&#xA;}&#xA;.csharpcode PRE {&#xA;&#x9;MARGIN: 0em&#xA;}&#xA;.csharpcode .rem {&#xA;&#x9;COLOR: #008000&#xA;}&#xA;.csharpcode .kwrd {&#xA;&#x9;COLOR: #0000ff&#xA;}&#xA;.csharpcode .str {&#xA;&#x9;COLOR: #006080&#xA;}&#xA;.csharpcode .op {&#xA;&#x9;COLOR: #0000c0&#xA;}&#xA;.csharpcode .preproc {&#xA;&#x9;COLOR: #cc6633&#xA;}&#xA;.csharpcode .asp {&#xA;&#x9;BACKGROUND-COLOR: #ffff00&#xA;}&#xA;.csharpcode .html {&#xA;&#x9;COLOR: #800000&#xA;}&#xA;.csharpcode .attr {&#xA;&#x9;COLOR: #ff0000&#xA;}&#xA;.csharpcode .alt {&#xA;&#x9;MARGIN: 0em; WIDTH: 100%; BACKGROUND-COLOR: #f4f4f4&#xA;}&#xA;.csharpcode .lnum {&#xA;&#x9;COLOR: #606060&#xA;}&#xA;&lt;/style&gt;&#xA;&lt;br&gt;&#xA;&lt;div class=&quot;csharpcode&quot;&gt;&lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;class&lt;/span&gt; SearchCriteria : ISearchCriteria&lt;/pre&gt;&lt;pre&gt;  {&lt;/pre&gt;&lt;pre class=&quot;alt&quot;&gt;    &lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;readonly&lt;/span&gt; DateTime maxDate;&lt;/pre&gt;&lt;pre&gt;    &lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;int&lt;/span&gt; minStatus;&lt;/pre&gt;&lt;pre class=&quot;alt&quot;&gt;    &lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;int&lt;/span&gt; maxStatus;&lt;/pre&gt;&lt;pre&gt;    &lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;readonly&lt;/span&gt; DateTime minDate;&lt;/pre&gt;&lt;pre class=&quot;alt&quot;&gt;&amp;nbsp;&lt;/pre&gt;&lt;pre&gt;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; SearchCriteria(DateTime minDate, DateTime maxDate, &lt;span class=&quot;kwrd&quot;&gt;int&lt;/span&gt; minStatus, &lt;span class=&quot;kwrd&quot;&gt;int&lt;/span&gt; maxStatus)&lt;/pre&gt;&lt;pre class=&quot;alt&quot;&gt;    {&lt;/pre&gt;&lt;pre&gt;      &lt;span class=&quot;kwrd&quot;&gt;this&lt;/span&gt;.minDate = minDate;&lt;/pre&gt;&lt;pre class=&quot;alt&quot;&gt;      &lt;span class=&quot;kwrd&quot;&gt;this&lt;/span&gt;.maxDate = maxDate;&lt;/pre&gt;&lt;pre&gt;      &lt;span class=&quot;kwrd&quot;&gt;this&lt;/span&gt;.minStatus = minStatus;&lt;/pre&gt;&lt;pre class=&quot;alt&quot;&gt;      &lt;span class=&quot;kwrd&quot;&gt;this&lt;/span&gt;.maxStatus = maxStatus;&lt;/pre&gt;&lt;pre&gt;    }&lt;/pre&gt;&lt;pre class=&quot;alt&quot;&gt;&amp;nbsp;&lt;/pre&gt;&lt;pre&gt;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;bool&lt;/span&gt; IsValid()&lt;/pre&gt;&lt;pre class=&quot;alt&quot;&gt;    {&lt;/pre&gt;&lt;pre&gt;      &lt;span class=&quot;kwrd&quot;&gt;return&lt;/span&gt; DatePartOfCriteriaIsValid() &lt;/pre&gt;&lt;pre&gt;             &amp;amp;&amp;amp; StatusPartOfCriteriaIsValid();&lt;/pre&gt;&lt;pre class=&quot;alt&quot;&gt;    }&lt;/pre&gt;&lt;pre&gt;&amp;nbsp;&lt;/pre&gt;&lt;pre class=&quot;alt&quot;&gt;    &lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;bool&lt;/span&gt; StatusPartOfCriteriaIsValid()&lt;/pre&gt;&lt;pre&gt;    {&lt;/pre&gt;&lt;pre class=&quot;alt&quot;&gt;      &lt;span class=&quot;kwrd&quot;&gt;return&lt;/span&gt; minStatus &amp;lt;= maxStatus;&lt;/pre&gt;&lt;pre&gt;    }&lt;/pre&gt;&lt;pre class=&quot;alt&quot;&gt;&amp;nbsp;&lt;/pre&gt;&lt;pre&gt;    &lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;bool&lt;/span&gt; DatePartOfCriteriaIsValid()&lt;/pre&gt;&lt;pre class=&quot;alt&quot;&gt;    {&lt;/pre&gt;&lt;pre&gt;      &lt;span class=&quot;kwrd&quot;&gt;return&lt;/span&gt; minDate &amp;lt;= maxDate;&lt;/pre&gt;&lt;pre class=&quot;alt&quot;&gt;    }&lt;/pre&gt;&lt;pre&gt;  }&lt;/pre&gt;&lt;/div&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;.csharpcode {&#xA;&#x9;FONT-SIZE: small; COLOR: black; FONT-FAMILY: consolas, &quot;Courier New&quot;, courier, monospace; BACKGROUND-COLOR: #ffffff&#xA;}&#xA;.csharpcode PRE {&#xA;&#x9;FONT-SIZE: small; COLOR: black; FONT-FAMILY: consolas, &quot;Courier New&quot;, courier, monospace; BACKGROUND-COLOR: #ffffff&#xA;}&#xA;.csharpcode PRE {&#xA;&#x9;MARGIN: 0em&#xA;}&#xA;.csharpcode .rem {&#xA;&#x9;COLOR: #008000&#xA;}&#xA;.csharpcode .kwrd {&#xA;&#x9;COLOR: #0000ff&#xA;}&#xA;.csharpcode .str {&#xA;&#x9;COLOR: #006080&#xA;}&#xA;.csharpcode .op {&#xA;&#x9;COLOR: #0000c0&#xA;}&#xA;.csharpcode .preproc {&#xA;&#x9;COLOR: #cc6633&#xA;}&#xA;.csharpcode .asp {&#xA;&#x9;BACKGROUND-COLOR: #ffff00&#xA;}&#xA;.csharpcode .html {&#xA;&#x9;COLOR: #800000&#xA;}&#xA;.csharpcode .attr {&#xA;&#x9;COLOR: #ff0000&#xA;}&#xA;.csharpcode .alt {&#xA;&#x9;MARGIN: 0em; WIDTH: 100%; BACKGROUND-COLOR: #f4f4f4&#xA;}&#xA;.csharpcode .lnum {&#xA;&#x9;COLOR: #606060&#xA;}&#xA;&lt;/style&gt;&#xA;&lt;br&gt;&#xA;&lt;div class=&quot;csharpcode&quot;&gt;&lt;pre class=&quot;alt&quot;&gt;  &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;class&lt;/span&gt; SearchService : ISearchService&lt;/pre&gt;&lt;pre&gt;  {&lt;/pre&gt;&lt;pre class=&quot;alt&quot;&gt;    &lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;readonly&lt;/span&gt; ISearchCriteria searchCriteria;&lt;/pre&gt;&lt;pre&gt;&amp;nbsp;&lt;/pre&gt;&lt;pre class=&quot;alt&quot;&gt;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; SearchService(ISearchCriteria searchCriteria)&lt;/pre&gt;&lt;pre&gt;    {&lt;/pre&gt;&lt;pre class=&quot;alt&quot;&gt;      &lt;span class=&quot;kwrd&quot;&gt;this&lt;/span&gt;.searchCriteria = searchCriteria;&lt;/pre&gt;&lt;pre&gt;    }&lt;/pre&gt;&lt;pre class=&quot;alt&quot;&gt;&amp;nbsp;&lt;/pre&gt;&lt;pre&gt;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; ISearchResult GetResults()&lt;/pre&gt;&lt;pre class=&quot;alt&quot;&gt;    {&lt;/pre&gt;&lt;pre&gt;      &lt;span class=&quot;kwrd&quot;&gt;if&lt;/span&gt; (searchCriteria.IsValid())&lt;/pre&gt;&lt;pre class=&quot;alt&quot;&gt;      {&lt;/pre&gt;&lt;pre&gt;        &lt;span class=&quot;kwrd&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; SearchResult();&lt;/pre&gt;&lt;pre class=&quot;alt&quot;&gt;      }&lt;/pre&gt;&lt;pre&gt;      &lt;span class=&quot;kwrd&quot;&gt;return&lt;/span&gt; SearchResult.NullSearchResult;&lt;/pre&gt;&lt;pre class=&quot;alt&quot;&gt;    }&lt;/pre&gt;&lt;pre&gt;  }&lt;/pre&gt;&lt;/div&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;.csharpcode {&#xA;&#x9;FONT-SIZE: small; COLOR: black; FONT-FAMILY: consolas, &quot;Courier New&quot;, courier, monospace; BACKGROUND-COLOR: #ffffff&#xA;}&#xA;.csharpcode PRE {&#xA;&#x9;FONT-SIZE: small; COLOR: black; FONT-FAMILY: consolas, &quot;Courier New&quot;, courier, monospace; BACKGROUND-COLOR: #ffffff&#xA;}&#xA;.csharpcode PRE {&#xA;&#x9;MARGIN: 0em&#xA;}&#xA;.csharpcode .rem {&#xA;&#x9;COLOR: #008000&#xA;}&#xA;.csharpcode .kwrd {&#xA;&#x9;COLOR: #0000ff&#xA;}&#xA;.csharpcode .str {&#xA;&#x9;COLOR: #006080&#xA;}&#xA;.csharpcode .op {&#xA;&#x9;COLOR: #0000c0&#xA;}&#xA;.csharpcode .preproc {&#xA;&#x9;COLOR: #cc6633&#xA;}&#xA;.csharpcode .asp {&#xA;&#x9;BACKGROUND-COLOR: #ffff00&#xA;}&#xA;.csharpcode .html {&#xA;&#x9;COLOR: #800000&#xA;}&#xA;.csharpcode .attr {&#xA;&#x9;COLOR: #ff0000&#xA;}&#xA;.csharpcode .alt {&#xA;&#x9;MARGIN: 0em; WIDTH: 100%; BACKGROUND-COLOR: #f4f4f4&#xA;}&#xA;.csharpcode .lnum {&#xA;&#x9;COLOR: #606060&#xA;}&#xA;&lt;/style&gt;&#xA;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&#xA;&lt;p mce_keep=&quot;true&quot;&gt;&amp;nbsp;&lt;/p&gt;&#xA;&lt;p&gt;&lt;b&gt;Tools used&lt;/b&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;MbUnit&lt;/li&gt;&#xA;&lt;li&gt;Rhino.Mocks&lt;/li&gt;&#xA;&lt;li&gt;NAnt&lt;/li&gt;&#xA;&lt;li&gt;Visual Studio 2008&lt;/li&gt;&#xA;&lt;li&gt;Console2&lt;/li&gt;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;b&gt;NAnt and automated build&lt;/b&gt;&lt;/p&gt;&#xA;&lt;p&gt;I wanted to have my build script files to be partitioned and structured in a manner where I can invest minimum of the effort to kick off a new solution or a project in a solution, and being able to configure automated build (and tests) fast. The scripts are not the best, but this is just the first attempt to make it happen. The only targets I was actually running were “build” and “test”.&lt;/p&gt;&#xA;&lt;p&gt;&lt;b&gt;Usefulness of this post&lt;/b&gt;&lt;/p&gt;&#xA;&lt;p&gt;Someone said to me that what you just learned today might be looked by someone else tomorrow. In absolutely no way I am trying to teach people what have just barely learned. The motivation is to get others inspired and trigger feedbacks in order to evaluate what I am proposing.&lt;/p&gt;&#xA;&lt;p&gt;&lt;b&gt;Thanks&lt;/b&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;JP Boodhoo for introducing myself to the world of patterns, TDD, and DDD&lt;/li&gt;&#xA;&lt;li&gt;Glen for opposing ideas I had and pushing to prove that they are not just words&lt;/li&gt;&#xA;&lt;li&gt;Mr. Mo for ideas and encouragement to publish the post&lt;/li&gt;&#xA;&lt;li&gt;Adam for fuelling me up on the NAnt cryptic style and partitioning of it in general&lt;/li&gt;&lt;/ul&gt;&#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/TDD%2520By%2520Sample%2520-%2520Search%2520Criteria%2520-%2520Code.zip&quot; class=&quot;&quot; mce_href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/TDD%2520By%2520Sample%2520-%2520Search%2520Criteria%2520-%2520Code.zip&quot;&gt;Attachment&lt;/a&gt; note: to keep file small, I have wiped the dlls and exes from the Tools directory. You will have to download those and add in the right folders. Sorry for that.&lt;br&gt; &lt;/p&gt;&lt;p&gt;Since code is sort of trancated, I also attach the original version of the post in a &lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/TDD%2520By%2520Sample%2520-%2520Search%2520Criteria%2520-%2520PDF.zip&quot; class=&quot;&quot; mce_href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/TDD%2520By%2520Sample%2520-%2520Search%2520Criteria%2520-%2520PDF.zip&quot;&gt;PDF&lt;/a&gt; format.&lt;/p&gt;&lt;hints id=&quot;hah_hints&quot;&gt;&lt;/hints&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-01-18T09:29:00Z" PublishedUtc="2008-01-18T09:29:00Z" ModifiedUtc="2008-01-18T09:29:00Z" />
      <TagsPart Tags=".NET,Agile,TDD" />
      <AutoroutePart Alias="tdd-by-sample-search-criteria" UseCustomPattern="false" />
      <TitlePart Title="TDD By Sample - Search Criteria" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=web-application-project-compilation-and-nant" Status="Published">
      <BodyPart Text="&lt;p&gt;I am working on automated builds for our projects. I am quite excited about it, since it feels like taking back the power over the creation of the code. Not only that, the 'auto-magic' dissolves ones you do it manually and things become simple. You run the script, the script is failing, you need to fix the issue and you want the issue to be simple in order to A) locate it quickly B) fix in the least effort applied.&lt;/p&gt; &lt;p&gt;Saying that, I have to admit that having a strong build scripts takes time to develop as well. Thanks to the (NAnt/NAntContrib) community this is not a difficult task even for a novice like myself. And lets get back to the concept - simplicity.&lt;/p&gt; &lt;p&gt;If you look around, lots of build scripts are a single file that is doing it. But isn't this a sort of violation of SRP? One of the projects' build file in the entire solution should not be too overwhelming to read just because there's a bunch of projects and global properties. So I decided to partition.&lt;/p&gt; &lt;p&gt;In my case the partitioning is working great (master build file and child build files). Parent build file acts as a trigger for each individual project, invoking the right target. &lt;/p&gt; &lt;p&gt;This is great even with the projects that have dependencies on other projects in solution. The old plain CSC is doing it all. &lt;/p&gt; &lt;p&gt;Web Application Project (WAP) - an absolutely different creature. I failed to launch WAP compilation with aspnet_compiler. So I used msbuild to compile the web application project and trace what it was doing. To my surprise it leveraged csc.exe compiler to do the job. When the web application was requested in browse, the aspnet_compiler kicked in. So does that mean there is no need in aspnet_compiler to compile a web site? &lt;/p&gt; &lt;p&gt;PS: I will make a separate entry on Partitioned build files. &lt;/p&gt; &lt;p&gt;&lt;font color=&quot;#ff0000&quot;&gt;Update:&lt;/font&gt; please read my comment below. I have found a temporary (and maybe a permanent) way to achieve the goal with WAP compilation.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-01-16T07:44:04Z" PublishedUtc="2014-04-19T20:34:17.4506937Z" ModifiedUtc="2008-01-16T07:44:04Z" />
      <TagsPart Tags="" />
      <AutoroutePart Alias="web-application-project-compilation-and-nant" UseCustomPattern="false" />
      <TitlePart Title="Web Application Project Compilation And NAnt" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=edgile" Status="Published">
      <BodyPart Text="&lt;p&gt;Combining client-side with server-side, coping with multi-browser support, handling imperfect world of CSS , implementing the code the best way you can relaying on patterns and principles with legacy code kicking around, keeping up with the pace of changing, facing clients that are not ready to pay for the quality, dealing with team mates that are still loyal to procedural code order and married to databases, yet not over-designing is more than just agile. My definition of this is going on the edge with agility in mind. Or just Edgility.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-01-16T07:21:50Z" PublishedUtc="2014-04-19T20:34:18.5444214Z" ModifiedUtc="2008-01-16T07:21:50Z" />
      <TagsPart Tags="Agile,Personal" />
      <AutoroutePart Alias="edgile" UseCustomPattern="false" />
      <TitlePart Title="Edgile" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=excellent-reading" Status="Published">
      <BodyPart Text="&lt;p&gt;Just finished reading &lt;a href=&quot;http://www.amazon.com/gp/product/0131857258/ref=wl_it_dp?ie=UTF8&amp;amp;coliid=I2PVXDJUDOGLTB&amp;amp;colid=2J45ANE21AADN&quot; target=&quot;_blank&quot;&gt;Agile Principles, Patterns, and Practices in C#&lt;/a&gt; from Robert and Micah &lt;strike&gt;Fowler&lt;/strike&gt; Martin. A definitely recommended book. Some stuff is not taking advantage of the .NET (not using generics where could do that, Visitor pattern for example.&lt;/p&gt; &lt;p&gt;Next book - &lt;a href=&quot;http://www.amazon.com/gp/product/0321125215/ref=wl_it_dp?ie=UTF8&amp;amp;coliid=I33DSTDXCA7MA6&amp;amp;colid=2J45ANE21AADN&quot; target=&quot;_blank&quot;&gt;Domain-Driven Design: Tackling Complexity in the Heart of Software&lt;/a&gt;. What else would you recommend that would fall into this category?&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-01-14T06:38:30Z" PublishedUtc="2014-04-19T20:34:18.8100415Z" ModifiedUtc="2008-01-14T06:38:30Z" />
      <TagsPart Tags="" />
      <AutoroutePart Alias="excellent-reading" UseCustomPattern="false" />
      <TitlePart Title="Excellent Reading" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=volta" Status="Published">
      <BodyPart Text="&lt;p&gt;I was following the development on Script# CCC was developing. Sounded like an interesting idea of getting closer .NET and client-side JavaScript. Today found a link to MS experimental project called &lt;a href=&quot;http://labs.live.com/volta&quot; target=&quot;_blank&quot;&gt;Volta&lt;/a&gt; (hmm, I wonder what will happen if you dare to touch it, same that happens to many experimental projects - a moment of joy and a big shocker at the end? :)&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-01-03T15:38:31Z" PublishedUtc="2014-04-19T20:34:19.4201802Z" ModifiedUtc="2008-01-03T15:38:31Z" />
      <TagsPart Tags="" />
      <AutoroutePart Alias="volta" UseCustomPattern="false" />
      <TitlePart Title="Volta" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=nant-and-visual-studio-reporting-from-the-field-trip" Status="Published">
      <BodyPart Text="&lt;p&gt;In my &lt;a href=&quot;http://weblogs.asp.net/sfeldman/archive/2007/11/22/enable-mbunit-with-msbuild-from-visual-studio.aspx&quot; target=&quot;_blank&quot; mce_href=&quot;http://weblogs.asp.net/sfeldman/archive/2007/11/22/enable-mbunit-with-msbuild-from-visual-studio.aspx&quot;&gt;previous blog&lt;/a&gt; I was looking how to enable MbUnit with MSBuild from visual studio. As nice as it is, I was missing the flexibility and options of going beyond unit testing only.&lt;/p&gt; &lt;p&gt;After attending &lt;a href=&quot;http://www.jpboodhoo.com/blog/NothinButNetHelpTheHomelessCalgaryAlbertaNovember5th9th.aspx&quot; target=&quot;_blank&quot; mce_href=&quot;http://www.jpboodhoo.com/blog/NothinButNetHelpTheHomelessCalgaryAlbertaNovember5th9th.aspx&quot;&gt;&quot;Nothing But .NET&quot; training session&lt;/a&gt; help by JP Boodhoo in Calgary, I was more aware about option of using NAnt and CruiseControl.NET in the future for potential Continuous Integration. &lt;/p&gt; &lt;p&gt;So why NAnt? Several reasons:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;I was exposed to NAnt first  &lt;/li&gt;&lt;li&gt;Simple XML like syntax that makes total sense  &lt;/li&gt;&lt;li&gt;Lots of resources available from the OSS community &lt;/li&gt;&lt;/ul&gt; &lt;p&gt;As a beginner the first task was to make it work. Downloading the latest from the &lt;a href=&quot;http://nant.sourceforge.net&quot; target=&quot;_blank&quot; mce_href=&quot;http://nant.sourceforge.net&quot;&gt;official site&lt;/a&gt; for NAnt, reading how-tos, and... not working. As a Visual Studio grown developer with addictions to Intelisense and mouse, I straggled to build a simple NAnt build file (script file interpretated by NAnt to perform tasks/operations) without copying it entirely from somewhere. Solution - keyboard can replace mouse, but Intelisense - nothing. Google has brought quiet a few results. What I loved in &lt;a href=&quot;http://blogs.dovetailsoftware.com/blogs/kmiller/archive/2007/10/29/intellisense-for-editing-nant-build-scripts.aspx&quot; target=&quot;_blank&quot; mce_href=&quot;http://blogs.dovetailsoftware.com/blogs/kmiller/archive/2007/10/29/intellisense-for-editing-nant-build-scripts.aspx&quot;&gt;Kevin&lt;/a&gt;'s solution was to teach Visual Studio about NAnt Intelisense using NAnt itself (nice idea!). What it does is basically dumps NAnt schema file into Visual Studio schemas repository folder. The great part about this approach is full automation of the process plus the ability regenerate the schema with updates, such ad &lt;a href=&quot;http://nantcontrib.sourceforge.net&quot; target=&quot;_blank&quot; mce_href=&quot;http://nantcontrib.sourceforge.net&quot;&gt;NAntContrib&lt;/a&gt; (additional tasks that NAnt can do if you use it), in a painless way my 4 years old son could do. The simplified version looks like this:&lt;/p&gt; &lt;table bordercolordark=&quot;#ffffff&quot; bordercolorlight=&quot;#ffffff&quot; align=&quot;left&quot; bgcolor=&quot;#ffffff&quot; border=&quot;1&quot; bordercolor=&quot;#000000&quot; width=&quot;100%&quot;&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;&lt;pre class=&quot;csharpcode&quot;&gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&quot;build-nant-schema-for-vs2005&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;depends&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&quot;load-nantcontrib-schema&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&quot;Generate VS intelisense for NAnt&quot;&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;   &lt;span class=&quot;kwrd&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&quot;load-nantcontrib-schema&quot;&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;   &lt;span class=&quot;kwrd&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;nantschema&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&quot;NAnt.xsd&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;target-ns&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&quot;http://nant.sourceforge.net/release/0.86-beta1/nant.xsd&quot;&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;   &lt;span class=&quot;kwrd&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&quot;visual.studio.schemas.path&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&quot;C:\Program Files\Microsoft Visual Studio 8\Xml\Schemas&quot;&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;   &lt;span class=&quot;kwrd&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;copy&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;todir&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&quot;${visual.studio.schemas.path}&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&quot;NAnt.xsd&quot;&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;   &lt;span class=&quot;kwrd&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&quot;NAnt.xsd&quot;&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;&#xA;&#xA;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&lt;/style&gt;&#xA;&#xA;&lt;p&gt;&amp;nbsp;&lt;br&gt;&lt;/p&gt;&#xA;&lt;p&gt;Well, I slightly re-factored Kevin's example to be partitioned better. So the target &quot;load-nantcontrib-shema&quot; is just another target (think of it as a sub-routine in NAnt script) to update normal NAnt schema with NAntContrib schema.&lt;/p&gt;&#xA;&lt;table bordercolordark=&quot;#ffffff&quot; bordercolorlight=&quot;#ffffff&quot; bgcolor=&quot;#ffffff&quot; border=&quot;1&quot; bordercolor=&quot;#000000&quot; width=&quot;100%&quot;&gt;&#xA;&lt;tbody&gt;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;&lt;pre class=&quot;csharpcode&quot;&gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&quot;load-nantcontrib-schema&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&quot;Load NAntContrib tasks to generate schema&quot;&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;   &lt;span class=&quot;kwrd&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&quot;NAntContrib&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&quot;C:\Data\SandBox\ProjectAbc\Tools\NAantContrib-0.85\bin&quot;&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;   &lt;span class=&quot;kwrd&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;loadtasks&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;assembly&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&quot;${NAntContrib}\NAnt.Contrib.Tasks.dll&quot;&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;   &lt;span class=&quot;kwrd&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&quot;load-nantcontrib-schema finished.&quot;&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;&#xA;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&lt;/style&gt;&#xA;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&#xA;&lt;p&gt;So now producing the Intelisense for Visual Studio (2005 in this case) as simple as executing a normal NAnt script:&lt;/p&gt;&#xA;&lt;table bordercolordark=&quot;#ffffff&quot; bordercolorlight=&quot;#ffffff&quot; bgcolor=&quot;#ffffff&quot; border=&quot;1&quot; bordercolor=&quot;#000000&quot; width=&quot;100%&quot;&gt;&#xA;&lt;tbody&gt;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;&lt;pre class=&quot;csharpcode&quot;&gt;C:\Data\SandBox\ProjectAbc&amp;gt;nant load-nant-schema-&lt;span class=&quot;kwrd&quot;&gt;for&lt;/span&gt;-vs2005&lt;/pre&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;&#xA;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&lt;/style&gt;&#xA;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&#xA;&lt;p&gt;This is making sure that any NAnt script file (also called build file) that contains reference to the schema has intelisense. A typical build file starts like this:&lt;/p&gt;&#xA;&lt;table bordercolordark=&quot;#ffffff&quot; bordercolorlight=&quot;#ffffff&quot; bgcolor=&quot;#ffffff&quot; border=&quot;1&quot; bordercolor=&quot;#000000&quot; width=&quot;100%&quot;&gt;&#xA;&lt;tbody&gt;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;&lt;pre class=&quot;csharpcode&quot;&gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;lt;?&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;xml&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&quot;1.0&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;encoding&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&quot;utf-8&quot;&lt;/span&gt; ?&lt;span class=&quot;kwrd&quot;&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;project&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&quot;Proxy&quot;&lt;/span&gt; &lt;b&gt;&lt;span class=&quot;attr&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&quot;help&quot;&lt;/span&gt;&lt;/b&gt;  &lt;br&gt;         &lt;span class=&quot;attr&quot;&gt;xmlns&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&quot;http://nant.sourceforge.net/release/0.86-beta1/nant.xsd&quot;&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;&#xA;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&lt;/style&gt;&#xA;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&#xA;&lt;p&gt;What that default=&quot;help&quot;? Help is one of the targets available in this NAnt script and if no target is provided in command line as an argument, the default is used, &quot;help&quot; in this case. I have picked this idea from the book that describes the NAnt in a very quick and practical way - &lt;a href=&quot;http://www.amazon.com/gp/product/1590594851/ref=wl_it_dp?ie=UTF8&amp;amp;coliid=I3TW9W6AQV36SN&amp;amp;colid=2J45ANE21AADN&quot; target=&quot;_blank&quot; mce_href=&quot;http://www.amazon.com/gp/product/1590594851/ref=wl_it_dp?ie=UTF8&amp;amp;coliid=I3TW9W6AQV36SN&amp;amp;colid=2J45ANE21AADN&quot;&gt;Expert .NET Delivery Using NAnt and CruiseControl.NET&lt;/a&gt;. The idea is to have default target that will list all possible targets in script providing some help to people that did not build it, but have to use (the most important 'ility' - maintainability, isn't it?!)&lt;/p&gt;&#xA;&lt;table bordercolordark=&quot;#ffffff&quot; bordercolorlight=&quot;#ffffff&quot; bgcolor=&quot;#ffffff&quot; border=&quot;1&quot; bordercolor=&quot;#000000&quot; width=&quot;100%&quot;&gt;&#xA;&lt;tbody&gt;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;&lt;pre class=&quot;csharpcode&quot;&gt;C:\Data\SandBox\ProjectAbc&amp;gt;nant&lt;/pre&gt;&lt;pre class=&quot;csharpcode&quot;&gt;NAnt 0.86 (Build 0.86.2898.0; beta1; 08/12/2007)&lt;br&gt;Copyright (C) 2001-2007 Gerry Shaw&lt;br&gt;http:&lt;span class=&quot;rem&quot;&gt;//nant.sourceforge.net&lt;/span&gt;&lt;br&gt;&lt;br&gt;Buildfile: file:&lt;font color=&quot;#000000&quot;&gt;&lt;span class=&quot;rem&quot;&gt;///C:/Projects/Spikes/Proxy/default.build&lt;/span&gt;&lt;br&gt;Target framework: Microsoft .NET Framework 3.5&lt;br&gt;Target(s) specified: help &lt;br&gt;&lt;br&gt;&lt;br&gt;help:&lt;br&gt;&lt;br&gt;     [echo] Available Targets:&lt;br&gt;     [echo]   build-nant-schema-&lt;span class=&quot;kwrd&quot;&gt;for&lt;/span&gt;-&lt;/font&gt;vs2005&lt;br&gt;     [echo]   clean&lt;br&gt;     [echo]   build&lt;br&gt;     [echo]   test&lt;br&gt;     [echo]   run&lt;br&gt;&lt;br&gt;BUILD SUCCEEDED&lt;br&gt;&lt;br&gt;Total time: 0.1 seconds.&lt;/pre&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;&#xA;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&lt;/style&gt;&#xA;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&#xA;&lt;p&gt;Great. Now we need to pump the script contents and run it. But I am too lazy to leave the natural environment of inhabiting - Visual Studio. And even a cool tool like Console2 that is outstandingly great for this purpose, still doesn't make me feel like leaving the cave. So there's an add-in for Visual Studio 2005 called &lt;a href=&quot;http://www.codeplex.com/VSCmdShell&quot; target=&quot;_blank&quot; mce_href=&quot;http://www.codeplex.com/VSCmdShell&quot;&gt;VSCmdShell&lt;/a&gt; (and 2008 according to authors, but never worked for me) that can give you the command shell as a part of Visual studio, where you can execute your NAnt build script with parameters (targets). Now editing, building and testing can be all done under one hood in peace and harmony - I heard hallelujah?.&lt;/p&gt;&#xA;&lt;p&gt;The next step - start building the targets to do cleaning, building, testing, and running. Deployment might be an option as well. I am in the beginning of my NAnt climbing curve, but it definitely looks great so far. Happy climbing! &#xA;&lt;/p&gt;&lt;div class=&quot;wlWriterSmartContent&quot; id=&quot;scid:5737277B-5D6D-4f48-ABFC-DD9C333F4C5D:edc6b54f-85bd-4a40-9ffd-7038bfbc0446&quot; style=&quot;margin: 0px; padding: 0px; display: inline; float: right; width: 229px;&quot;&gt;&lt;div id=&quot;6b71b580-d69a-437b-a3bb-1c1cc4b14a00&quot; style=&quot;margin: 0px; padding: 0px; display: inline;&quot;&gt;&lt;div&gt;&lt;a href=&quot;http://video.msn.com/video.aspx?vid=e21b9eea-1fe0-4017-b4c2-e1febedbe6b9&amp;amp;from=writer&quot; target=&quot;_new&quot;&gt;&lt;img src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/WindowsLiveWriter/NAntAndVisualStudioReportingFromtheField_8BCA/videocdb6f8bd42e0_1.jpg&quot; galleryimg=&quot;no&quot; onload=&quot;var downlevelDiv = document.getElementById('6b71b580-d69a-437b-a3bb-1c1cc4b14a00'); downlevelDiv.innerHTML = &amp;quot;&lt;div&gt;&lt;embed mce_tsrc=\&amp;quot;http://images.video.msn.com/flash/soapbox1_1.swf\&amp;quot; quality=\&amp;quot;high\&amp;quot; width=\&amp;quot;229\&amp;quot; height=\&amp;quot;193\&amp;quot; wmode=\&amp;quot;transparent\&amp;quot; type=\&amp;quot;application/x-shockwave-flash\&amp;quot; pluginspage=\&amp;quot;http://macromedia.com/go/getflashplayer\&amp;quot; flashvars=\&amp;quot;c=v&amp;v=e21b9eea-1fe0-4017-b4c2-e1febedbe6b9&amp;from=writer\&amp;quot; &gt;&lt;\/embed&gt;&lt;\/div&gt;&amp;quot;;&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&#xA;&lt;p&gt;PS: I added a &lt;a href=&quot;http://video.msn.com/video.aspx?vid=e21b9eea-1fe0-4017-b4c2-e1febedbe6b9&quot; target=&quot;_blank&quot; mce_href=&quot;http://video.msn.com/video.aspx?vid=e21b9eea-1fe0-4017-b4c2-e1febedbe6b9&quot;&gt;video&lt;/a&gt; to demonstrate how &lt;a href=&quot;http://www.codeplex.com/VSCmdShell&quot; target=&quot;_blank&quot; mce_href=&quot;http://www.codeplex.com/VSCmdShell&quot;&gt;VSCmdShell&lt;/a&gt; is playing nicely in VS.NET 2005 in combination with NAnt. My computer was about to die and Windows Media Encoder was not the best choice for encoder, but this is what I had, with this had to win :)&lt;/p&gt;&lt;hints id=&quot;hah_hints&quot;&gt;&lt;/hints&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2008-01-03T05:31:00Z" PublishedUtc="2008-01-03T05:31:00Z" ModifiedUtc="2008-01-03T05:31:00Z" />
      <TagsPart Tags=".NET,Agile" />
      <AutoroutePart Alias="nant-and-visual-studio-reporting-from-the-field-trip" UseCustomPattern="false" />
      <TitlePart Title="NAnt And Visual Studio - Reporting From the Field Trip" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=tda-principle" Status="Published">
      <BodyPart Text="&#xA;&lt;p&gt;While reading materials about how to improve my OO code / design, I run into &quot;Tell, Don't Ask&quot; principle. Interestingly, I also have read &lt;a href=&quot;http://www.tagswap.net/articles/OOP_Principles_in_Action:_Tell,_Don%60t_Ask/&quot; target=&quot;_blank&quot; mce_href=&quot;http://www.tagswap.net/articles/OOP_Principles_in_Action:_Tell,_Don%60t_Ask/&quot;&gt;this article&lt;/a&gt; and realized that I am still thinking as a procedural developer. But then I got confused by the idea - you can test the interactions, but how do you test the state if you trying to eliminate any trace of state from the object? Does that mean that state base testing causes to violate TDA principle?&lt;/p&gt;&#xA;  &#xA;&lt;p&gt;This is a question to community - ideas are appreciated. &lt;/p&gt;&#xA;  &#xA;&lt;p&gt;PS: I was trying to pretend a situation where needed to &lt;a href=&quot;http://weblogs.asp.net/sfeldman/TDA.Principle.zip&quot; target=&quot;_blank&quot; mce_href=&quot;http://weblogs.asp.net/sfeldman/TDA.Principle.zip&quot;&gt;report a subject&lt;/a&gt; without accessing subject's properties - using what I thought would be a TDA principle. Same question remains.     &lt;br&gt;&lt;/p&gt;&#xA; &lt;hints id=&quot;hah_hints&quot;&gt;&lt;/hints&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2007-12-24T07:57:00Z" PublishedUtc="2014-04-19T20:34:20.5087642Z" ModifiedUtc="2007-12-24T07:57:00Z" />
      <TagsPart Tags="" />
      <AutoroutePart Alias="tda-principle" UseCustomPattern="false" />
      <TitlePart Title="TDA Principle" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=dry-or-not" Status="Published">
      <BodyPart Text="&lt;p&gt;One of the web applications requirements is to provide a rich user experience. Client side validation and formatting is a part of this UX. The subject I want to address today is how to achieve a good level of UX on formatting with respect to one of the OO principles, DRY principle.&lt;/p&gt;  &lt;p&gt;The case is simple, user can edit multiple date inputs, that are reformatted right away. The screen would look like this:&lt;/p&gt;  &lt;table cellspacing=&quot;0&quot; cellpadding=&quot;2&quot; width=&quot;400&quot; border=&quot;0&quot;&gt;&lt;tbody&gt;     &lt;tr&gt;       &lt;td valign=&quot;top&quot; width=&quot;200&quot;&gt;Item #1 delivery date:&lt;/td&gt;        &lt;td valign=&quot;top&quot; width=&quot;200&quot;&gt;         &lt;table cellspacing=&quot;0&quot; cellpadding=&quot;1&quot; width=&quot;195&quot; border=&quot;1&quot;&gt;&lt;tbody&gt;             &lt;tr&gt;               &lt;td valign=&quot;top&quot; width=&quot;195&quot;&gt;Sunday, 15/02/2008&lt;/td&gt;             &lt;/tr&gt;           &lt;/tbody&gt;&lt;/table&gt;       &lt;/td&gt;     &lt;/tr&gt;      &lt;tr&gt;       &lt;td valign=&quot;top&quot; width=&quot;200&quot;&gt;Item #2 delivery date:&lt;/td&gt;        &lt;td valign=&quot;top&quot; width=&quot;200&quot;&gt;         &lt;table cellspacing=&quot;0&quot; cellpadding=&quot;1&quot; width=&quot;195&quot; border=&quot;1&quot;&gt;&lt;tbody&gt;             &lt;tr&gt;               &lt;td valign=&quot;top&quot; width=&quot;195&quot;&gt;Monday, 16/02/2008&lt;/td&gt;             &lt;/tr&gt;           &lt;/tbody&gt;&lt;/table&gt;       &lt;/td&gt;     &lt;/tr&gt;      &lt;tr&gt;       &lt;td valign=&quot;top&quot; width=&quot;200&quot;&gt;...&lt;/td&gt;        &lt;td valign=&quot;top&quot; width=&quot;200&quot;&gt;&amp;#160;&lt;/td&gt;     &lt;/tr&gt;   &lt;/tbody&gt;&lt;/table&gt;  &lt;p&gt;Where's the DRY issue is raising - formatting can be done on server side and on the client side. One of the requirements is to reformat the value right as it is entered. One of the options is to use Ajax - well, a suicidal option. Another one, to invoke some client side code (client presentation logic?) to do the formatting. But as soon as this is done, the logic is replicated on server and client. Or is it?&lt;/p&gt;  &lt;p&gt;The solution I go with is to have the logic centralized in a single location, execution of the logic done in different places. Having formatting rule in one location would allow to 'downsize' the replication of things. Formatting string identical to the one that .NET has will be passed to the client side code (JavaScript). That same code will leverage something like regular expression (or anything else that will assist reformatting). &lt;/p&gt;  &lt;p&gt;So how dry is that? Probably not the best solution, so what are your ways to solve this? &lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2007-12-24T07:49:57Z" PublishedUtc="2014-04-19T20:34:20.8557884Z" ModifiedUtc="2007-12-24T07:49:57Z" />
      <TagsPart Tags="JavaScript,Patterns" />
      <AutoroutePart Alias="dry-or-not" UseCustomPattern="false" />
      <TitlePart Title="DRY or not?" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=recommended" Status="Published">
      <BodyPart Text="&lt;p&gt;The training session I took with JP Boodhoo &quot;Nothin But .NET&quot; was awesome. Was quiet surprised that a variation of this course, &quot;&lt;a href=&quot;http://www.jpboodhoo.com/blog/NothinButNetFundametalsCollegeStationTXJanuary7th11th2008.aspx&quot; target=&quot;_blank&quot;&gt;Nothin But .NET Fundamentals&lt;/a&gt;&quot; is not sold out yet. If you are anywhere near to College Station TX, and want to know what high-end fundamentals are - &lt;a href=&quot;http://www.jpboodhoo.com/blog/NothinButNetFundametalsCollegeStationTXJanuary7th11th2008.aspx&quot; target=&quot;_blank&quot;&gt;register&lt;/a&gt; to this training session. &lt;/p&gt; &lt;p&gt;JP is a great guy and an awesome trainer. If you looking for challenge - you will get it. Fundamental will never be the same after you go through the session.&lt;/p&gt; &lt;p&gt;PS: As an ex-trainer I can assure you that you getting a high-class experience with no &quot;canned&quot; and &quot;chewed&quot; content. And this is rare these days.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2007-12-21T06:18:24Z" PublishedUtc="2014-04-19T20:34:21.1701008Z" ModifiedUtc="2007-12-21T06:18:24Z" />
      <TagsPart Tags=".NET,Personal" />
      <AutoroutePart Alias="recommended" UseCustomPattern="false" />
      <TitlePart Title="Recommended" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=generating-changes" Status="Published">
      <BodyPart Text="&lt;p&gt;This post is not going to be technical at all - pure theory of how to generate a change in minds of those who cannot accept what agility and test driven development are proposing.&lt;/p&gt;  &lt;p&gt;One of the biggest questions is &amp;quot;why&amp;quot;. Why would someone bother to code to interfaces, if could deliver a working application without it. Why to have the hassle of creating test first, interface and then concrete implementation, going through enormous amount of code changes, if you can code the class, and in 'worse' case extract an interface 'just-in-case'? Why to give a method a fluent name and worry about simplicity, if you can 'dig the code to see what it's doing'? Why to bother test in isolation, if you can do the integration test. Hell, why even to bother doing integration, let the user do the testing...&lt;/p&gt;  &lt;p&gt;So I tried to step back, and rethink how to generate the change in minds, because once the mind is accepting the idea, techniques will definitely come after. One of the ideas I am trying to stick to is to serve an example (thanks JP for constantly reminding this) - let others see that you are standing behind your words and don't be afraid of admitting the fact that the learning curve for you has the same slope as for others. &lt;/p&gt;  &lt;p&gt;Keep challenging those that are in doubt - do not let them stay in the cozy spot thinking that since they won a single argue, they won the whole battle. &lt;/p&gt;  &lt;p&gt;Figure out the weak spots in the old school doctrine, and show how you can make it better.&lt;/p&gt;  &lt;p&gt;Experiment and benchmark - the best way to blow away assumptions is to show how they fail in reality. Get someone to read a procedural code of&amp;#160; a page and a half, or show how a call to stand-alone utility method fails the logic of an average developer to understand why there's a need to go to a utility that has no relationship to the subject at all.&lt;/p&gt;  &lt;p&gt;Give them the material for a thought. The true developer wants to know what's behind the door. If you leave the door slightly opened, the real developer will have a sneak look through it. And if so, then allow some time for ideas to be digested. It will grow in something bigger out of a curiosity. And if it won't, well, that was just a first level. The game is more appealing at the next one - keep trying!&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2007-12-20T08:39:31Z" PublishedUtc="2014-04-19T20:34:21.5294707Z" ModifiedUtc="2007-12-20T08:39:31Z" />
      <TagsPart Tags="Agile,Personal,TDD" />
      <AutoroutePart Alias="generating-changes" UseCustomPattern="false" />
      <TitlePart Title="Generating Changes" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=factory-pattern-for-user-controls" Status="Published">
      <BodyPart Text="&lt;p&gt;User Controls are handy when working in web forms, but what a mess they can generate. I was asked what to do when UCs are used and some dependencies need to be injected during the construction - but UCs are a bit tricky in regards to construction. So the possibilities are:&lt;/p&gt; &lt;p&gt;1. Use new operator and instantiate a user control (Web Application Project) - no good as the visual elements residing on the designer surface (.ascx) then not loaded.&lt;/p&gt; &lt;p&gt;2. Use Page.LoadControl(&amp;lt;path&amp;gt;) - but no option to pass in parameters.&lt;/p&gt; &lt;p&gt;3. Use Page.LoadControl(&amp;lt;type&amp;gt;, params object) - not strongly typed. &lt;/p&gt; &lt;p&gt;So all these possibilities are nice, but not helping to use a load with strongly typed parameters. Then the idea proposed at one of the replies with almost the same question was to use a static factory. I tried to play with the idea and this was a result.&lt;/p&gt; &lt;p&gt;Step 1 - create the UC&lt;/p&gt; &lt;table cellspacing=&quot;0&quot; cellpadding=&quot;2&quot; border=&quot;0&quot;&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td valign=&quot;top&quot;&gt;&lt;pre class=&quot;csharpcode&quot;&gt;&lt;span class=&quot;asp&quot;&gt;&amp;lt;%@ Control Language=&quot;C#&quot; AutoEventWireup=&quot;true&quot; CodeBehind=&quot;SomeUserControl.ascx.cs&quot; &lt;br&gt;Inherits=&quot;LoadControlWithFactory.SomeUserControl&quot; %&amp;gt;&lt;/span&gt;&#xA;&lt;span class=&quot;kwrd&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;asp:TextBox&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;runat&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&quot;server&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&quot;txtName&quot;&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;asp:TextBox&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&lt;/style&gt;&#xA;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&#xA;&lt;p&gt;Step 2 - create the code behind with static factory method&lt;/p&gt;&#xA;&lt;table cellspacing=&quot;0&quot; cellpadding=&quot;2&quot; border=&quot;0&quot;&gt;&#xA;&lt;tbody&gt;&#xA;&lt;tr&gt;&#xA;&lt;td valign=&quot;top&quot;&gt;&#xA;&lt;div class=&quot;csharpcode&quot;&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   1:  &lt;/span&gt;  &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;partial&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;class&lt;/span&gt; SomeUserControl : UserControl&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   2:  &lt;/span&gt;  {&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   3:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;string&lt;/span&gt; name;&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   4:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   5:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; OnLoad(EventArgs e)&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   6:  &lt;/span&gt;    {&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   7:  &lt;/span&gt;      &lt;span class=&quot;kwrd&quot;&gt;base&lt;/span&gt;.OnLoad(e);&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   8:  &lt;/span&gt;      txtName.Text = name;&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   9:  &lt;/span&gt;    }&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  10:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  11:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;static&lt;/span&gt; SomeUserControl Create(&lt;span class=&quot;kwrd&quot;&gt;string&lt;/span&gt; name)&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  12:  &lt;/span&gt;    {&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  13:  &lt;/span&gt;      SomeUserControl some = &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;u&gt;((Page)HttpContext.Current.Handler)&lt;/u&gt;.LoadControl(&lt;span class=&quot;str&quot;&gt;&quot;~/SomeUserControl.ascx&quot;&lt;/span&gt;) &lt;span class=&quot;kwrd&quot;&gt;as&lt;/span&gt; SomeUserControl;&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  14:  &lt;/span&gt;      some.name = name;&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  15:  &lt;/span&gt;      &lt;span class=&quot;kwrd&quot;&gt;return&lt;/span&gt; some;&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  16:  &lt;/span&gt;    }&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  17:  &lt;/span&gt;  }&lt;/pre&gt;&lt;/div&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&lt;/style&gt;&#xA;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&#xA;&lt;p&gt;Note: the underlined code has a bad smell - but that was the only idea I had to gain access to the currently executed page. Any other ideas are welcomed.&lt;/p&gt;&#xA;&lt;p&gt;Step 3 - load UC dynamically through the code with injected data&lt;/p&gt;&#xA;&lt;table cellspacing=&quot;0&quot; cellpadding=&quot;2&quot; border=&quot;0&quot;&gt;&#xA;&lt;tbody&gt;&#xA;&lt;tr&gt;&#xA;&lt;td valign=&quot;top&quot;&gt;&#xA;&lt;div class=&quot;csharpcode&quot;&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   1:  &lt;/span&gt;  &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;partial&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;class&lt;/span&gt; _Default : System.Web.UI.Page&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   2:  &lt;/span&gt;  {&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   3:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; OnPreRender(EventArgs e)&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   4:  &lt;/span&gt;    {&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   5:  &lt;/span&gt;      &lt;span class=&quot;kwrd&quot;&gt;base&lt;/span&gt;.OnPreRender(e);&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   6:  &lt;/span&gt;      phContent.Controls.Add(SomeUserControl.Create(&lt;span class=&quot;str&quot;&gt;&quot;Sean Feldman&quot;&lt;/span&gt;));&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   7:  &lt;/span&gt;      phContent.Controls.Add(SomeUserControl.Create(&lt;span class=&quot;str&quot;&gt;&quot;Anna Feldman&quot;&lt;/span&gt;));&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   8:  &lt;/span&gt;    }&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   9:  &lt;/span&gt;  }&lt;/pre&gt;&lt;/div&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;&#xA;&#xA;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&lt;/style&gt;&#xA;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&#xA;&lt;p&gt;Conclusions&lt;/p&gt;&#xA;&lt;p&gt;What it seems is that this allowed a few more things than just a pattern implementation. It allowed:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;DRY principle - rather than replicating the .ascx path wherever UC is loaded, this information is now stored and encapsulated inside the factory. &lt;pre class=&quot;csharpcode&quot;&gt;LoadControl(&lt;span class=&quot;str&quot;&gt;&quot;~/SomeUserControl.ascx&quot;&lt;/span&gt;) &lt;span class=&quot;kwrd&quot;&gt;as&lt;/span&gt; SomeUserControl; &lt;span class=&quot;rem&quot;&gt;// for Sean&lt;/span&gt;&#xA;LoadControl(&lt;span class=&quot;str&quot;&gt;&quot;~/SomeUserControl.ascx&quot;&lt;/span&gt;) &lt;span class=&quot;kwrd&quot;&gt;as&lt;/span&gt; SomeUserControl; // for Sean&lt;/pre&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;&#xA;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&lt;/style&gt;&#xA;&#xA;&lt;li&gt;Simplicity - &lt;strong&gt;Drop Dead Simple &lt;/strong&gt;principle (well, this is something I like to apply recently to the code to make is easy to digest, so this is the name I came up with). &#xA;&lt;blockquote&gt;&#xA;&lt;table cellspacing=&quot;0&quot; cellpadding=&quot;2&quot; width=&quot;400&quot; border=&quot;0&quot;&gt;&#xA;&lt;tbody&gt;&#xA;&lt;tr&gt;&#xA;&lt;td valign=&quot;top&quot; width=&quot;400&quot;&gt;&#xA;&lt;div class=&quot;csharpcode&quot;&gt;&lt;pre&gt;SomeUserControl.FactoryMethod(&lt;span class=&quot;str&quot;&gt;&amp;lt;typed params&amp;gt;&lt;/span&gt;);&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/blockquote&gt;&#xA;&lt;li&gt;Maintainability - simple and affordable.&lt;/li&gt;&lt;/ol&gt;&#xA;&lt;p&gt;Update 2007-12-17: I have re-arranged slightly the post to minimize clipping and attached the &lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/StaticFactoryMethod.zip&quot; target=&quot;_blank&quot;&gt;&lt;u&gt;code&lt;/u&gt;&lt;/a&gt;.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2007-12-17T17:01:10Z" PublishedUtc="2014-04-19T20:34:22.029464Z" ModifiedUtc="2007-12-17T17:01:10Z" />
      <TagsPart Tags=".NET,ASP.NET,OO,Patterns" />
      <AutoroutePart Alias="factory-pattern-for-user-controls" UseCustomPattern="false" />
      <TitlePart Title="Factory Pattern for User Controls" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=interface-naming-notation-to-quot-i-quot-or-not-to-quot-i-quot-part-2" Status="Published">
      <BodyPart Text="&lt;p&gt;While discussing with JP Boodhoo why he stopped to use the I notation for the interfaces, I think we got to the point where it was clear why would someone drop the &quot;I&quot; or opposite, adopt it.&lt;/p&gt;&#xA;&lt;p&gt;As a developer, I want to differentiate between a pure abstraction and a concrete thing. So to ease on ourselves, we put the I as a differentiation, rely on the visual interpretation that our brain (little one in my case) is doing (&quot;association&quot; as against to &quot;memorization&quot;). And that would be the justification of using the &quot;I&quot; notation. &lt;/p&gt;&#xA;&lt;p&gt;Now, if we look at the same issue from a more real-world perspective - bicycle. A bicycle is an abstraction, a 3-wheel or mountain bicycle are something concrete.&amp;nbsp;&amp;nbsp; So having something like:&lt;/p&gt;&#xA;&lt;table border=&quot;0&quot; cellpadding=&quot;2&quot; cellspacing=&quot;0&quot; width=&quot;400&quot;&gt;&#xA;&lt;tbody&gt;&#xA;&lt;tr&gt;&#xA;&lt;td valign=&quot;top&quot; width=&quot;400&quot;&gt;&#xA;&lt;div class=&quot;csharpcode&quot;&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   1:  &lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;class&lt;/span&gt; MountainBicycle : Bicycle&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   2:  &lt;/span&gt;{&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   3:  &lt;/span&gt;}&lt;/pre&gt;&lt;/div&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&#xA;&lt;/style&gt;&#xA;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&#xA;&lt;p&gt;Is nothing but&lt;/p&gt;&#xA;&lt;table border=&quot;0&quot; cellpadding=&quot;2&quot; cellspacing=&quot;0&quot; width=&quot;400&quot;&gt;&#xA;&lt;tbody&gt;&#xA;&lt;tr&gt;&#xA;&lt;td valign=&quot;top&quot; width=&quot;400&quot;&gt;&#xA;&lt;div class=&quot;csharpcode&quot;&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   1:  &lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;class&lt;/span&gt; MountainBicycle : IBicycle&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   2:  &lt;/span&gt;{&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   3:  &lt;/span&gt;}&lt;/pre&gt;&lt;/div&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&#xA;&lt;/style&gt;&#xA;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&#xA;&lt;p&gt;With a difference that you know that bicycle is an abstract thing and if your brain is trained enough about it, then you do not need to have an &quot;I&quot;-hint to trigger the &quot;association&quot;.&lt;/p&gt;&#xA;&lt;p&gt;Personal note: so far, from the comments to my &lt;a href=&quot;http://weblogs.asp.net/sfeldman/archive/2007/12/11/interface-naming-notation-to-quot-i-quot-or-not-to-quot-i-quot.aspx&quot; target=&quot;_blank&quot; mce_href=&quot;http://weblogs.asp.net/sfeldman/archive/2007/12/11/interface-naming-notation-to-quot-i-quot-or-not-to-quot-i-quot.aspx&quot;&gt;previous post&lt;/a&gt; on this, I have not seen that direction. Does this mean we are &quot;boxed&quot; to a particular thinking and not willing to evaluate other options as a community (.NET)?...&lt;/p&gt;&#xA;&lt;p&gt;PS: &quot;Hey, what about Customer sample?&quot; you might ask - never too late to admit - I was wrong. Customer is not concrete, therefor it's an interface, what concrete is a CertainTypeOfCustomer or any other deviation of a Customer :)&lt;/p&gt;&lt;hints id=&quot;hah_hints&quot;&gt;&lt;/hints&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2007-12-13T22:16:00Z" PublishedUtc="2014-04-19T20:34:24.0138225Z" ModifiedUtc="2007-12-13T22:16:00Z" />
      <TagsPart Tags=".NET,OO,Personal" />
      <AutoroutePart Alias="interface-naming-notation-to-quot-i-quot-or-not-to-quot-i-quot-part-2" UseCustomPattern="false" />
      <TitlePart Title="Interface Naming Notation - To &quot;I&quot; or not to &quot;I&quot; - Part 2" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=interface-naming-notation-to-quot-i-quot-or-not-to-quot-i-quot" Status="Published">
      <BodyPart Text="&lt;p&gt;While reading&amp;nbsp; R.C. Martin's book converted to C# by M. Martin &quot;Agile Principles, Patterns, and Practices in C#&quot; I could not ignore the fact that the Java notation for interface naming was used all over the place. Trying to be open-minded (or should I use &quot;pragmatic&quot; these days) I want to pop a question what is the benefit of dropping the I-prefix and how it does or does not influence the daily work. &lt;/p&gt; &lt;p&gt;For myself, having an &quot;I&quot; prefix in front of the name not only tells me that this is an interface, but also that this is a pure &quot;contract&quot; (Design by Contract is something I start to like). &lt;/p&gt; &lt;table cellspacing=&quot;0&quot; cellpadding=&quot;2&quot; width=&quot;466&quot; border=&quot;0&quot;&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td valign=&quot;top&quot; width=&quot;231&quot;&gt; &lt;div class=&quot;csharpcode&quot;&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   1:  &lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;interface&lt;/span&gt; ICustomer&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   2:  &lt;/span&gt;{&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   3:  &lt;/span&gt;  &lt;span class=&quot;rem&quot;&gt;// ...&lt;/span&gt;&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   4:  &lt;/span&gt;}&lt;/pre&gt;&lt;/div&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&#xA;&lt;/style&gt;&#xA;&lt;/td&gt;&#xA;&lt;td valign=&quot;top&quot; width=&quot;233&quot;&gt;&#xA;&lt;div class=&quot;csharpcode&quot;&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   1:  &lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;interface&lt;/span&gt; Customer&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   2:  &lt;/span&gt;{&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   3:  &lt;/span&gt;  &lt;span class=&quot;rem&quot;&gt;// ...&lt;/span&gt;&lt;/pre&gt;&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   4:  &lt;/span&gt;}&lt;/pre&gt;&lt;/div&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;.csharpcode, .csharpcode pre&#xA;{&#xA;&#x9;font-size: small;&#xA;&#x9;color: black;&#xA;&#x9;font-family: consolas, &quot;Courier New&quot;, courier, monospace;&#xA;&#x9;background-color: #ffffff;&#xA;&#x9;/*white-space: pre;*/&#xA;}&#xA;.csharpcode pre { margin: 0em; }&#xA;.csharpcode .rem { color: #008000; }&#xA;.csharpcode .kwrd { color: #0000ff; }&#xA;.csharpcode .str { color: #006080; }&#xA;.csharpcode .op { color: #0000c0; }&#xA;.csharpcode .preproc { color: #cc6633; }&#xA;.csharpcode .asp { background-color: #ffff00; }&#xA;.csharpcode .html { color: #800000; }&#xA;.csharpcode .attr { color: #ff0000; }&#xA;.csharpcode .alt &#xA;{&#xA;&#x9;background-color: #f4f4f4;&#xA;&#x9;width: 100%;&#xA;&#x9;margin: 0em;&#xA;}&#xA;.csharpcode .lnum { color: #606060; }&#xA;&lt;/style&gt;&#xA;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&#xA;&lt;p&gt;So what do you have to say about it? To &quot;I&quot; or not to &quot;I&quot;?&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2007-12-11T17:10:34Z" PublishedUtc="2014-04-19T20:34:25.1704185Z" ModifiedUtc="2007-12-11T17:10:34Z" />
      <TagsPart Tags=".NET" />
      <AutoroutePart Alias="interface-naming-notation-to-quot-i-quot-or-not-to-quot-i-quot" UseCustomPattern="false" />
      <TitlePart Title="Interface Naming Notation - To &quot;I&quot; or not to &quot;I&quot;" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=net-framework-3-5-affects-2-0" Status="Published">
      <BodyPart Text="&lt;p&gt;I have installed .NET Framework 3.5 along with already existing 2.0 as a part of Visual Studio .NET 2008 installation. What a surprise it was to find out that the old &quot;web site&quot; projects were all broken... after a few hours of investigation, my coworker, Glen and I have found that the 3.5 is not so &lt;a href=&quot;http://blog.pantos.name/archive/2007/09/27/.net-framework-3.5-breaks-asp.net-2.0-web-sites.aspx&quot; target=&quot;_blank&quot; mce_href=&quot;http://blog.pantos.name/archive/2007/09/27/.net-framework-3.5-breaks-asp.net-2.0-web-sites.aspx&quot;&gt;innocent&lt;/a&gt; and&amp;nbsp; it writes to 2.0 new version of assemblies. Why in the world it would do it?! So far this is under MS engineers investigation and I hope it was an error on our side. &lt;/p&gt; &lt;p&gt;And this KB can be useful for some people as well: &lt;a href=&quot;http://support.microsoft.com/kb/941824&quot; target=&quot;_blank&quot; mce_href=&quot;http://support.microsoft.com/kb/941824&quot;&gt;KB941824&lt;/a&gt; - at the 'cause' section, in little font I loved the note: &quot;&lt;i&gt;When you install the .NET Framework 3.5, the .NET Framework files in the V2.0.50727 folder are updated. Therefore, when you install the .NET Framework 3.5, Visual Studio 2005 is affected.&lt;/i&gt;&quot;&amp;nbsp; Great...&lt;/p&gt; &lt;p&gt;&lt;font color=&quot;#cc0000&quot;&gt;2007-11-28 21:25 Update&lt;/font&gt;: a quick example of breaking code is attached in zip file. The problem is in RuntimeMasterPageFile property at compile time. &lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/Issue20071128.zip&quot;&gt;Issue20071128.zip&lt;/a&gt;&amp;nbsp; &lt;/p&gt; &lt;p&gt;&lt;font color=&quot;#cc0000&quot;&gt;2007-11-30 00:15&amp;nbsp; Update&lt;/font&gt;: after recreating the whole environment step by step I reproduced the issue and seems like the breaking change is in web.config under&amp;nbsp; system.web section - one of the configurations, &amp;lt;page&amp;gt; has an attribute pageBaseType that I was using and didn't have to specify anything on each single page. After 3.5 install, which is also a SP1 for 2.0, this feature is no longer respected by compiler. Keep tuned for updates.&lt;/p&gt; &lt;p&gt;&lt;font color=&quot;#cc0000&quot;&gt;2007-12-03 Update&lt;/font&gt;: ASP.NET team confirms that this is a bug in 3.5&amp;nbsp; (2.0 SP1) and they will release a hotfix within up to 4 weeks.&lt;/p&gt;&lt;p&gt;&lt;font color=&quot;#ff0000&quot;&gt;2008-03-05 Update:&lt;/font&gt; The fix was built, but failed one of MS internal test stages. Therefore, they have moved it back to the previous stage for rebuilding. Updates on the status will be posted as that process continues.&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;hints id=&quot;hah_hints&quot;&gt;&lt;/hints&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2007-12-03T19:34:00Z" PublishedUtc="2014-04-19T20:34:27.1168743Z" ModifiedUtc="2007-12-03T19:34:00Z" />
      <TagsPart Tags=".NET" />
      <AutoroutePart Alias="net-framework-3-5-affects-2-0" UseCustomPattern="false" />
      <TitlePart Title=".NET Framework 3.5 Affects 2.0" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=when-i-grow-up-i-will-be-a" Status="Published">
      <BodyPart Text="&lt;p&gt;Kids are original. My wife and I were kidding about who our 3.5 years old son will be when grows up:&lt;/p&gt;  &lt;p&gt;&amp;quot;You will be a software developer&amp;quot; my wife says.&lt;/p&gt;  &lt;p&gt;With all the disappointment in his voice he replies - &amp;quot;but I wanted to be a pumpkin!...&amp;quot;. :)&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2007-11-29T06:13:33Z" PublishedUtc="2014-04-19T20:34:28.9206269Z" ModifiedUtc="2007-11-29T06:13:33Z" />
      <TagsPart Tags="" />
      <AutoroutePart Alias="when-i-grow-up-i-will-be-a" UseCustomPattern="false" />
      <TitlePart Title="When I Grow Up I Will Be A..." />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=firebug-and-prototype" Status="Published">
      <BodyPart Text="&lt;p&gt;Today had to spend a bit time on client side code for FireFox. Since I'm coming from IE development only, the whole thing was not so pleasant (plus the fact that either IE sins too much or FF is not really a saint, probably both). So I ended up with 2 things that literally saved my time - Prototype JavaScript framework and Firebug addon for FF. Great to things that just made my day.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2007-11-26T19:28:51Z" PublishedUtc="2014-04-19T20:34:29.2174899Z" ModifiedUtc="2007-11-26T19:28:51Z" />
      <TagsPart Tags="JavaScript" />
      <AutoroutePart Alias="firebug-and-prototype" UseCustomPattern="false" />
      <TitlePart Title="Firebug and Prototype" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=enable-mbunit-with-msbuild-from-visual-studio" Status="Published">
      <BodyPart Text="&lt;p&gt;Editing the project file and adding this section will ensure the MbUnit tests are executed on successful builds.&lt;/p&gt; &lt;p&gt;&amp;lt;PropertyGroup&amp;gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;PostBuildEvent&amp;gt;&quot;$(ProjectDir)&amp;lt;&lt;em&gt;location in the project&lt;/em&gt;&amp;gt;\MbUnit.Cons.exe&quot; &quot;$(TargetPath)&quot;&amp;nbsp; /sr /rt:text&amp;lt;/PostBuildEvent&amp;gt;&lt;br&gt;&amp;lt;/PropertyGroup&amp;gt; &lt;p&gt;location in the project - something that I picked up from JP Boodhoo. The idea is to keep all the tools used for the development encapsulated with the project. That way maintenance and setup on new workstations is not an issue.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2007-11-22T22:06:29Z" PublishedUtc="2014-04-19T20:34:29.4831228Z" ModifiedUtc="2007-11-22T22:06:29Z" />
      <TagsPart Tags="" />
      <AutoroutePart Alias="enable-mbunit-with-msbuild-from-visual-studio" UseCustomPattern="false" />
      <TitlePart Title="Enable MbUnit with MSBuild from Visual Studio" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=life-without-r" Status="Published">
      <BodyPart Text="&lt;p&gt;I am not making any news by saying what was said before - R# folks were surprised as much as we were by so early release of&amp;nbsp;&amp;nbsp;VS.NET 2008. I wonder what was the reason to this early release and how soon as a result of that we will be rushing to download SP1 for it... The point is not that. What I would suggest is do not run R# in VS.NET 2008 without proper support on R# side. Wait a bit, it will come. I am saying so because coding in VS.NET 2008 without fully capable R# running is&amp;nbsp;PAIN... &lt;/p&gt; &lt;p&gt;PS: Any ideas how soon R# will be updated to deal with reality?&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2007-11-22T19:14:46Z" PublishedUtc="2014-04-19T20:34:29.7643675Z" ModifiedUtc="2007-11-22T19:14:46Z" />
      <TagsPart Tags="Personal,VS.NET" />
      <AutoroutePart Alias="life-without-r" UseCustomPattern="false" />
      <TitlePart Title="Life Without R#" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=svn-addin-for-vs-net" Status="Published">
      <BodyPart Text="&lt;p&gt;The adding is free and allows to work with SVN from the VS.NET (from the context menu). If your preference is not to leave the IDE and you want visual indication of the file status, &lt;a href=&quot;http://ankhsvn.com&quot; target=&quot;_blank&quot;&gt;AnkhSVN&lt;/a&gt; is the one you should check out.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2007-11-15T13:42:57Z" PublishedUtc="2014-04-19T20:34:30.5324595Z" ModifiedUtc="2007-11-15T13:42:57Z" />
      <TagsPart Tags="" />
      <AutoroutePart Alias="svn-addin-for-vs-net" UseCustomPattern="false" />
      <TitlePart Title="SVN Addin For VS.NET" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=nothing-but-net-calgary-2007-day-5" Status="Published">
      <BodyPart Text="&lt;p&gt;The final day. People are tired and some 'deliverables' are slightly trimmed, but we are heading towards the target. My personal target was to wrap around the idea of agile and TDD. I defiantly do not consider myself as a person that understands exactly all the details, but I definitely see the difference and know towards what I should be heading. &lt;/p&gt;  &lt;p&gt;Saying this, I would like to thank JP for the 'injection' he provided. Not only the motivation to change, but also sanity check to stay alert and be aware of the professional skills. &lt;/p&gt;  &lt;p&gt;Trimmed noted from day 5:&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;10:00 Visitor pattern&lt;/strong&gt;     &lt;br /&gt;- Custom IRichList extending IList is better to use everywhere.     &lt;br /&gt;- Visitor Double Dispatch pattern - changing the behavior of visitor based on the type of the leaf (or its state/attribute)     &lt;br /&gt;- Visitor pattern can remove lots of redundant code (loops, etc)     &lt;br /&gt;- Visitor is concerned with a single item only, simplifies aggregate processing     &lt;br /&gt;- Visitor is statefull     &lt;br /&gt;- JP: Learn well Generics and IEnumerable&amp;lt;&amp;gt;     &lt;br /&gt;- methods instead of properties tp improve readability     &lt;br /&gt;- Composite visitor with commands (technique)     &lt;br /&gt;- &lt;a href=&quot;http://filehelpers.sourceforge.net/&quot;&gt;http://filehelpers.sourceforge.net/&lt;/a&gt;     &lt;br /&gt;- Interface Factoring - multiple interfaces and not a single fat one     &lt;br /&gt;- &amp;quot;Common ReSharper, keep up!&amp;quot; - JP     &lt;br /&gt;- Immutable objects play nicely in multi threaded environment (or use thread-aware proxies)     &lt;br /&gt;&lt;strong&gt;15:00      &lt;br /&gt;&lt;/strong&gt;- Generic mappers     &lt;br /&gt;&lt;strong&gt;16:20&lt;/strong&gt;     &lt;br /&gt;- Custom Container     &lt;br /&gt;- MbUnit allows to decorate test methods with an extended custom attributes to fake container and items in it     &lt;br /&gt;&lt;strong&gt;19:00 Hooking all together&lt;/strong&gt;     &lt;br /&gt;&lt;strong&gt;19:15 App Running&lt;/strong&gt;     &lt;br /&gt;- &amp;quot;Each time sharpen your sward&amp;quot; - JP     &lt;br /&gt;&lt;strong&gt;23:45 Topics&lt;/strong&gt;     &lt;br /&gt;- [v] Get rid of MVP     &lt;br /&gt;- [A0 ] Domain validationA0A0A0A0A0A0A0A0A0A0A0A0A0A0A0 &lt;br /&gt;- [A0 ] Mapping from datatables to DB     &lt;br /&gt;- [A0 ] Web service     &lt;br /&gt;- [A0 ] Smart client     &lt;br /&gt;- [A0 ] Role based security     &lt;br /&gt;- [A0 ] Units conversion     &lt;br /&gt;- [A0 ] Lazy load     &lt;br /&gt;- [v] Automated unit testing of UI (WatiN)     &lt;br /&gt;&lt;strong&gt;02:30 Done.&lt;/strong&gt;&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2007-11-10T09:26:17Z" PublishedUtc="2014-04-19T20:34:31.1706344Z" ModifiedUtc="2007-11-10T09:26:17Z" />
      <TagsPart Tags="" />
      <AutoroutePart Alias="nothing-but-net-calgary-2007-day-5" UseCustomPattern="false" />
      <TitlePart Title="Nothing But .NET, Calgary 2007 - Day 5" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=nothing-but-net-calgary-2007-day-4" Status="Published">
      <BodyPart Text="&lt;p&gt;'Almost' productive day - seeing how it works in reality is hilarious. TDD is not only allows testability,&amp;nbsp; but also to design better your code with regards to not 'what if', but 'what now'. Really powerful tool that would be great to have in my skills set. Script of the day:&lt;/p&gt;  &lt;p&gt;&lt;b&gt;10:00 Domain Model (Rich Domain)&lt;/b&gt;     &lt;br&gt;- Domain object is more than just properties, it's also behavior     &lt;br&gt;- 14 AA Points - &lt;a href=&quot;http://www.jpboodhoo.com/blog/GettingStartedLearningSomeNewDeveloperHabits.aspx&quot; target=&quot;_blank&quot; mce_href=&quot;http://www.jpboodhoo.com/blog/GettingStartedLearningSomeNewDeveloperHabits.aspx&quot;&gt;here&lt;/a&gt; or -&amp;gt; jpboodhoo.com -&amp;gt; search for &quot;Getting Started Learning Some new Developer Habits&quot;     &lt;br&gt;- R# -&amp;gt; Autocompletion -&amp;gt; Letters and Digits     &lt;br&gt;- DynamicMock&amp;lt;T&amp;gt; vs. CreateMock&amp;lt;T&amp;gt; (dynamic will always provide the default value when &quot;created&quot; mock has to be told everything)     &lt;br&gt;&lt;b&gt;11:15 Domain Driven Design      &lt;br&gt;&lt;/b&gt;- Thin service layer &amp;amp; Transaction Script () patterns     &lt;br&gt;- Use R#, don't accept naked Visual studio - naked it's really ugly.     &lt;br&gt;- TestDriven.Net     &lt;br&gt;- [Setup] is for the hard dependencies of the SUT (ie DynamicMock&amp;lt;T&amp;gt;)     &lt;br&gt;- Book: xUnit Testing Patterns     &lt;br&gt;- Department / Products: DB relationship is one to many, Domain Model is one to one (ie not Department.GetAllProducts(departmentId), but Catalog.GetAllProductsBelongingTo(departmentObject) )     &lt;br&gt;&lt;b&gt;14:15&lt;/b&gt;     &lt;br&gt;- Service Layer     &lt;br&gt;- interaction test can later involve into integration testing     &lt;br&gt;- REQUIREMENT: Important to understand the RhinoMock in order to use it and learn TDD     &lt;br&gt;- R# CTRL-Shift-E parse the exception from clipboard     &lt;br&gt;- Hard dependencies should be be dynamic ones and defines for the whole test class     &lt;br&gt;&lt;b&gt;16:10 Container&lt;/b&gt;     &lt;br&gt;- Principles that container helps to respect: DIP, OCP     &lt;br&gt;- Container (our) should be a static gateway that also an adapter to allow with variety of different containers     &lt;br&gt;- Concrete dependencies should be removed by using container to decouple from concrete implementation     &lt;br&gt;- pair-programming / TDD ping-pong     &lt;br&gt;&lt;b&gt;23:50&lt;/b&gt;     &lt;br&gt;- JP is &lt;u&gt;SO&lt;/u&gt; tired that reads for a minute a result of breaking test :)     &lt;br&gt;- Building rich domain model = building smarts with objects (example: ShoppihgCart with CartItem through Factory)     &lt;br&gt;&lt;b&gt;00:50&lt;/b&gt;     &lt;br&gt;Toasted...&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2007-11-09T17:12:00Z" PublishedUtc="2014-04-19T20:34:31.6393465Z" ModifiedUtc="2007-11-09T17:12:00Z" />
      <TagsPart Tags="" />
      <AutoroutePart Alias="nothing-but-net-calgary-2007-day-4" UseCustomPattern="false" />
      <TitlePart Title="Nothing But .NET, Calgary 2007 - Day 4" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=nothing-but-net-calgary-2007-day-3" Status="Published">
      <BodyPart Text="&lt;p&gt;They say &amp;quot;The more you know the less youA0 have to say&amp;quot;. Almost, my version is &amp;quot;The more you know the more you want to scream&amp;quot;. Why scream? Because you realize each time how much more you don't know. Well, it's a healthy process besides the fact that from a side it looks like a total mental disorder... No comments. Day 3 notes:&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;09:00&lt;/strong&gt;     &lt;br /&gt;- State testing initially only might be better that trying to apply both testing strategies (state and interaction)     &lt;br /&gt;- Developing Top-Down, not the Domain Model First     &lt;br /&gt;- Layers (horizontal, top down): UI, Presentation layer, Service layer, Domain/ORM     &lt;br /&gt;- Layers (vertical): Security, Logging, Utility     &lt;br /&gt;- UI pieces and stories     &lt;br /&gt;- DTOs and Domain Model are not pointing anything else (presentation, ORM, service, UI layers)     &lt;br /&gt;- DTOs allowing domain model and UI to be independent (UI does not dictate what model will be)     &lt;br /&gt;- Service layer is a (Application) Gateway and Facade     &lt;br /&gt;- Application startup is happening in Service layer     &lt;br /&gt;[Note:] Friday (9/11/2007) how to combine domain model business rules validations with client side     &lt;br /&gt;- Service layer should log exceptions     &lt;br /&gt;- Most of exceptions are in the mapping layer (DB constraints violations, timeouts, etc) and domain logic (business rules violation)     &lt;br /&gt;- The only time to catch an exception is to put the system in stable mode, otherwise let it go and show that a system has a bug that has to be fixed     &lt;br /&gt;- Auditing = Decorating the ORM components!     &lt;br /&gt;&lt;strong&gt;10:00 Story Document and Story Cards      &lt;br /&gt;&lt;/strong&gt;- Story cards are 'like' use cases, story document is a bit more detailed     &lt;br /&gt;- Stories are one page long at most and dedicated to the users and products through out the life of the project     &lt;br /&gt;- Stories are ALWAYS coming from the business users with a DEFINED/UNIFIES domain language     &lt;br /&gt;- purpose of story card is to shortly and precisely describe 3 things: WHO / WHAT / WHY     &lt;br /&gt;- you need to have the story card and a strong access to the user (story teller) to supply the details , where strong access to the domain specialist is phone or one on one     &lt;br /&gt;- BA would flush out more out of the story card     &lt;br /&gt;- Story Document + Story Cards + UI prototype mock (what user NEEDS not WANTS) = deliverable for the iteration that both devs and client sigh off (for the iteration 0)     &lt;br /&gt;- Story will disclose many of domain objects (nouns in the domain language) (highlight them when writing)     &lt;br /&gt;&amp;quot;Days of head-down developers are done!&amp;quot;     &lt;br /&gt;- Remind the customer of time impacts on deliverable when adding to the story - let the customer to decide if they want a feature or a down scale of the feature based on what they need and what they want to invest into it     &lt;br /&gt;- Assumptions are evil, especially with clients     &lt;br /&gt;- Front load iterations planning meetings     &lt;br /&gt;- Story card summarizes what story document says in form of who/what/why     &lt;br /&gt;scoop: next year there will be an agile PM course.     &lt;br /&gt;&lt;strong&gt;10:45 UI layer      &lt;br /&gt;&lt;/strong&gt;- Build box doesn't have IDE on it     &lt;br /&gt;- keep 3rd party assemblies in solution so you don't have to configure the environment to stat building (build) process     &lt;br /&gt;- Repeater is better than Grid, Alternate template is lame (?later)     &lt;br /&gt;- avoid postback as much as possible working with the plain html where possible     &lt;br /&gt;&lt;strong&gt;11:08 Presentation - Tests First - Pait Programming&lt;/strong&gt;     &lt;br /&gt;- presenter roles: decouple view from model and route messages     &lt;br /&gt;- Interfaces are not serializable, therefor POCO DTOs are the way to go     &lt;br /&gt;- If a name (of a class or interface) does not disclose the meaning and usage, rename it     &lt;br /&gt;- To mock a DTO that cant be instantiated - mark all as virtual     &lt;br /&gt;- R# CTRL-ALT-Space     &lt;br /&gt;- Pair programming - one is building the test, another one is implementing     &lt;br /&gt;- Reading a test in plain English goes bottom to top, from SUT to record stage     &lt;br /&gt;- Test names should present what they really do. Example why: to create a list for QA for testing, reflectively processing the list of test methods     &lt;br /&gt;- Concrete dependencies for tests are initialized in SetUp() and defined as memeber fields     &lt;br /&gt;[Note: not switching to Mac!]     &lt;br /&gt;- NULLs are evil - avoid passing NULLs around     &lt;br /&gt;- Don't only write the test, also try to read it in plain English putting yourself the SUT perspective (as you were the SUT)     &lt;br /&gt;- Interface = contract/blueprint/contract     &lt;br /&gt;- Debugging tests smells bad!     &lt;br /&gt;Q: JP, who is Richard Hurse?     &lt;br /&gt;- WatiN project for UI browser-in testing     &lt;br /&gt;- Interaction tests should be understood how to read in plain language and not as a pure code     &lt;br /&gt;&lt;strong&gt;13:40 Linking UI and Presenter&lt;/strong&gt;     &lt;br /&gt;- JP will build his whole site as an MVC project with MS MVC as an open source     &lt;br /&gt;Q: How to use DotTracer?     &lt;br /&gt;- .ASPX / .ASCX is a Template View patterns (classic asp was the same, but no support for separation of concerns)     &lt;br /&gt;- Let the view engine be responsible for rendering the template     &lt;br /&gt;Q: A page that requires more than one task/service AND how to not to couple between them but have cooperating with each other (event aggregator?)     &lt;br /&gt;- Spend 20 minutes on method visibility and 40 on customer feature to be implemented, and not vice versa     &lt;br /&gt;- A view without traces of Presenter --&amp;gt; presenter is actualy a Mediator pattern implementer     &lt;br /&gt;- For presenter, Task/service is not in place, so what we do is we create a private internal stub task/service class to fulfil presenter requirements and to be able to sign off. Stub class for servise/task will be eliminated asap.     &lt;br /&gt;- valueType.ToString(&amp;quot;bla bla 0&amp;quot;) - no need in curly brackets     &lt;br /&gt;- DTO allows Separation of concerns and SRP principles - a change in a DTO is not forcing a change in view nor presenter     &lt;br /&gt;- In an agile team the DBA has to take part in agile development and devs and DBA cooperate and resolve problems together &lt;/p&gt;  &lt;p&gt;[Sean] Compilation should not be indication of syntax error. It should be an indication of bad design. &lt;/p&gt;  &lt;p&gt;- ITransformer - a compositional solution to do the fluent interface (ie to perform the conversion of type)    &lt;br /&gt;- .NET 3.5 will allow fluent interface implementation with extension methods (example: Container.DataItem.To&amp;lt;Abc&amp;gt;.Prop)     &lt;br /&gt;&lt;strong&gt;19:30&lt;/strong&gt;     &lt;br /&gt;- Passive view - communication between view and presenter is done with events (enforces chattiness in both ways)     &lt;br /&gt;- &amp;gt;&amp;gt;&amp;gt;Supervising controller - logic pushed to the presenter (controller), ui related stuff stay in the view     &lt;br /&gt;- ASP.NET is a more complex abstraction of things that were less complex in the beginning     &lt;br /&gt;- Presentation model     &lt;br /&gt;- J. Miller &amp;quot;The most important 'ility' is maintainability&amp;quot;.     &lt;br /&gt;- You have to bring the lowest common level developer to the level to understand agile and TDD or it wont work at all     &lt;br /&gt;- Dispair.com     &lt;br /&gt;&lt;strong&gt;21:40&lt;/strong&gt;     &lt;br /&gt;- Building network - linking between blogs and sources     &lt;br /&gt;&lt;strong&gt;22:30&lt;/strong&gt;     &lt;br /&gt;- Submitting data from the view to presenter     &lt;br /&gt;- R# CTRL-Shift-E - show stack tree for the exception text in the clipboard     &lt;br /&gt;&lt;strong&gt;23:10      &lt;br /&gt;&lt;/strong&gt;- Duplicate code smells, including in tests - strive to eliminate it completly     &lt;br /&gt;&lt;strong&gt;23:30&lt;/strong&gt;     &lt;br /&gt;- Design by Contract     &lt;br /&gt;- Pushing data from UI to Presenter - presenter is available for the view - keep a reference to it     &lt;br /&gt;- Exploring the beauty of discovering controls in a templated container in .NET - not a simple task at 00:11. Nope.     &lt;br /&gt;- Done exploring (00:16) Personal conclusion: no place for political correctness in a team, not in agile team for sure.     &lt;br /&gt;- 5 minute break     &lt;br /&gt;&lt;strong&gt;00:30&lt;/strong&gt;     &lt;br /&gt;- Refactoring Patterns     &lt;br /&gt;&lt;strong&gt;01:01&lt;/strong&gt;     &lt;br /&gt;- Lost it... &amp;quot;What are we talking about?&amp;quot; - Chicken Little     &lt;br /&gt;- Mapper on Repeater Item     &lt;br /&gt;- &amp;quot;What if&amp;quot; vs. &amp;quot;now what&amp;quot; concept; what if == premature generalization     &lt;br /&gt;&lt;strong&gt;01:17 EOM. Hibernating...&lt;/strong&gt;&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;05:30 Hibernation failed. System is shutting down for 3 hours of sleep.&lt;/strong&gt; (Talks about various subjects)&lt;/p&gt;  &lt;p&gt;A0&lt;/p&gt;  &lt;p&gt;PS: I am so glad I got on this train, and met all the interesting people. I hope to ride this train for as long and as far as my capacities will allow me.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2007-11-08T21:07:23Z" PublishedUtc="2014-04-19T20:34:31.9518299Z" ModifiedUtc="2007-11-08T21:07:23Z" />
      <TagsPart Tags="" />
      <AutoroutePart Alias="nothing-but-net-calgary-2007-day-3" UseCustomPattern="false" />
      <TitlePart Title="Nothing But .NET, Calgary 2007 - Day 3" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=nothing-but-net-calgary-2007-day-2" Status="Published">
      <BodyPart Text="&lt;p&gt;The second day was as good as the first, with a tiny exception for configuration of CruiseControl.NET - IMO, technique is valuable, not the technical details. Specification technique was bright, logging exercise was a healthy one. Learned to differentiate between state testing andA0 interaction testing, but I am not completely set on it. Here are the notes taken through out the day 2:&lt;/p&gt;  &lt;p&gt;09:00   &lt;br /&gt;- &lt;a href=&quot;http://codekata.pragprog.com&quot;&gt;http://codekata.pragprog.com&lt;/a&gt;    &lt;br /&gt;- Build process and not compilation in vs.net: speed; logging; testing;    &lt;br /&gt;- Spike new stuff, do not have a deep understanding, until you have to have it in your project    &lt;br /&gt;- &amp;quot;Use the tool knowing you can produce the same result without the tool.&amp;quot; - J. Nielson    &lt;br /&gt;- &amp;quot;Speaking and writting is not an elite club - be honest and be good in what you do.&amp;quot; - JP    &lt;br /&gt;- Plan success for yourself for a short/long periods of time.    &lt;br /&gt;- It doesn't matter what you do as you do it the best.    &lt;br /&gt;- IEnumerable&amp;lt;T&amp;gt; is a gateway to get an Iterator&amp;lt;T&amp;gt;    &lt;br /&gt;10:00    &lt;br /&gt;- &amp;quot;Introduce Local Extension&amp;quot; refactoring technique - exampe: IRichList and RichList    &lt;br /&gt;- Refactoring book - re-read    &lt;br /&gt;- Decorator has exactly the same interface as the object it decorates (intent: add functionality without changing the public interface)    &lt;br /&gt;- Client - dont care about what Decorator does. With &amp;quot;Local Extension&amp;quot; you care about implementation    &lt;br /&gt;- Extension methods in .Net 3.5 will introduce a form of a code reuse that can quickly become a code abuse    &lt;br /&gt;- IComparer&amp;lt;T&amp;gt; --&amp;gt; Strategy implementation for comparng in .Net    &lt;br /&gt;- R# CTRL-N *Pub will find all classes with &amp;quot;Pub&amp;quot; in it    &lt;br /&gt;- one ONE 1 return per method - old and good school    &lt;br /&gt;11:00    &lt;br /&gt;- Proxy = secured composing mechanism    &lt;br /&gt;- Use the best tools for the right tasks (me:)    &lt;br /&gt;- Aggregate - boundry of protection (library and it's books)    &lt;br /&gt;- Composite - complex structure - the root and the leaf are of the same interface and the difference is that some operations on leafs might not do what the do on root or oppositeA0 (with Iterators and Visitors, with Command)    &lt;br /&gt;- Think Domain Driven, not Data Driven    &lt;br /&gt;11:30 Querying    &lt;br /&gt;[Q] How to do TDD with WebControls?    &lt;br /&gt;- function that return function -&amp;gt; return a new delegate    &lt;br /&gt;11:50 Specifications    &lt;br /&gt;&lt;em&gt;// TODO: implement ISpecification for IEntityCollection&lt;/em&gt;    &lt;br /&gt;- Specifications create a tree of objects, that can be translated into a query for DB or any other repository    &lt;br /&gt;- LINQ: abstruction the details of how the provider takes the expression and converts into query    &lt;br /&gt;scoop: &amp;quot;Nothing But *&amp;quot; sessions will be coming soon with different well known people    &lt;br /&gt;&lt;strong&gt;13:25     &lt;br /&gt;&lt;/strong&gt;- FW harvesting: design solution for the client and pull out pieces for the FW to be reused    &lt;br /&gt;- FW should be harvested from the real life projects and not built in isolation     &lt;br /&gt;&lt;strong&gt;14:00 DB     &lt;br /&gt;&lt;/strong&gt;- Developers should have local DB to speed development and not to delay the rest of the team while testing/developing    &lt;br /&gt;- File Unlocker - &lt;a href=&quot;http://ccollomb.free.fr/unlocker/&quot;&gt;http://ccollomb.free.fr/unlocker/&lt;/a&gt;    &lt;br /&gt;- Windows Task Switcher - &lt;a href=&quot;http://ccollomb.free.fr/unlocker/&quot;&gt;http://ccollomb.free.fr/unlocker/&lt;/a&gt;    &lt;br /&gt;- MyUninstaller utility - keyboard friendly    &lt;br /&gt;- Console - tabbed console    &lt;br /&gt;- QueryExpress - sql server management studio alternative    &lt;br /&gt;A joke that CJ told: &amp;quot;I had a problem i wanted to solve with regex. Now I have 2 problems to solve.&amp;quot;    &lt;br /&gt;&lt;strong&gt;15:37 Continuous Integration (WebApp)     &lt;br /&gt;&lt;/strong&gt;- Test has A)Unit (test) B)Integration (test)    &lt;br /&gt;- Aspect# (Castle, AOP)    &lt;br /&gt;&lt;strong&gt;15:50 Mocked Testing&lt;/strong&gt;    &lt;br /&gt;- Mocked testing is an interaction testing    &lt;br /&gt;- RhinoMocks framework    &lt;br /&gt;- using (mockery.Record()){}    &lt;br /&gt;- using (mockery.Playback()){}    &lt;br /&gt;&lt;strong&gt;17:30 Testing&lt;/strong&gt;    &lt;br /&gt;- State Base vs. Interaction Based (mocked) testing    &lt;br /&gt;- Component partitioning - separating interfaces from implementors for separate packaging    &lt;br /&gt;- examples: Log class is a static gateway    &lt;br /&gt;&lt;strong&gt;19:00 CruiseControl.NET&lt;/strong&gt;    &lt;br /&gt;- a front controller implementation that allows dashboard configuration through xsl files    &lt;br /&gt;- CI = Compilation, Unit testing, Code Coverage, FxCop, Versioning, Reporting, Publishing    &lt;br /&gt;- a role of a build-manager cycles through the iteration to spread the knowledge and know how to do that    &lt;br /&gt;- development cycle should be short (around 15 minutes) so when you commit the changes the amount of collisions when merging would be minimal    &lt;br /&gt;&lt;strong&gt;21:45 --- END OF ITERATION 0 ---A0 &lt;br /&gt;22:30 EOM&lt;/strong&gt;&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2007-11-07T16:01:06Z" PublishedUtc="2014-04-19T20:34:32.2955753Z" ModifiedUtc="2007-11-07T16:01:06Z" />
      <TagsPart Tags=".NET,Personal" />
      <AutoroutePart Alias="nothing-but-net-calgary-2007-day-2" UseCustomPattern="false" />
      <TitlePart Title="Nothing But .NET, Calgary 2007 - Day 2" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=a-moment-thought" Status="Published">
      <BodyPart Text="&lt;p&gt;There's a project &amp;quot;A notebook per child&amp;quot;. I think we should extend that also to &amp;quot;A R# licence per developer&amp;quot;.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2007-11-06T17:10:24Z" PublishedUtc="2014-04-19T20:34:32.6080715Z" ModifiedUtc="2007-11-06T17:10:24Z" />
      <TagsPart Tags="" />
      <AutoroutePart Alias="a-moment-thought" UseCustomPattern="false" />
      <TitlePart Title="A Moment Thought" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=motivation-injection" Status="Published">
      <BodyPart Text="&lt;p&gt;While talking to JP, I have mentioned that everyone needs to have once in a while what I call a 'motivation injection'. Being a software developer, this 'injection' means a lot. It gives you the drive to lift yourself to the next level by just realizing there's a next level. So when the last time you had you shot? :)&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2007-11-06T16:18:38Z" PublishedUtc="2014-04-19T20:34:33.1147236Z" ModifiedUtc="2007-11-06T16:18:38Z" />
      <TagsPart Tags="Personal" />
      <AutoroutePart Alias="motivation-injection" UseCustomPattern="false" />
      <TitlePart Title="Motivation Injection" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=nothing-but-net-calgary-2007-day-1" Status="Published">
      <BodyPart Text="&lt;p&gt;I had/will not have time over the week of the training course to sort out all the notes I am taking while participating at the session. Saying that, I want to make it clear that these are uncensored&amp;nbsp; thoughts of mine at a crazy pace of the course with tones of new material flying around between 0800 and 2400 (with a few little breaks in between).&lt;/p&gt;  &lt;p&gt;One more thing I had to mention - feeling like a fish in water is a&amp;nbsp; great feeling. What I'm down to is that finally it feels good to be around smart and intelligent people that are striving to get the knowledge as much as you are if not even more.&lt;/p&gt;  &lt;p&gt;So the notes from day 01 (text format, typed in Notepad2):&lt;/p&gt;  &lt;p&gt;&lt;b&gt;0830      &lt;br&gt;&lt;/b&gt;- slickrun to speed up things (there's something for mac OS as well)     &lt;br&gt;- no mouse     &lt;br&gt;- do not rely on debugger.. rely on logs and tests     &lt;br&gt;[v] get the plan for the week from JP     &lt;br&gt;- web dev. is a lot context switching (JS, CSS, Markup, etc)     &lt;br&gt;JP IP 192.168.100.15     &lt;br&gt;- criticize everything and actively question it     &lt;br&gt;- books: head first design patterns; head first A &amp;amp; D; applying UML and patterns; clr via c#; Code complete;&amp;nbsp; Pragmatic programmer(!!!); DDD - tackling complexity by Eril Evans; Working effectively with legacy code; Agile principles, patterns and designs in C#;&amp;nbsp; Core J2EE patterns; NHibernate in Action (!); xUnit testing pattern (!); Roy Osherovs book;     &lt;br&gt;- Boodhoo Listmania!;     &lt;br&gt;- MIT open courseware (==&amp;gt; change; real oop; 6months;)     &lt;br&gt;- JPs wishlist at Amazon     &lt;br&gt;- Subversion software (teams up to 1k)     &lt;br&gt;&lt;i&gt;[xxxxxxxx - r# lisence or amazon?]      &lt;br&gt;&lt;/i&gt;[bring pain killers...]     &lt;br&gt;- svn scheme : UMATC = Update Merge Add Test Commit     &lt;br&gt;- 1st project: C:\Development\Course\labexercises\SeanF\product\test\xunit - wow     &lt;br&gt;[bring more pain killers...]     &lt;br&gt;- TestDriven.Net -&amp;gt; the investment is worth (?! James Kovacs = JC)     &lt;br&gt;- Visual SVN --&amp;gt; SVN for vs.net     &lt;br&gt;CTRL-Shift-A --&amp;gt; add a new item in vs.net     &lt;br&gt;- coding standards doc should not be long - what should matter is how to solve problems and raise the quality of code     &lt;br&gt;CTRL-minus --&amp;gt; run macro to rename test method     &lt;br&gt;ALT-R-N-I (R# new interface)     &lt;br&gt;CTRL-Space (auto completion)     &lt;br&gt;CTRL-Shift-space (smart auto completion)     &lt;br&gt;- Logical assertion - keep assertions low     &lt;br&gt;- MbUnit can do parameterized test methods (combined with attributes Row and RowTest)     &lt;br&gt;- unit test should not change the state of the system - each test is a 'clean slate' (JP)     &lt;br&gt;- SRP principle     &lt;br&gt;- logic and assertions (parameters checks) should not be mixed -&amp;gt; pull out into assertion class (SRP)     &lt;br&gt;&lt;b&gt;1245-1330 lunch      &lt;br&gt;&lt;/b&gt;- R# has a NAnt support     &lt;br&gt;- Final Builder - a commercial tool for deployment to abstract complexity     &lt;br&gt;- &quot;files excluded from compilation&quot; - dangerous - requires visual judgment from a developer - potentially bugs     &lt;br&gt;- &lt;a href=&quot;http://nant.sourceforge.net&quot; mce_href=&quot;http://nant.sourceforge.net&quot;&gt;http://nant.sourceforge.net&lt;/a&gt;     &lt;br&gt;- Tasks are executable units     &lt;br&gt;- &lt;a href=&quot;http://www.visualsvn.com/&quot; mce_href=&quot;http://www.visualsvn.com/&quot;&gt;http://www.visualsvn.com/&lt;/a&gt;     &lt;br&gt;- SVN can point at external repository (like HTTP)     &lt;br&gt;- book: Pragmatic Subversion (for SVN)     &lt;br&gt;- R# CTRL-Shift-N (search filenames)     &lt;br&gt;- &amp;lt;property name=&quot;xunit.console.args&quot; value=&quot;${labExercises.output} /sr /rt:Text&quot; /&amp;gt; &amp;lt;!--show report; report type--&amp;gt;     &lt;br&gt;&lt;b&gt;1515 Events/Delegates&lt;/b&gt;     &lt;br&gt;- R# CTRL-ALT-Space (all matching classes to partially typed name)     &lt;br&gt;- Test should contain the behavior - ie if i test the click, don't create an event handler, but an anonymous delegate     &lt;br&gt;- Anonymous delegates should strive to 1-line only     &lt;br&gt;- private EventHandler&amp;lt;BreakDownEventArgs&amp;gt; _handler; ==&amp;gt; private EventHandler&amp;lt;BreakDownEventArgs&amp;gt; _handler = delegate{}; // NON empty handler     &lt;br&gt;- EventHandler&amp;lt;EventArgs&amp;lt;MyDto&amp;gt;&amp;gt; where EventArgs&amp;lt;T&amp;gt; is a custom generic class along with the MyDto class     &lt;br&gt;- EventHandlerList (CLS class) with AddHandler and RemoveHandler     &lt;br&gt;- Implicit interface implementation --&amp;gt; have to cast to the interface explicitly     &lt;br&gt;- ISSUE: .Net events are introducing coupling...     &lt;br&gt;&lt;b&gt;1645      &lt;br&gt;&lt;/b&gt;- microsoft.msdn.ca/ignite --&amp;gt;JC on tools     &lt;br&gt;- scoop: R# will have its own solution explorer     &lt;br&gt;- enums are bad for internalization =&amp;gt; replace by Value Object pattern (class)     --&amp;gt; PayloadKeys example&lt;br&gt;- SUT (System/subject under testing) never has a member field     &lt;br&gt;&lt;b&gt;1730&lt;/b&gt;     &lt;br&gt;- Const is published with the using code, and not the class     &lt;br&gt;- Subscriber &amp;amp; Publisher attributes are published in a seporate assembly (interface assembly) and given to the 3rd party     &lt;br&gt;==&amp;gt; Q: how to load plugging with asp.net??? A: observer     &lt;br&gt;- R# -&amp;gt; LOOP snippet for for statement     &lt;br&gt;- IEnumerable&amp;lt;T&amp;gt; --&amp;gt; grand parent of all collections (typed)     &lt;br&gt;- &quot;Tell Dont Ask&quot; principle (collection.Property.Count vs. collection.IsEmpty)     &lt;br&gt;&lt;b&gt;2130&lt;/b&gt; [Need pain killer... NOW!]     &lt;br&gt;- Compiles != No errors =&amp;gt; to resolve TDD &amp;amp; CI     &lt;br&gt;- Structs impose design limitations     &lt;br&gt;- Termin: &quot;Necessary Evil&quot;     &lt;br&gt;- ReferenceEquals() method - very fast     &lt;br&gt;- method length != number of responsibilities     &lt;br&gt;&lt;b&gt;2215      &lt;br&gt;&lt;/b&gt;==&amp;gt; Q: issues with method chaining (case when int, int passed into double, double with returned type string... A: use classes and not static utility methods, separate concerns     &lt;br&gt;- R# --&amp;gt; when implementing interface, can DELEGATE to parameter passed in to do automated forwarding     &lt;br&gt;- Decorator forwards to decorated object then adds functionality / Proxy can choose if to do the forwarding or not     &lt;br&gt;&lt;b&gt;2250      &lt;br&gt;&lt;/b&gt;- Suffixing with Pattern name should only be on Factories     &lt;br&gt;- IEqualityComparer&amp;lt;T&amp;gt; + Decorator from an IList to IRichList     &lt;br&gt;- decorator for comparer     &lt;br&gt;- Comparison&amp;lt;T&amp;gt; ==&amp;gt; adaptor pattern     &lt;br&gt;&lt;b&gt;2400 (EOM)&lt;/b&gt;&lt;/p&gt;&lt;hints id=&quot;hah_hints&quot;&gt;&lt;/hints&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2007-11-06T08:12:00Z" PublishedUtc="2014-04-19T20:34:33.6624937Z" ModifiedUtc="2007-11-06T08:12:00Z" />
      <TagsPart Tags="" />
      <AutoroutePart Alias="nothing-but-net-calgary-2007-day-1" UseCustomPattern="false" />
      <TitlePart Title="Nothing But .NET, Calgary 2007 - Day 1" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=getting-ready-for-nothing-but-net" Status="Published">
      <BodyPart Text="&lt;p&gt;JP has instructed the group to make certain things before the training course will start. So what is required to do the job?&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;Visual Studio .NET 2005 Professional&lt;/li&gt;    &lt;li&gt;SQL Server 2005 Developer Edition /SQL Server Express&lt;/li&gt;    &lt;li&gt;ReSharper 3&lt;/li&gt;    &lt;li&gt;&lt;a href=&quot;http://tortoisesvn.tigris.org/&quot; target=&quot;_blank&quot;&gt;TortoiseSVN&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;TDD should cover things like:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;Continuous Integration with NAnt and CruiseControl .Net&lt;/li&gt;    &lt;li&gt;xUnit framework --&amp;gt; MbUnit&lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;I am looking towards a very productive work. Things that according to JP &amp;quot;have made sneak appearances&amp;quot; in previous training (and I hope we get there):&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;Log4Net&lt;/li&gt;    &lt;li&gt;Castle Windsor&lt;/li&gt;    &lt;li&gt;Castle Monorail&lt;/li&gt;    &lt;li&gt;NHibernate&lt;/li&gt; &lt;/ul&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2007-11-03T06:47:06Z" PublishedUtc="2014-04-19T20:34:33.9584624Z" ModifiedUtc="2007-11-03T06:47:06Z" />
      <TagsPart Tags=".NET" />
      <AutoroutePart Alias="getting-ready-for-nothing-but-net" UseCustomPattern="false" />
      <TitlePart Title="Getting Ready for nothing but .net" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=nothing-but-net-calgary-alberta-canada" Status="Published">
      <BodyPart Text="&lt;p&gt;Counting days to start the session. &lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2007-10-30T17:55:05Z" PublishedUtc="2014-04-19T20:34:34.4897058Z" ModifiedUtc="2007-10-30T17:55:05Z" />
      <TagsPart Tags=".NET" />
      <AutoroutePart Alias="nothing-but-net-calgary-alberta-canada" UseCustomPattern="false" />
      <TitlePart Title="Nothing But .NET Calgary, Alberta, Canada" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=assembly-fun-in-asp-net" Status="Published">
      <BodyPart Text="&lt;p&gt;I used to be a big fan of Assembly (x86) in the past when doing graphics for the ancient 320x200x256 and later when lecturing about 80x86 to practical engineers. These days I don't do that anymore, but I think knowing the basics does make sense.&lt;/p&gt; &lt;p&gt;This project is nice - it allows to run x86 code in ASP.NET.&lt;/p&gt; &lt;p&gt;&amp;nbsp;&lt;a title=&quot;http://www.viksoe.dk/code/asmil.htm&quot; href=&quot;http://www.viksoe.dk/code/asmil.htm&quot; target=&quot;_blank&quot; atomicselection=&quot;true&quot;&gt;&lt;img src=&quot;http://www.viksoe.dk/code/screenshots/asmil.gif&quot; border=&quot;0&quot;&gt;&lt;/a&gt;&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2007-10-29T15:41:00Z" PublishedUtc="2014-04-19T20:34:34.7397023Z" ModifiedUtc="2007-10-29T15:41:00Z" />
      <TagsPart Tags=".NET,VS.NET" />
      <AutoroutePart Alias="assembly-fun-in-asp-net" UseCustomPattern="false" />
      <TitlePart Title="Assembly Fun in ASP.NET" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=realdevelopment-07-real-disaster" Status="Published">
      <BodyPart Text="&lt;p&gt;Let me first clarify - John Bristowe is a great speaker, but what he was presenting - shame on &lt;a href=&quot;http://msdn.microsoft.com/canada/realdev/&quot; mce_href=&quot;http://msdn.microsoft.com/canada/realdev/&quot; target=&quot;_blank&quot;&gt;Microsoft Canada&lt;/a&gt;.The topics promised so much, the *real* thing was so disappointing. A few samples:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Subject: browser support / JavaScript issues. Sample: document.&lt;b&gt;&lt;u&gt;all&lt;/u&gt;&lt;/b&gt;.placeholder --&amp;gt; common, that's the cross-browser?&lt;/li&gt; &lt;li&gt;Subject: XHTML and strict mode --&amp;gt; What about how to make VS.NET digest it?...&lt;/li&gt; &lt;li&gt;Bunch of tools that should be presented at a webcast, not a national tour&lt;/li&gt;&lt;li&gt;Diagnostics.Debug to trace issues --&amp;gt; what about Diagnostics.Trace for the real tracing? Production?&lt;br&gt;&lt;/li&gt; &lt;li&gt;More...&lt;/li&gt;&lt;/ul&gt; &lt;p&gt;Now the question - is this the REAL development for web community? Am I missing something? Felt like attending a show for kids, and not developers. No wonder Java community folks are looking at us as armatures. Why it has to take an 'underground' meeting like ALT.NET to address the REAL development? Time to mature for ASP.NET community.&lt;/p&gt; &lt;p&gt;PS: Yes I am furious because I want to move forward and instead get entertained by 'drag-n-drop', with a bunch of developers that are excited about fancy UI showing no idea to go deeper than that.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2007-10-24T04:00:00Z" PublishedUtc="2014-04-19T20:34:34.9584496Z" ModifiedUtc="2007-10-24T04:00:00Z" />
      <TagsPart Tags=".NET,Personal" />
      <AutoroutePart Alias="realdevelopment-07-real-disaster" UseCustomPattern="false" />
      <TitlePart Title="_realDEVELOPMENT_07 - Real Disaster" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=webresource.axd-and-webapp-project" Status="Published">
      <BodyPart Text="&lt;p&gt;This is weird. An assembly with web controls and embedded resources was working fine in WebSite project but not in WebApp project. The request is returned with OK response (200), but absolutely empty. Will post solution once find it :)&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2007-10-20T01:58:00Z" PublishedUtc="2014-04-19T20:34:35.4591051Z" ModifiedUtc="2007-10-20T01:58:00Z" />
      <TagsPart Tags=".NET" />
      <AutoroutePart Alias="webresource.axd-and-webapp-project" UseCustomPattern="false" />
      <TitlePart Title="WebResource.axd and WebApp Project" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=resharper" Status="Published">
      <BodyPart Text="&lt;p&gt;Today I'm happy to be a team leader. The reason - I managed to convince the management to get ReSharper for all our developers. I'm more than convinced that developers will find it more than useful. The problem is where to send them to have the best and quickest tutorials of the most useful features. If you have links and don't mind to share - grate.&lt;/p&gt; &lt;p&gt;Has anyone tried to write plugins for R#?&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2007-10-20T01:58:00Z" PublishedUtc="2014-04-19T20:34:35.7084688Z" ModifiedUtc="2007-10-20T01:58:00Z" />
      <TagsPart Tags="VS.NET" />
      <AutoroutePart Alias="resharper" UseCustomPattern="false" />
      <TitlePart Title="ReSharper" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=poeaa" Status="Published">
      <BodyPart Text="&lt;p&gt;One of the books from my &lt;a href=&quot;http://amazon.com/gp/registry/wishlist/2J45ANE21AADN/ref=cm_wl_rlist_go/102-3703351-4545710&quot; target=&quot;_blank&quot;&gt;reading&lt;/a&gt; &lt;a href=&quot;http://amazon.com/gp/registry/wishlist/3C19BBVB54L81/ref=cm_wl_rlist_go/102-3703351-4545710&quot; target=&quot;_blank&quot;&gt;wish list&lt;/a&gt; has finally made it - &lt;a href=&quot;http://www.amazon.com/gp/product/0321127420/ref=wl_it_dp/102-3703351-4545710?ie=UTF8&amp;amp;coliid=I3S9Q0A8RJJE2K&amp;amp;colid=2J45ANE21AADN&quot;&gt;Patterns of Enterprise Application Architecture&lt;/a&gt;&amp;nbsp;by Marin Fowler.&amp;nbsp;Interesting reading so far. The book was advised by JP Boodhoo. I'd love to hear&amp;nbsp;other good books recommendations with preferably less Coffee examples :)&lt;/p&gt;&lt;img alt=&quot;&quot; src=&quot;http://ecx.images-amazon.com/images/I/11NGZAPF46L.jpg&quot;&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2007-10-18T17:35:50Z" PublishedUtc="2014-04-19T20:34:36.3803069Z" ModifiedUtc="2007-10-18T17:35:50Z" />
      <TagsPart Tags="Books" />
      <AutoroutePart Alias="poeaa" UseCustomPattern="false" />
      <TitlePart Title="PoEAA" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=microsoft-mvc-framework" Status="Published">
      <BodyPart Text="&lt;p&gt;Alt.Net has definitely has generated the hype and excitement (well, at least for me). I heard in ScottGu's lecture thing&amp;nbsp;I wanted to hear for quite long:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Front Controller implemented&lt;/li&gt; &lt;ul&gt; &lt;li&gt;Requests&amp;nbsp;are routed to Controllers&lt;/li&gt;&lt;/ul&gt; &lt;li&gt;Interface based request/response and the WHOLE framework - love it!&lt;/li&gt; &lt;li&gt;Pluggable (Windsor, Spring)&lt;/li&gt; &lt;li&gt;Testability and mocking baked in (NUnit, MbUnit, etc)&lt;/li&gt; &lt;li&gt;Seems like the most of Design Principles were considered&lt;/li&gt; &lt;li&gt;URL flexibility -&amp;nbsp;mapping to controller with a friendly external names&lt;/li&gt; &lt;ul&gt; &lt;li&gt;Tokenized string (!!! Tokens - later about it)&lt;/li&gt;&lt;/ul&gt; &lt;li&gt;Controllers, Models, and Views are organized in folder structure (I can hear Glen saying &quot;Yes!&quot;)&lt;/li&gt;&lt;/ul&gt; &lt;p&gt;Highly recommended to watch the &lt;a title=&quot;ScottGu on MS MVC framework&quot; href=&quot;http://www.hanselman.com/silverlight/ScottGuAtAltnetConf&quot; target=&quot;_blank&quot;&gt;video&lt;/a&gt;.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2007-10-09T12:50:37Z" PublishedUtc="2014-04-19T20:34:37.0990464Z" ModifiedUtc="2007-10-09T12:50:37Z" />
      <TagsPart Tags="" />
      <AutoroutePart Alias="microsoft-mvc-framework" UseCustomPattern="false" />
      <TitlePart Title="Microsoft MVC Framework" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=web-config-gotcha" Status="Published">
      <BodyPart Text="&lt;P&gt;I haven't paid attention to the space&amp;nbsp;in the namespace attribute value and had to spin my&amp;nbsp;wills till found it:&lt;/P&gt;&lt;PRE class=code&gt;&lt;SPAN style=&quot;COLOR: rgb(0,0,255)&quot;&gt;&amp;lt;&lt;/SPAN&gt;&lt;SPAN style=&quot;COLOR: rgb(163,21,21)&quot;&gt;pages&lt;/SPAN&gt;&lt;SPAN style=&quot;COLOR: rgb(0,0,255)&quot;&gt; &lt;/SPAN&gt;&lt;SPAN style=&quot;COLOR: rgb(255,0,0)&quot;&gt;maintainScrollPositionOnPostBack&lt;/SPAN&gt;&lt;SPAN style=&quot;COLOR: rgb(0,0,255)&quot;&gt;=&lt;/SPAN&gt;&quot;&lt;SPAN style=&quot;COLOR: rgb(0,0,255)&quot;&gt;true&lt;/SPAN&gt;&quot;&lt;SPAN style=&quot;COLOR: rgb(0,0,255)&quot;&gt;&amp;gt;&#xA;&lt;/SPAN&gt;&lt;SPAN style=&quot;COLOR: rgb(0,0,255)&quot;&gt;  &amp;lt;&lt;/SPAN&gt;&lt;SPAN style=&quot;COLOR: rgb(163,21,21)&quot;&gt;controls&lt;/SPAN&gt;&lt;SPAN style=&quot;COLOR: rgb(0,0,255)&quot;&gt;&amp;gt;&#xA;    &amp;lt;&lt;/SPAN&gt;&lt;SPAN style=&quot;COLOR: rgb(163,21,21)&quot;&gt;add&lt;/SPAN&gt;&lt;SPAN style=&quot;COLOR: rgb(0,0,255)&quot;&gt; &lt;/SPAN&gt;&lt;SPAN style=&quot;COLOR: rgb(255,0,0)&quot;&gt;tagPrefix&lt;/SPAN&gt;&lt;SPAN style=&quot;COLOR: rgb(0,0,255)&quot;&gt;=&lt;/SPAN&gt;&quot;&lt;SPAN style=&quot;COLOR: rgb(0,0,255)&quot;&gt;Tempo&lt;/SPAN&gt;&quot;&lt;SPAN style=&quot;COLOR: rgb(0,0,255)&quot;&gt; &lt;/SPAN&gt;&lt;SPAN style=&quot;COLOR: rgb(255,0,0)&quot;&gt;assembly&lt;/SPAN&gt;&lt;SPAN style=&quot;COLOR: rgb(0,0,255)&quot;&gt;=&lt;/SPAN&gt;&quot;&lt;SPAN style=&quot;COLOR: rgb(0,0,255)&quot;&gt;Tempo.Web.3.0.1&lt;/SPAN&gt;&quot;&lt;SPAN style=&quot;COLOR: rgb(0,0,255)&quot;&gt; &lt;/SPAN&gt;&lt;SPAN style=&quot;COLOR: rgb(255,0,0)&quot;&gt;&lt;BR&gt;            namespace&lt;/SPAN&gt;&lt;SPAN style=&quot;COLOR: rgb(0,0,255)&quot;&gt;=&lt;/SPAN&gt;&quot;&lt;SPAN style=&quot;COLOR: rgb(0,0,255)&quot;&gt;Tempo.Web.UI.WebControls &lt;/SPAN&gt;&quot;&lt;SPAN style=&quot;COLOR: rgb(0,0,255)&quot;&gt;/&amp;gt;&lt;/SPAN&gt;&lt;/PRE&gt;&#xA;&lt;P&gt;Moral - be accurate with web.config&lt;/P&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2007-10-08T15:37:00Z" PublishedUtc="2014-04-19T20:34:37.4115448Z" ModifiedUtc="2007-10-08T15:37:00Z" />
      <TagsPart Tags="VS.NET" />
      <AutoroutePart Alias="web-config-gotcha" UseCustomPattern="false" />
      <TitlePart Title="Web.config gotcha" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=hello-weblogs-asp-net" Status="Published">
      <BodyPart Text="&lt;div&gt;This is the 1st post on this site. My &lt;a href=&quot;http://seanfeldman.spaces.live.com/&quot; target=&quot;_blank&quot;&gt;MSN Blog&lt;/a&gt;&amp;nbsp;will be updated, but this is going to be the primarily one.&amp;nbsp;&amp;nbsp;&lt;/div&gt; &lt;div&gt;I am interested in posting to weblogs.asp.net the whole text, and just a preview to the old MSN blog - anyone knows how to do it from Windows Live Writer?&lt;/div&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2007-10-01T22:35:42Z" PublishedUtc="2014-04-19T20:34:37.692802Z" ModifiedUtc="2007-10-01T22:35:42Z" />
      <TagsPart Tags="Personal" />
      <AutoroutePart Alias="hello-weblogs-asp-net" UseCustomPattern="false" />
      <TitlePart Title="Hello weblogs.asp.net" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=windows-phone-8-1-new-life-for-my-old-nokia-920" Status="Published">
      <BodyPart Text="&lt;p&gt;If every future 0.1 update will be like this, I don’t dare to imagine what 1.0 update will be like. So far it was a very pleasant experience. In the past updates where more of a roller-coaster: you expected a lot, got some of that, and eventually found that there’s still a lot that was missing. For the first time that I have windows phone an update contained more than I have expected to see.&lt;/p&gt; &lt;p&gt;One thing that has drastically been improved is main screen. Bellow is the transformation I went through. Ironically, I now have more screen real estate than items to put on it :)&lt;/p&gt; &lt;table cellspacing=&quot;0&quot; cellpadding=&quot;2&quot; width=&quot;400&quot; border=&quot;0&quot;&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td valign=&quot;top&quot; width=&quot;100&quot;&gt; &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/wp_ss_20140419_0002_1BA77937.jpg&quot;&gt;&lt;img title=&quot;wp_ss_20140419_0002&quot; style=&quot;border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px&quot; border=&quot;0&quot; alt=&quot;wp_ss_20140419_0002&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/wp_ss_20140419_0002_thumb_61BAC6FB.jpg&quot; width=&quot;288&quot; height=&quot;480&quot;&gt;&lt;/a&gt;&amp;nbsp; &lt;/p&gt;&lt;/td&gt; &lt;td valign=&quot;top&quot; width=&quot;100&quot;&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/wp_ss_20140419_0001_4CCBD539.jpg&quot;&gt;&lt;img title=&quot;wp_ss_20140419_0001&quot; style=&quot;border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px&quot; border=&quot;0&quot; alt=&quot;wp_ss_20140419_0001&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/wp_ss_20140419_0001_thumb_1BCC248C.jpg&quot; width=&quot;288&quot; height=&quot;480&quot;&gt;&lt;/a&gt;&lt;/td&gt; &lt;td valign=&quot;top&quot; width=&quot;100&quot;&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/wp_ss_20140419_0004_66C2260C.jpg&quot;&gt;&lt;img title=&quot;wp_ss_20140419_0004&quot; style=&quot;border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px&quot; border=&quot;0&quot; alt=&quot;wp_ss_20140419_0004&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/wp_ss_20140419_0004_thumb_5CFF4F45.jpg&quot; width=&quot;288&quot; height=&quot;480&quot;&gt;&lt;/a&gt;&lt;/td&gt; &lt;td valign=&quot;top&quot; width=&quot;100&quot;&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/wp_ss_20140419_0008_7354F48A.jpg&quot;&gt;&lt;img title=&quot;wp_ss_20140419_0008&quot; style=&quot;border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px&quot; border=&quot;0&quot; alt=&quot;wp_ss_20140419_0008&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/wp_ss_20140419_0008_thumb_07046ED0.jpg&quot; width=&quot;288&quot; height=&quot;480&quot;&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt; &lt;td valign=&quot;top&quot; width=&quot;100&quot;&gt;Before&lt;/td&gt; &lt;td valign=&quot;top&quot; width=&quot;100&quot;&gt;After&lt;/td&gt; &lt;td valign=&quot;top&quot; width=&quot;100&quot;&gt;Background image&lt;/td&gt; &lt;td valign=&quot;top&quot; width=&quot;100&quot;&gt;Polishing&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p&gt;A few observations so far: &lt;/p&gt; &lt;p&gt;- App Folders is nice, but with so much real estate it is more of a grouping for convenience than an actual need&lt;/p&gt; &lt;p&gt;- Notification centre is helpful to cut on wasted time spent navigating around&lt;/p&gt; &lt;p&gt;- Cortana integration with phone/web is helpful – I found making reminders by dictating faster than typing those pesky details (remarkably “she” gets it even with my horrable accent)&lt;/p&gt; &lt;p&gt;- Quiet Hours is really helpful. It forces me to leave my email/sms/twitter a side after specified hour and no more buzzing during night time&lt;/p&gt; &lt;p&gt;- Volume control per functionality (media, bluetooth, headphones, etc.) – I know quite a few that hated windows phone because it lacked this feature. Well, too bad for them, it’s here now&lt;/p&gt; &lt;p&gt;- Swipe typing – I’m still not good at it, but now it allows me to type in Russian w/o know the freaking grammer. I’m a champion now. Too bad Hebrew is not supported, could use some help with grammar as well :)&lt;/p&gt; &lt;p&gt;There’s more. Watch &lt;a href=&quot;http://www.hanselman.com/blog/WindowsPhone81HasMyAttentionNow.aspx&quot; target=&quot;_blank&quot;&gt;Scott Hanselman`s video&lt;/a&gt; for other features.&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2014-04-20T03:59:00Z" PublishedUtc="2014-05-01T18:13:31.0776918Z" ModifiedUtc="2014-04-20T03:59:00Z" />
      <TagsPart Tags="Other" />
      <AutoroutePart Alias="windows-phone-8-1-new-life-for-my-old-nokia-920" UseCustomPattern="false" />
      <TitlePart Title="Windows Phone 8.1 – New Life for my Old Nokia 920" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=lucene-net-is-dead-not" Status="Published">
      <BodyPart Text="&lt;p&gt;For those who were fast to bury it, here’s some update:&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;https://twitter.com/LuceneDotNet/status/455718670644576256&quot; target=&quot;_blank&quot;&gt;&lt;img title=&quot;image&quot; style=&quot;border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_5E662FFB.png&quot; width=&quot;584&quot; height=&quot;172&quot;&gt;&lt;/a&gt;&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2014-04-17T13:19:00Z" PublishedUtc="2014-05-01T18:13:32.5935229Z" ModifiedUtc="2014-04-17T13:19:00Z" />
      <TagsPart Tags="" />
      <AutoroutePart Alias="lucene-net-is-dead-not" UseCustomPattern="false" />
      <TitlePart Title="Lucene.NET is Dead NOT" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=content-disposition-bug-in-httpresponsemessage-conent-headers" Status="Published">
      <BodyPart Text="&lt;p&gt;If you’re running into a &lt;a href=&quot;https://connect.microsoft.com/VisualStudio/feedback/details/813392/httpresponsemessage-content-headers-contentdisposition-is-null&quot; target=&quot;_blank&quot;&gt;bug&lt;/a&gt; like I did, there are good and bad news. Good – &lt;a href=&quot;https://connect.microsoft.com/VisualStudio/feedback/details/813392/httpresponsemessage-content-headers-contentdisposition-is-null&quot; target=&quot;_blank&quot;&gt;Microsoft acknowledged&lt;/a&gt; this bug and will fix it, bad – it will happen in the next release (not sure then). In MS favour I have to admit that they turn things really quick, so who knows, it might be already in the release notes of the next release :)&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2014-04-16T21:24:00Z" PublishedUtc="2014-05-01T18:13:32.9058494Z" ModifiedUtc="2014-04-16T21:24:00Z" />
      <TagsPart Tags="C#" />
      <AutoroutePart Alias="content-disposition-bug-in-httpresponsemessage-conent-headers" UseCustomPattern="false" />
      <TitlePart Title="Content Disposition Bug in HttpResponseMessage.Conent.Headers" />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=make-it-simple-make-it-work" Status="Published">
      <BodyPart Text="&lt;p&gt;In 2010 I had an experience to work for a business that had lots of challenges. &lt;/p&gt; &lt;p&gt;One of those challenges was luck of technical architecture and business value recognition which translated in spending enormous amount of manpower and money on creating C++ solutions for desktop client w/o using .NET to minimize “footprint” (2#) of the client application in deployment environments. This was an awkward experience, considering that C++ custom code was created from scratch to make clients talk to .NET backend while simple having .NET as a dependency would cut time to market by at least 50% (and I’m downplaying the estimate). Regardless, recent Microsoft announcement about .NET vNext has reminded me that experience and how short sighted architecture at that company was. Investment made into making C++ client that cannot be maintained internally by team due to it’s specialization in .NET have created a situation where code to maintain will be more brutal over the time and&amp;nbsp; number of developers understanding it will be going and shrinking. Not only that. The ability to go cross-platform (#3) and performance achievement gained with native compilation (#1) would be an immediate pay back. &lt;/p&gt; &lt;p&gt;Why am I saying all this? To make a simple point to myself and remind again – when working on a product that needs to get to the market, make it simple, make it work, and then see how technology is changing and how you can adopt. Simplicity will not let you down. But a complex solution will always do.&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_3B7CE79A.png&quot;&gt;&lt;img title=&quot;image&quot; style=&quot;border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;https://aspblogs.blob.core.windows.net/media/sfeldman/Media/image_thumb_07D99C9E.png&quot; width=&quot;640&quot; height=&quot;391&quot;&gt;&lt;/a&gt;&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2014-05-15T02:26:00Z" PublishedUtc="2014-05-15T02:26:00Z" ModifiedUtc="2014-05-15T02:26:00Z" />
      <TagsPart Tags=".NET" />
      <AutoroutePart Alias="make-it-simple-make-it-work" UseCustomPattern="false" />
      <TitlePart Title="Make it simple. Make it work." />
      <CommentsPart CommentsShown="true" CommentsActive="false" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=interview-is-a-job" Status="Published">
      <BodyPart Text="&lt;p&gt;An interview process should not end up in a situation of a cat in a bag. A friend of mine is going through an interview process, and I observed his line of thought and decision making. These are my observations along with what I think about technical part of interviewing process in particular.&amp;nbsp;&lt;/p&gt;&#xD;&#xA;&lt;p&gt;&lt;img src=&quot;http://khongthe.com/wallpapers/animals/cat-in-a-bag-109225.jpg&quot; alt=&quot;cat in a bag&quot; width=&quot;715&quot; height=&quot;447&quot; /&gt;&lt;/p&gt;&#xD;&#xA;&lt;p&gt;Job Interview is an art. Interview process puts both sides, interviewed and interviewer, on a spot. Interviewer is trying to find the right person, which might include, but not limitted to personality fit, professionalism, experience, etc. Employer typically has a few things that they are willingly sharing with an interviewed such as working hours, benefits, type of work, and other pieces of information that you migh or might not find out through public channels. Interviewed is looking to find out as much as possible about working conditions, expectations, overall compensation, fit into his/her personal work/life balance, etc. There's always a technical interview, that frankly I don't accept anymore in the shape and form it happens these days. More than that, I think that interview and technical question(s) are a good way not only for interviewer to determine if candidate is the right candidate for postition, BUT also for an interviewed help to determined if eployer is the right place to invest time into by taking the position. My friend`s test is a good example for that. He was given a mini project to build, a web application, that is using a framework he's never dealt with. Initial &quot;business requirements&quot; of half a page of bullet points were given to him. He approached the test and here's the conversation we had I'll try to analyze.&lt;/p&gt;&#xD;&#xA;&lt;p&gt;Let's see what we've got so far&lt;/p&gt;&#xD;&#xA;&lt;ol&gt;&#xD;&#xA;&lt;li&gt;Both sides have a good vibe about personality fit and other conditions&lt;/li&gt;&#xD;&#xA;&lt;li&gt;Technical interview that resulted in an assignment that has a completion deadline&lt;/li&gt;&#xD;&#xA;&lt;li&gt;Assignment with business requirements&lt;/li&gt;&#xD;&#xA;&lt;/ol&gt;&#xD;&#xA;&lt;p&gt;Looks great, but... not so rosy as it looks. Assuming #1 is acceptable on both sides, #2 and #3 have a lot of hidden gems for both sides.&lt;/p&gt;&#xD;&#xA;&lt;p&gt;Interviewer:&amp;nbsp;&lt;/p&gt;&#xD;&#xA;&lt;ul&gt;&#xD;&#xA;&lt;li&gt;Time boxed assignement, abiity to complete work with time constraints&lt;/li&gt;&#xD;&#xA;&lt;li&gt;Candidate demonstrates his/her ability to solve a given problem showing how they approach requirements and solve those&lt;/li&gt;&#xD;&#xA;&lt;li&gt;Demonstrate technological knowledge&lt;/li&gt;&#xD;&#xA;&lt;li&gt;Submit working solution&lt;/li&gt;&#xD;&#xA;&lt;/ul&gt;&#xD;&#xA;&lt;p&gt;Interviewd - RED ALERT. Why you're asking me? What's wrong, this is a way we've done it for years. Exactly. Just because it was done so, doesn't mean it was done properly. And this is why I think this an indication of a poor potential work place:&lt;/p&gt;&#xD;&#xA;&lt;ol&gt;&#xD;&#xA;&lt;li&gt;Solving a test problem requires work to get done in a limitted amount of time. Does one &quot;gets the job done&quot; or &quot;designs and implements as if it was production code&quot;? If your future employer is not clear about that requirement, what exactly you're suppose to present? And if you don't clarify that, shame on you, means you're not serious about what you're doing. Assuming you got that answer, there are a few options, where 2 are obvious. A) you solve it quick and dirty to &quot;get the job done&quot; - then what is that your future employer is looking for, because code quality that is not. B) you create a monster project that is geared towards all the &quot;illities&quot; (maintainability, testability, etc.) just to calculate tax or find the shortest path, which will be packed with complexity without showing how you actually think.&lt;/li&gt;&#xD;&#xA;&lt;li&gt;Technology knowledge. I see it in a different light - there's a whole, it needs to be filled in, and you're the candidate to be the filler. What if you solve it in a different technology? What if you have a better perspective? Does that mean your employer is constrained to &quot;one truely way&quot; and nothing else?&lt;/li&gt;&#xD;&#xA;&lt;li&gt;How much business requirements are actually business if there's no email/phone number to connect with a business user to clarify requirements? How often did you do that in the real world when wanted to work in a collaborative environment? How can you expect to work at a place were you can talk to business when during excercise you are dealing with techies only? Hmmm, perhaps it's not the air that you breathe ;)&lt;/li&gt;&#xD;&#xA;&lt;li&gt;Submit working solution. This one is in particular interesting. Requiement like &quot;self contained without dependencies&quot; tellms a whole story about working place and begs for questions, serious questions. If I submit &quot;working code&quot; not via ZIPped package, but as a URL on a publicly hosted repository, would that work? if I have dependency on a 3rd party open-source library to cut the useless ADO access or CSS work, is that breaking some holy rules of a company? Does that mean &quot;not invented here&quot; syndrome is already there and these are warning signs for an interviewed to take in account?&lt;/li&gt;&#xD;&#xA;&lt;/ol&gt;&#xD;&#xA;&lt;p&gt;As an interviewed it is YOUR responsibility to bring this questions up, or don't be surprised to find your self in the process again with yet-another-employer. Remember, employer is interviewed as much as a candidate. Your job starts way ahead of signing a contract, it starts with an interview.&lt;/p&gt;&#xD;&#xA;&lt;p&gt;&lt;/p&gt;&#xD;&#xA;&lt;p&gt;&lt;/p&gt;&#xD;&#xA;&lt;p&gt;&lt;/p&gt;&#xD;&#xA;&lt;p&gt;&lt;/p&gt;&#xD;&#xA;&lt;p&gt;&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2014-07-27T09:31:00Z" PublishedUtc="2014-07-27T09:41:47.5398696Z" ModifiedUtc="2014-07-27T09:41:47.392605Z" />
      <TagsPart Tags="Other" />
      <AutoroutePart Alias="interview-is-a-job" UseCustomPattern="false" />
      <TitlePart Title="Interview is a Job" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="true" />
    </BlogPost>
    <BlogPost Id="/alias=sitecore-on-azure" Status="Published">
      <BodyPart Text="&lt;p&gt;This is old news, but still worth sharing. I have shared my architecture with folks from &lt;a href=&quot;http://azpodcast.azurewebsites.net/&quot; target=&quot;_blank&quot;&gt;The Azure Podcast&lt;/a&gt;&amp;nbsp;for discussion and suggestions. It was a good review and worth listening to. &amp;nbsp;In case you're interested, &lt;a href=&quot;http://azpodcast.azurewebsites.net/post/Episode-32-Moving-a-CMS-to-Azure&quot; target=&quot;_blank&quot;&gt;Episode 32&lt;/a&gt;&amp;nbsp;has the discussion from minute 20:30. This architecture is now running 3 of our production sites, with another one on its way for international support with multiple regions.&amp;nbsp;&lt;/p&gt;&#xD;&#xA;&lt;p&gt;TLDR: Sitecore on Azure IaaS + Azure Cache (Redis) + Azure Websites / CDN = cost reduction + ease of development + inexpensive migration&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2014-09-26T03:17:43.7436793Z" PublishedUtc="2014-09-26T03:17:43.7436793Z" ModifiedUtc="2014-09-26T03:17:43.040621Z" />
      <TagsPart Tags="Azure" />
      <AutoroutePart Alias="sitecore-on-azure" UseCustomPattern="false" />
      <TitlePart Title="Sitecore on Azure" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="true" />
    </BlogPost>
    <BlogPost Id="/alias=macbook-pro-bootcamp-adventure" Status="Published">
      <BodyPart Text="&lt;p&gt;&lt;/p&gt;&#xD;&#xA;&lt;p&gt;A development machine is always a tricky thing. On one hand you want it to be powerful enough to allow you to do what you want to do (and mostly to be fast and not wait). On another hand you want it to be light and thin. I was debating between&amp;nbsp;&lt;a href=&quot;http://www.microsoftstore.com/store/msca/en_CA/pdp/Dell-XPS-15-15-8949sLV-Touchscreen-Laptop/productID.306254400&quot; target=&quot;_blank&quot;&gt;Dell XPS 15 15-8949sLV Touchscreen&lt;/a&gt;&amp;nbsp;and &lt;a href=&quot;http://store.apple.com/ca/buy-mac/macbook-pro?product=MGXC2LL/A&amp;amp;step=config#&quot; target=&quot;_blank&quot;&gt;Macbook Pro 15&lt;/a&gt;. Dell was &lt;strong&gt;very&lt;/strong&gt; appealing, have to admit. At $500 (now almost $700) and touch enabled display it was a better candidate. Until I've read about overheating issues. That was a show stopper.&amp;nbsp;&lt;/p&gt;&#xD;&#xA;&lt;p&gt;So with a new MBP I have started looking into 2 options:&lt;/p&gt;&#xD;&#xA;&lt;ol&gt;&#xD;&#xA;&lt;li&gt;Running Windows in a VM on OSX using Parallels or VMWare Fusion&lt;/li&gt;&#xD;&#xA;&lt;li&gt;Running Windows in Bootcamp (&quot;on the metal&quot;)&lt;/li&gt;&#xD;&#xA;&lt;/ol&gt;&#xD;&#xA;&lt;p&gt;With VM option I chose to try VMWare Fustion. It was simple, quick, and painless. But performance is not as good as I expected. Perhaps because I did not allocate enough resources to my VM. At the same time, what the point of waisting those resources on OSX if I need Windows.&lt;/p&gt;&#xD;&#xA;&lt;p&gt;So I started exploring Bootcamp option. It seemed not so complicated. There's plenty of documentation and Apple makes it look super-duper simple. Until I ran into a problem.&lt;/p&gt;&#xD;&#xA;&lt;p&gt;&lt;img width=&quot;406&quot; height=&quot;235&quot; alt=&quot;&quot; src=&quot;https://aspblogs.blob.core.windows.net:443/media/sfeldman/2014/WP_20140928_002.jpg&quot; /&gt;&lt;/p&gt;&#xD;&#xA;&lt;p&gt;And that's when headache started :)&lt;/p&gt;&#xD;&#xA;&lt;p&gt;I have tried contacting Apple support, explaining that I'm trying to bootcamp Windows 8.1 Update 1. Was kidly suggested to re-install OSX and get the latest version of bootcamp. Not exactly what I was looking for. Issue was with the version of Windows 8.1 Image - bootcamp didn't support Update 1. Going with plain Windows 8.1 image (w/o Update) worked just fine. Next pain point was the trackpad. Boy it felt... akward. So after research for a while, I found a wonderful &lt;a href=&quot;http://trackpad.powerplan7.com/&quot; target=&quot;_blank&quot;&gt;trackpad++&lt;/a&gt;&amp;nbsp;that made trackpad usable again.&lt;/p&gt;&#xD;&#xA;&lt;p&gt;This is not over. At least not yet. I have to figure out how to backup efficiently my machine (ideally something that would take care of both Bootcamp and OSX). For now I'm a happy bootcamper :)&lt;/p&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2014-10-03T05:00:59.8904419Z" PublishedUtc="2014-10-03T05:00:59.8904419Z" ModifiedUtc="2014-10-03T05:00:59.7341911Z" />
      <TagsPart Tags="Personal" />
      <AutoroutePart Alias="macbook-pro-bootcamp-adventure" UseCustomPattern="false" />
      <TitlePart Title="Macbook Pro / Bootcamp Adventure" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="true" />
    </BlogPost>
    <BlogPost Id="/alias=nservicebus-with-azure-webjobs" Status="Published">
      <BodyPart Text="## Azure WebSites and WebJobs&#xD;&#xA;&#xD;&#xA;Azure WebSites have become a significant building component on Azure platform lately, with many features and tools built around it. WebJobs is one of the features, based on Kudu engine, that allows to run background tasks in Azure website. There's [plenty of information](http://azure.microsoft.com/en-us/documentation/articles/web-sites-create-web-jobs/) about Azure WebJobs and possibilities it opens for Azure WebSites. I'd like to highlight 2 interesting facts:&#xD;&#xA;&#xD;&#xA; 1. WebJobs aims to make developing, running, and scaling this easier&#xD;&#xA; 2. There is no additional cost to use Azure WebJobs&#xD;&#xA;&#xD;&#xA;Scott Hanselman had a [very good post](http://www.hanselman.com/blog/IntroducingWindowsAzureWebJobs.aspx) on how he's using WebJobs to make development, running, and scaling easier.&#xD;&#xA;&#xD;&#xA;Since Azure WebJobs are running under Azure WebSites, it is same VM(s) behind the scenes that both. Which results in no additional costs for running WebJobs. Nice side of this is is that WebJobs scale out with WebSite when later is scaled out from a single to multiple instances.&#xD;&#xA;&#xD;&#xA;## NServiceBus&#xD;&#xA;Where's [NServiceBus](http://particular.net/NServiceBus) in all of this? Great question. NServiceBus has [Azure transport support](http://docs.particular.net/nservicebus/windows-azure-transport). [Hosting NServiceBus in Azure](http://docs.particular.net/nservicebus/hosting-nservicebus-in-windows-azure) supports several scenarios:&#xD;&#xA;&#xD;&#xA; 1. Virtual Machines &#xD;&#xA; 2. Azure Websites&#xD;&#xA; 3. Cloud Services&#xD;&#xA; 4. Cloud Services - Shared Hosting (aka Dynamic Host)&#xD;&#xA;&#xD;&#xA;1st, 3rd, and 4th scenarios allow you to run with with endpoints for front and back end. 2nd scenario does not. Or *did not* until Azure WebJobs.&#xD;&#xA;&#xD;&#xA;## Azure WebJobs meet NServiceBus&#xD;&#xA;&#xD;&#xA;WebJobs can be executed as continuous jobs without being triggered automatically as showed in vast majority of samples. Instead, WebJob `Host` can kick-off a long running task until it's cancelled (WebJob stopped or deleted). This can be used to self-host NServiceBus endpoint. NServiceBus takes out the manual and tedious work with low level queuing while allowing to dive into more complex scenarios for implementation. Not to mention the tooling that is available as a part of [Particular Platform](http://particular.net/service-platform). &#xD;&#xA;&#xD;&#xA;Additional reasons are:&#xD;&#xA;&#xD;&#xA; - Simple and fast deployment of Azure WebJobs (with or without WebSite) &#xD;&#xA; - Ability to scale-out&#xD;&#xA; - Low cost (website instances cover cost of WebJobs instances)&#xD;&#xA;&#xD;&#xA;Note: it's worth mentioning that it doesn't cost a dime to run a free hosting plan of Azure WebSites. Combined with [free trial of NServiceBus](http://particular.net/platform-download-started) you get to develop, deploy, and run on Azure your application.&#xD;&#xA;&#xD;&#xA;## Show me some code&#xD;&#xA;&#xD;&#xA;Scenario I have decided to implement is fairly simple: [full duplex](http://docs.particular.net/nservicebus/full-duplex-sample). WebApp, front-end point, that send a `Ping` command to WebJob, back-end processing endpoint. WebJob in turn replies back with `Pong` command. At this point you can either skip to the [bits on GitHub](https://github.com/SeanFeldman/NServiceBus_WebJob) or read some comments / steps that are not included in code. After all, code should be self explanatory, isn't it? :)&#xD;&#xA;&#xD;&#xA;## Solution structure&#xD;&#xA;&#xD;&#xA;`Contracts`: [Messages used for commands / events / replies](http://docs.particular.net/nservicebus/unobtrusive-mode-messages)&#xD;&#xA;&#xD;&#xA;`Shared`: [Message conventions](http://docs.particular.net/nservicebus/unobtrusive-sample)&#xD;&#xA;&#xD;&#xA;`WebApp`: Azure WebSite for front-end endpoint&#xD;&#xA;&#xD;&#xA;`WebJob`: Azure WebJob for back-end endpoint&#xD;&#xA;&#xD;&#xA;Starting point is `HomeController`, where we send a `Ping` command to back-end endpoint.&#xD;&#xA;&#xD;&#xA;&lt;script src=&quot;https://gist.github.com/SeanFeldman/6651bad0bb73664f1b48.js&quot;&gt;&lt;/script&gt;&#xD;&#xA;&#xD;&#xA;Later, within front-end endpoint, we're expecting to receive reply message `Pong`&#xD;&#xA;&#xD;&#xA;&lt;script src=&quot;https://gist.github.com/SeanFeldman/b852d4af675bce81f81b.js&quot;&gt;&lt;/script&gt;&#xD;&#xA;&#xD;&#xA;Now back-end endpoint turn. First WebJob configuration&#xD;&#xA;&#xD;&#xA;&lt;script src=&quot;https://gist.github.com/SeanFeldman/7654d1f22479dc6255d2.js&quot;&gt;&lt;/script&gt;&#xD;&#xA;&#xD;&#xA;Trick with `Environment.GetEnvironmentVariable()` is to allow execution of WebJob locally yet point to real Azure Storage account credentials without committing those into repository. This is needed since WebJobs cannot be executed with local storage emulator. In order to run it locally, create an environment variable called '`AzureStorageQueueTransport.ConnectionString`' on your machine and assign it connection string to a storage account you've created. If you have MSDN subscription, use your [MSDN Azure benefits](http://azure.microsoft.com/en-us/pricing/member-offers/msdn-benefits). And if you're not, sign-up, use a free WebSite, and pay a cost of a coffee for storage transactions, which will be less than that if you don't run it 24x7.&#xD;&#xA;&#xD;&#xA;Next is to kick off our self-hosted endpoint. `host.Call(typeof(Functions).GetMethod(&quot;Host&quot;));`&#xD;&#xA;&#xD;&#xA;&lt;script src=&quot;https://gist.github.com/SeanFeldman/9983817331523f32db86.js&quot;&gt;&lt;/script&gt;&#xD;&#xA;&#xD;&#xA;When executed, through portal we can find this WebJob running as continuous job&#xD;&#xA;![Back-end endpoint running as WebJob][1]&#xD;&#xA;&#xD;&#xA;When drill in, you can see that each WebJob deployment is causing previous instance to stop, and new instance to spin up&#xD;&#xA;&#xD;&#xA;![Instances over time][2]&#xD;&#xA;&#xD;&#xA;Instance can be aborted, which will cause a new instance to start again. Note that we have a log parameter supplied by WebJob SDK. Unfortunately, it's very limited in its capacity, but the good news is that we'll be able to use NServiceBus built-in logging. Combined with [Azure preview portal](https://portal.azure.com/) and [Streaming Logs for Azure Websites](http://www.hanselman.com/blog/StreamingDiagnosticsTraceLoggingFromTheAzureCommandLinePlusGlimpse.aspx) it is possible to monitor logs on portal or inside Visual Studio.&#xD;&#xA;![Host][3]&#xD;&#xA;&#xD;&#xA;`Host` function is responsible to spin-up self-hosting for NServiceBus and run in infinitely until we receive request to cancel/stop.&#xD;&#xA;&#xD;&#xA;I found preview portal very handy when working with diagnostics and WebJobs.&#xD;&#xA;![diagnostics and WebJobs][4]&#xD;&#xA;&#xD;&#xA;With self-hosted endpoint up and running, we can start wiring message handlers. `PingHandler` code receives `Ping` and replies with `Pong`.&#xD;&#xA;&lt;script src=&quot;https://gist.github.com/SeanFeldman/a3ed04d508c69e48450e.js&quot;&gt;&lt;/script&gt;&#xD;&#xA;&#xD;&#xA;Let's run it.&#xD;&#xA;&#xD;&#xA;![Run it][5]&#xD;&#xA;&#xD;&#xA;Next step to validate execution is to look at the logs. I chose to use portal&#xD;&#xA;![Diagnostics][6]&#xD;&#xA;&#xD;&#xA;Application logs reflect communication we had between endpoints&#xD;&#xA;![Logs][7]&#xD;&#xA;WebApp sending a `Ping`, which is processed by WebJob, that replies back with `Pong`.&#xD;&#xA;&#xD;&#xA;Since audit was enabled, both messages are found in audit queue - standard NServiceBus behaviour&#xD;&#xA;![Audit Queue][8]&#xD;&#xA;&#xD;&#xA;## Summary&#xD;&#xA;&#xD;&#xA;Two great technologies, Azure and NServiceBus, combined together allow some very interesting scenarios to be implemented. I see this as an extremely affordable option to enter cloud-based distributed application development and experiment without breaking the bank. [Next time][9] I'll take a slightly more complicated scenario that would involve long-running process.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2015/NSB_WebJobs/WebJob01.PNG&#xD;&#xA;  [2]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2015/NSB_WebJobs/WebJob02.PNG&#xD;&#xA;  [3]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2015/NSB_WebJobs/WebJob03.PNG&#xD;&#xA;  [4]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2015/NSB_WebJobs/Portal01.PNG&#xD;&#xA;  [5]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2015/NSB_WebJobs/Run01.PNG&#xD;&#xA;  [6]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2015/NSB_WebJobs/Portal02.PNG&#xD;&#xA;  [7]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2015/NSB_WebJobs/Run02.PNG&#xD;&#xA;  [8]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2015/NSB_WebJobs/Queues01.PNG&#xD;&#xA;  [9]: http://bit.ly/nsb_webjobs_videostore" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2015-01-03T08:18:00Z" PublishedUtc="2015-01-05T07:28:54.7588138Z" ModifiedUtc="2015-01-05T07:28:54.4775659Z" />
      <TagsPart Tags="" />
      <AutoroutePart Alias="nservicebus-with-azure-webjobs" UseCustomPattern="false" />
      <TitlePart Title="NServiceBus with Azure WebJobs" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="true" />
    </BlogPost>
    <BlogPost Id="/alias=azure-portal-active-path" Status="Published">
      <BodyPart Text="If you're slowly moving from the [current Azure portal](manage.windowsazure.com) to the [preview portal](https://portal.azure.com/) (new-new portal), there are a lot of hidden gems. One of those gems is `Active Paths` feature baked into the portal on the control bar on the left side.&#xD;&#xA;&#xD;&#xA;&lt;img src=&quot;https://aspblogs.blob.core.windows.net:443/media/sfeldman/2015/Ibiza_Active_Path/Pic01.PNG&quot; width=&quot;300&quot; /&gt;&#xD;&#xA;&#xD;&#xA;Where it is really handy, is when you need to access several sub categories from the same blade. In my case, I needed to access `WebJobs` and `Streaming logs` blade at the same time. &#xD;&#xA;&#xD;&#xA;&lt;img src=&quot;https://aspblogs.blob.core.windows.net:443/media/sfeldman/2015/Ibiza_Active_Path/Pic02.PNG&quot; width=&quot;300&quot; /&gt;&#xD;&#xA;&#xD;&#xA;Instead of heaving 2 tabs in browser, I can simply switch between active paths. Well, maybe not so simply for now as it requires to navigate with mouse to the left side of screen to click the `Active` icon. Hopefully Azure Portal team will introduce keyboard shortcuts soon and this will be perfect candidate to utilize a shortcut like `ALT-something` to navigate between active paths. Add to that a little animation to provide a visual feedback and you've got an `ALT-TAB` experience that no one will resist :)" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2015-01-04T23:01:22.4598513Z" PublishedUtc="2015-01-04T23:01:22.4598513Z" ModifiedUtc="2015-01-04T23:01:22.381729Z" />
      <TagsPart Tags="" />
      <AutoroutePart Alias="azure-portal-active-path" UseCustomPattern="false" />
      <TitlePart Title="Azure Portal - Active Path" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=nservicebus-videostore-with-azure-webjobs" Status="Published">
      <BodyPart Text="In my [previous post][1] I have demonstrated how NServiceBus endpoint can be hosted in a WebJob. To extend that concept and demonstrate that you could host multiple endpoints, I have taken NServiceBus [VideoStore sample][2] application and converted non-web endpoints to be hosted int WebJobs. Bits, as usual, are on [GitHub][3].&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;## What VideoStore sample does?&#xD;&#xA;&#xD;&#xA;This sample demonstrates an online ordering system for purchasing videos. Behind the scenes, there are a few endpoints. Sales endpoint is executing a long running process (aka [`Saga` in NServiceBus][4] world) called `ProcessOrderSaga`. This saga is executed for each submitted order. A few other endpoints (`Content Management`, `Customer Relations`, and `Operations`) are involved as well, using commands and [`Pub-Sub` mechanism][5].&#xD;&#xA;&#xD;&#xA;`Sales` endpoint also implements &quot;Buyers Remorse&quot;  option, where an order can be cancelled within certain period of time after it has been posted.&#xD;&#xA;&#xD;&#xA;## WebJob naming&#xD;&#xA;&#xD;&#xA;When in Rome do as the Romans do. So is with WebJobs.&#xD;&#xA;&#xD;&#xA;WebJobs are strict about names - letters and dashes only. Therefore all endpoint names in this sample where deployed with names updated to include dash `-` instead of dot `.` (Ex: `VideoStore.Sales` endpoint would become a `VideoStore-Sales` WebJob).&#xD;&#xA;&lt;table&gt;&#xD;&#xA;&lt;tr&gt;&#xD;&#xA;&lt;td&gt;&lt;img src=&quot;https://aspblogs.blob.core.windows.net:443/media/sfeldman/2015/NSB_WebJobs_VideoStore/name1.PNG&quot; width=&quot;200&quot;/&gt;&lt;/td&gt;&#xD;&#xA;&lt;td&gt;=&amp;gt;&lt;/td&gt;&#xD;&#xA;&lt;td&gt;&lt;img src=&quot;https://aspblogs.blob.core.windows.net:443/media/sfeldman/2015/NSB_WebJobs_VideoStore/name2.PNG&quot; width=&quot;200&quot;/&gt;&lt;/td&gt;&#xD;&#xA;&lt;/tr&gt;&#xD;&#xA;&lt;/table&gt;&#xD;&#xA;&#xD;&#xA;### Deployment &#xD;&#xA;&#xD;&#xA;WebJobs require a WebSite to be published under. There are two options to deploy:&#xD;&#xA;1. Deploy as a WebJob (used this option for the post)&#xD;&#xA;2. Link and deploy with a web project&#xD;&#xA;&#xD;&#xA;MSDN has [documentation][8] on both methods. Worth mentioning that both options play nicely with automation and CI.&#xD;&#xA;&#xD;&#xA;## All endpoints Deployed&#xD;&#xA;&#xD;&#xA;Once all endpoints are deployed (4 of them), quick validation can be performed to ensure all webjobs are well and running.&#xD;&#xA;&#xD;&#xA;![All endpoints][9]&#xD;&#xA;&#xD;&#xA;Drilling into any endpoint should result in a running host. This is continuous WebJobs in action and it's used to self-host each endpoint.&#xD;&#xA;&#xD;&#xA;![Endpoint host running][10]&#xD;&#xA;&#xD;&#xA;Go ahead, toggle `Output` to see if endpoint has successfully loaded. If it didn't, then it would be the right time for logging.&#xD;&#xA;&#xD;&#xA;![Endpoint is ready][11]&#xD;&#xA;&#xD;&#xA;## Running&#xD;&#xA;&#xD;&#xA;Great, endpoints are loaded and running.&#xD;&#xA;&#xD;&#xA;First scenario is to submit an order and wait over 20 seconds to see order going through cycle of submitted, and finally completed.&#xD;&#xA;&#xD;&#xA;![Success][12]&#xD;&#xA;&#xD;&#xA;Second scenario is to cancel an order within 20 seconds after submission to void it.&#xD;&#xA;&#xD;&#xA;![Cancelation][13]&#xD;&#xA;&#xD;&#xA;## Testing and Debugging &#xD;&#xA;&#xD;&#xA;You can [test and debug][14] your endpoints hosted in WebJobs using Visual Studio tools for Azure. It is straight forward and easy. You can also run it all locally, though for WebJobs you will need to point to the real Azure Storage accounts since emulator won't be enough.&#xD;&#xA;&#xD;&#xA;### Steps for debugging are&#xD;&#xA;&#xD;&#xA;**Step 1** - Access Azure services through Visual Studio `Server Explorer` windows (`CTRL-ALT-S`), navigate to the WebSite hosting WebJobs, and select a WebJob for debugging.&#xD;&#xA;&#xD;&#xA;![Server Explorer][15]&#xD;&#xA;&#xD;&#xA;**Step 2** - Attach Debugger&#xD;&#xA;&#xD;&#xA;![Server Explorer][16]&#xD;&#xA;&#xD;&#xA;**Step 3** - Step through code &#xD;&#xA;Visual Studio will stop at the break points set in WebJob. I have selected 7 videos in my order, so 7 links should show up in completed order on the client side.&#xD;&#xA;&#xD;&#xA;![Server Explorer][17]&#xD;&#xA;&#xD;&#xA;**Step 4** - Results validation&#xD;&#xA;&#xD;&#xA;![Server Explorer][18]&#xD;&#xA;&#xD;&#xA;## Everything that ends well&#xD;&#xA;&#xD;&#xA;NServiceBus hosting on Azure is extremely powerful and flexible. You can pick and choose based on your needs and budgets. IMO, WebJobs are great to run quick NServiceBus prototypes on Azure, eventually converting them into Cloud Services, with or without [`Dynamic Host`][19]. Take the sample for a spin, and share your thoughts/comments.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]:http://bit.ly/nsb_webjob&#xD;&#xA;  [2]:https://github.com/Particular/NServiceBus.Azure.Samples&#xD;&#xA;  [3]:https://github.com/SeanFeldman/NServiceBus_VideoStore&#xD;&#xA;  [4]:http://docs.particular.net/nservicebus/sagas-in-nservicebus&#xD;&#xA;  [5]:http://docs.particular.net/nservicebus/how-pub-sub-works&#xD;&#xA;  [6]:https://aspblogs.blob.core.windows.net:443/media/sfeldman/2015/NSB_WebJobs_VideoStore/name1.PNG&#xD;&#xA;  [7]:https://aspblogs.blob.core.windows.net:443/media/sfeldman/2015/NSB_WebJobs_VideoStore/name2.PNG&#xD;&#xA;  [8]: http://azure.microsoft.com/en-us/documentation/articles/websites-dotnet-deploy-webjobs/&#xD;&#xA;  [9]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2015/NSB_WebJobs_VideoStore/endpoints1.PNG&#xD;&#xA;  [10]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2015/NSB_WebJobs_VideoStore/endpoints2.PNG&#xD;&#xA;  [11]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2015/NSB_WebJobs_VideoStore/endpoints3.PNG&#xD;&#xA;  [12]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2015/NSB_WebJobs_VideoStore/execution-success.PNG&#xD;&#xA;  [13]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2015/NSB_WebJobs_VideoStore/execution-cancelling.PNG&#xD;&#xA;  [14]: http://azure.microsoft.com/en-us/documentation/articles/websites-webjobs-resources/#debug&#xD;&#xA;  [15]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2015/NSB_WebJobs_VideoStore/debug1.PNG&#xD;&#xA;  [16]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2015/NSB_WebJobs_VideoStore/debug2.PNG&#xD;&#xA;  [17]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2015/NSB_WebJobs_VideoStore/debug3.PNG&#xD;&#xA;  [18]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2015/NSB_WebJobs_VideoStore/debug4.PNG&#xD;&#xA;  [19]: http://docs.particular.net/nservicebus/shared-hosting-nservicebus-in-windows-azure-cloud-services" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2015-01-05T07:27:00Z" PublishedUtc="2015-01-07T05:33:12.1248422Z" ModifiedUtc="2015-01-07T05:33:12.0310931Z" />
      <TagsPart Tags="" />
      <AutoroutePart Alias="nservicebus-videostore-with-azure-webjobs" UseCustomPattern="false" />
      <TitlePart Title="NServiceBus VideoStore with Azure WebJobs" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="true" />
    </BlogPost>
    <BlogPost Id="/alias=automatic-nuget-package-restore" Status="Published">
      <BodyPart Text="Xavier Decoster has a great post [how to restore NuGet packages properly][1]. &#xD;&#xA;NuGet team has [documented it][2].&#xD;&#xA;An excellent [automated solution is on GitHub][3].&#xD;&#xA;&#xD;&#xA;Then WHY is this option is still showing up on context menu for solution???&#xD;&#xA;&#xD;&#xA;![enter image description here][4]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://www.xavierdecoster.com/migrate-away-from-msbuild-based-nuget-package-restore&#xD;&#xA;  [2]: http://docs.nuget.org/docs/workflows/migrating-to-automatic-package-restore&#xD;&#xA;  [3]: https://github.com/owen2/AutomaticPackageRestoreMigrationScript&#xD;&#xA;  [4]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2015/NuGet_Restore/wrong.PNG" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2015-01-07T05:19:00Z" PublishedUtc="2015-01-07T05:20:12.5414218Z" ModifiedUtc="2015-01-07T05:20:12.4476776Z" />
      <TagsPart Tags="" />
      <AutoroutePart Alias="automatic-nuget-package-restore" UseCustomPattern="false" />
      <TitlePart Title="Automatic NuGet Package Restore" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=elvis-operator-to-the-rescue" Status="Published">
      <BodyPart Text="Null-Conditional Operator in C# 6 (`?.`), also known as &quot;Elvis&quot; operator, has allowed compacting code by removing boilerplate code for a null check to avoid `NullReferenceException`. But there's more to that than just a null check. I've run into a case where Elvis operator also removed need for an extra code to implement a [Decorator pattern](http://www.dofactory.com/net/decorator-design-pattern), which resulted in removing complexity. Here's the original code implemented using Decorator pattern:&#xD;&#xA;&#xD;&#xA;    var useTransaction = ShouldUseTransaction();&#xD;&#xA;    using (var tx = useTransaction ?  new TransactionScopeDecorator(new TransactionScope()) : new TransactionScopeDecorator())&#xD;&#xA;    {&#xD;&#xA;      // custom code&#xD;&#xA;      tx.Complete();&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;Where `TransactionScopeDecorator` was defined in the following way:&#xD;&#xA;&#xD;&#xA;    private class TransactionScopeDecorator : IDisposable&#xD;&#xA;    {&#xD;&#xA;        private readonly TransactionScope transactionScope;&#xD;&#xA;        readonly bool hasTx;&#xD;&#xA;    &#xD;&#xA;        public TransactionScopeDecorator()&#xD;&#xA;        {&#xD;&#xA;            hasTx = false;&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        public TransactionScopeDecorator(TransactionScope transactionScope)&#xD;&#xA;        {&#xD;&#xA;            this.transactionScope = transactionScope;&#xD;&#xA;            hasTx = true;&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        public void Dispose()&#xD;&#xA;        {&#xD;&#xA;            if (hasTx)&#xD;&#xA;                transactionScope.Dispose();&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        public void Complete()&#xD;&#xA;        {&#xD;&#xA;            if (hasTx)&#xD;&#xA;                transactionScope.Complete();&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;While the first snippet is easy to read and understand, `TransactionScopeDecorator` is quite a lot to add. Elvis operator takes that away entirely.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    var useTransaction = ShouldUseTransaction();&#xD;&#xA;    using (var tx = useTransaction ? new TransactionScope() : null)&#xD;&#xA;    {&#xD;&#xA;        // custom code&#xD;&#xA;        tx?.Complete();&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;There are many other handy usages for Elvis operator. What have you used it for in your projects?&#xD;&#xA;&#xD;&#xA;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2016-03-03T05:14:49.0922532Z" PublishedUtc="2016-03-03T05:14:49.0922532Z" ModifiedUtc="2016-03-03T05:14:48.8716165Z" />
      <TagsPart Tags="" />
      <AutoroutePart Alias="elvis-operator-to-the-rescue" UseCustomPattern="false" />
      <TitlePart Title="Elvis Operator to the Rescue" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=asb-batching-brokered-messages" Status="Published">
      <BodyPart Text="## Azure Service Bus - Batched Sends&#xD;&#xA;&#xD;&#xA;There are scenarios when messages need to be sent in bulk. For example: you recieve a message with CSV-like data and generate multiple messages (message per record in the file). To gain performance, generated messages can be batched and sent out in an atomic operation.&#xD;&#xA;&#xD;&#xA;Azure Service Bus has an ability to batch outgoing messages as an atomic send operation using [MessageSender.SendBatchAsync()](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.messagesender.sendbatchasync.aspx) API. It works great as long as the total size of the messages in the batch does not exceed [256KB](https://msdn.microsoft.com/en-us/library/microsoft.servicebus.messaging.messagesender.sendbatch.aspx#Anchor_1). One possible solution could be dividing brokered messages in into chunks and send multiple batches. An attempt like this was implemented by Paolo Salvatori in [ServiceBusExtensions](https://github.com/paolosalvatori/ServiceBusExtensions). Unfortunately, there's a caveat to this approach. The idea of this grouping is based on evaluating the size of the each BrokeredMessage and adding messages to a batch while total size is below the 256K limit.&#xD;&#xA;What's the problem with that? The devil is in details. &#xD;&#xA;&#xD;&#xA;&gt; [To get an accurate value for the size of a BrokeredMessage, you should read the Size property after completing the Send/Receive operation on the BrokeredMessage.](https://msdn.microsoft.com/en-ca/library/microsoft.servicebus.messaging.brokeredmessage.size.aspx) &#xD;&#xA;&#xD;&#xA;Sending an individual message to get its` proper size does not sound like a superb idea. So what are the options?&#xD;&#xA;&#xD;&#xA;One option would be to group BrokeredMessages based on a rough size estimate and divide those into groups of batched. Among challenges are things such as custom [properties](https://msdn.microsoft.com/en-us/library/microsoft.servicebus.messaging.brokeredmessage.properties.aspx) (message headers). Since those are defined as Dictionary&lt;string, object&gt;, while estimating the size of keys is not a big issue, doing the same for values can be a challenge.&#xD;&#xA;&#xD;&#xA;Another option is to determine the size of a future message before it becomes BrokeredMessage, adding to it some overhead of serialization that takes place once the message is sent out. Among the benefits that I found with this approach are:&#xD;&#xA;&#xD;&#xA;1. Ability to estimate size based on the structure of messages relevant to the application and not general BrokeredMessage that has to cater every possible scenario. For example: in my solution headers are always strings. Size calculation of custom headers becomes very straight forward.&#xD;&#xA;2. Knowing what standard properties of BrokeredMessage are utilized and how (MessageId, SessionID, PartitionKey, etc.) allows to buffer estimated size accordingly.&#xD;&#xA;3. Knowing your payload (future BrokeredMessage body) helps to determine the size when serializing messages.&#xD;&#xA;&#xD;&#xA;On top of that, an additional percentage can be added to emulate some overhead that is going to be added when messages are sent out. I was experimenting with different message sizes, and padding percentages and results were consistent. In my case, I tried with the body as a `byte[]` and as a `Stream` to see the difference. &#xD;&#xA;&#xD;&#xA;## Code&#xD;&#xA;&#xD;&#xA;### Native message structure&#xD;&#xA;&#xD;&#xA;    public class Message&#xD;&#xA;    {&#xD;&#xA;        public string MessageId { get; set; }&#xD;&#xA;        public byte[] Body { get; set; }&#xD;&#xA;        public Dictionary&lt;string, string&gt; Headers { get; set; }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;### Estimation code&#xD;&#xA;&#xD;&#xA;    public long GetEstimatedMessageSize()&#xD;&#xA;    {&#xD;&#xA;        const int assumeSize = 256;&#xD;&#xA;        var standardPropertiesSize = GetStringSizeInBytes(Message.MessageId) +&#xD;&#xA;                                        assumeSize + // ContentType&#xD;&#xA;                                        assumeSize + // CorrelationId&#xD;&#xA;                                        4 + // DeliveryCount&#xD;&#xA;                                        8 + // EnqueuedSequenceNumber&#xD;&#xA;                                        8 + // EnqueuedTimeUtc&#xD;&#xA;                                        8 + // ExpiresAtUtc&#xD;&#xA;                                        1 + // ForcePersistence&#xD;&#xA;                                        1 + // IsBodyConsumed&#xD;&#xA;                                        assumeSize + // Label&#xD;&#xA;                                        8 + // LockedUntilUtc &#xD;&#xA;                                        16 + // LockToken &#xD;&#xA;                                        assumeSize + // PartitionKey&#xD;&#xA;                                        8 + // ScheduledEnqueueTimeUtc&#xD;&#xA;                                        8 + // SequenceNumber&#xD;&#xA;                                        assumeSize + // SessionId&#xD;&#xA;                                        4 + // State&#xD;&#xA;                                        8 + // TimeToLive&#xD;&#xA;                                        assumeSize + // To&#xD;&#xA;                                        assumeSize;  // ViaPartitionKey;&#xD;&#xA;    &#xD;&#xA;        var headers = Message.Headers.Sum(property =&gt; GetStringSizeInBytes(property.Key) + GetStringSizeInBytes(property.Value));&#xD;&#xA;        var bodySize = Message.Body.Length;&#xD;&#xA;        var total = standardPropertiesSize + headers + bodySize;&#xD;&#xA;    &#xD;&#xA;        var padWithPercentage = (double)(100 + messageSizePaddingPercentage) / 100;&#xD;&#xA;        var estimatedSize = (long)(total * padWithPercentage);&#xD;&#xA;        return estimatedSize;&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    private static int GetStringSizeInBytes(string value) =&gt; value != null ? Encoding.UTF8.GetByteCount(value) : 0;&#xD;&#xA;&#xD;&#xA;Standard properties that are not of type `string` can be hardcoded for their size. And if your system doesn't utilize any of the string-based standard properties, no need to pad size with `assumeSize`.&#xD;&#xA;&#xD;&#xA;## Benchmark results&#xD;&#xA;&#xD;&#xA;With padding of 5% and assumed size of 256 bytes for the properties that I'm potentially going to use, the results came out quite interesting.&#xD;&#xA;&#xD;&#xA;### Body type: byte[]&#xD;&#xA;&#xD;&#xA;![byte array body][1]&#xD;&#xA;&#xD;&#xA;### Body type: Stream&#xD;&#xA;&#xD;&#xA;![stream body][2]&#xD;&#xA;&#xD;&#xA;While the small messages padding and estimates are significantly higher, for messages over 10K that gap is significantly reduced.&#xD;&#xA;&#xD;&#xA;## Conclusions&#xD;&#xA;&#xD;&#xA;The method I've described here is one of a few options. It allows to overcome the current shortcoming of the native method to send messages in a batch, until ASB team comes up with a better solution.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2016/table-1.png&#xD;&#xA;  [2]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2016/stream-bodyy.png" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2016-02-19T05:29:43.438245Z" PublishedUtc="2016-02-19T05:29:43.438245Z" ModifiedUtc="2016-02-19T05:29:43.4069999Z" />
      <TagsPart Tags="Azure,AzureServiceBus" />
      <AutoroutePart Alias="asb-batching-brokered-messages" UseCustomPattern="false" />
      <TitlePart Title="Azure Service Bus - Batching Brokered Messages" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=capturing-azure-calls-with-fiddler" Status="Published">
      <BodyPart Text="When working with Azure Service Bus or Storage Queues, Fiddler help in troubleshooting errors that could happen while talking to the remote service. Particularly useful when there's a mismatch between .NET client library that wraps RESTful API and remote service. Using Fiddler, you can trace the traffic going back and forth. Communication happens over HTTPS and sometimes Fiddler can refuse to show the values. When that happens, you no longer troubleshoot your Azure Service usage, but Fiddler configuration. Luckily, the fix as easy as resetting certificates used by Fiddler. &#xD;&#xA;&#xD;&#xA;1. Tools &gt; Fiddler Options.&#xD;&#xA;1. Select HTTPS.&#xD;&#xA;1. Generate certificates using CertEnroll engine.&#xD;&#xA;1. Under Actions, select `Reset Certificates`.&#xD;&#xA;&#xD;&#xA;Once all popups with prompts are accepted (press OK), you can see the traffic to Azure services back again.&#xD;&#xA;&#xD;&#xA;![enter image description here][1]&#xD;&#xA;&#xD;&#xA;  [1]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2016/fiddler.png" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2016-02-23T07:50:21.2913141Z" PublishedUtc="2016-02-23T07:50:21.2913141Z" ModifiedUtc="2016-02-23T07:50:21.2102206Z" />
      <TagsPart Tags="" />
      <AutoroutePart Alias="capturing-azure-calls-with-fiddler" UseCustomPattern="false" />
      <TitlePart Title="Capturing Azure calls with Fiddler" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=Azure-and-Open-Source-Software" Status="Published">
      <BodyPart Text="Not so long ago Microsoft made a deliberate choice to play the OSS game, and it was quite a welcomed change. Rome wasn't built in a day. So it this initiative. It's a long and bumpy way. Along the way we all, maintainers and contributors, learn along.&#xD;&#xA;&#xD;&#xA;While working on some Azure Storage related code with one of the WesternDevs, [Don Belcham](http://www.igloocoder.com/), we've run into a [bug](https://github.com/Azure/azure-storage-net/issues/232) in CloudBlockBlob functionality to acquire a lease. In the old version of storage library, the lease could be up to 90 seconds, wherein the later version it was truncated to 60 seconds maximum. &#xD;&#xA;&#xD;&#xA;Usually, this would be a tedious process of reporting the bug, providing a sample to reproduce it and... waiting. But this wasn't the case as Storage library code is on [GitHub](https://github.com/Azure/azure-storage-net). A win! &#xD;&#xA;&#xD;&#xA;Fixing the code was straight forward. And this is the part where I'd like to see MSFT (and other maintainers) to be a bit friendlier to its contributors.&#xD;&#xA;&#xD;&#xA; 1. Maintainers know their project inside out, contributors don't. When asking to update documentation, specific files, other concrete files, provide links to those resources. Don't force contributors to sweat searching for those and giving up just because they couldn't find a file like &quot;changelog&quot;.&#xD;&#xA; 2. Automate your testing/validations. If automation is not in place, provide guidance on how to perform the task and achieve the goal. Ideally, document the steps.&#xD;&#xA;&#xD;&#xA;Imagine this comment:&#xD;&#xA;&#xD;&#xA;![enter image description here][1]&#xD;&#xA;&#xD;&#xA;Being a little more helpful with a few links and crisper requirements:&#xD;&#xA;&#xD;&#xA;![enter image description here][2]&#xD;&#xA;&#xD;&#xA;Guiding contributors and making sure they have all the information needed to make that PR as easy as possible makes a huge difference. This is how one can go from &quot;What did I think when started this&quot; to &quot;I made a change and feel great about contributing&quot;. One day we'll get there. Until then, do the little things to encourage people to make those PRs.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2016/azure-and-oss-comment-1.png&#xD;&#xA;  [2]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2016/azure-and-oss-comment-2.png" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2016-03-02T05:46:00Z" PublishedUtc="2016-03-02T05:47:46.2882771Z" ModifiedUtc="2016-03-02T16:21:11.3924737Z" />
      <TagsPart Tags="" />
      <AutoroutePart Alias="Azure-and-Open-Source-Software" UseCustomPattern="false" />
      <TitlePart Title="Azure and Open Source Software" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=humanitarian-toolbox" Status="Published">
      <BodyPart Text="I've heard about [Humanitarian Toolbox](http://www.htbox.org/) a few times on the .NET Rocks Show. In case you've never heard of it, this is what it is:&#xD;&#xA;&#xD;&#xA;&gt;Humanitarian Toolbox (HTBox) is a charity supporting disaster relief organizations with open source software and services.  We are developers, designers, testers, and industry professionals who want to contribute our unique skills in disaster relief aid. Whether it is through creating apps that map the spread of disease or maintaining software that helps to optimize the delivery of relief supplies, Humanitarian Toolbox has a goal of creating software and programs for relief organizations to have ready in times of need.&#xD;&#xA;&#xD;&#xA;I've joined Humanitarian Toolbox hackathon this weekend to try it out.&#xD;&#xA;&#xD;&#xA;## How does it work&#xD;&#xA;&#xD;&#xA;Everyone involved in this project is volunteering their skills and time to build the software. The project is OSS. Hosted on GitHub under https://github.com/HTBox/allReady. `allReady` is the web application based on .NET and ASP.NET Core. Volunteers can fork the repository and start working on any [existing issues](https://github.com/HTBox/allReady/issues). To reduce contention on the issues caused by concurrent work, you can be a good Samaritan, and ping others, letting th/m know you'd like to work on a particular item.&#xD;&#xA;&#xD;&#xA;![enter image description here][1]&#xD;&#xA;&#xD;&#xA;Next step after the issue is assigned to you is to fork the repository and start working on it. Create a branch, implement a fix/feature, and submit a pull request (PR) to the original repository (`master` branch). There can be going back and forth until changes fix the issue. The unit tests suite is in place to help you to ensure new changes are not breaking the code that was there before. If changes are accepted, it will get merged. Congrats, you've contributed!&#xD;&#xA;&#xD;&#xA;When working in a distributed fashion, pinging multiple people can be problematic. First, you need who the people are responsible for different things. Second, by pinging individuals, you can skip people and by that reduce your chances to get a response faster. A [potential resolution](https://github.com/HTBox/allReady/issues/541) to this could be as simple as leveraging GH groups. Imagine you want to work on a database related issue. You'd ping `@HTBox\database` group to raise questions. Need to have a review of your PR? Not a problem, ping `@HTBox\pr-reviewers` and someone will get back to you.&#xD;&#xA;&#xD;&#xA;Note: additional benefit of this approach is that people can join and leave groups, it doesn't affect contributors that need to communicate with group members. Communication also doesn't depend on one familiarity with all member names and what they do on the project.&#xD;&#xA;&#xD;&#xA;## Should I try this?&#xD;&#xA;&#xD;&#xA;If you've never contributed to an OSS project, this is an excellent opportunity to do so. You get to interact with other developers, learn new technologies (.NET / MVC / EF Core, and much more). You get to find out how software can help after a disaster and be proud of any contribution that will assist people in need.&#xD;&#xA;&#xD;&#xA;Big shout out to [Simon Timms](http://blog.simontimms.com/), [James Chambers](http://jameschambers.com/), and [David Paquette](http://www.davepaquette.com/) for organizing, running and helping to get into HTBox.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2016/working-on-issue.png" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2016-02-21T06:48:00Z" PublishedUtc="2016-02-21T06:48:17.8330587Z" ModifiedUtc="2016-02-21T06:48:17.8136625Z" />
      <TagsPart Tags="" />
      <AutoroutePart Alias="humanitarian-toolbox" UseCustomPattern="false" />
      <TitlePart Title="Humanitarian Toolbox" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=servicebus-explorer-tool" Status="Published">
      <BodyPart Text="Tooling is an important part of the development experience. No matter how good a service you're using is, if there are no decent tools, you always have that disgruntled feeling about the entire experience. When developing against hosted services, tools are either coming from the service provider or a third party. &#xD;&#xA;&#xD;&#xA;For Azure Service Bus current options are somewhat limited. There are no tools provided by the ASB team itself. Hopefully, that will change one day. There are options such as Cerebrata Azure Management Studio. While the tool is excellent, specifically for Azure Service Bus it feels same as dining at a fancy restaurant with utensils where a knife is a Swiss army knife. Perfect for many things, but not so much for a very particular usage.&#xD;&#xA;&#xD;&#xA;And that's where ServiceBus Explorer comes to the rescue. Build solely for the purpose of managing and working with Service Bus entities (queues, topics, event hubs, notification hubs, and relays). Being able to drill into nested entities, such as rules on subscriptions, look at your message properties (standard and custom), peek messages, save messages, run analytics, etc. Another interesting fact about ServiceBus Explorer is that [it's an OSS](https://github.com/paolosalvatori/ServiceBusExplorer). Whenever you find an issue and would like to [fix it](https://github.com/paolosalvatori/ServiceBusExplorer/issues/11), you can alway do so. Paolo Salvatori, the author of SBExplorer, is accepting PRs :)&#xD;&#xA;&#xD;&#xA;![enter image description here][1]&#xD;&#xA;&#xD;&#xA;If you do any work that requires Azure Service Bus, this is the tool you have to have in your toolbox to get the work done. If you haven't used it yet, do it.&#xD;&#xA;The future you will thank you.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2016/service-bus-explorer.png" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2016-03-04T07:42:00Z" PublishedUtc="2016-03-04T07:43:09.9627188Z" ModifiedUtc="2016-03-04T07:43:09.9428947Z" />
      <TagsPart Tags="" />
      <AutoroutePart Alias="servicebus-explorer-tool" UseCustomPattern="false" />
      <TitlePart Title="ServiceBus Explorer tool" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=azure-service-bus-nomatchingsubscriptionexception" Status="Published">
      <BodyPart Text="Azure Service Bus has a rich pub/sub mechanism supporting multiple options.&#xD;&#xA;&#xD;&#xA;For each topic, there might be multiple subscriptions. Each subscription can contain one or more rules. If one of the subscriber rules is evaluated as `true`, a message published on the topic is _copied_ to subscription, which is a queue on its own.&#xD;&#xA;&#xD;&#xA;![enter image description here][1]&#xD;&#xA;&#xD;&#xA;When no rule evaluates as `true`, a message will not be stored with subscription and will be discarded.&#xD;&#xA;&#xD;&#xA;![enter image description here][2]&#xD;&#xA;&#xD;&#xA;For most scenarios this is working fine, and that is the default behavior for Azure Service Bus. However, what if it is significant to make sure that events published have subscribers? Doesn't matter if messages will or will not be handled, but important to ensure that there are subscribers. Azure Service Bus can support this scenario among other options that by defaults are turned off. &#xD;&#xA;&#xD;&#xA;To ensure that there are subscribers for a topic, ASB provides a flag on topic, `EnableFilteringMessagesBeforePublishing`. Setting this flag to `true` will make sure that if there are no subscriptions for topic, a `NoMatchingSubscriptionException` exception will be thrown on the client sending an event.&#xD;&#xA;&#xD;&#xA;    var topicDescription = new TopicDescription(topicPath)&#xD;&#xA;    {&#xD;&#xA;      EnableFilteringMessagesBeforePublishing = true&#xD;&#xA;    };&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Client code will be responsible for handling this exception. Therefore, think twice if that is a desired behavior on the sender side. If it is, then make sure to deal with the exception.&#xD;&#xA;&#xD;&#xA;&#x9;var topicClient = TopicClient.CreateFromConnectionString(connectionString, topicPath);&#xD;&#xA;&#x9;var msg = new BrokeredMessage(messageBody);&#xD;&#xA;&#x9;try&#xD;&#xA;&#x9;{&#x9;        &#xD;&#xA;&#x9;&#x9;await topicClient.SendAsync(msg);&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;catch (NoMatchingSubscriptionException ex)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;logger.LogError(ex.Message);&#xD;&#xA;&#x9;}&#xD;&#xA;&#xD;&#xA;Running this code will result in the following message being logged (IDs and timestamp will be different):&#xD;&#xA;&#xD;&#xA;    There is no matching subscription found for the message with MessageId '47eda34d2a764b76b8363b7d85463b24'. TrackingId:aa0d3da1-9e75-478b-ae8f-cd60d195ed8b_G15_B9,TimeStamp:3/7/2016 5:28:38 AM&#xD;&#xA;&#xD;&#xA;  [1]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2016/topic-subscription.png&#xD;&#xA;  [2]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2016/topic-subscription-empty.png" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2016-03-07T05:02:00Z" PublishedUtc="2016-03-07T05:35:41.6116301Z" ModifiedUtc="2016-03-07T05:35:41.5960325Z" />
      <TagsPart Tags="" />
      <AutoroutePart Alias="azure-service-bus-nomatchingsubscriptionexception" UseCustomPattern="false" />
      <TitlePart Title="Azure Service Bus - NoMatchingSubscriptionException" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=getting-to-environment-variables-fast" Status="Published">
      <BodyPart Text="I tend to keep connection strings, security tokens, and other secrets in the environment variable. This is handy when you commit your code to a public repository and want to make sure that your storage account connection string is not shared worldwide. It's also convenient because all those variables can be accessed in almost any hosting environment (VM, Cloud Service, WebJob, Azure Function, you name it). The downside - getting to those environment variables fast to modify those.&#xD;&#xA;&#xD;&#xA;Usually, I'd be doing Computer --&gt; Properties --&gt; Advanced System Properties to get where I need. When RDPed into a VM or a Cloud Service instance that's just slow. Luckily, there's a way to get to the same place much faster.&#xD;&#xA;&#xD;&#xA;    Win-R (to open a run command window)&#xD;&#xA;    sysdm.cpl ,3&#xD;&#xA;&#xD;&#xA;And done. Works like a charm. No more clicks and navigates in a slow worker role instance.&#xD;&#xA;Happy fast environment variables editing!" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2016-04-20T05:38:00Z" PublishedUtc="2016-04-20T05:48:08.690181Z" ModifiedUtc="2016-04-20T05:48:08.6745243Z" />
      <TagsPart Tags="" />
      <AutoroutePart Alias="getting-to-environment-variables-fast" UseCustomPattern="false" />
      <TitlePart Title="Getting to Environment Variables Fast" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=eventprocessorhost-inject-dependencies" Status="Published">
      <BodyPart Text="Processing with Azure EventHubs can be significantly simplified if using [`EventProcessorHost`](https://msdn.microsoft.com/library/microsoft.servicebus.messaging.eventprocessorhost.aspx). EventProcessorHost is using Azure Storage account to track last read locations (pointers) in event hub partitions. &#xD;&#xA;&#xD;&#xA;![enter image description here][1]&#xD;&#xA;&#xD;&#xA;In order to start a host, `eventHubName`, `eventHubConnectionString`, and `storageConnectionString` need to be passed in (`eventProcessorHostName` could be a `GUID` or anything else).&#xD;&#xA;&#xD;&#xA;    var eventProcessorHost = new EventProcessorHost(eventProcessorHostName, eventHubName, EventHubConsumerGroup.DefaultGroupName, eventHubConnectionString, storageConnectionString);&#xD;&#xA;&#xD;&#xA;Once a host is created, a processor needs to be specified. A processor is a class implementing `IEventProcessor` contact which will allow to open and close processor, and process events data.&#xD;&#xA;&#xD;&#xA;    eventProcessorHost.RegisterEventProcessorAsync&lt;SimpleEventProcessor&gt;();&#xD;&#xA;&#xD;&#xA;While this is working great, there's no simple way to inject dependencies into the processor you define using registration demonstrated above. Gladly, there's a factory registration that allows registering `IEventProcessorFactory` implementation.&#xD;&#xA;&#xD;&#xA;    eventProcessorHost.RegisterEventProcessorFactoryAsync(new EventProcessorFactory(dependency))&#xD;&#xA;&#xD;&#xA;Where `EventProcessorFactory` is defined as follow:&#xD;&#xA;&#xD;&#xA;    class EventProcessorFactory : IEventProcessorFactory&#xD;&#xA;    {&#xD;&#xA;        private readonly IDependency dependency;&#xD;&#xA;    &#xD;&#xA;        public EventProcessorFactory(IDependency dependency)&#xD;&#xA;        {&#xD;&#xA;            this.dependency= dependency;&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        public IEventProcessor CreateEventProcessor(PartitionContext context)&#xD;&#xA;        {&#xD;&#xA;            return new SimpleEventProcessor(dependency);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;And now we can define our `SimpleEventProcessor` processor with any dependencies that we want. &#xD;&#xA;&#xD;&#xA;Happy processing!&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2016/event-processor-host.png" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2016-03-16T05:04:00Z" PublishedUtc="2016-03-16T06:03:14.7871441Z" ModifiedUtc="2016-03-16T06:03:14.7543709Z" />
      <TagsPart Tags="" />
      <AutoroutePart Alias="eventprocessorhost-inject-dependencies" UseCustomPattern="false" />
      <TitlePart Title="EventProcessorHost Inject Dependencies" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=reducing-comments-clutter-with-github-reactions" Status="Published">
      <BodyPart Text="Last week GitHub has introduced what seems like a small feature, but a huge comments de-clutter if you ask me: reactions. I've been using Slack for quite a while and among the feature that slack has had for a while was reactions for comments. From the UI perspective, reactions allow to provide the needed feedback w/o taking too much of the vertical space. &#xD;&#xA;&#xD;&#xA;When a discussion is taking place, situation when people agree or disagree and desire to make sure that their voice is heard and counted is quite a norm. This how it would look like with GitHub so far:&#xD;&#xA;&#xD;&#xA;![reactions before][1]&#xD;&#xA;&#xD;&#xA;Problem with this approach was that it was inflating comments and each +/-1 or thumb up/down would trigger unnecessary notifications.&#xD;&#xA;&#xD;&#xA;Now you can simple react. No notifications, no infinite scrolling just because a bunch of people agree or disagree. No guilty feeling that you're extending a list of comments just with a silly +1 to show that you're standing for a proposal (or -1 if you stand against it). &#xD;&#xA;&#xD;&#xA;![reactions now][2]&#xD;&#xA;&#xD;&#xA;If there's one thing I'd like to add to make it even better is to have a shortcut. Yes, a shortcut. Who knows, maybe that will happen soon. And, to even greater surprise, be Ctrl-Shift-| :)&#xD;&#xA;&#xD;&#xA;Happy reacting on GitHub!&#xD;&#xA;&#xD;&#xA;  [1]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2016/github-before.png&#xD;&#xA;&#xD;&#xA;  [2]: https://cloud.githubusercontent.com/assets/25792/13683303/d55b8b7e-e6ba-11e5-9b31-59a8db92e456.gif" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2016-03-14T05:24:50.6121564Z" PublishedUtc="2016-03-14T05:24:50.6121564Z" ModifiedUtc="2016-03-14T05:24:50.5496506Z" />
      <TagsPart Tags="" />
      <AutoroutePart Alias="reducing-comments-clutter-with-github-reactions" UseCustomPattern="false" />
      <TitlePart Title="Reducing Comments Clutter with GitHub Reactions" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=azure-service-bus-onmessage-api" Status="Published">
      <BodyPart Text="When it comes to receiving messages with ASB, there are plenty of options:&#xD;&#xA;&#xD;&#xA; - `QueueClient` to receive messages from queues &#xD;&#xA; - `SubscriptionClient` to receive messages from subscriptions &#xD;&#xA; - `MessageReceiver` to receive messages from queues or subscriptions (which is convenient since doesn't require particular receiver type per entity type)&#xD;&#xA;&#xD;&#xA;All support Receive/ReceiveAsync for a single message receiving operation. Though usually, when you receive messages you receive those throughout your entire application life and need a message pump. While it sounds not a complicated task, many aspects need to be taken into consideration when building a message pump. What's nice with ASB is that you don't have to. It's given to you with `OnMessage` API.&#xD;&#xA;&#xD;&#xA;`OnMessage` API is an asynchronous process that receives messages in an event-driven message pump.&#xD;&#xA;When calling OnMessage, the client starts an internal message pump that continuously polls the queue or subscription. This message pump consists of an infinite loop that issues a Receive() call. If the call times out, it issues the next Receive() call. `OnMessage` accepts a callback that passes in the message that is received and needs to return a task. Also, OnMessageOptions is passed it defining the following:&#xD;&#xA;&#xD;&#xA; 1. AutoComplete - if set to `true`, once callback is completed, the message is automatically completed. If set to false, you need to complete (`CompleteAsync`) the message yourself.&#xD;&#xA; 2. AutoRenewTimeout - if processing is taking longer than the lock duration, ASB will issue lock time extension w/o increasing the delivery count.&#xD;&#xA; 3. MaxConcurrentCalls - the number of concurrent calls to the callback ASB will make.&#xD;&#xA;&#xD;&#xA;Equipped with this options, creation of a message pump is a breeze:&#xD;&#xA;&#xD;&#xA;    var receiver = await messageFactory.CreateMessageReceiverAsync(&quot;test&quot;);&#xD;&#xA;    var options = new OnMessageOptions &#xD;&#xA;    {&#xD;&#xA;      AutoComplete = true,&#xD;&#xA;      AutoRenewTimeout = TimeSpan.FromMinutes(1), // for lock duration 30 secs&#xD;&#xA;      MaxConcurrentCalls = concurrencyLevel&#xD;&#xA;    };&#xD;&#xA;&#xD;&#xA;    // callback&#xD;&#xA;    receiver.OnMessageAsync(async (message) =&gt;&#xD;&#xA;    {&#xD;&#xA;      // processing message&#xD;&#xA;    }, options);&#xD;&#xA;&#xD;&#xA;What's the benefit of this approach:&#xD;&#xA;&#xD;&#xA; 1. No need to worry about creating the pump&#xD;&#xA; 2. Auto-completion&#xD;&#xA; 3. Auto-extension of lock duration if operation is taking longer&#xD;&#xA; 4. Easy control over concurrency&#xD;&#xA; 5. Bonus: error handling&#xD;&#xA;&#xD;&#xA;How does the error handling working? By subscribing to the `OnMessageOptions.ExceptionReceived` event, we get notified whenever `OnMessage` is failing to receive a message _or_ message processing is failing in the message pump code.&#xD;&#xA;&#xD;&#xA;With this information, you can quickly build message pump and handle exception while receiving or processing messages. Whenever the message is completed, it will be marked as such, if it's failing, ASB will abandon it and will try to receive again later." />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2016-03-18T05:08:28.5399947Z" PublishedUtc="2016-03-18T05:08:28.5399947Z" ModifiedUtc="2016-03-18T05:08:28.5243627Z" />
      <TagsPart Tags="" />
      <AutoroutePart Alias="azure-service-bus-onmessage-api" UseCustomPattern="false" />
      <TitlePart Title="Azure Service Bus - OnMessage API" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=azure-service-bus-number-of-messages-in-a-single-transaction" Status="Published">
      <BodyPart Text="Azure Service Bus will not accept a transaction with more than a 100 messages. Not even if you send a batch. It is still a subject to the maximum 100 messages. If you try to send more, the exception &quot;Cannot send more than 100 messages in a single transaction.&quot; will be upon you. &#xD;&#xA;&#xD;&#xA;This limit is not documented, so keep that in mind :)" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2016-03-18T05:45:00Z" PublishedUtc="2016-03-18T05:51:40.1394045Z" ModifiedUtc="2016-03-18T05:14:09.1978926Z" />
      <TagsPart Tags="" />
      <AutoroutePart Alias="azure-service-bus-number-of-messages-in-a-single-transaction" UseCustomPattern="false" />
      <TitlePart Title="Azure Service Bus - Number of Messages in a Single Transaction" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=choosing-topology-with-azure-service-bus" Status="Published">
      <BodyPart Text="Last week at the [Calgary .NET usergroup][1] presentation on [Azure Service Bus][2] I was talking about different options the services provides. Along with that, have also noted the quotas and limits subject to tier and usage. There were good questions asked, and one of those question I'd like to highlight here - choosing what topology to use with Azure Service Bus.&#xD;&#xA;&#xD;&#xA;When working with ASB, quotas and performance are the a few things to keep in mind when designing your topology. Below, is an example of *a topology*. &#xD;&#xA;&#xD;&#xA;![enter image description here][3]&#xD;&#xA;&#xD;&#xA;Publisher(s) have a topic per event in the system. Subscriber(s) subscribe to the topics to receive published events. All is great. But is it? Let's dive into details.&#xD;&#xA;&#xD;&#xA;![enter image description here][4]&#xD;&#xA;&#xD;&#xA;Assuming we've got an input queue for regular messages (like commands) and subscribe to three distinct events (*EventA*, *EventB*, and *EventC*), we'll end up with four receivers. For a small to a medium size system, this is not that bad. Scaling subscribers out and having receivers with concurrency higher than one brings us beyond four connections to the namespace. And each namespace has a [limit][5] of 1000 connections per namespace when running with the default SBMP protocol. What will happen when some events and subscribers are getting high? The number of receivers will go up, and ASB servers will reject connections. Sadly, this is where the original topology no longer holds true, and a different topology is needed.&#xD;&#xA;&#xD;&#xA;Thanks to multiple features of ASB, coming up with a required topology is not an issue. For the sample topology above, a feature of *Auto Forwarding* can be used to solve the issue of multiple receivers. Each subscriber when creating a subscription will need to specify a queue to auto-forward to. &#xD;&#xA;&#xD;&#xA;![enter image description here][6]&#xD;&#xA;&#xD;&#xA;An additional benefit we get with this topology is that broker is forwarding natively event messages to the destination queue, decreasing chances of failures when trying to receive messages with multiple subscriptions.&#xD;&#xA;&#xD;&#xA;Fantastic! Original topology is improved. We can rest. Or can we? What if we have a critical event in our system that we receive rarely, but when do, need to process it quickly? With the topology we have now, this event can sit behind other (more frequent) events and commands that all are going into the input queue. Back to the topology design :)&#xD;&#xA;&#xD;&#xA;Hopefully, this example gives you enough food for thought on topologies. There's not one topology to rule them all. You'll have to find the topology that works for your needs and architecture. And when you do settle on one, keep refining it to adapt to the changes your application/system goes through.&#xD;&#xA;&#xD;&#xA;  [1]: http://www.meetup.com/Calgary-net-User-Group/events/229063004/&#xD;&#xA;  [2]: https://github.com/SeanFeldman/ASB-DotNet-YYC/&#xD;&#xA;  [3]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2016/topology-01.png&#xD;&#xA;  [4]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2016/topology-02.png&#xD;&#xA;  [5]: https://azure.microsoft.com/en-us/documentation/articles/service-bus-quotas/&#xD;&#xA;  [6]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2016/topology-03.png" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2016-03-28T19:51:03.594281Z" PublishedUtc="2016-03-28T19:51:03.594281Z" ModifiedUtc="2016-03-28T19:51:03.594281Z" />
      <TagsPart Tags="ASB" />
      <AutoroutePart Alias="choosing-topology-with-azure-service-bus" UseCustomPattern="false" />
      <TitlePart Title="Choosing Topology with Azure Service Bus" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=azure-functions" Status="Published">
      <BodyPart Text="When Azure Functions were announced at the Build2016 conference, I had to see what is it. Part of my curiosity was fueled by the same thought I had for WebJobs when those where announced first. To be more specific, an [alternative hosting environment for NServiceBus][1] in the Azure cloud. I'll share my personal conclusions in a little bit. However, first, what are Azure Functions?&#xD;&#xA;&#xD;&#xA;Azure Functions are lightweight functions that are executed as a response to various events. An HTTP call, a new blob in Azure Storage, a new message on a storage queue, web hook invocation, etc. Sounds very similar to what WebJobs are doing. Indeed. It is because Functions *are* implemented on top of the WebJobs, running on top of [Kudu project][2]. Big difference between the two is how they are running. To run WebJobs, Azure Hosting Plan is required, executed 24/7. Azure Functions while can be executed on an existing Hosting Plan, can also run using Dynamic Hosting Plan. Runs the functions when those are triggered. Hence, the charge is based on the amount of memory function is using, times time it was running. &#xD;&#xA;&#xD;&#xA;To start with Azure functions, you can either start at https://functions.azure.com or through the portal. Documentation is available through https://azure.microsoft.com/en-us/services/functions/. [Core concepts][3] document is recommended to understand the basics. You'll find yourself playing with the actual bits easier after that.&#xD;&#xA;&#xD;&#xA;Editing scripts is conveniently easy. Starting from pre-existing templates allows you to move fast. The feature is still in beta, so expect some rough edges. The editor is not bad, and it will only get better (IntelliSense should be coming soon, making editing experience much smoother). Integration of the editor with the streaming logs and sample data makes it easy to develop functions, experimenting and tweaking it fast. A neat feature is saving. Hitting CTRL-S will save your function.&#xD;&#xA;&#xD;&#xA;![enter image description here][4]&#xD;&#xA;&#xD;&#xA;Another thing to keep in mind - Azure Functions are implemented on top of WebJobs. Therefore, the SCM portal can be used to inspect, modify, and deploy Functions. When creating Functions, they are stored under `Function App`. In my case, `Function App` is called &quot;function-sean&quot;. SCM portal is always https://function-app-name.scm.azurewebsites.net. Et voilà, we've got to the SCM portal under which Functions are running.&#xD;&#xA;&#xD;&#xA;All Azure Functions run with a web application, so just like WebJobs they'll be found under site/wwwroot. Each Function will have a folder of its own. I've deployed two functions, hence two folders.&#xD;&#xA;![enter image description here][5]&#xD;&#xA;&#xD;&#xA;The official documentation talk about 2 files (function.json and run.csx), but there are additional files, which make the portal experience much richer.&#xD;&#xA;&#xD;&#xA;![enter image description here][6]&#xD;&#xA;&#xD;&#xA;TestOutput.json is the Output pane from the last execution at the portal.&#xD;&#xA;![enter image description here][7]&#xD;&#xA;&#xD;&#xA;Run.csx is the function itself. This is a C# script file. You can run .csx in Visual Studio 2015 Update 1 or later by opening [C# Interactive window][8]. It is a C# REPL, which also can load a file (`#load` command). I assume Visual Studio tooling will be updated soon to allow functions creation using a new project template.&#xD;&#xA;&#xD;&#xA;Now back to hosting NServiceBus endpoints. Personally, I do not think Azure Functions would make a good host. Functions are intended to be a quick response to an event. They should not run all the time. When are triggered, should execute fast. The whole point is to save on resources utilization and pay per execution, and not to have something that is constantly running. Nature of NServiceBus would require loading, scanning for messages and handlers, hence making this a lengthy operation that is not suited for Functions. However, there is a use case where Functions can be extremely helpful: native integration. Native integration, while doesn't have a dependency on NServiceBus assemblies, does require transport assemblies. For example, when using Azure Service Bus, native integration would still have to reference Azure Service Bus client assembly to create and send a `BrokeredMessage` (see [example][9]). What if your integration is with an environment where ASB client library is not available or running on a platform/language that is not supported? This is where Azure Functions will be helpful. You could create a function that accepts a REST call via HTTP and convert raw JSON data into a native `BrokeredMessage`, pushing it on a queue and delivering to an endpoint.&#xD;&#xA;&#xD;&#xA;Note: as of now, Azure Functions do not have support for ASB bindings (`in` and `out`), but it is coming [shortly][10]. Till then, this can be solved by referencing ASB NuGet package. Also, when creating Service Bus namespace, it is only using Notification Hub, not the messaging.&#xD;&#xA;&#xD;&#xA;To sum it up, Azure Functions are a nice was to write economically safe event based triggers. They can scale-out (maximum of 4 concurrent executions with Dynamic Hosting Plan). With the pay-per-use model, it will make it attractive for certain scenarios where a full-fledged WebJob is just too much. &#xD;&#xA;&#xD;&#xA;  [1]: https://weblogs.asp.net/sfeldman/nservicebus-with-azure-webjobs&#xD;&#xA;  [2]: https://github.com/projectkudu/kudu&#xD;&#xA;  [3]: https://azure.microsoft.com/en-us/documentation/articles/functions-reference/#core-concepts&#xD;&#xA;  [4]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2016/functions-01.png&#xD;&#xA;  [5]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2016/functions-02.png&#xD;&#xA;  [6]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2016/functions-03.png&#xD;&#xA;  [7]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2016/functions-04.png&#xD;&#xA;  [8]: https://github.com/dotnet/roslyn/wiki/Interactive-Window&#xD;&#xA;  [9]: http://docs.particular.net/samples/azure/native-integration-asb/&#xD;&#xA;  [10]: https://github.com/projectkudu/AzureFunctions/issues/273" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2016-04-04T05:58:00Z" PublishedUtc="2016-04-04T05:59:10.6998806Z" ModifiedUtc="2016-04-04T05:59:10.6217533Z" />
      <TagsPart Tags="Azure NServiceBus" />
      <AutoroutePart Alias="azure-functions" UseCustomPattern="false" />
      <TitlePart Title="Azure Functions" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=azure-service-bus-premium-message-size" Status="Published">
      <BodyPart Text="Messaging is about small messages. You should keep your messages relatively small. If you have fat messages, you're doing it wrong. All valid statements, until you look closer at the [Azure Service Bus Quotas](https://azure.microsoft.com/en-us/documentation/articles/service-bus-quotas/) information. The ones that are sometimes hard to digest would be:&#xD;&#xA;&#xD;&#xA;1. Message size for a queue/topic/subscription entity - 256KB&#xD;&#xA;2. Maximum header size - 64KB&#xD;&#xA;&#xD;&#xA;It means up to 192KB for the payload. For the most scenarios, 192KB is a lot of data for a payload. If your message is slightly over that size, you're out of luck and will have to look into implementing a claim check pattern. Unfortunately, that mean the message is handled by more than a single service (Azure Service Bus and Azure Storage). Till recently that was the only option. Facing size limit, this is where you might reconsider Azure Service Bus Standard tier and trade your old ride for a new one: Premium Tier.&#xD;&#xA;&#xD;&#xA;[Premium tier](https://azure.microsoft.com/en-us/documentation/articles/service-bus-premium-messaging/) was added to handle addresses scale, performance, and availability. Now it can also handle messages large than 1MB. To be more specific, up to 1MB (according to the tests I've done).&#xD;&#xA;&#xD;&#xA;   &#xD;&#xA;    var namespaceManager = NamespaceManager.CreateFromConnectionString(connectionString);&#xD;&#xA;&#x9;var queueName = &quot;test&quot;;&#xD;&#xA;&#x9;if (!await namespaceManager.QueueExistsAsync(queueName))&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;await namespaceManager.CreateQueueAsync(queueName);&#xD;&#xA;&#x9;&#x9;Console.WriteLine(&quot;Queue created&quot;);&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;Console.WriteLine(&quot;Queue existed&quot;);&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;var factory = await MessagingFactory.CreateAsync(namespaceManager.Address, namespaceManager.Settings.TokenProvider);&#xD;&#xA;&#x9;var sender = await factory.CreateMessageSenderAsync(queueName);&#xD;&#xA;&#xD;&#xA;    // send a payload of 512KB&#xD;&#xA;&#x9;var msg1 = new BrokeredMessage(new string('A', 512 * 1024));&#xD;&#xA;&#x9;msg1.TimeToLive = TimeSpan.FromMinutes(2);&#xD;&#xA;&#xD;&#xA;&#x9;Console.WriteLine(&quot;Sending batch&quot;);&#xD;&#xA;&#x9;await sender.SendAsync(msg1);&#xD;&#xA;&#xD;&#xA;![enter image description here][1]&#xD;&#xA;&#xD;&#xA;**Note**: the maximum size I've managed to send was 1,013KB&#xD;&#xA;&#xD;&#xA;![enter image description here][2]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2016/1MB-02.png&#xD;&#xA;  [2]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2016/1MB-03.png&#xD;&#xA;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2016-04-14T04:57:00Z" PublishedUtc="2016-04-14T21:48:30.9839201Z" ModifiedUtc="2016-04-14T21:48:30.9478579Z" />
      <TagsPart Tags="ASB" />
      <AutoroutePart Alias="azure-service-bus-premium-message-size" UseCustomPattern="false" />
      <TitlePart Title="Azure Service Bus Premium - Message Size" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=cloud-services-cached-version-of-asseblies" Status="Published">
      <BodyPart Text="Today have run into an interesting issue: a cloud service deployed with a 3rd party assembly version X was failing. The exception was indicating that version X-1 of the assembly was deployed. Looking at the project packages.config could see nothing but version X of the assembly. Quite a mystery.&#xD;&#xA;&#xD;&#xA;After scratching my head, I couldn't think of anything other than a wrong version of the assembly being deployed. But how?! The version of the NuGet package is right. Deployment takes whatever the package is providing. What could it be, a cached assembly file? Hmmm, I'd think that rebuild would wipe the output.&#xD;&#xA;&#xD;&#xA;Either way, to resolve the mystery and identify the version of the *actually* deployed assembly, here's a trivial code to run.&#xD;&#xA;&#xD;&#xA;    var type = typeof(SomeClass)&#xD;&#xA;    logger.Log(FileVersionInfo.GetVersionInfo(type.Assembly.Location).ProductVersion);&#xD;&#xA;&#xD;&#xA;I'm still not sure how did that happen, but looks like CSes packaging/deployment can be affected by the cache." />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2016-04-15T05:43:00Z" PublishedUtc="2016-04-15T05:43:34.7808808Z" ModifiedUtc="2016-04-15T05:43:34.7652644Z" />
      <TagsPart Tags=".NET" />
      <AutoroutePart Alias="cloud-services-cached-version-of-asseblies" UseCustomPattern="false" />
      <TitlePart Title="Cloud Services - Cached Version of Asseblies" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=azure-service-bus-deploying-with-arm" Status="Published">
      <BodyPart Text="Azure Service Bus still can't be created at the new portal, aka Ibiza. To create Azure Service Bus namespace and create entities, one has to do in manually at the old portal.  That wouldn't be so bad, but the lack of controlling what Resource Group the new namespace will belong to is a slight impediment for those that like their resources to be at the right places.&#xD;&#xA;&#xD;&#xA;Luckily, there's an option to deploy ASB resources using ARM templates. And there are also [a few templates][1] to demonstrate how to do it. Unfortunately, those templates utilize `Switch-AzureMode` cmdlet that is no longer supported.&#xD;&#xA;&#xD;&#xA;I've put together a sample to demonstrate how a template can be used and what are the commands that were needed to be executed to be able to deploy ASB resources using ARM template. &#xD;&#xA;&#xD;&#xA;First, like many others, I have more than a single subscription. To be able to deploy, I would need to specify what subscription to use for deployment. To select a subscription,  first, there's need to login to be able to access that information. This is achieved by using `Add-AzureRmAccount`. Notice the `AzureRm` part? That's what all the ARM commands are using nowadays. Could be subject to change. Just like `Switch-AzureMode`. A popup will show up to enter your Azure credentials.&#xD;&#xA;&#xD;&#xA;![enter image description here][2]&#xD;&#xA;&#xD;&#xA;Once you've been authenticated, the following will be presented&#xD;&#xA;&#xD;&#xA;    Environment           : AzureCloud&#xD;&#xA;    Account               : your.email.address@domain.name&#xD;&#xA;    TenantId              : yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy&#xD;&#xA;    SubscriptionId        : xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&#xD;&#xA;    CurrentStorageAccount :&#xD;&#xA;&#xD;&#xA;Next step is to select what subscription to use for deployment.&#xD;&#xA;&#xD;&#xA;    Set-AzureRmContext -SubscriptionId xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&#xD;&#xA;&#xD;&#xA;Once the operational context is set, a new resource group can be created. You can skip this test if you already have a resource group to use.&#xD;&#xA;&#xD;&#xA;    New-AzureRmResourceGroup -Name ASB-RG -Location &quot;West US&quot;&#xD;&#xA;&#xD;&#xA;The convention of `-RG` might look redundant here.What can I say, old habits die hard. Either way, the output of the command is worth evaluation.&#xD;&#xA;&#xD;&#xA;    ResourceGroupName : ASB-RG&#xD;&#xA;    Location          : westus&#xD;&#xA;    ProvisioningState : Succeeded&#xD;&#xA;    Tags              :&#xD;&#xA;    ResourceId        : /subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/ASB-RG&#xD;&#xA;&#xD;&#xA;1. Resource group name is `ASB-RG`&#xD;&#xA;1. Location is West US region&#xD;&#xA;1. Resource ID include subscription ID (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)&#xD;&#xA;&#xD;&#xA;Final step is to create the needed resources (ASB namespace) and the entities. A few things to note. First, I'm deploying a template from a file and not a link, therefore `-TemplateFile` is used. Second, I'm giving deployment a name to read back the object, but it's really not necessary.&#xD;&#xA;&#xD;&#xA;     New-AzureRmResourceGroupDeployment -Name my-deployment -ResourceGroupName ASB-RG -TemplateFile C:\templates\asb.json&#xD;&#xA;&#xD;&#xA;It takes a while to provision a new namespace with the entities. Command will ask for the parameters we need to supply. It's possible to provide those via an external file, but I have skipped that part.&#xD;&#xA;&#xD;&#xA;    cmdlet New-AzureRmResourceGroupDeployment at command pipeline position 1&#xD;&#xA;    Supply values for the following parameters:&#xD;&#xA;    (Type !? for Help.)&#xD;&#xA;    serviceBusNamespaceName: asb-rg-ns&#xD;&#xA;    serviceBusTopicName: asb-rg-topic&#xD;&#xA;    serviceBusSubscriptionName: asb-rg-sub&#xD;&#xA;&#xD;&#xA;The output after a while looks like the following:&#xD;&#xA;&#xD;&#xA;    DeploymentName          : my-deployment&#xD;&#xA;    ResourceGroupName       : ASB-RG&#xD;&#xA;    ProvisioningState       : Succeeded&#xD;&#xA;    Timestamp               : 2016-04-18 04:07:10&#xD;&#xA;    Mode                    : Incremental&#xD;&#xA;    TemplateLink            :&#xD;&#xA;    Parameters              :&#xD;&#xA;                              Name             Type                       Value&#xD;&#xA;                              ===============            =========================  ==========&#xD;&#xA;                              serviceBusNamespaceName    String                     asb-rg-ns&#xD;&#xA;                              serviceBusTopicName        String                     asb-rg-topic&#xD;&#xA;                              serviceBusSubscriptionName String                     asb-rg-sub&#xD;&#xA;                              serviceBusApiVersion       String                     2015-08-01&#xD;&#xA;    &#xD;&#xA;    Outputs                 :&#xD;&#xA;                              Name                          Type                       Value&#xD;&#xA;                              ===============               =========================  ==========&#xD;&#xA;                              namespaceConnectionString     String                     Endpoint=sb://asb-rg-ns.servicebus.windows.net/;SharedAccessKey&#xD;&#xA;                              Name=RootManageSharedAccessKey;SharedAccessKey=&lt;shared-access-key&gt;&#xD;&#xA;                              sharedAccessPolicyPrimaryKey  String                     &lt;shared-access-primary-key&gt;&#xD;&#xA;    &#xD;&#xA;    DeploymentDebugLogLevel :&#xD;&#xA;&#xD;&#xA;Details of asb.json can be found on the Azure documentation site with [detailed explanation][3] about parameters and options.&#xD;&#xA;&#xD;&#xA;Should you wish to read more on deploying with ARM templates, [Using Azure PowerShell with Azure Resource Manager article][4] can provide good information.&#xD;&#xA;&#xD;&#xA;Final result - `ASB-RG` resource group with `asb-rg-ns` messaging namespace.&#xD;&#xA;&#xD;&#xA;![enter image description here][5]&#xD;&#xA;&#xD;&#xA;And all the entities are in place as well.&#xD;&#xA;&#xD;&#xA;![enter image description here][6]&#xD;&#xA;&#xD;&#xA;Happy automated deployments!&#xD;&#xA;&#xD;&#xA;  [1]: https://azure.microsoft.com/en-us/documentation/articles/service-bus-arm-namespace-topic/#resources-to-deploy&#xD;&#xA;  [2]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2016/arm-01.png&#xD;&#xA;  [3]: https://azure.microsoft.com/en-us/documentation/articles/service-bus-arm-namespace-topic/#resources-to-deploy&#xD;&#xA;  [4]: https://azure.microsoft.com/en-us/documentation/articles/powershell-azure-resource-manager/&#xD;&#xA;  [5]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2016/arm-02.png&#xD;&#xA;  [6]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2016/arm-03.png" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2016-04-18T05:21:00Z" PublishedUtc="2016-04-18T05:22:25.0542027Z" ModifiedUtc="2016-04-18T05:22:25.0385454Z" />
      <TagsPart Tags="ASB" />
      <AutoroutePart Alias="azure-service-bus-deploying-with-arm" UseCustomPattern="false" />
      <TitlePart Title="Azure Service Bus - Deploying with ARM" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=task-vs-async-task" Status="Published">
      <BodyPart Text="How often do you write code and think about what will it look like the compiler is done with it? If you're like me, not often. But is it a good thing that over the time we've learned to trust unquestionably the compiler and blindly rely on it to do the job for us? &#xD;&#xA;&#xD;&#xA;I was lucky to get some guidance from [Daniel Marbach][1] on `async`/`await` and the importance of understanding code optimizations that compiler is performing. Without any further due, let's dive into an example.&#xD;&#xA;&#xD;&#xA;Consider the following method:&#xD;&#xA;&#xD;&#xA;    Task MainAsync()&#xD;&#xA;    {&#xD;&#xA;       return Task.Delay(1000);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;Now the same method with a slight variation, marking the method as async and awaiting the delay.&#xD;&#xA;&#xD;&#xA;    async Task MainAsync()&#xD;&#xA;    {&#xD;&#xA;       await Task.Delay(1000);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;Looks almost identical. But is it? Let's look at what compiler generates.&#xD;&#xA;&#xD;&#xA;For the first method, it's identical to the original code:&#xD;&#xA;&#xD;&#xA;    Task MainAsync()&#xD;&#xA;    {&#xD;&#xA;       return Task.Delay(1000);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;But for the second method, the compiler does... magic and voodoo.&#xD;&#xA;&#xD;&#xA;    private Task MainAsync2()&#xD;&#xA;    {&#xD;&#xA;    &#x9;UserQuery.\u003CMainAsync2\u003Ed__2 mainAsync2D2 = new UserQuery.\u003CMainAsync2\u003Ed__2();&#xD;&#xA;    &#x9;mainAsync2D2.\u003C\u003E4__this = this;&#xD;&#xA;    &#x9;mainAsync2D2.\u003C\u003Et__builder = AsyncTaskMethodBuilder.Create();&#xD;&#xA;    &#x9;mainAsync2D2.\u003C\u003E1__state = -1;&#xD;&#xA;    &#x9;AsyncTaskMethodBuilder taskMethodBuilder = mainAsync2D2.\u003C\u003Et__builder;&#xD;&#xA;    &#x9;((AsyncTaskMethodBuilder) @taskMethodBuilder).Start&lt;UserQuery.\u003CMainAsync2\u003Ed__2&gt;((M0&amp;) @mainAsync2D2);&#xD;&#xA;    &#x9;return ((AsyncTaskMethodBuilder) @mainAsync2D2.\u003C\u003Et__builder).get_Task();&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;No magic. The compiler just creates a state machine due to async/await keywords. &#xD;&#xA; &#xD;&#xA;&#xD;&#xA;     [/*Attribute with token 0C000007*/CompilerGenerated]&#xD;&#xA;      private sealed class \u003CMainAsync2\u003Ed__2 : IAsyncStateMachine&#xD;&#xA;      {&#xD;&#xA;    &#x9;public int \u003C\u003E1__state;&#xD;&#xA;    &#x9;public AsyncTaskMethodBuilder \u003C\u003Et__builder;&#xD;&#xA;    &#x9;public UserQuery \u003C\u003E4__this;&#xD;&#xA;    &#x9;private TaskAwaiter \u003C\u003Eu__1;&#xD;&#xA;    &#xD;&#xA;    &#x9;public \u003CMainAsync2\u003Ed__2()&#xD;&#xA;    &#x9;{&#xD;&#xA;    &#x9;  base.\u002Ector();&#xD;&#xA;    &#x9;}&#xD;&#xA;    &#xD;&#xA;    &#x9;void IAsyncStateMachine.MoveNext()&#xD;&#xA;    &#x9;{&#xD;&#xA;    &#x9;  int num1 = this.\u003C\u003E1__state;&#xD;&#xA;    &#x9;  try&#xD;&#xA;    &#x9;  {&#xD;&#xA;    &#x9;&#x9;TaskAwaiter taskAwaiter;&#xD;&#xA;    &#x9;&#x9;int num2;&#xD;&#xA;    &#x9;&#x9;if (num1 != 0)&#xD;&#xA;    &#x9;&#x9;{&#xD;&#xA;    &#x9;&#x9;  taskAwaiter = Task.Delay(1000).GetAwaiter();&#xD;&#xA;    &#x9;&#x9;  // ISSUE: explicit reference operation&#xD;&#xA;    &#x9;&#x9;  if (!((TaskAwaiter) @taskAwaiter).get_IsCompleted())&#xD;&#xA;    &#x9;&#x9;  {&#xD;&#xA;    &#x9;&#x9;&#x9;this.\u003C\u003E1__state = num2 = 0;&#xD;&#xA;    &#x9;&#x9;&#x9;this.\u003C\u003Eu__1 = taskAwaiter;&#xD;&#xA;    &#x9;&#x9;&#x9;UserQuery.\u003CMainAsync2\u003Ed__2 mainAsync2D2 = this;&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;((AsyncTaskMethodBuilder) @this.\u003C\u003Et__builder).AwaitUnsafeOnCompleted&lt;TaskAwaiter, UserQuery.\u003CMainAsync2\u003Ed__2&gt;((M0&amp;) @taskAwaiter, (M1&amp;) @mainAsync2D2);&#xD;&#xA;    &#x9;&#x9;&#x9;return;&#xD;&#xA;    &#x9;&#x9;  }&#xD;&#xA;    &#x9;&#x9;}&#xD;&#xA;    &#x9;&#x9;else&#xD;&#xA;    &#x9;&#x9;{&#xD;&#xA;    &#x9;&#x9;  taskAwaiter = this.\u003C\u003Eu__1;&#xD;&#xA;    &#x9;&#x9;  this.\u003C\u003Eu__1 = (TaskAwaiter) null;&#xD;&#xA;    &#x9;&#x9;  this.\u003C\u003E1__state = num2 = -1;&#xD;&#xA;    &#x9;&#x9;}&#xD;&#xA;    &#x9;&#x9;((TaskAwaiter) @taskAwaiter).GetResult();&#xD;&#xA;    &#x9;&#x9;taskAwaiter = (TaskAwaiter) null;&#xD;&#xA;    &#x9;  }&#xD;&#xA;    &#x9;  catch (Exception ex)&#xD;&#xA;    &#x9;  {&#xD;&#xA;    &#x9;&#x9;this.\u003C\u003E1__state = -2;&#xD;&#xA;    &#x9;&#x9;((AsyncTaskMethodBuilder) @this.\u003C\u003Et__builder).SetException(ex);&#xD;&#xA;    &#x9;&#x9;return;&#xD;&#xA;    &#x9;  }&#xD;&#xA;    &#x9;  this.\u003C\u003E1__state = -2;&#xD;&#xA;    &#x9;  ((AsyncTaskMethodBuilder) @this.\u003C\u003Et__builder).SetResult();&#xD;&#xA;    &#x9;}&#xD;&#xA;    &#xD;&#xA;    &#x9;[/*Attribute with token 0C000008*/DebuggerHidden]&#xD;&#xA;    &#x9;void IAsyncStateMachine.SetStateMachine(/*Parameter with token 08000001*/IAsyncStateMachine stateMachine)&#xD;&#xA;    &#x9;{&#xD;&#xA;    &#x9;}&#xD;&#xA;      }&#xD;&#xA;&#xD;&#xA;The moral of this is simple: if you don't need to await, just return the `Task`. It will do the same, and you'll save a lot of unnecessary state machine construction, with its wasteful memory and execution where it's not needed.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://www.planetgeek.ch/author/danielmarbach/&#xD;&#xA;&#xD;&#xA;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2016-04-24T03:13:00Z" PublishedUtc="2016-04-24T03:13:26.9289595Z" ModifiedUtc="2016-04-24T03:13:26.9133323Z" />
      <TagsPart Tags=".NET" />
      <AutoroutePart Alias="task-vs-async-task" UseCustomPattern="false" />
      <TitlePart Title="Task vs async Task" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=azure-service-bus-autorenewtimeout" Status="Published">
      <BodyPart Text="I was reading a [question][1] on StackOverflow where the requirement was to &quot;Lock a Service-Bus Queue and prevent others from accessing it.&quot; Quite often when dealing with competing consumers and `PeekLock` mechanism it feels odd. What do you mean I'm in the middle of processing my message and it will re-appear on the queue?! Why do I need to worry about some `LockDuration`?! The answer is simple. The server allows the receiver to handle the message and completes it within `LockDuration` time. If the operation takes longer, the server will no longer respect the original lock token as it will be replaced by another receiver that got the message. &#xD;&#xA;&#xD;&#xA;This is great when message processing is under 1 min. But what if message processing takes longer. In case message processing does take longer, the message will re-appear on the queue. This can be controlled by increasing `LockDuration`. Even then, the maximum amount of time is only 5 minutes. What will happen if message processing exceeds 5 minutes? You've guessed it right; the message will be unlocked and handled by another receiver.&#xD;&#xA;&#xD;&#xA;There are two options to address this:&#xD;&#xA;&#xD;&#xA; 1. Manual lock renewal&#xD;&#xA; 2. Automatic lock renewal&#xD;&#xA;&#xD;&#xA;### Manual Lock Renewal&#xD;&#xA;&#xD;&#xA;`BrokeredMessage` allows renewing an already obtained lock that was given when message was received.&#xD;&#xA;&#xD;&#xA;    var brokeredMessage = queueClient.Receive();&#xD;&#xA;    brokeredMessage.RenewLock();&#xD;&#xA;&#xD;&#xA;It surely looks simple. What's not so trivial is the timing of when lock renewal should be issued. Not mention that lock renewal time management would pollute the code with an additional concern. Let's look at a better option.&#xD;&#xA;&#xD;&#xA;### Automatic lock renewal&#xD;&#xA;&#xD;&#xA;In one of the previous posts, I have covered the [OnMessage API][2]. One of the `OnMessageOptions` was `AutoRenewTimeout`. What this does is automatically renew message lock without increasing the delivery count up maximum to the time of `AutoRenewTimeout`. For example, setting it to 10 minutes will allow us to surpass the maximum 5 minutes of the `LockDuration` and allow message processing to take up to 10 minutes. Auto lock renewal will not be issued if callback takes longer than 10 minutes. &#xD;&#xA;&#xD;&#xA;Let's dive into a sample:&#xD;&#xA;   &#xD;&#xA;    static async Task Go(NamespaceManager nsManager, MessagingFactory mf)&#xD;&#xA;    {&#xD;&#xA;        var connectionString = Environment.GetEnvironmentVariable(&quot;ConnectionString&quot;);&#xD;&#xA;        var nsManager = NamespaceManager.CreateFromConnectionString(connectionString);&#xD;&#xA;        var mf = MessagingFactory.CreateFromConnectionString(connectionString);&#xD;&#xA;&#xD;&#xA;        if (!await nsManager.QueueExistsAsync(&quot;test&quot;).ConfigureAwait(false))&#xD;&#xA;        {&#xD;&#xA;            var desc = new QueueDescription(&quot;test&quot;)&#xD;&#xA;            {&#xD;&#xA;                LockDuration = TimeSpan.FromSeconds(45),&#xD;&#xA;    &#xD;&#xA;            };&#xD;&#xA;            await nsManager.CreateQueueAsync(desc).ConfigureAwait(false);&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        var msg1 = new BrokeredMessage(new string('A', 5));&#xD;&#xA;        msg1.MessageId = DateTime.Now.ToString();&#xD;&#xA;        var sender = await mf.CreateMessageSenderAsync(&quot;test&quot;).ConfigureAwait(false);&#xD;&#xA;        await sender.SendAsync(msg1).ConfigureAwait(false);&#xD;&#xA;    &#xD;&#xA;        var receiver = await mf.CreateMessageReceiverAsync(&quot;test&quot;);&#xD;&#xA;        var options = new OnMessageOptions &#xD;&#xA;        {&#xD;&#xA;            AutoComplete = false, // let us complete the message&#xD;&#xA;            AutoRenewTimeout = TimeSpan.FromMinutes(10)&#xD;&#xA;        };&#xD;&#xA;    &#xD;&#xA;        //callback&#xD;&#xA;        receiver.OnMessageAsync(async (message) =&gt;&#xD;&#xA;        {&#xD;&#xA;            var sw = new Stopwatch();&#xD;&#xA;            Console.WriteLine(&quot;Callback started for message id &quot; + message.MessageId);&#xD;&#xA;            &#xD;&#xA;            Console.WriteLine(&quot;delaying for 8 minutes&quot;);&#xD;&#xA;            await Task.Delay(TimeSpan.FromMinutes(8));&#xD;&#xA;    &#xD;&#xA;            var body = message.GetBody&lt;string&gt;();&#xD;&#xA;            Console.WriteLine($&quot;processing id: {message.MessageId} body: {body}&quot;);&#xD;&#xA;            Console.WriteLine(&quot;delivery count: &quot; + message.DeliveryCount);&#xD;&#xA;&#xD;&#xA;                await message.CompleteAsync();    &#xD;&#xA;&#xD;&#xA;            Console.WriteLine(&quot;Callback stopped&quot;);&#xD;&#xA;        }, options);&#xD;&#xA;        Util.ReadLine();&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;For this test code, a queue called `test` with `LockDuration` 45 seconds is used. The message received in the callback is handled for over 5 minutes and completed after 8 minutes.&#xD;&#xA;&#xD;&#xA;Fantastic, we can obtain message lock for longer than 5 minutes! Just don't go crazy. You should strive to have shorter processing and not lock message for a long time. If you do, review what you're trying to do. Remember that processing that is stalled will be holding up the message until `AutoRenewTimeout` time is expired. Which at times is not a great idea.&#xD;&#xA;&#xD;&#xA;Happy long processing!&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;**Update 2017-06-16**&#xD;&#xA;&#xD;&#xA;Since this post there were still questions about guarantees on this operation. Due to the fact that this is ASB client initiated renewal, it's no different from `brokeredMessage.RenewLock();`. If operation fails after all the retries ASB client has in place, the lock won't be re-acquired and message will become visible. I.e. `AutoRenewTimeout` is **not** a guaranteed on the broker operation.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://stackoverflow.com/questions/36705199/lock-a-service-bus-queue-and-prevent-others-from-accessing-it/36731132&#xD;&#xA;  [2]: http://bit.ly/onmessageapi" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2016-04-22T06:16:00Z" PublishedUtc="2017-06-16T20:59:28.2542959Z" ModifiedUtc="2017-06-16T20:59:28.2262557Z" />
      <TagsPart Tags="" />
      <AutoroutePart Alias="azure-service-bus-autorenewtimeout" UseCustomPattern="false" />
      <TitlePart Title="Azure Service Bus - AutoRenewTimeout" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=azure-service-bus-purging-queues" Status="Published">
      <BodyPart Text="Testing code that involves queues always has some utility code that is responsible for test cleanup. The cleanup is often implemented as a queue purge operation. For example, MSMQ allows to delete all messages in a queue by calling a `Purge()` command on a queue.&#xD;&#xA;&#xD;&#xA;    MessageQueue queue = new MessageQueue(&quot;.\\exampleQueue&quot;);&#xD;&#xA;    queue.Purge();&#xD;&#xA;&#xD;&#xA;Simple. Convenient. Not possible with Azure Service Bus.&#xD;&#xA;&#xD;&#xA;There are a few options to handle situations when the purge operation is needed. None of those options is perfect, but is a workable solution until native implementation is provided (vote for the suggestion on [UserVoice][1]).&#xD;&#xA;&#xD;&#xA;## Drain messages&#xD;&#xA;&#xD;&#xA;Draining messages is receiving all of the messages found. Execution time will depend on a number of messages found in a queue. To make if faster, multiple message receivers can be used. To make it less chatty, receiving mode should be set to `ReceiveAndDelete` rather than to `PeekLock`. This will reduce the latency and number of operations.&#xD;&#xA;&#xD;&#xA;## Receive in batches&#xD;&#xA;&#xD;&#xA;Batching will help with getting as many messages as possible in a single operation. It will be subject to the quotas imposed by the service tier being used. &#xD;&#xA;&#xD;&#xA;## Use async&#xD;&#xA;&#xD;&#xA;Not need to explain that async operations are much more preferred with IO-based operations. When receiving messages in batches, make sure to use `ReceiveBatchAsync()` and not its synchronous counterpart.&#xD;&#xA;&#xD;&#xA;    var mf = MessagingFactory.CreateFromConnectionString(connectionString);&#xD;&#xA;&#x9;var receiver = await mf.CreateMessageReceiverAsync(&quot;queue&quot;, ReceiveMode.ReceiveAndDelete);&#xD;&#xA;&#xD;&#xA;&#x9;while (true) &#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;var messages = await receiver.ReceiveBatchAsync(batchSize);&#xD;&#xA;&#x9;&#x9;if (!messages.Any())&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;break;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;};&#xD;&#xA;&#xD;&#xA;## Additional options&#xD;&#xA;&#xD;&#xA;### Message TimeToLive &#xD;&#xA;&#xD;&#xA;When sending messages, if possible, set `TimeToLive` to expire those messages prior to receiving them back. For example, assuming your test suit takes 10 minutes to run, have messages TTL set to 10 minutes. Make sure you don't set `EnableDeadLetteringOnMessagExpiration`. That will cause your DLQ to fill up fast.&#xD;&#xA;&#xD;&#xA;### Message stamping&#xD;&#xA;&#xD;&#xA;Last, but not the least, try stamping your messages with a test run if possible. Messages can be invisible and regular draining will not remove those. For your test run, for example, you could generate messages with a unique header that would contain a test run ID. Test run ID would be unique per your test session. When receiving messages, discard those messages that don't have the matching test run ID. &#xD;&#xA;&#xD;&#xA;  [1]: https://feedback.azure.com/forums/216926-service-bus/suggestions/6154597-queue-purge" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2016-04-26T05:49:00Z" PublishedUtc="2016-04-29T16:22:10.7008816Z" ModifiedUtc="2016-04-29T16:22:10.6852601Z" />
      <TagsPart Tags="ASB" />
      <AutoroutePart Alias="azure-service-bus-purging-queues" UseCustomPattern="false" />
      <TitlePart Title="Azure Service Bus - Purging Queues" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=building-nuget-notifications-nano-service-with-azure-functions" Status="Published">
      <BodyPart Text="Cloud Services (CS), then WebApps (formerly Web Sites), then WebJobs, and now Azure Functions.  Are Functions to replace the predecessors? Well, before we jump into conclusion and &quot;function&quot; it all, I wanted to find where functions would make sense. &#xD;&#xA;Among the things I do, I maintain a repository that has a dependency on Azure Service Bus (ASB). Whenever a new version of ASB is released, I'd like to get notified. Yes, there are services to achieve it. Though, imagine there are none. This kind of &quot;service&quot; is a self-contained. Very simple functionality and dependencies. The behavior is clear: detect if there's a new version of the package. If there's one, send a notification (email). Repeat the procedure every given period.&#xD;&#xA;&#xD;&#xA;Imagine proceeding with Cloud Services. A cloud service would require a role (probably worker role). With a single instance, you'd still be looking at running a full VM 24/7. Doesn't sound too appealing.&#xD;&#xA;A better alternative could be going with WebApps. With a shared plan, it could be a good compromise. But if you already have a WebApp, you could also implement this as a WebJob. A WebJob that would behave like a light service. Though this will require a WebApp. Not so light anymore. Notice I don't like to call it a micro. It's a nano-service! Oh well, without trolling, it could be looked at as a safe contained functionality w/o dependencies for input or output. &#xD;&#xA;&#xD;&#xA;To implement a function to notify about ASB NuGet package changes, I'm going to use NuGet API to query about recent package changes. Azure Functions are implemented on top of WebJobs. That allows keeping files around between executions. I'll keep a &quot;stamp&quot; file to know when was the last execution. Whenever a package is released past an existing stamp, an email will be sent out announcing about a new package. For email functionality, I'm going to use SendGrid  (with 25,000 emails per day a free tier should be more than enough). The function will be running every 24 hours. A little excessive if you ask me (unless ASB team will be releasing like crazy). &#xD;&#xA;With Azure Functions being charged based on GB/sec, and the first 400k GB/Sec and the first 1 million requests free, it will take quite a long time to accumulate and significant charges. &#xD;&#xA;How is this possible, you might think? Thanks to the new, Dynamic Hosting, functions can execute for a short period w/o significant charges.&#xD;&#xA;&#xD;&#xA;To start a new function, https://functions.azure.com is the address. https://functions.azure.com If you'd like to play with the experimental features, use the canary link https://functions-next.azure.com&#xD;&#xA;&#xD;&#xA;A function is defined by a single `run.csx` default file. It can be more complex and reference other files, though I'd argue if you get into that, you probably not using Functions for what it was intended.&#xD;&#xA;&#xD;&#xA;To provide 3rd party assemblies (NuGet and SendGrid APIs), nuget packages can be referenced and Azure Functions will restore those. References are defined in by adding the appropreate references in the `Project.json` file. Create one if it doesn't exist in the same folder for the function you're working on.&#xD;&#xA;&#xD;&#xA;    {&#xD;&#xA;      &quot;frameworks&quot;: {&#xD;&#xA;        &quot;net46&quot;:{&#xD;&#xA;          &quot;dependencies&quot;: {&#xD;&#xA;            &quot;NuGet.PackageManagement&quot;: &quot;3.4.3&quot;,&#xD;&#xA;            &quot;SendGrid&quot;: &quot;6.3.4&quot;&#xD;&#xA;          }&#xD;&#xA;        }&#xD;&#xA;       }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;Now the function itself.&#xD;&#xA;&#xD;&#xA;    using System;&#xD;&#xA;    using System.Text;&#xD;&#xA;    using NuGet;&#xD;&#xA;    using SendGrid;&#xD;&#xA;    using System.Net.Mail;&#xD;&#xA;    &#xD;&#xA;    public static async Task Run(TimerInfo myTimer, TraceWriter log)&#xD;&#xA;    {&#xD;&#xA;        log.Info($&quot;C# Timer trigger function executed at: {DateTime.Now}&quot;);    &#xD;&#xA;        &#xD;&#xA;        var home = Environment.GetEnvironmentVariable(&quot;HOME&quot;);&#xD;&#xA;        var filePath  = Path.Combine(home, @&quot;data\Functions\lastexecution.txt&quot;);&#xD;&#xA;        &#xD;&#xA;        var lastScanDate = await ReadLastExecutionDate(filePath, log).ConfigureAwait(false);&#xD;&#xA;        var package = GetNugetPackagePublishedAfterLastScan(lastScanDate, log);&#xD;&#xA;    &#x9;&#x9;&#xD;&#xA;    &#x9;if(package == null)&#xD;&#xA;    &#x9;    return;&#xD;&#xA;    &#xD;&#xA;        await SendEmail(package, log).ConfigureAwait(false);    &#xD;&#xA;        await SaveLastExecutionDate(filePath).ConfigureAwait(false);&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    static async Task&lt;DateTime&gt; ReadLastExecutionDate(string filePath, TraceWriter log)&#xD;&#xA;    {&#xD;&#xA;        using (var reader = File.OpenText(filePath))&#xD;&#xA;        {&#xD;&#xA;            var fileText = await reader.ReadToEndAsync();&#xD;&#xA;            log.Verbose(fileText);&#xD;&#xA;            return DateTime.Parse(fileText);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    static Task SaveLastExecutionDate(string filePath)&#xD;&#xA;    {&#xD;&#xA;        using (FileStream sourceStream = new FileStream(filePath, FileMode.Truncate, FileAccess.Write, FileShare.ReadWrite, &#xD;&#xA;                bufferSize: 1024, useAsync: true))&#xD;&#xA;        {&#xD;&#xA;            var d = Encoding.Default.GetBytes(DateTime.UtcNow.ToString());&#xD;&#xA;            return sourceStream.WriteAsync(d, 0, d.Length);&#xD;&#xA;        };&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    static IPackage GetNugetPackagePublishedAfterLastScan(DateTime lastScan, TraceWriter log)&#xD;&#xA;    {&#xD;&#xA;        var repo = PackageRepositoryFactory.Default.CreateRepository(&quot;https://packages.nuget.org/api/v2&quot;);&#xD;&#xA;    &#x9;List&lt;IPackage&gt; packages = repo.FindPackagesById(&quot;WindowsAzure.ServiceBus&quot;).ToList();&#xD;&#xA;    &#x9;var package = packages.Where(x =&gt; x.IsReleaseVersion() == true)&#xD;&#xA;    &#x9;&#x9;.OrderByDescending(x =&gt; x.Version)&#xD;&#xA;    &#x9;&#x9;.Where(x =&gt; x.Published &gt; lastScan)&#xD;&#xA;    &#x9;&#x9;.FirstOrDefault();&#xD;&#xA;    &#x9;&#xD;&#xA;    &#x9;if(package == null)&#xD;&#xA;    &#x9;{&#xD;&#xA;    &#x9;    log.Info(&quot;No updates.&quot;); &#xD;&#xA;    &#x9;}&#xD;&#xA;    &#x9;else&#xD;&#xA;    &#x9;{&#xD;&#xA;    &#x9;    log.Verbose(($&quot;{package?.Version}  {package?.Published?.ToUniversalTime()}&quot;));&#xD;&#xA;    &#x9;}&#xD;&#xA;    &#x9;&#xD;&#xA;    &#x9;return package;&#xD;&#xA;    }&#x9;&#xD;&#xA;    &#xD;&#xA;    static Task SendEmail(IPackage package, TraceWriter log)&#xD;&#xA;    {&#xD;&#xA;        var apiKey = &quot;[key]&quot;;&#xD;&#xA;    &#x9;var transportWeb = new Web(apiKey);&#xD;&#xA;    &#xD;&#xA;    &#x9;SendGridMessage myMessage = new SendGridMessage();&#xD;&#xA;    &#x9;myMessage.AddTo(&quot;[email]&quot;);&#xD;&#xA;    &#x9;myMessage.From = new MailAddress(&quot;feldman.sean@gmail.com&quot;, &quot;Sean Feldman&quot;);&#xD;&#xA;    &#x9;myMessage.Subject = $&quot;WindowsAzure.ServiceBus {package.Version} was released&quot;;&#xD;&#xA;    &#x9;myMessage.Text = $&quot;Release date: {package.Published}\n\n{package.ReleaseNotes}&quot;;&#xD;&#xA;    &#x9;return transportWeb.DeliverAsync(myMessage);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;Function is based on a time trigger, therefore schedule is set either on time span or a cron expression. &#xD;&#xA;&#xD;&#xA;That's it. Zero deployment, a notification service will be executed every 24 hours, sending email if a new version of a package is released.&#xD;&#xA;&#xD;&#xA;While this is an overs-simplified example, its purpose is to highlight what Azure Functions can help with and what they are good at. Trying to apply those at more complex problems will lead to more headaches then benefits. Keep functions for small, well defined, and self-contained pieces of logic that nothing else depends on." />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2016-05-09T06:12:09.8205146Z" PublishedUtc="2016-05-09T06:12:09.8205146Z" ModifiedUtc="2016-05-09T06:12:09.8048844Z" />
      <TagsPart Tags="Functions" />
      <AutoroutePart Alias="building-nuget-notifications-nano-service-with-azure-functions" UseCustomPattern="false" />
      <TitlePart Title="Building NuGet Notifications Nano Service with Azure Functions" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=template-an-existing-azure-function" Status="Published">
      <BodyPart Text="Do you need to create an Azure Function based on an existing one? While there's no a way to do this using the portal, I found it a temporary workaround.&#xD;&#xA;Head to the SCM portal (kudu portal). If you functions project is called X, then that would be `https://x.scm.azurewebsites.net`. &#xD;&#xA;&#xD;&#xA;Next, navigate to the console. In the console `xcopy` your existing function folder to a new one.&#xD;&#xA;&#xD;&#xA;    xcopy /E ExistingFunctionFolder d:\home\site\wwwroot\NewFunctionFolder\ &#xD;&#xA;&#xD;&#xA;Et viola! Your new function based on an existing one will show up in the portal." />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2016-05-10T01:37:45.2771212Z" PublishedUtc="2016-05-10T01:37:45.2771212Z" ModifiedUtc="2016-05-10T01:37:45.2302479Z" />
      <TagsPart Tags="Functions" />
      <AutoroutePart Alias="template-an-existing-azure-function" UseCustomPattern="false" />
      <TitlePart Title="Template an existing Azure Function" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=nuget-v3-find-and-download-a-package" Status="Published">
      <BodyPart Text="While working on a side project, I've run into a need to discover the latest version of a given NuGet package and download it. Being a side project, I've decided rather that using NuGet v2 API to try out v3. I was hoping to find some documentation at the [official site](https://docs.nuget.org/), but that didn't turn out to be as successful as I was expecting. All my attempts to figure it out on my own were failing and had to admit it felt nasty. After fiddling with it, trying to get some information on the interwebs, posting a question on [SO](http://stackoverflow.com/questions/37650619/find-if-nuget-package-has-an-update-using-net-api-v3), cursing at the dozens of NuGet packages required just to query, almost gave up. &#xD;&#xA;The hope came from Maarten Balliauw at MyGet. He suggested rather than going through something that is not quite an API and frankly way too complicated, to just go through the raw NuGet REST API. &#xD;&#xA;&#xD;&#xA;NuGet v3 feed is a JSON file (f.e. the official NuGet v3 feed https://api.nuget.org/v3/index.json) containing all the operations you can perform and URLs you need to invoke to get those operations performed. &#xD;&#xA;&#xD;&#xA;First, we need to search for the package by ID. `SearchQueryService` `@type` element will give us the URL to invoke for the search. That would be https://api-v2v3search-0.nuget.org/query in the case of the original NuGet v3 feed or https://api-v2v3search-1.nuget.org/query. To narrow down the scope to a particular package, package ID has to be provided. Assuming I'm interested in Newtonsoft.Json package, the search URL to use becomes https://api-v2v3search-0.nuget.org/query?q=packageid:newtonsoft.json.&#xD;&#xA;&#xD;&#xA;Note: if you need to query pre-released packages as well, pass `prerelease=true` in the query.&#xD;&#xA;&#xD;&#xA;Next step is to find the `PackageBaseAddress` `@type` in the original feed and use its URL to download the required package version. Assuming, `8.0.3` is the version we're interested in. The download link would be https://api.nuget.org/v3-flatcontainer/newtonsoft.json/8.0.3/newtonsoft.json.8.0.3.nupkg&#xD;&#xA;This is a direct link to Azure blob storage that contains the package.&#xD;&#xA;&#xD;&#xA;Huge thank you to [Maarten Balliauw](http://blog.maartenballiauw.be/) who has helped me to get this information. The sample project is available [here](https://github.com/SeanFeldman/Nuget.Updater)." />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2016-06-16T07:01:00Z" PublishedUtc="2016-06-17T16:05:33.1920352Z" ModifiedUtc="2016-06-17T16:05:33.1438036Z" />
      <TagsPart Tags="NuGet" />
      <AutoroutePart Alias="nuget-v3-find-and-download-a-package" UseCustomPattern="false" />
      <TitlePart Title="NuGet V3 - Find and Download a Package" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=centralized-dead-letter-queue-with-azure-service-bus" Status="Published">
      <BodyPart Text="Azure Service Bus provides a robust Dead Letter mechanism. Each queue (or subscription) has its dead letter queue (DLQ). &#xD;&#xA;&#xD;&#xA;![enter image description here][1]&#xD;&#xA;&#xD;&#xA;Messages ending up in DLQs are not necessarily poisonous, and potentially could be resolved by re-processing. That means DLQs should be monitored to allow dead lettered messages to be analyzed and re-processed if needed. The issue with this approach is monitoring and troubleshooting. &#xD;&#xA;When a number of queues is significant, monitoring becomes a real headache. &#xD;&#xA;When a message is moved to its DLQ, it's obvious what queue did it fail. But what about centralized DLQ? If dead lettered messages from various queues are moved into a centralized DLQ, knowing message origin is important to send it back for reprocessing.&#xD;&#xA;&#xD;&#xA;Gladly, the recent version of ASB has added an additional standard property on the `BrokeredMessage` called [`DeadLetterSource`](https://msdn.microsoft.com/en-us/library/microsoft.servicebus.messaging.brokeredmessage.deadlettersource.aspx). When a dead lettered message is forwarded to another queue, it's stamped with the source queue name.&#xD;&#xA;&#xD;&#xA;Below is an example of a `test` queue that has DLQed messages forwarded to a centralized `error` queue. Assuming we're sending a message that fails the maximum number of deliveries to the `test` queue.&#xD;&#xA;&#xD;&#xA;![enter image description here][2]&#xD;&#xA;&#xD;&#xA;The message will be DLQed and automatically moved by the broker to the `error` queue. &#xD;&#xA;&#xD;&#xA;![enter image description here][3]&#xD;&#xA;&#xD;&#xA;Now message can be inspected and failed source queue retrieved.&#xD;&#xA;&#xD;&#xA;![enter image description here][4]&#xD;&#xA;&#xD;&#xA;In case of subscriptions, `DeadLetterSource` works exactly the same way. I've set up a topic called `events` with a subscription called `sub`. Dead lettered messages on the subscription are forwarded to the centralized error queue `error`.&#xD;&#xA;&#xD;&#xA;![enter image description here][5]&#xD;&#xA;&#xD;&#xA;Once a message on `sub` fails more than allowed delivery count, it's moved to the error queue which was specified as a queue to forward to on dead lettering. Inspection of the forwarded message shows the following:&#xD;&#xA;&#xD;&#xA;![enter image description here][6]&#xD;&#xA;&#xD;&#xA;Happy centralized error handling!&#xD;&#xA;&#xD;&#xA;  [1]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2016/deadletterqueue/dlq-per-queue.png&#xD;&#xA;  [2]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2016/deadletterqueue/message-in-queue.png&#xD;&#xA;  [3]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2016/deadletterqueue/forwarded-message.png&#xD;&#xA;  [4]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2016/deadletterqueue/source-on-message.png&#xD;&#xA;  [5]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2016/deadletterqueue/subscription.png&#xD;&#xA;  [6]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2016/deadletterqueue/deadlettersource-event.png" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2016-06-25T08:47:50.7084656Z" PublishedUtc="2016-06-25T08:47:50.7084656Z" ModifiedUtc="2016-06-25T08:47:50.6771933Z" />
      <TagsPart Tags="AzureServiceBus" />
      <AutoroutePart Alias="centralized-dead-letter-queue-with-azure-service-bus" UseCustomPattern="false" />
      <TitlePart Title="Centralized Dead Letter Queue with Azure Service Bus" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=updating-azure-service-fabric-settings" Status="Published">
      <BodyPart Text="Coming from the world of web applications where configuration file update is a matter of dropping a new version of a web.config file into the application, Azure Service Fabric can be a new territory. Especially with its hard rule on versioning code, data, and config packages. The config package update is what I'd like to focus on in this post.&#xD;&#xA;&#xD;&#xA;Versioning is done on the package level with multiple components that need to be packages. Each package represents an Azure Service Fabric Application. An application consists of services. Both Application and services have manifest files.&#xD;&#xA;&#xD;&#xA;    Manifirst For     File Name                           &#xD;&#xA;    Application       ApplicationManifest.xml &#xD;&#xA;    Service           ServiceManifest.xml*&#xD;&#xA;&#xD;&#xA;\*Manifest file per service&#xD;&#xA;&#xD;&#xA;Assuming there's a default Config configuration, the folder `Config` will contain `Settings.xml` configuration file under service(s) you're interested in upgrading configuration for. Note that you can have multiple configurations files. For this post, I'm using a single one called `Config`. Original content of the file:&#xD;&#xA;&#xD;&#xA;    &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;&#xD;&#xA;    &lt;Settings xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns=&quot;http://schemas.microsoft.com/2011/01/fabric&quot;&gt;&#xD;&#xA;      &lt;Section Name=&quot;MyConfigSection&quot;&gt;&#xD;&#xA;        &lt;Parameter Name=&quot;MyParameter&quot; Value=&quot;OriginalValue&quot; /&gt;&#xD;&#xA;      &lt;/Section&gt;&#xD;&#xA;    &lt;/Settings&gt;&#xD;&#xA;&#xD;&#xA;To make an update, first, the original application has to be deployed. There are two options:&#xD;&#xA;1. Deploying using Visual Studio (F5 will work as well).&#xD;&#xA;2. Deploying with PowerShell.&#xD;&#xA;&#xD;&#xA;*Some more assumptions: Application name is SFDeploymentTest; package location somewhere on you local disk is `package_location`; each deployment package is suffixed with Version at the end (V1, V2, V3, etc).*&#xD;&#xA;&#xD;&#xA; 1. Connect-ServiceFabricCluster&#xD;&#xA; 2. Copy-ServiceFabricApplicationPackage -ApplicationPackagePath package-package_location\pkg\SFDeploymentTestV1 -ImageStoreConnectionString file:C:\SfDevCluster\Data\ImageStoreShare -ApplicationPackagePathInImageStore SFDeploymentTestV1&#xD;&#xA; 3. Register-ServiceFabricApplicationType -ApplicationPathInImageStore SFDeploymentTestV1&#xD;&#xA; 4. New-ServiceFabricApplication -ApplicationName fabric://SFDeploymentTest -ApplicationTypeName SFDeploymentTestType -ApplicationTypeVersion 1.0.0&#xD;&#xA;&#xD;&#xA;*To find out the image store connection string for a dev cluster, navigate to http://localhost:19080/Explorer/index.html#/tab/manifest and select ClusterManifest &gt; FabricSettings &gt; Section Name=&quot;Management&quot; &gt; Parameter Name=&quot;ImageStoreConnectionString&quot;.&#xD;&#xA;    The default value is file:C:\SfDevCluster\Data\ImageStoreShare*&#xD;&#xA;&#xD;&#xA;Now comes the interesting part, upgrading the settings package only. To achieve that, the settings only package needs to be created first. The original application &amp; service versions were 1.0.0. Even though it's just a configuration package, it still has to be versioned as a new version of application and service (which contains the configuration). Therefore application and the service will get a new version (I chose it to be 3.0.0 for the post). Make sure to update the following:&#xD;&#xA;&#xD;&#xA;**ApplicationManifest.xml** &#xD;&#xA;&#xD;&#xA; - ApplicationManifest &gt; ApplicationTypeVersion&#xD;&#xA; - ApplicationManifest &gt;&#xD;&#xA;   ServiceManifestImport &gt; ServiceManifestRef &gt; ServiceManifestVersion&#xD;&#xA;&#xD;&#xA;**ServiceManifest.xml**&#xD;&#xA;&#xD;&#xA; - ServiceManifest &gt; Version&#xD;&#xA; - ServiceManifest &gt; ConfigPackage &gt; Version&#xD;&#xA;&#xD;&#xA;Make sure you package only contains the mentioned files, plus the Config folder with the settings.xml file. No code. No data. Config only package. To verify that setting is auto-propagated, I've modified `MyParameter` from `OriginalValue` to `NewValueThree`.&#xD;&#xA;&#xD;&#xA;With a new package named `SFDeploymentTestV2`, the update deployment goes as the following:&#xD;&#xA;&#xD;&#xA; 1. Copy-ServiceFabricApplicationPackage -ApplicationPackagePath package_location\pkg\SFDeploymentTestV3 -ImageStoreConnectionString file:C:\SfDevCluster\Data\ImageStoreShare -ApplicationPac&#xD;&#xA;    kagePathInImageStore SFDeploymentTestV3&#xD;&#xA; 2. Register-ServiceFabricApplicationType -ApplicationPathInImageStore SFDeploymentTestV3&#xD;&#xA; 3. Start-ServiceFabricApplicationUpgrade -ApplicationName fabric:/SFDeploymentTest -ApplicationTypeVersion 3.0.0  -HealthCheckStableDurationSec 60 -UpgradeDomainTimeoutSec 1200 -UpgradeTimeout 3000   -FailureAction Rollback -Monitored&#xD;&#xA;&#xD;&#xA;A few seconds after deployment is kicked off, the old code get the new setting value:&#xD;&#xA;&#xD;&#xA;![enter image description here][1]&#xD;&#xA;&#xD;&#xA;If you need to clean up your cluster, here's what I'm using. &#xD;&#xA;    &#xD;&#xA; 1. Remove-ServiceFabricService -ServiceName fabric:/SFDeploymentTest/StatelessSvc -Force&#xD;&#xA; 2. Remove-ServiceFabricApplication -ApplicationName fabric:/SFDeploymentTest -Force&#xD;&#xA; 3. Unregister-ServiceFabricApplicationType -ApplicationTypeName SFDeploymentTestType -ApplicationTypeVersion 3.0.0&#xD;&#xA; 4. Unregister-ServiceFabricApplicationType -ApplicationTypeName SFDeploymentTestType -ApplicationTypeVersion 1.0.0&#xD;&#xA; 5. Remove-ServiceFabricApplicationPackage -ApplicationPackagePathInImageStore SFDeploymentTestV3 -ImageStoreConnectionString file:C:\SfDevCluster\Data\ImageStoreShare&#xD;&#xA; 6. Remove-ServiceFabricApplicationPackage -ApplicationPackagePathInImageStore SFDeploymentTestV1 -ImageStoreConnectionString file:C:\SfDevCluster\Data\ImageStoreShare&#xD;&#xA;&#xD;&#xA;A more brutal way is to reset the cluster, but even for a dev cluster is not always the best option if you have SF applications that need to stay.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2016/SF_config_package_update/clipboard-1.png" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2016-07-02T22:36:32.7211407Z" PublishedUtc="2016-07-02T22:36:32.7211407Z" ModifiedUtc="2016-07-02T22:36:32.7054955Z" />
      <TagsPart Tags="ServiceFabric" />
      <AutoroutePart Alias="updating-azure-service-fabric-settings" UseCustomPattern="false" />
      <TitlePart Title="Updating Azure Service Fabric Settings" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=azure-service-bus--canceling-scheduled-messages" Status="Published">
      <BodyPart Text="When Marty went back to 1955, he had no idea how to make it back. Using Azure Service Bus `BrokeredMessage` property `ScheduledEnqueueTimeUtc` to schedule a message in the future would feel the same when the need to cancel the scheduled message would arise. Congratulations, you've scheduled a message. Sorry, there's no way to call it off until it happens. Gladly, the Doc (read ASB team) has introduced a new feature in the latest 3.3.1 version that allows to schedule a message and cancel it on demand, before becoming visible/available.&#xD;&#xA;&#xD;&#xA;Before version 3.3.1 the way to schedule future messages was by updating `BrokeredMessage.ScheduledEnqueueTimeUtc` property, setting it to some date/time in the future.&#xD;&#xA;&#xD;&#xA;    var message = new BrokeredMessage();&#xD;&#xA;    message.ScheduledEnqueueTimeUtc = DateTime.UtcNow.AddSeconds(300);&#xD;&#xA;    await sender.SendAsync(message).ConfigureAwait(false);&#xD;&#xA;&#xD;&#xA;The problem with this approach is that whenever a scheduled message needs to be canceled prior to becoming visible, it was not possible. Despite the property `SequenceNumber` being assigned by the broker on the sent `BrokeredMessage` (on the server), any attempt to access its value would result in `InvalidOperationException`. Therefore, any messages scheduled in the future and no longer needed would be &quot;stuck&quot; on the broker until the later time.&#xD;&#xA;&#xD;&#xA;With version 3.3.1 `QueueClient` or `TopicClient` can be used to schedule a message and cancel it later.&#xD;&#xA;&#xD;&#xA;    var sequenceNumber = await queueClient.ScheduleMessageAsync(message, DateTimeOffset.UtcNow.AddSeconds(300)).ConfigureAwait(false);&#xD;&#xA;    await queueClient.CancelScheduledMessageAsync(sequenceNumber).ConfigureAwait(false);&#xD;&#xA;&#xD;&#xA;The new API doesn't set the scheduled date/time on the message itself, but rather invokes `ScheduleMessageAsync()` method passing the message in and returning sequence number assigned by the broker right back. This sequence number can be used later to cancel the message at any point in time. Even when scheduled time has not arrived yet. No more messages that sit on the broker if not needed. &#xD;&#xA;&#xD;&#xA;A few things to note:&#xD;&#xA;&#xD;&#xA;1. Lower level `MessegeSender` doesn't support this functionality. This makes work with messages of both command and event types more challenging. Hopefully, ASB team will add it.&#xD;&#xA;1. API doesn't allow scheduling or canceling multiple messages.&#xD;&#xA;1. &lt;strike&gt;Sequence number returned by `client.ScheduleMessageAsync()` is not assigned to the `BrokeredMessage.SequenceNumber`. Could be a bug in the client library.&lt;/strike&gt; `SequenceNumber` is assigned on the broker and the only way to discoverer it w/o receiving the message was to peek at the queue to see all the messages, which would include those set for delivery in the future. Thanks to John Taubensee from the ASB team for spotting light on this item.&#xD;&#xA;&#xD;&#xA;Happy time travelling with your messages!" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2016-07-05T20:58:00Z" PublishedUtc="2017-06-19T14:43:51.6112557Z" ModifiedUtc="2017-06-19T14:43:51.5956298Z" />
      <TagsPart Tags="AzureServiceBus" />
      <AutoroutePart Alias="azure-service-bus--canceling-scheduled-messages" UseCustomPattern="false" />
      <TitlePart Title="Azure Service Bus - Canceling Scheduled Messages" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=azure-service-bus--abandon-with-reason" Status="Published">
      <BodyPart Text="In some cases, when a message should be abandoned, Azure Service Bus offers `BrokeredMessage.Abandon()` API. The message is abandoned immediately; delivery count is increased, and message re-appears on the broker. In case `MaxDeliverCount` is exceeded, the message is moved to the designated dead letter queue. Whenever a message is moved to a dead letter queue, it is stamped with two standard properties: `DeadLetterReason` and `DeadLetterErrorDescription`. Here's an example of how to get a message dead lettered  and stamped with these two properties&#xD;&#xA;&#xD;&#xA;    void Main()&#xD;&#xA;    {&#xD;&#xA;        MainAsync().GetAwaiter().GetResult();&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    static async Task MainAsync()&#xD;&#xA;    {&#xD;&#xA;        var connectionString = Environment.GetEnvironmentVariable(&quot;AzureServiceBus.ConnectionString&quot;);&#xD;&#xA;        var namespaceManager = NamespaceManager.CreateFromConnectionString(connectionString);&#xD;&#xA;        var queueName = &quot;test&quot;;&#xD;&#xA;        if (!await namespaceManager.QueueExistsAsync(queueName))&#xD;&#xA;        {&#xD;&#xA;            var queueDescription = new QueueDescription(queueName) { &#xD;&#xA;                MaxDeliveryCount = 2&#xD;&#xA;            };&#xD;&#xA;            await namespaceManager.CreateQueueAsync(queueDescription);&#xD;&#xA;            Console.WriteLine(&quot;Queue created&quot;);&#xD;&#xA;        }&#xD;&#xA;        else&#xD;&#xA;        {&#xD;&#xA;            Console.WriteLine(&quot;Queue existed&quot;);&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        var factory = await MessagingFactory.CreateAsync(namespaceManager.Address, namespaceManager.Settings.TokenProvider);&#xD;&#xA;        var sender = await factory.CreateMessageSenderAsync(queueName);&#xD;&#xA;    &#xD;&#xA;        var msg1 = new BrokeredMessage(&quot;test-1&quot;);&#xD;&#xA;        await sender.SendAsync(msg1);&#xD;&#xA;    &#xD;&#xA;        var receiver = await factory.CreateMessageReceiverAsync(queueName);&#xD;&#xA;        var msg1back = await receiver.ReceiveAsync();&#xD;&#xA;    &#xD;&#xA;        await msg1back.AbandonAsync();&#xD;&#xA;        msg1back = await receiver.ReceiveAsync();&#xD;&#xA;        await msg1back.AbandonAsync();&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    class TestMessage { }&#xD;&#xA;&#xD;&#xA;As a result of this code, the queue called &quot;test&quot; will have a dead lettered message, with the two properties populated as following:&#xD;&#xA;&#xD;&#xA; - **DeadLetterReason**: MaxDeliveryCountExceeded&#xD;&#xA; - **DeadLetterErrorDescription**: Message could not be consumed after 2 delivery attempts.&#xD;&#xA;&#xD;&#xA;Great information, except it doesn't help us to understand the real issue for which the message was rejected and abandoned, to begin with. For that, there's a better way to abandon messages. Always abandon with a reason. `BrokeredMessage` provides an overload `Abandon(IDictionary&lt;string, object&gt;()`. Use this overload to abandon messages while providing the reason. After all, you never know when it will be the last time that the message was attempted. Below is a slightly modified code to achieve the same, except this time there's a custom property called &quot;Reason&quot; to indicate _why_ the message was abandoned.&#xD;&#xA;&#xD;&#xA;    await msg1back.AbandonAsync(new Dictionary&lt;string, object&gt; { { &quot;Reason&quot;, &quot;Blah&quot;} });&#xD;&#xA;&#xD;&#xA;After running the code with the modified abandon code, custom properties will contain the reason in addition to the properties stamped by the broker when the message got moved to the DLQ.&#xD;&#xA;&#xD;&#xA; - **Reason**: Blah&#xD;&#xA; - **DeadLetterReason**: MaxDeliveryCountExceeded&#xD;&#xA; - **DeadLetterErrorDescription**: Message could not be consumed after 2 delivery attempts.&#xD;&#xA;&#xD;&#xA;## Warning: Custom Properties Only&#xD;&#xA;&#xD;&#xA;Be aware that abandon can only affect custom properties and not the standard properties. For example, let's say you're trying to abandon a message and set the standard property Label while doing so.&#xD;&#xA;&#xD;&#xA;    await msg1back.AbandonAsync(new Dictionary&lt;string, object&gt; { { &quot;Reason&quot;, &quot;Blah&quot; }, { &quot;Label&quot;, &quot;ABC&quot; });&#xD;&#xA;&#xD;&#xA;What will happen is that there will be a custom property &quot;Label&quot; added to the rest of the custom properties, and it will contain the value &quot;ABC&quot;, leaving the standard property &quot;Label&quot; untouched. The custom properties will contain the following:&#xD;&#xA;&#xD;&#xA; - **Reason**: Blah &#xD;&#xA; - **Label**: ABC &#xD;&#xA; - **DeadLetterReason**: MaxDeliveryCountExceeded&#xD;&#xA; - **DeadLetterErrorDescription**: Message could not be consumed after 2 delivery attempts.&#xD;&#xA;&#xD;&#xA;So the next time you abandon a message, don't burn all the bridges. Leave a reason behind.&#xD;&#xA;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2016-07-24T21:07:00Z" PublishedUtc="2016-07-24T21:20:36.0726183Z" ModifiedUtc="2016-07-24T21:20:36.0570112Z" />
      <TagsPart Tags="" />
      <AutoroutePart Alias="azure-service-bus--abandon-with-reason" UseCustomPattern="false" />
      <TitlePart Title="Abandon with Reason" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=service-bus-ha-with-paired-namespaces" Status="Published">
      <BodyPart Text="Azure Service Bus is one of the oldest cloud services on Azure. As any service living in the cloud, it grows, iterates, and changes. Among various features that the service has, there's one that could deserve a little more attention: paired namespaces.&#xD;&#xA;&#xD;&#xA;An application communicating over Azure Service Bus is usually utilizing a namespace. Services and sometimes even entire regions can go down. That makes a single namespace a single point of failure. A possible solution is to enable high availability of the service. This is where Service Bus client can help. It can do so by using two namespaces rather than one. A primary and a secondary namespaces. The client is using both namespaces to achieve high availability. The feature is called PairedNamespaces.&#xD;&#xA;&#xD;&#xA;A quick recap of how it works&#xD;&#xA;-----------------------------&#xD;&#xA;&#xD;&#xA;The client is normally sending to a primary namespace. In case primary namespace is no longer available, Azure Service Bus client will automatically switch to the secondary namespace. While sending messages to the secondary namespace, the client will also continue pinging the primary namespace behind the scenes to see if the primary namespace availability has changed and it's up again.  Ping messages are short-lived messages configured to self destruct after 1 second. While primary namespace is not available, the sender will be sending the messages to the secondary namespace. The secondary namespace is solely used as storage until the primary namespace is back online. Once the primary namespace is back, messages from the secondary (temporary storage) namespace will be moved to the primary namespace.&#xD;&#xA;&#xD;&#xA;The secondary namespace has a very rigid structure. The structure is always a queue with the following path `&lt;primary-namespacename&gt;/x-servicebus-transfer/&lt;backlog-queue-index&gt;`&#xD;&#xA;&#xD;&#xA;![enter image description here][1]&#xD;&#xA;&#xD;&#xA;Backlog queues are used to hold the messages and number of the queues is defined when paired namespaces are configured using [`MessagingFactory.PairNamespaceAsync(SendAvailabilityPairedNamespaceOptions)`](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.messagingfactory.pairnamespaceasync.aspx) method.&#xD;&#xA;&#xD;&#xA;In short, the primary namespace goes down; no message is lost, and all send operations are redirected to the secondary namespace. Once the primary namespace is back, all backed up messages are moved from the secondary to the primary namespace, to the appropriate queues/topics. To determine the right destination, each message is stamped with a `x-ms-path` custom property, indicating the destination entity for the message.&#xD;&#xA;&#xD;&#xA;![enter image description here][2]&#xD;&#xA;&#xD;&#xA;Except there are a few small details that need to be taken into consideration.&#xD;&#xA;&#xD;&#xA;To test a failover scenario, the primary namespace has to be down. There's no API failover exposed. Therefore a workaround is to trick the client to think that namespace is down by pointing the primary namespace domain to some invalid IP address using the `hosts` files. &#xD;&#xA;According to documentation:&#xD;&#xA;&#xD;&#xA;&gt; [&quot;Failures that trigger the failover timer are any MessagingException in which the IsTransient property is false or a System.TimeoutException.&quot;](https://azure.microsoft.com/en-us/documentation/articles/service-bus-async-messaging/#paired-namespaces).&#xD;&#xA;&#xD;&#xA;Unfortunately, this is not what's happening. During a send attempt, once primary namespace was not available and `failoverInterval` time elapsed, `MessagingCommunicationException` was thrown by the ASB client. Surprisingly, the exception is **marked as transient**. To get the code working and verify that failover took place, **the message had to be retired**. Once the send operation was retried, ASB client uses the secondary namespace, and everything worked as expected. It's unfortunate that the exception is marked as transient, where it shouldn't be. On the positive side, it's not a bad idea to retry the operation, even if default retry policy does it already. The retry will ensure the failed send operation gets executed against the secondary namespace. &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Sample sender code&#xD;&#xA;------------------&#xD;&#xA;&#xD;&#xA;        static async Task MainAsync()&#xD;&#xA;        { &#xD;&#xA;            var connectionString1 = &quot;Endpoint=sb://primary-pairednamespace.servicebus.windows.net/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=[key]&quot;;&#xD;&#xA;            var namespaceManager1 = NamespaceManager.CreateFromConnectionString(connectionString1);&#xD;&#xA;            var messagingFactory1 = MessagingFactory.CreateFromConnectionString(connectionString1);&#xD;&#xA;&#xD;&#xA;            var connectionString2 = &quot;Endpoint=sb://secondary-pairednamespace.servicebus.windows.net/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=[key]&quot;;&#xD;&#xA;            var namespaceManager2 = NamespaceManager.CreateFromConnectionString(connectionString2);&#xD;&#xA;            var messagingFactory2 = MessagingFactory.CreateFromConnectionString(connectionString2);&#xD;&#xA;&#xD;&#xA;            if (!await namespaceManager1.QueueExistsAsync(&quot;testing&quot;))&#xD;&#xA;            {&#xD;&#xA;                await namespaceManager1.CreateQueueAsync(&quot;testing&quot;);&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            var sendAvailabilityPairedNamespaceOptions = new SendAvailabilityPairedNamespaceOptions(&#xD;&#xA;                secondaryNamespaceManager:namespaceManager2,&#xD;&#xA;                messagingFactory: messagingFactory2,&#xD;&#xA;                backlogQueueCount: 3,&#xD;&#xA;                failoverInterval: TimeSpan.FromSeconds(10),&#xD;&#xA;                enableSyphon: true);&#xD;&#xA;&#xD;&#xA;            await messagingFactory1.PairNamespaceAsync(sendAvailabilityPairedNamespaceOptions);&#xD;&#xA;&#xD;&#xA;            var sender1 = await messagingFactory1.CreateMessageSenderAsync(&quot;testing&quot;);&#xD;&#xA;            var receiver1 = await messagingFactory1.CreateMessageReceiverAsync(&quot;testing&quot;);&#xD;&#xA;            var messageId = 1;&#xD;&#xA;&#xD;&#xA;            while (true)&#xD;&#xA;            {&#xD;&#xA;                try&#xD;&#xA;                {&#xD;&#xA;                    var message = new BrokeredMessage(&quot;testing&quot;) {MessageId = messageId++.ToString()};&#xD;&#xA;                    // Set a breakpoint here and modify hosts file to contain &quot;8.8.8.8 primary-pairednamespace.servicebus.windows.net&quot;&#xD;&#xA;                    await sender1.SendAsync(message);&#xD;&#xA;                    Console.WriteLine(&quot;.&quot;);&#xD;&#xA;                }&#xD;&#xA;                catch (Exception e)&#xD;&#xA;                {&#xD;&#xA;                    var me = (MessagingException) e;&#xD;&#xA;                    Console.WriteLine(e.GetType());&#xD;&#xA;                    Console.WriteLine(me.Detail.ErrorCode);&#xD;&#xA;                    Console.WriteLine(me.Detail.ErrorLevel);&#xD;&#xA;                    Console.WriteLine(me.Detail.Message);&#xD;&#xA;                    Console.WriteLine(me.IsTransient);&#xD;&#xA;                }&#xD;&#xA;&#xD;&#xA;                await Task.Delay(2000);&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;Conclusions&#xD;&#xA;-----------&#xD;&#xA;&#xD;&#xA;The feature was [documented](https://azure.microsoft.com/en-us/documentation/articles/service-bus-paired-namespaces/) and API was [detailed](https://azure.microsoft.com/en-us/documentation/articles/service-bus-async-messaging/). However, it is still not commonly used. Can't be right. How come a feature, allowing HA out of the box is so neglected? Would be a killer feature if not a few caveats.&#xD;&#xA;&#xD;&#xA;###**Failover API and testability**&#xD;&#xA;&#xD;&#xA;The failover API was baked into the native client and was not exposed. Changing hosts file is far from an ideal way of verifying the feature works.&#xD;&#xA;&#xD;&#xA;###**Feature Design**&#xD;&#xA;&#xD;&#xA;Lack of explicit contract when failover is about to happen. General `MessagingCommunicationException` could be replaced with a more intention revealing exception that would not require relying on the transient nature of the exception. Not to mention that in the test above it turned to be not quite as expected.&#xD;&#xA;&#xD;&#xA;Additional substantial factor has to do with the fact that paired namespaces were designed with sender and receiver as two different parties. I.e., sender application vs receiver application where each part would perform one type of operation, but not both. To demonstrate what I'm talking about, add a receiving operation to the sender application. While failover will take place and send operation will be successful, the receive operations would fail. This is due to the fact that this is not an active-active HA, and entities required by the receiver only exist in the primary namespace and not the secondary namespace. Could have been addressed by the ASB client if receive operations would just return null messages when requested to fetch and the client was in failover mode. But again, design decisions are hard to get right. Especially on the first time.&#xD;&#xA;&#xD;&#xA;###**Cost**&#xD;&#xA; &#xD;&#xA;Each send operation would become several operations, tripling the cost of a message when failover is occurring:&#xD;&#xA;1. Send to the secondary namespace to store when the primary namespace is down.&#xD;&#xA;2. Retrieve from the secondary namespace when the primary namespace is back.&#xD;&#xA;3. Re-send to the primary namespace.&#xD;&#xA;&#xD;&#xA;Let's be honest, what's a higher cost when you can still send messages that are vital to your business? An acceptable cost.&#xD;&#xA;&#xD;&#xA;Summary&#xD;&#xA;-------&#xD;&#xA;&#xD;&#xA;If you require high availability today and can partition your application act as solely sender or receiver, paired namespaces feature could be a good option to use. If that's not your scenario, you could implement a more of an active-active approach, where entities are created and maintained on one or more namespace.&#xD;&#xA;&#xD;&#xA;Credits&#xD;&#xA;-------&#xD;&#xA;&#xD;&#xA;Special thank you To John Taubensee for help with testing this feature.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2016/pairednamespaces/paired-namespace-secondary-namespace.png&#xD;&#xA;  [2]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2016/pairednamespaces/paired-namespace-custom-property.png" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2016-08-29T04:36:00Z" PublishedUtc="2016-08-29T04:41:46.3345541Z" ModifiedUtc="2016-08-29T04:41:46.3189718Z" />
      <TagsPart Tags="AzureServiceBus" />
      <AutoroutePart Alias="service-bus-ha-with-paired-namespaces" UseCustomPattern="false" />
      <TitlePart Title="Service Bus HA with paired namespaces" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=azure-functions-to-make-audit-queue-and-auditors-happy" Status="Published">
      <BodyPart Text="Using NServiceBus on Azure allows the best of two worlds – robust and reliable messaging framework on top of excellent Azure services. Azure services and any other cloud provider as well have strict capacity and quotas. For Azure transports NServiceBus is using, those are usually allowed maximum throughput, the total number of messages, the number of concurrent connections, etc. With Azure Storage Queues there’s an additional constraint that while is not significant on its own, does have a weight in a system: [maximum message TTL is seven days only]( https://azure.microsoft.com/en-us/documentation/articles/service-bus-azure-and-service-bus-queues-compared-contrasted/#capacity-and-quotas). Yes, yes, you’ve heard right. 7 days only. Almost as if someone at the storage team took the saying “a happy queue is an empty queue” and implemented maximum message TTL using that as a requirement. While it’s ok to have such a short message TTL for a message that is intended to be processed, for messages that are processed and need to be stored that could be an issue.&#xD;&#xA;&#xD;&#xA;NServiceBus has [feature to audit]( https://docs.particular.net/nservicebus/operations/auditing) any successfully processed messages. For some projects audits are a must and having these audits is out of the question. The challenge is to have these audits kept in the audit queue created by NServiceBus. After seven days those messages are purged by the Azure Storage service. Ironically, this is the same service that can keep up to 500TB of blobs for as long as you need them, supporting various [redundancy levels]( https://azure.microsoft.com/en-us/documentation/articles/storage-redundancy/#zone-redundant-storage) such as LRS, ZRS, and GRS. With LRS and ZRS there are three copies of the data. With GRS there are six copies of the data and data is replicated across multiple data centers. Heaven for audits.&#xD;&#xA;&#xD;&#xA;If you’re not using Particular Platform, or [Service Pulse](http://particular.net/servicepulse) specifically, you will have to build some mechanism to move your audit messages into a storage of some kind and keep it for whatever the retention period that is required. Building such an ETL service is not difficult, but it is an investment that requires investment, deployment, and maintenance. Ideally, it should be automated and scheduled. I’ll let your imagination complete the rest. Though for a cloud-based solution “when in Rome, do as the Romans do”. &#xD;&#xA;&#xD;&#xA;One of the silently revolutionizing services in the Azure ecosystem is [Azure Functions]( https://azure.microsoft.com/en-us/services/functions/). While it sounds very simple and not as exciting as micro-services with Service Fabric or Containerization with Docker, it has managed to coin a buzz word of its own (serverless computing) and demonstrated that usages could be quite various. To a certain extent could be labeled as “nano-service”. But enough with this, back to audits.&#xD;&#xA;&#xD;&#xA;Azure Functions  support various [triggers and binding]( https://azure.microsoft.com/en-us/documentation/articles/functions-triggers-bindings/). Among those, you’ll find Storage Queues and Storage Blobs. If combined, they could help to build the following simple ETL:&#xD;&#xA;&#xD;&#xA;![enter image description here][1]&#xD;&#xA;&#xD;&#xA;Azure Functions supports two types of bindings: declarative and imperative. Let’s focus on the declarative one first.&#xD;&#xA;&#xD;&#xA;A declarative binding allows to specify a binding to a queue or an HTTP request and convert that into an object that a Function can consume. Using such a binding with an Azure Storage queue allows declaratively bind an incoming message to a variable in the list of function parameters rather than working with a raw CloudQueueMessage. It also allows getting some of the standard CloudQueueMessage attributes such as Id, DequeueCount, etc. Configuring a trigger using Azure Functions UI is incredibly easy.&#xD;&#xA;&#xD;&#xA; 1. Create a new function that is triggered by a Storage queue &#xD;&#xA; 2. Specify&#xD;&#xA;    function parameter name that will be used in code (myQueueItem)&#xD;&#xA; 3. Specify storage account to be used (settings key that represents&#xD;&#xA;        storage account connection string)&#xD;&#xA; 4. Specify queue to be monitored for&#xD;&#xA;    messages&#xD;&#xA;&#xD;&#xA;![enter image description here][2]&#xD;&#xA;&#xD;&#xA;Once function created, you’ll have be able to replace its signature with an asynchronous version that will look like the following:&#xD;&#xA;&#xD;&#xA;    public static async Task Run(string myQueueItem, TraceWriter log)&#xD;&#xA;&#xD;&#xA;That’s it for the input. This will allow the function to receive notifications about new messages found on a queue and receive the content as a string parameter. Additionally, we could add declarative bindings for the standard properties. For this sample, I’ll add Id of the ASQ message.&#xD;&#xA;&#xD;&#xA;    public static async Task Run(string myQueueItem, string id, TraceWriter log)&#xD;&#xA;&#xD;&#xA;The objective is to turn the message into a blob file. This will require persisting the content to the storage account. A simple solution would be to specify the output declaratively by selecting an Azure Storage Blob as an output type and using a path with a unique {rand-guid} template (random GUID).&#xD;&#xA;&#xD;&#xA;![enter image description here][3]&#xD;&#xA;&#xD;&#xA;Using this approach, we’ll have all messages stored in the “audits” container with a random GUID as a file name. To have a bit friendlier audits, I’d like to perform the following:&#xD;&#xA;&#xD;&#xA; - Partition audit messages based on the date (year-month-day)&#xD;&#xA; - Partition audits based on the endpoint that processed the messages using NServiceBus audit information from within the message itself&#xD;&#xA; - Store each audit message as JSON file with where filename is the original ASQ transport message ID&#xD;&#xA;Let’s see the code and analyze it step by step.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;`#r &quot;Newtonsoft.Json&quot;`&#xD;&#xA;&#xD;&#xA;    using System;&#xD;&#xA;    using System.Text;&#xD;&#xA;    using System.IO;&#xD;&#xA;    using Newtonsoft.Json;&#xD;&#xA;    using Microsoft.Azure.WebJobs;&#xD;&#xA;    using Microsoft.Azure.WebJobs.Host.Bindings.Runtime;&#xD;&#xA;    &#xD;&#xA;    static readonly string byteOrderMarkUtf8 = Encoding.UTF8.GetString(Encoding.UTF8.GetPreamble());&#xD;&#xA;    &#xD;&#xA;    public static async Task Run(string myQueueItem, string id, Binder binder, TraceWriter log)&#xD;&#xA;    {&#xD;&#xA;        log.Info($&quot;C# Queue trigger function triggered&quot;);&#xD;&#xA;        log.Info($&quot;Original ASQ message ID: {id}&quot;);&#xD;&#xA;    &#xD;&#xA;        var value =myQueueItem.StartsWith(byteOrderMarkUtf8) ? (myQueueItem).Remove(0, byteOrderMarkUtf8.Length) : myQueueItem; &#xD;&#xA;        var obj = JsonConvert.DeserializeObject&lt;MessageWrapper&gt;(value);&#xD;&#xA;        var endpointName = obj.Headers[&quot;NServiceBus.ProcessingEndpoint&quot;];&#xD;&#xA;        &#xD;&#xA;        var attributes = new Attribute[]&#xD;&#xA;        {&#xD;&#xA;            new BlobAttribute($&quot;audits/{DateTime.UtcNow.ToString(&quot;yyyy-MM-dd&quot;)}/{endpointName}/{id}.json&quot;),&#xD;&#xA;            new StorageAccountAttribute(&quot;asqetl_STORAGE&quot;)&#xD;&#xA;        };&#xD;&#xA;    &#xD;&#xA;        using (var writer = await binder.BindAsync&lt;TextWriter&gt;(attributes).ConfigureAwait(false))&#xD;&#xA;        {&#xD;&#xA;            writer.Write(myQueueItem);&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        log.Info($&quot;Done &quot;);&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    public class MessageWrapper&#xD;&#xA;    {&#xD;&#xA;        public string IdForCorrelation { get; set; }&#xD;&#xA;        public string Id { get; set; }&#xD;&#xA;        public int MessageIntent { get; set; }&#xD;&#xA;        public string ReplyToAddress { get; set; }&#xD;&#xA;        public string TimeToBeReceived { get; set; }&#xD;&#xA;        public Dictionary&lt;string, string&gt; Headers { get; set; }&#xD;&#xA;        public string Body { get; set; }&#xD;&#xA;        public string CorrelationId { get; set; }&#xD;&#xA;        public bool Recoverable { get; set; }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;1.&#x9;I’ve modified the signature to inject a Binder into the method. Binder allows imperative bindings to be performed at run-time. In this case, specifying the output blob.&#xD;&#xA;2.&#x9;NServiceBus ASQ transport is encoding messages with a BOM (Byte Order Mark). Declared byteOrderMarkUtf8 variable is used to strip it out to persist message as raw JSON.&#xD;&#xA;3.&#x9;MessageWrapper class represents the message wrapper used by NServiceBus ASQ transport. Since native Storage Queues messages do not have headers, MessageWrapper is used to contain both headers and the payload. [&quot;NServiceBus.ProcessingEndpoint&quot; header]( https://docs.particular.net/nservicebus/messaging/headers#send-headers) will provide the information at what endpoint a given message was successfully processed.&#xD;&#xA;4.&#x9;Once we have all the prerequisites, the “black magic” can start. This is where Binder is used to providing the underlying WebJobs SDK information where the blob should be created. To provide these hints, we need to instantiate two attributes: BlobAttribute and StorageAccountAttribute and supply those to the Binder.BindAsync method. The first attribute, BlobAttribute, is specifying the path of the blob to use. The second attribute, StorageAccountAttribute, is determining the settings key to be used to retrieve storage connection string. Note that w/o StorageAccountAttribute account the default (AzureWebJobsStorage) setting key is used. That’s the storage account used to create the function in the portal.&#xD;&#xA;5.&#x9;Passing the attributes to the BindAsync method to get a writer and writing the message content into the blob is finishing is the final step. After that content of the queue message will be stored as a blob with the desired name at the path represented by “audits/year-month-day/endpoint/original-asq-message-id.json”.&#xD;&#xA;&#xD;&#xA;To validate the function is working, one of the NServiceBus [ASQ transport samples]( https://docs.particular.net/samples/azure/storage-queues/?version=ASQ_7) can be used.  Configure the sample to use the same storage account and execute it. Endpoint1 and Endpoint2 will process messages, but not emit any audits. To enable audits, the following configuration modification is required in Program.cs for each endpoint:&#xD;&#xA;&#xD;&#xA;    endpointConfiguration.AuditProcessedMessagesTo(&quot;audit&quot;);&#xD;&#xA;&#xD;&#xA;Once auditing is enabled, blob storage will start feeling up with any new audit messages emitted by the endpoints.&#xD;&#xA;&#xD;&#xA;![enter image description here][4]&#xD;&#xA;&#xD;&#xA;The function will be running from now on and convert audit messages into blobs. Endpoints can be added or removed; the function will adopt itself and emit files in the appropriate location. In a few lines of code, we made both, the audit queue and the auditors happy.&#xD;&#xA;&#xD;&#xA;**Update**: quitely, Storage team has enabled [unlimitted TTL](https://docs.microsoft.com/en-us/rest/api/storageservices/put-message#uri-parameters)&#xD;&#xA;&#xD;&#xA;  [1]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2016/azure-functions-etl/clipboard.png&#xD;&#xA;  [2]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2016/azure-functions-etl/clipboard-1.png&#xD;&#xA;  [3]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2016/azure-functions-etl/clipboard-2.png&#xD;&#xA;  [4]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2016/azure-functions-etl/clipboard-3.png" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2016-10-05T06:40:00Z" PublishedUtc="2018-07-09T22:27:58.8590753Z" ModifiedUtc="2018-07-09T22:27:58.8434148Z" />
      <TagsPart Tags="Azure,Functions" />
      <AutoroutePart Alias="azure-functions-to-make-audit-queue-and-auditors-happy" UseCustomPattern="false" />
      <TitlePart Title="Azure Functions to make audit queue and auditors happy" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=bend-message-deduplication-on-azure-service-bus-to-your-will" Status="Published">
      <BodyPart Text="[![Do not duplicate][1]](https://weblogs.asp.net/sfeldman/bend-message-deduplication-on-azure-service-bus-to-your-will)&#xD;&#xA;&#xD;&#xA;Duplicates detection functionality provided by Azure Service Bus can automatically remove duplicate messages sent to a queue or topic. Deduplication is always based on the value of the MessageId property. No other property can participate in deduplication. &#xD;&#xA;&#xD;&#xA;In the real world, message deduplication can often depend on things that are part of the message payload itself. Let's say we process orders*. Deduplication would rather be based on the order ID and not message ID. There are a few creative solutions that allow custom deduplication. For example, perform deduplication outside of ASB broker by manually inspecting message payload and marking it as a duplicate. For example, using Azure Functions and Storage tables\**. While approach like this one works, it has several drawbacks: &#xD;&#xA;&#xD;&#xA; - Unnecessary intermediate steps&#xD;&#xA; - Performance decrease&#xD;&#xA; - No ability to take advantage of highly optimized and performant native deduplication&#xD;&#xA;&#xD;&#xA;_What's the solution?_&#xD;&#xA;&#xD;&#xA;Use native deduplication!&#xD;&#xA;&#xD;&#xA;_Wait, but isn't native deduplication limited to solely message ID?_&#xD;&#xA;&#xD;&#xA;Glad you've asked. Absolutely. It is. Though let's look at the `MessageId` property of the `BrokeredMessage`. It's a read/write property, meaning we **can** set it to custom values. &#xD;&#xA;&#xD;&#xA;_Custom value you said?_ &#xD;&#xA;&#xD;&#xA;Let's read a bit more of the ASB documentation on deduplication.&#xD;&#xA;&#xD;&#xA;&gt; [To enable duplicate detection, each message has to have a unique MessageId property that by default stays the same no matter how many times the message is read from a queue.](https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-fundamentals-hybrid-solutions)&#xD;&#xA;&#xD;&#xA;Solved! To deduplicate order messages on `OrderId`, we'll assign brokered message `MessageId` property the value of `OrderId`. Done. Now order messages will be deduplicated on order IDs\***.&#xD;&#xA;&#xD;&#xA;_Hold your horses! What if I need to deduplicate based on several values from a message?_&#xD;&#xA;&#xD;&#xA;Same as with order id. Combining all property values and assigning as `MessageId`. Except that there might be a size issue.&#xD;&#xA;&#xD;&#xA;Size issue?! Yes. `BrokeredMessage.MessageId` is limited to 128 characters. Would that be a deal breaker if generated ID needs to be more than 128 characters? Not at all. As a matter of fact, the entire payload could be used for deduplication. Here's an example:&#xD;&#xA;&#xD;&#xA;    var payload = serializerOfYourChoice.Serialize(payloadObject);&#xD;&#xA;    var msg1 = new BrokeredMessage(payload);&#xD;&#xA;    msg1.MessageId = CreateDeterministicIdFromHash(payload);&#xD;&#xA;    msg1.Label = &quot;1st&quot;;&#xD;&#xA;    await sender.SendAsync(msg1).ConfigureAwait(false);&#xD;&#xA;&#xD;&#xA;    var msg2 = new BrokeredMessage(payload);&#xD;&#xA;    msg2.MessageId = CreateDeterministicIdFromHash(payload);&#xD;&#xA;    msg2.Label = &quot;2nd&quot;;&#xD;&#xA;    await sender.SendAsync(msg2).ConfigureAwait(false);&#xD;&#xA;&#xD;&#xA;The sample creates a GUID like ID by making an object hash using serialized object. For example, using JSON.Net you could get the serialized object and pass it to `CreateGuidLikeIdFromHash` to provide the deterministic ID that is based on a hash. As result of this snippet, there will be only one message received when a queue has deduplication enabled. &#xD;&#xA;&#xD;&#xA;`CreateGuidLikeIdFromHash`  method could be implemented in the following way:&#xD;&#xA;&#xD;&#xA;    static string CreateDeterministicIdFromHash(string input)&#xD;&#xA;    {&#xD;&#xA;        var inputBytes = Encoding.Default.GetBytes(input);&#xD;&#xA;        // use MD5 hash to get a 16-byte hash of the string&#xD;&#xA;        using (var provider = new MD5CryptoServiceProvider())&#xD;&#xA;        {&#xD;&#xA;            var hashBytes = provider.ComputeHash(inputBytes);&#xD;&#xA;            return new Guid(hashBytes).ToString();&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;[**Update**: as Clemens Vasters [pointed out][2] correctly, MD5, or any other cryptography hashes, should not be used for non-cryptographic purposes. [Data.HashFunction library][3] offers number of non-cryptographic hashes that can be used instead.]&#xD;&#xA;&#xD;&#xA;Et voilà. Now you can leverage native ASB deduplication using your custom data from the message itself without unnecessary intermediaries or performance impact. &#xD;&#xA;&#xD;&#xA;Stay deduplicated!&#xD;&#xA;&#xD;&#xA;\* as pointed out by one of the readers, order might not be the best example. Keep in mind, this is just to serve an example, not solve world's problems :)&#xD;&#xA;&#xD;&#xA;\** deduplication with Azure Functions [sample](http://microsoftintegration.guru/2016/09/20/use-azure-function-to-deduplicate-messages-on-azure-service-bus) by Michael Stephenson&#xD;&#xA;&#xD;&#xA;\*** `RequiresDuplicateDetection` needs to be set to `true` along with `DuplicateDetectionHistoryTimeWindow` set to the time span duplicates detection is taking place per message&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2016/deduplication/deduplication.keys.jpg&#xD;&#xA;  [2]: https://twitter.com/clemensv/status/805499155351240706&#xD;&#xA;  [3]: https://github.com/brandondahler/Data.HashFunction" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2016-12-03T09:35:00Z" PublishedUtc="2016-12-04T21:33:10.8237294Z" ModifiedUtc="2016-12-04T21:33:10.7924333Z" />
      <TagsPart Tags="AzureServiceBus" />
      <AutoroutePart Alias="bend-message-deduplication-on-azure-service-bus-to-your-will" UseCustomPattern="false" />
      <TitlePart Title="Bend Message Deduplication on Azure Service Bus to Your Will" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=notifications-with-myget-and-azure-functions" Status="Published">
      <BodyPart Text="[![enter image description here][1]][2]&#xD;&#xA;&#xD;&#xA;If you're doing .NET development, you're probably familiar with NuGet packages.  You might have also heard about MyGet service that offers an excellent package management. But have you looked at the additional things MyGet can provide? In this post, I'll focus on one of those hidden gems - webhooks.&#xD;&#xA;&#xD;&#xA;**Scenario** &#xD;&#xA;&#xD;&#xA;Scenario to implement is a requirement to receive notification about pre-release package builds added to MyGet feed for a specific nuget package.&#xD;&#xA;&#xD;&#xA;MyGet has support for webhooks per feed. These webhooks are available in several flavors, depending on your taste. These webhooks can be invoked for various events for the feeds you nuget have. Interested to know when a package is pushed/added/deleted/listed/pinned? No problem. Choose your method of notification and off you go. You're free to choose your flavor from  Twilio, Slack, Microsoft Team, HipChat, Twitter, HTTP post and email. If you need the ingredients list, look no further than [MyGet documentation](http://docs.myget.org/docs/reference/webhooks). &#xD;&#xA;&#xD;&#xA;In my scenario, I'd like to be notified about daily updates taking place on the feed I'm working with to know if there were changes to a specific package I'm interested in. I'm a lazy developer and opted into Azure Functions with plain HTTP Posts. &#xD;&#xA;&#xD;&#xA;The first step is to provide MyGet webhook with the URL to post notifications to. If you don't have one, don't worry. I will get into how to address it later in the post. The second step is to specify Content-Type of the webhook. 'application/json' will do the job. Third and the last step is to select the event you're interested in. For the scenario I'm implementing, 'Package Added' is what I'm after. &#xD;&#xA;&#xD;&#xA;![enter image description here][3]&#xD;&#xA;&#xD;&#xA;Once webhook is configured, it can be tested. MyGet allows to &quot;ping&quot; webhook with a test dummy JSON payload to mimic an event that would trigger webhooks.&#xD;&#xA;&#xD;&#xA;    {&quot;Identifier&quot;:&quot;a835cebf-28e3-4f0a-9b2a-c163d18e281a&quot;,&quot;Username&quot;:&quot;highcoconsulting&quot;,&#xD;&#xA;     &quot;When&quot;:&quot;2017-03-12T20:03:22.9159969Z&quot;,&quot;PayloadType&quot;:&quot;PingWebHookEventPayloadV1&quot;,&quot;Payload&quot;:{}}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;There's only one problem. MyGet feed sends notifications for any package found in the feed. It doesn't differentiate between versions either. That makes a requirement a bit more challenging. In a scenario like this Azure Functions can help to implement custom logic required to narrow notifications down.&#xD;&#xA;&#xD;&#xA;**Azure Function**&#xD;&#xA;&#xD;&#xA;Azure Function could be just filtering out the calls by MyGet and forward the filtered results to your original webhook handler. Alternatively, it could do the notification as well. I'll leave this decision to the readers and just show how filtering could be implemented.&#xD;&#xA;&#xD;&#xA;Create a function under &quot;API &amp; Webhooks&quot; category (a generic webhook function). Since we've specified for MyGet to send data in JSON format, we can safely deserialize the payload into a dynamic object.&#xD;&#xA;&#xD;&#xA;    var jsonContent = await req.Content.ReadAsStringAsync().ConfigureAwait(false);&#xD;&#xA;    dynamic data = JsonConvert.DeserializeObject(jsonContent);&#xD;&#xA;&#xD;&#xA;Next is to determine the event type and filter out anything that is not &quot;package added&quot; event.&#xD;&#xA;&#xD;&#xA;    if (data?.PayloadType != null &amp;&amp; data.PayloadType == &quot;PackageAddedWebHookEventPayloadV1&quot;)&#xD;&#xA;&#xD;&#xA;Note that each MyGet webhook event has an exact payload type.&#xD;&#xA;&#xD;&#xA;Next is to peek into payload to detect the package name. Remember, the scenario was only supposed to notify a specific package (let's assume it's called &quot;PackageX&quot;).&#xD;&#xA;&#xD;&#xA;     if  (data?.Payload?.PackageIdentifier == &quot;PackageX&quot;)&#xD;&#xA;&#xD;&#xA;If the package identifier is right, then the version retrieval is what's next&#xD;&#xA;&#xD;&#xA;    if (IsPrereleasedVersion(data?.Payload?.PackageVersion))&#xD;&#xA;&#xD;&#xA;In case the version is matching the criteria of a pre-released version, notification can take place. Et voilà!&#xD;&#xA;&#xD;&#xA;Knock knock. Who's there? A notification!&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;![enter image description here][4]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2017/notifications-myget-azure-functions/head.PNG&#xD;&#xA;  [2]: https://weblogs.asp.net/sfeldman/notifications-with-myget-and-azure-functions&#xD;&#xA;  [3]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2017/notifications-myget-azure-functions/webhook.PNG&#xD;&#xA;  [4]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2017/notifications-myget-azure-functions/package.PNG" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2017-03-12T23:09:00Z" PublishedUtc="2017-03-12T23:19:36.8619479Z" ModifiedUtc="2017-03-12T23:19:36.8434101Z" />
      <TagsPart Tags="Azure,Functions,NuGet" />
      <AutoroutePart Alias="notifications-with-myget-and-azure-functions" UseCustomPattern="false" />
      <TitlePart Title="Notifications with MyGet and Azure Functions" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=azure-service-bus-client-performance-counters" Status="Published">
      <BodyPart Text="[![enter image description here][1]][2]&#xD;&#xA;&#xD;&#xA;Identifying issues is never trivial. It is even harder when the problem is hidden, and there's are no logs or traces to go through. &#xD;&#xA;&#xD;&#xA;Application using Azure Service Bus started to throw an exceeded quota exception for the number of concurrent connections the broker permits for a namespace, which is 1000. I needed a way to confirm if the application is the source of exhausting the connections or not.&#xD;&#xA;&#xD;&#xA;Gladly, there's a hidden gem with ASB - client performance counters. It is packed with various informative counters that could provide vital information on how your system performs. Including a counter for connections, the application could be leaking.&#xD;&#xA;&#xD;&#xA;**1. Getting ASB client performance counters**&#xD;&#xA;&#xD;&#xA;To get the performance counters installed, [WindowsAzure.ServiceBus.PerformanceCounters](https://www.nuget.org/packages/WindowsAzure.ServiceBus.PerformanceCounters) package is required. The package is content only package and contains the registration script `RegisterMessagingPerfCounter.cmd` and the manifest files required for the script to work.&#xD;&#xA;&#xD;&#xA;![image: 00-package-contents.png][3]&#xD;&#xA;&#xD;&#xA;Having this package only will not suffice as the manifest (``) requires the `Microsoft.ServiceBus.dll`, the ASB [client assembly](https://www.nuget.org/packages/WindowsAzure.ServiceBus) to be found as well. The assembly can be retrieved from the ASB client package.&#xD;&#xA;&#xD;&#xA;**2. Installing the counters**&#xD;&#xA;&#xD;&#xA;Once the contents of the WindowsAzure.ServiceBus.PerformanceCounters package are extracted, have the `Microsoft.ServiceBus.dll` assembly extracted at the root of the your working directory. The file system would looks as the following:&#xD;&#xA;&#xD;&#xA; - |- `Performance`&#xD;&#xA; - |- `Tracing`&#xD;&#xA; - |- `Microsoft.ServiceBus.dll`&#xD;&#xA; - \\- `RegisterMessagingPerfCounter.cmd`&#xD;&#xA;&#xD;&#xA;Run `RegisterMessagingPerfCounter.cmd` in the elevated mode. Once the installation is done, using Performance Monitor add a new counter and navigate to the counter set called `Service Bus Messaging Client`. This is the set ASB client library adds.&#xD;&#xA;&#xD;&#xA;![image: 01-counter-set.PNG][4]&#xD;&#xA;&#xD;&#xA;**3. Usage the counters**&#xD;&#xA;&#xD;&#xA;I have an application that might be leaking connections to the broker. A connection is represented by a messaging factory created on the client. `MessagingFactory Count` counter is what I'll be using to diagnose the issue. Note that it's possible to set the scope of the counter to an entire namespace or a specific entity.&#xD;&#xA;&#xD;&#xA;![image: 03-messaging-factory-counter.PNG][5]&#xD;&#xA;&#xD;&#xA;Monitoring the factories counter quickly shows that application is indeed leaking connections (blue graph indicating that there are more than a thousand of connections (scale factor of 0.1 is used).&#xD;&#xA;&#xD;&#xA;![image:04-leaking-connections.PNG][6]&#xD;&#xA;&#xD;&#xA;Equipped with this information, the application is confirmed to be leaking connections by not utilizing the factories properly and causing the problem of exceeding the maximum number of connections ASB broker allows.&#xD;&#xA;&#xD;&#xA;And this was only one out of 68 provided counters! Want to know send or recieve message rate success? Ingress or egress rates? Or maybe the failure rate? Dig into those counters and get the information you need. Have fun with ASB perf counters!&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2017/asb-client-perf-counters/Heart-Monitor.jpg&#xD;&#xA;  [2]: https://weblogs.asp.net/sfeldman/azure-service-bus-client-performance-counters&#xD;&#xA;  [3]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2017/asb-client-perf-counters/00-package-contents.PNG&#xD;&#xA;  [4]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2017/asb-client-perf-counters/01-counter-set.PNG&#xD;&#xA;  [5]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2017/asb-client-perf-counters/03-messaging-factory-counter.PNG&#xD;&#xA;  [6]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2017/asb-client-perf-counters/04-leaking-connections.PNG" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2017-03-22T06:57:00Z" PublishedUtc="2017-03-22T07:05:13.6831041Z" ModifiedUtc="2017-03-22T07:05:13.6674697Z" />
      <TagsPart Tags="AzureServiceBus" />
      <AutoroutePart Alias="azure-service-bus-client-performance-counters" UseCustomPattern="false" />
      <TitlePart Title="Azure Service Bus Client Performance Counters" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=the-secret-brotherhood-of-message-counts" Status="Published">
      <BodyPart Text="[![Shhhh][1]][2]&#xD;&#xA;&#xD;&#xA;When working with Azure Service Bus, message count is expected to report how many messages are found in the queue. Only if life was that simple. In the real world, things a bit more complicated. &#xD;&#xA;&#xD;&#xA;Let's assume there's a queue, named `queue` which receives messages. Whenever a message fails to be processed more than `MaxDeliveryCount` times, it is assumed to be a poisonous message and is moved to what's called a dead-letter queue (or simply DLQ). Here's a first not-so-secret member of the brotherhood. DLQ path for `queue` would be expressed as `queue/$DeadLetterQueue`. ASB client has a convenience API ([`client.FormatDeadLetterPath(path)`][3]) to get the name of the DLQ for any given queue.&#xD;&#xA;&#xD;&#xA;When a message is sent using [SendVia feature][4] or a message is [auto-forwarded][5] between entities, ASB is using an additional queue called Transfer queue, utilized behind the scenes. Its value highly depends on the throughput a queue is experiencing at any given moment.&#xD;&#xA;&#xD;&#xA;![enter image description here][6]&#xD;&#xA;&#xD;&#xA;This queue has a &lt;strike&gt;name&lt;/strike&gt; path: `queue/$Transfer`.&#xD;&#xA;&#xD;&#xA;So so far, for _any_ queue, there are actually 3 queues:&#xD;&#xA;&#xD;&#xA; 1. `queue`&#xD;&#xA; 2. `queue/$DeadLetterQueue`&#xD;&#xA; 3. `queue/$Transfer`&#xD;&#xA;&#xD;&#xA;Wait. There's more. Whenever a message going through the Transfer queue is failing, it is moved to the Transfer DLQ. It _is_ a queue that can be accessed . Messages found in the Transfer DLQ are all the messages that have failed to be transfered. Its path is always `queue/$Transfer/$DeadLetterQueue`. There's a [convenience method][7] to construct the Transfer DLQ queue name as well.&#xD;&#xA;&#xD;&#xA;So by now, we've discovered that there's are four queues for any given queue:&#xD;&#xA;&#xD;&#xA; 1. `queue`&#xD;&#xA; 2. `queue/$DeadLetterQueue`&#xD;&#xA; 3. `queue/$Transfer`&#xD;&#xA; 4. `queue/$Transfer/$DeadLetterQueue`&#xD;&#xA;&#xD;&#xA;With this information, ASB\`s `MessageCountDetails` makes more sense. Looking at the portal, the numbers start to make sense as well.&#xD;&#xA;&#xD;&#xA;![enter image description here][8]&#xD;&#xA;&#xD;&#xA;In this case, there are:&#xD;&#xA;&#xD;&#xA;  - 2 messages ready to be processed in the `queue` (1) &#xD;&#xA;  - 998 messages scheduled for the future (can be peeked but not received) (1a)&#xD;&#xA;  - No DLQed messages&#xD;&#xA;  - No messages being transferred at the moment&#xD;&#xA;  - 11,735 message that didn't make the transfer, rest their soul in peace&#xD;&#xA;&#xD;&#xA;Together, these counts can tell a story of what happened to the messages in a queue. It also can reveal more secrets about messages that vanished into the Transfer DLQ. On that in the [follow-up post][9].&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2017/queue-brotherhood/secret.jpeg&#xD;&#xA;  [2]: https://weblogs.asp.net/sfeldman/the-secret-brotherhood-of-message-counts&#xD;&#xA;  [3]: https://docs.microsoft.com/en-us/dotnet/api/microsoft.servicebus.messaging.queueclient&#xD;&#xA;  [4]: https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-transactions#transfers-and-send-via&#xD;&#xA;  [5]: https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-auto-forwarding&#xD;&#xA;  [6]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2017/queue-brotherhood/MessageCount.gif&#xD;&#xA;  [7]: https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-dead-letter-queues#dead-lettering-in-forwardto-or-sendvia-scenarios&#xD;&#xA;  [8]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2017/queue-brotherhood/portal.png&#xD;&#xA;  [9]: https://weblogs.asp.net/sfeldman/monitoring-all-dead-letter-queues-yes-multiple" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2017-04-04T19:10:00Z" PublishedUtc="2017-06-09T03:04:29.6021044Z" ModifiedUtc="2017-06-09T03:04:29.5706637Z" />
      <TagsPart Tags="AzureServiceBus" />
      <AutoroutePart Alias="the-secret-brotherhood-of-message-counts" UseCustomPattern="false" />
      <TitlePart Title="The secret brotherhood of the message counts" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=azure-service-bus-message-wanted-dead-or-alive" Status="Published">
      <BodyPart Text="[![enter image description here][1]][2]&#xD;&#xA;&#xD;&#xA;Running NServiceBus on Azure sometimes can be challenging. Take for example the Azure Service Bus transport. Every queue has additional queues that could contain either dead-lettered messages as a result of repeated failing processing of the poisonous messages or [unsuccessful transfer][3].&#xD;&#xA;&#xD;&#xA;With multiple endpoints and their queues, you want to be able to monitor your system and know when things are going south. Particular Platform offers a monitoring tool, [Service Control][4] that is designed specifically for this purpose. Except it monitors endpoints for successfully processed and failed processing messages. Not quite the whole story for the ASB’s dead-letter queues, isn’t it?&#xD;&#xA;&#xD;&#xA;Gladly, there’s an option of [Custom Checks][5]. These checks allow periodic execution of certain tests and can report results back to the mothership, SP dashboard.&#xD;&#xA;&#xD;&#xA;To implement a custom check, Custom Checks NuGet package needs to be a referenced. For NServiceBus version 6, the package is `ServiceControl.Plugin.Nsb6.CustomChecks`. With the package in place, plugin requires ServiceControl input queue.&#xD;&#xA;&#xD;&#xA;    endpointConfiguration.CustomCheckPlugin(&quot;particular.servicecontrol&quot;);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;And the check class itself:&#xD;&#xA;&#xD;&#xA;    public class MonitorDeadletterQueue : CustomCheck&#xD;&#xA;    {&#xD;&#xA;        NamespaceManager namespaceManager;&#xD;&#xA;        const string endpointName = &quot;Samples.Azure.ServiceBus.Endpoint2&quot;;&#xD;&#xA;    &#xD;&#xA;        public MonitorDeadletterQueue() : base(id: $&quot;Monitor {endpointName} DLQ&quot;, category: &quot;Monitor DLQ&quot;, repeatAfter: TimeSpan.FromSeconds(10))&#xD;&#xA;        {&#xD;&#xA;            var connectionString = Environment.GetEnvironmentVariable(&quot;AzureServiceBus.ConnectionString&quot;);&#xD;&#xA;            namespaceManager = NamespaceManager.CreateFromConnectionString(connectionString);&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        public override async Task&lt;CheckResult&gt; PerformCheck()&#xD;&#xA;        {&#xD;&#xA;            var queueDescription = await namespaceManager.GetQueueAsync(endpointName).ConfigureAwait(false);&#xD;&#xA;            var messageCountDetails = queueDescription.MessageCountDetails;&#xD;&#xA;    &#xD;&#xA;            if (messageCountDetails.DeadLetterMessageCount &gt; 0)&#xD;&#xA;            {&#xD;&#xA;                return CheckResult.Failed($&quot;{messageCountDetails.DeadLetterMessageCount} dead-lettered messages in queue {endpointName}.&quot;);&#xD;&#xA;            }&#xD;&#xA;    &#xD;&#xA;            return CheckResult.Pass;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;Once implemented, DLQ custom check periodically executes and provides the status. As long as there are no dead-lettered messages, there will be no alerts.&#xD;&#xA;&#xD;&#xA;![enter image description here][6]&#xD;&#xA;&#xD;&#xA;However, the moment there are dead-lettered messages, the dashboard will light up.&#xD;&#xA;&#xD;&#xA;![enter image description here][7]&#xD;&#xA;&#xD;&#xA;In this scenario, there was indeed a dead-lettered message in the queue.&#xD;&#xA;&#xD;&#xA;![enter image description here][8]&#xD;&#xA;&#xD;&#xA;Once inspected and addressed, the message can be removed from the DLQ, and SP will go back to normal.&#xD;&#xA;&#xD;&#xA;![enter image description here][9]&#xD;&#xA;&#xD;&#xA;Or at least till the next dead-lettered message 😊&#xD;&#xA;Now you can track down those dead-lettered villains an pick up your bounty.&#xD;&#xA;&#xD;&#xA;  [1]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2017/asb-message-wanted-dead-or-alive/Wanted-Dead-or-Alive.jpg&#xD;&#xA;  [2]: https://weblogs.asp.net/sfeldman/azure-service-bus-message-wanted-dead-or-alive&#xD;&#xA;  [3]: https://weblogs.asp.net/sfeldman/the-secret-brotherhood-of-message-counts&#xD;&#xA;  [4]: https://particular.net/servicepulse&#xD;&#xA;  [5]: https://docs.particular.net/servicecontrol/plugins/custom-checks#periodic-check&#xD;&#xA;  [6]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2017/asb-message-wanted-dead-or-alive/passed.PNG&#xD;&#xA;  [7]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2017/asb-message-wanted-dead-or-alive/failed.PNG&#xD;&#xA;  [8]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2017/asb-message-wanted-dead-or-alive/dlq.PNG&#xD;&#xA;  [9]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2017/asb-message-wanted-dead-or-alive/cleared.PNG" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2017-04-07T06:27:00Z" PublishedUtc="2017-04-07T06:29:50.9865507Z" ModifiedUtc="2017-04-07T06:29:50.9729486Z" />
      <TagsPart Tags="AzureServiceBus,NServiceBus" />
      <AutoroutePart Alias="azure-service-bus-message-wanted-dead-or-alive" UseCustomPattern="false" />
      <TitlePart Title="Azure Service Bus Message: Wanted Dead or Alive" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=monitoring-all-dead-letter-queues-yes-multiple" Status="Published">
      <BodyPart Text="[![enter image description here][1]][2]&#xD;&#xA;&#xD;&#xA;In my previous post [The secret brotherhood of the message counts](http://bit.ly/msgbrotherhood) I talked about sub-queues any Azure Service Bus queue has. For a `queue` those where:&#xD;&#xA;&#xD;&#xA; 1. `queue/$DeadLetterQueue`&#xD;&#xA; 2. `queue/$Transfer`&#xD;&#xA; 3. and `queue/$Transfer/$DeadLetterQueue`&#xD;&#xA;&#xD;&#xA;In this post, I'm going to focus on the importance of monitoring TDLQ (Transfer DLQ).&#xD;&#xA;&#xD;&#xA;## Great success: the message was not delivered.&#xD;&#xA;&#xD;&#xA;Imagine the following scenario:&#xD;&#xA;&#xD;&#xA;![scenario][3]&#xD;&#xA;&#xD;&#xA;A proess is handling a message from `source` queue. During processing, several messages are created and dispatched to various destinations `dest-a`, `dest-b`, and `dest-c`. With transaction and send-via it all works just great.  This is what it looks like before message is processed and after:&#xD;&#xA;&#xD;&#xA;***before***&#xD;&#xA;&#xD;&#xA;Messages in queue `source`: 1 &#xD;&#xA;&#xD;&#xA;Messages in queue `dest-a`: 0 &#xD;&#xA;&#xD;&#xA;Messages in queue `dest-b`: 0 &#xD;&#xA;&#xD;&#xA;Messages in queue `dest-c`: 0 &#xD;&#xA;&#xD;&#xA;***after***&#xD;&#xA;&#xD;&#xA;Messages in queue `source`: 0 &#xD;&#xA;&#xD;&#xA;Messages in queue `dest-a`: 1 &#xD;&#xA;&#xD;&#xA;Messages in queue `dest-b`: 1 &#xD;&#xA;&#xD;&#xA;Messages in queue `dest-c`: 1 &#xD;&#xA;&#xD;&#xA;Now imagine for a second that one of the destination queues is piling up messages that are not dequeued frequently. For the sake of example, let it be `dest-b`. Messages will build up until the point where the queue will reach its maximum size. What will happen then?&#xD;&#xA;&#xD;&#xA;***before***&#xD;&#xA;&#xD;&#xA;Messages in queue `source`: 1 &#xD;&#xA;&#xD;&#xA;Messages in queue `dest-a`: 0 &#xD;&#xA;&#xD;&#xA;Messages in queue `dest-b`: 0 &#xD;&#xA;&#xD;&#xA;Messages in queue `dest-c`: 0 &#xD;&#xA;&#xD;&#xA;***after***&#xD;&#xA;&#xD;&#xA;Messages in queue `source`: 0 &#xD;&#xA;&#xD;&#xA;Messages in queue `dest-a`: 1 &#xD;&#xA;&#xD;&#xA;Messages in queue `dest-b`: **0** &#xD;&#xA;&#xD;&#xA;Messages in queue `dest-c`: 1 &#xD;&#xA;&#xD;&#xA;Wait a second. What just happened here? No exceptions, no errors, but the message is not delivered?&#xD;&#xA;&#xD;&#xA;## Guaranteed delivery. Not guaranteed destination.&#xD;&#xA;&#xD;&#xA;No need to panic. The messages for the destination queues are staged during the transaction and are kept on the broker. They are transferred to the destination queue by the broker. If the broker cannot deliver a message to its destination, it will not fail. Rather it will safely move the message to the send-via queues' TDLQ. By doing so, Azure Service Bus ensures that even if the destination is not capable of receiving the message at the moment, the message won't be lost. Instead, it will be safely stored in TDLQ. And since TDLQ can be accessed, it can be monitored and operated on. Therefore message can be actioned if needed.&#xD;&#xA;&#xD;&#xA;To simulate this scenario, one queue `dest-b` could be simply disabled. The result of our scenario would be the following:&#xD;&#xA;&#xD;&#xA;![tdlq-ed message][4]&#xD;&#xA;&#xD;&#xA;## Are you insane?! Do I need to check TDLQ for every transaction?&#xD;&#xA;&#xD;&#xA;No. I am not saying that. You do not need (and even should not) check TDLQ after each and every transaction completion. What you _should_ do is have a process in place [to monitor](https://weblogs.asp.net/sfeldman/centralized-dead-letter-queue-with-azure-service-bus) your TDLQs by ops and alert if something is there. Just like you would monitor for the regular DLQs. Remember, this is an *edge case*, not a norm. But just because it's rare, doesn't mean it won't happen.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2017/monitoring-all-dead-letter-queues-yes-multiple/00.transaction.header.jpg&#xD;&#xA;  [2]: https://weblogs.asp.net/sfeldman/monitoring-all-dead-letter-queues-yes-multiple&#xD;&#xA;  [3]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2017/monitoring-all-dead-letter-queues-yes-multiple/00.transaction.logical.PNG&#xD;&#xA;  [4]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2017/monitoring-all-dead-letter-queues-yes-multiple/01.transaction.tdlq.PNG" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2017-06-09T02:49:00Z" PublishedUtc="2017-06-11T03:01:54.2022445Z" ModifiedUtc="2017-06-11T03:01:54.2022445Z" />
      <TagsPart Tags="ASB" />
      <AutoroutePart Alias="monitoring-all-dead-letter-queues-yes-multiple" UseCustomPattern="false" />
      <TitlePart Title="Monitoring all Dead Letter Queues. Yes, multiple." />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=hello-microsoft-azure-servicebus" Status="Published">
      <BodyPart Text="[![hello][1]][2]&#xD;&#xA;&#xD;&#xA;If you've missed the news, a [new Azure Service Bus client](https://twitter.com/jtaubensee/status/811303987156832256) is emerging on the horizon.&#xD;&#xA;&#xD;&#xA;![tweet][3] &#xD;&#xA;&#xD;&#xA;This client is a significant development under the umbrella of multiple changes taking place in the Microsoft camp. A few of those are:&#xD;&#xA;&#xD;&#xA; - Open Source support&#xD;&#xA; - Public collaboration&#xD;&#xA; - Investment into documentation&#xD;&#xA; - Client customization&#xD;&#xA;&#xD;&#xA;Open Source support is a big one. In the past, the WindowsAzure.ServiceBus client we've learned to love and hate was closed source. While decompiling was possible, that is far from optimal experience trying to understand the code and the decisions behind it. The code for the current client will stay closed, and probably good that it will. Some skeletons shouldn't be out of the closet. &#xD;&#xA;&#xD;&#xA;With the new client, the code is public on [GitHub](https://github.com/Azure/azure-service-bus-dotnet). No more fiddling with reflection tools. Can provide a better implementation? Send a PR. Found a bug? Raise an issue and tie it to PR. Connect discussions to the code. Have more eyes on the code and discussions that are happening. A real public collaboration. The type of cooperation that will promote superior results.&#xD;&#xA;&#xD;&#xA;It would be unfair to talk about all of this excitement without calling out the elephant in the room. Documentation. Great strides were made to address a long-standing deficit. Guidance articles were added, and API documentation is refreshed. Here starts a long journey towards a much better documentation that this service needs and deserves. With the open source code and collaboration in a public repository, knowledge is not only shared but also documented. The importance while not immediately realized will manifest itself in many occasions down the road. Discussions and design/implementation choices explained and captured. No guidance or API documentation can do that.&#xD;&#xA;&#xD;&#xA;And what it be if not the new and exciting possibilities. The new client will be simpler and &quot;cleaner.&quot; Up-to-date with the modern times on the async side of things. API design refreshed and updated to reflect lessons learned over time. For example, one of the exciting changes coming to the new client is the [extensibility API](https://github.com/Azure/azure-service-bus-dotnet/issues/106). While it doesn't sound a lot, it brings a whole world of new opportunities into the client world with the OCP principle observed. Want to secure your messages using KeyVault service? Add [KeyVault plugin](https://github.com/Azure/azure-service-bus-dotnet-plugins) and have messages encrypted. Want to control message ID generation? You guessed it right. Want to add more customizations to the incoming/outgoing pipelines? Build your plugins and get that custom functionality you always wanted the client to have.&#xD;&#xA;&#xD;&#xA;And if I managed to awake your curiosity, get the [client NuGet package](https://www.nuget.org/packages/microsoft.azure.servicebus) and go for it! Ready for more? Contribute some code. Find a bug and raise an issue. Be in charge of the client future and have fun.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2017/hello-microsoft.azure.aervicebus/00-title-3.PNG&#xD;&#xA;  [2]: https://weblogs.asp.net/sfeldman/hello-microsoft-azure-servicebus&#xD;&#xA;  [3]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2017/hello-microsoft.azure.aervicebus/00-tweet.PNG" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2017-06-28T05:04:11.9593358Z" PublishedUtc="2017-06-28T05:04:11.9593358Z" ModifiedUtc="2017-06-28T05:04:11.9437373Z" />
      <TagsPart Tags="AzureServiceBus" />
      <AutoroutePart Alias="hello-microsoft-azure-servicebus" UseCustomPattern="false" />
      <TitlePart Title="Hello Microsoft.Azure.ServiceBus" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=asb-plugins" Status="Published">
      <BodyPart Text="[![Plugins][1]](https://weblogs.asp.net/sfeldman/asb-plugins)&#xD;&#xA;&#xD;&#xA;For a very long time Azure Service Bus client [WindowsAzure.ServiceBus/](https://www.nuget.org/packages/WindowsAzure.ServiceBus/) was a black box. When it came to the customization of the message payload, it would allow choosing on serialization, and that's pretty much it. Message IDs were always generated as random Guids and were required to be overwritten to comply with project requirements. Needed to secure the payload? You'd need to have that code to operate on the data before it would become BrokeredMessage payload. &#xD;&#xA;&#xD;&#xA;These are the hardships of the old client though. With the new client, [Microsoft.Azure.ServiceBus](https://www.nuget.org/packages/Microsoft.Azure.ServiceBus/) things are different. With support for extensibility, the new client offers a simple incoming and outgoing pipelines. These pipelines take plugins that have a relatively simple API but can help immensely with message customization when it's sent or received. This is what a [plugin skeleton](https://github.com/Azure/azure-service-bus-dotnet/blob/master/src/Microsoft.Azure.ServiceBus/Core/ServiceBusPlugin.cs) looks like (at the time of writing, this is still in preview):&#xD;&#xA;&#xD;&#xA;    public abstract class ServiceBusPlugin&#xD;&#xA;    {&#xD;&#xA;      public abstract string Name { get; }&#xD;&#xA;      public virtual bool ShouldContinueOnException =&gt; false;&#xD;&#xA;      public virtual Task&lt;Message&gt; BeforeMessageSend(Message message)&#xD;&#xA;      {&#xD;&#xA;          return Task.FromResult(message);&#xD;&#xA;      }&#xD;&#xA;      public virtual Task&lt;Message&gt; AfterMessageReceive(Message message)&#xD;&#xA;      {&#xD;&#xA;          return Task.FromResult(message);&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;In the [previous post](https://weblogs.asp.net/sfeldman/hello-microsoft-azure-servicebus), I've already talked about [MessageIdPlugin](https://github.com/Azure/azure-service-bus-dotnet-plugins/blob/dev/src/Microsoft.Azure.ServiceBus.MessageIdPlugin/readme.md) and [KeyVaultPlugin](https://github.com/Azure/azure-service-bus-dotnet-plugins/blob/dev/src/Microsoft.Azure.ServiceBus.KeyVaultPlugin/readme.md). In this post, I'd like to extend the topic by demonstrating another power that plugins bring to the game.&#xD;&#xA;&#xD;&#xA;## Sending large messages&#xD;&#xA;&#xD;&#xA;*How large message can be?* &#xD;&#xA;&#xD;&#xA;Today it's 256KB/1MB including headers.&#xD;&#xA;&#xD;&#xA;*Isn't that a solved problem already? That's what [Claim Check pattern](http://www.enterpriseintegrationpatterns.com/patterns/messaging/StoreInLibrary.html) is for.*&#xD;&#xA;&#xD;&#xA;While claim check pattern is indeed the way to go, it is distracting from the actual code you most likely trying to get out - sending messages. Remember, another level of indirection can solve a problem. For sending and receiving large messages that could be a claim check plugin. A message exceeding maximum size would be saved to a blob, reference attached to the message, and upon receive payload would be read back and associated with the message. More than that, a plugin could determine based on some custom logic at what point a message should be &quot;offloaded&quot; to a blob or not. Criteria could be payload size or message type for example. &#xD;&#xA;&#xD;&#xA;## Meet ServiceBus.AttachmentPlugin&#xD;&#xA;&#xD;&#xA;And that's exactly what [ServiceBus.AttachmentPlugin](https://www.nuget.org/packages/ServiceBus.AttachmentPlugin/) is. Harvesting the power of OSS extensibility and NuGet packaging it implements Claim Check pattern plugin for the new ASB client.&#xD;&#xA;&#xD;&#xA;To use the plugin, a connection string to Storage account is required. With Storage connection string, the plugin can be configured and used&#xD;&#xA;&#xD;&#xA;### Configuration and registration&#xD;&#xA;&#xD;&#xA;    var sender = new MessageSender(connectionString, queueName);&#xD;&#xA;    var config = new AzureStorageAttachmentConfiguration(storageConnectionString);&#xD;&#xA;    var plugin = new AzureStorageAttachment(config);&#xD;&#xA;    sender.RegisterPlugin(plugin);&#xD;&#xA;&#xD;&#xA;### Sending&#xD;&#xA;&#xD;&#xA;    var payload = new MyMessage { ... }; &#xD;&#xA;    var serialized = JsonConvert.SerializeObject(payload);&#xD;&#xA;    var payloadAsBytes = Encoding.UTF8.GetBytes(serialized);&#xD;&#xA;    var message = new Message(payloadAsBytes);&#xD;&#xA;&#xD;&#xA;### Receiving&#xD;&#xA;&#xD;&#xA;    var receiver = new MessageReceiver(connectionString, entityPath, ReceiveMode.ReceiveAndDelete);&#xD;&#xA;    receiver.RegisterPlugin(plugin);&#xD;&#xA;    var msg = await receiver.ReceiveAsync();&#xD;&#xA;    // msg will contain the original payload&#xD;&#xA;&#xD;&#xA;Configuration applies the defaults, which [can be overriden](https://github.com/SeanFeldman/ServiceBus.AttachmentPlugin#configure-blobs-container-name).&#xD;&#xA;&#xD;&#xA;[Visual](https://aspblogs.blob.core.windows.net:443/media/sfeldman/2017/asb-plugins/flow.PNG) of a sample message sent with the plugin.&#xD;&#xA;&#xD;&#xA;## Seeing is believing&#xD;&#xA;&#xD;&#xA;    Install-Package ServiceBus.AttachmentPlugin -Pre&#xD;&#xA;&#xD;&#xA;Found issues or have suggestions? Raise those [here](https://github.com/SeanFeldman/ServiceBus.AttachmentPlugin/issues).&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2017/asb-plugins/plugins.jpg" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2017-07-03T22:19:00Z" PublishedUtc="2017-07-13T21:49:59.2576497Z" ModifiedUtc="2017-07-13T21:49:59.2420501Z" />
      <TagsPart Tags="AzureServiceBus" />
      <AutoroutePart Alias="asb-plugins" UseCustomPattern="false" />
      <TitlePart Title="Azure Service Bus Plugins" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=sending-large-messages-wo-exposing-storage-account" Status="Published">
      <BodyPart Text="[ServiceBus.AttachmentPlugin][1] is an Azure Service Bus plugin to help with messages exceeding the allowed maximum size. Sender would store the message body as a Azure Storage blob and receive would read blob content to re-hydrate the message body just before message is given to the consumer code. This assumes that both sender and receiver share the knowledge about Azure Storage account and both can access it. But what if that's not the case?&#xD;&#xA;&#xD;&#xA;Occasionally, there's a need to send messages to a party that should not have access to the blob storage for attachments. For that, Azure Storage service supports blobs with SAS URIs. It enables blob retrieval without the need in storage account. Starting from version 1.1.0 of the ServiceBus.AttachmentPlugin, you can send messages w/o exposing storage account connection string. Receivers will only need to know and specify the message property used to identify blob [SAS URI][2].&#xD;&#xA;&#xD;&#xA;    new AzureStorageAttachmentConfiguration(storageConnectionString)&#xD;&#xA;         .WithSasUri(messagePropertyToIdentifySasUri: &quot;sender-provided-sas-uri-property-name&quot;);&#xD;&#xA;&#xD;&#xA;Et voilà! Message is sent without storage being exposed. &#xD;&#xA;![ASB message][3]&#xD;&#xA;&#xD;&#xA;where &quot;mySasUriProperty&quot; is http://&amp;lt;storage&amp;gt;/attachments/3bfe3abe-8a04-4827-bb6b-f90e1ca87bfa?sv=2017-04-17&amp;sr=b&amp;sig=%2B2vYnQR7TEzGJicoJugt2WGzpB1C4w2h6p%2Fx9tnlEro%3D&amp;st=2017-09-18T05%3A02%3A03Z&amp;se=2017-09-18T09%3A07%3A03Z&amp;sp=rd&quot;&#xD;&#xA;&#xD;&#xA;SAS permissions include `SharedAccessBlobPermissions.Read` and `SharedAccessBlobPermissions.Delete` (to allow blob removal by the receiver if required).&#xD;&#xA;&#xD;&#xA;An additional scenario for this is to spread the load between multiple storage accounts upon sending w/o necessarily synchronizing storage connections strings with all the receivers.&#xD;&#xA;&#xD;&#xA;Get the [latest version][4] of the plugin to handle your large messages.&#xD;&#xA;Read [release notes][5] for details.&#xD;&#xA;&#xD;&#xA;Special thank you to [Mats Iremark][6] for feature PR.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://github.com/SeanFeldman/ServiceBus.AttachmentPlugin&#xD;&#xA;  [2]: https://docs.microsoft.com/en-us/azure/storage/common/storage-dotnet-shared-access-signature-part-1&#xD;&#xA;  [3]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2017/sending-large-message-wo-connection-string/image.png&#xD;&#xA;  [4]: https://www.nuget.org/packages/ServiceBus.AttachmentPlugin/1.1.0&#xD;&#xA;  [5]: https://github.com/SeanFeldman/ServiceBus.AttachmentPlugin/releases/tag/1.1.0&#xD;&#xA;  [6]: https://github.com/iremmats" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2017-09-18T04:54:00Z" PublishedUtc="2017-09-22T16:06:08.6122101Z" ModifiedUtc="2017-09-22T16:06:08.5965721Z" />
      <TagsPart Tags="AttachmentPlugin" />
      <AutoroutePart Alias="sending-large-messages-wo-exposing-storage-account" UseCustomPattern="false" />
      <TitlePart Title="Sending large messages without exposing the storage account" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=partitioning-and-deduplication" Status="Published">
      <BodyPart Text="Recently, I've received a comment on an older post about [message de-duplication](https://weblogs.asp.net/sfeldman/bend-message-deduplication-on-azure-service-bus-to-your-will) that was somewhat peculiar. &#xD;&#xA;&#xD;&#xA;&gt; An important note here - watch out for partitioning. I basically ran the same code, but de-duping did not work and I couldn't understand why. Turns out that because I created the queue manually through the portal with partitioning enabled, and it screwed up the de-duping.&#xD;&#xA;&#xD;&#xA;To recap, here's what we have:&#xD;&#xA;&#xD;&#xA; - A queue is created with native de-duplication enabled.&#xD;&#xA; - It's partitioned.&#xD;&#xA; - A message with a calculated `MessageId` is sent to the queue.&#xD;&#xA; - A message duplicate with the same `MessageId` is sent to the queue.&#xD;&#xA; - Expected behavior: duplicate to be detected and removed&#xD;&#xA; - Actual behavior: the message and its duplicate are found on the queue.&#xD;&#xA;&#xD;&#xA;This makes no sense, right? Indeed it doesn't.&#xD;&#xA;&#xD;&#xA;You know how the instinct to blame something &quot;obvious&quot; kicks in first? The portal is already &lt;strike&gt;horrible&lt;/strike&gt; not the best. It would be easy to blame it for another issue and move on. And that's exactly what I did at first. Except it feels wrong to cast blame on something that might not be at fault and make a scapegoat of it.&#xD;&#xA;&#xD;&#xA;So let's assume it's _not_ the tool's fault and review the basics of the Azure Service Bus.&#xD;&#xA;&#xD;&#xA;## [Duplication Message Detection][1]&#xD;&#xA;&#xD;&#xA;&gt; Enabling duplicate detection helps keep track of the application-controlled `MessageId` of all messages sent into a queue or topic during a specified time window. If any new message is sent carrying a `MessageId` that has already been logged during the time window, the message is reported as accepted (the send operation succeeds), but the newly sent message is instantly ignored and dropped. No other parts of the message other than the `MessageId` are considered.&#xD;&#xA;&#xD;&#xA;Simple and clear. As long as message IDs are repeated within a specfied time window, the broker will discard the later received copies.&#xD;&#xA;&#xD;&#xA;## [Partitioned Entities][2]&#xD;&#xA;&#xD;&#xA;&gt; Each partitioned queue or topic consists of multiple fragments. Each fragment is stored in a different messaging store and handled by a different message broker. &#xD;&#xA;&#xD;&#xA;This is the important part: each fragment is handled by a **different broker**.&#xD;&#xA;&#xD;&#xA;&gt; When a message is sent to a partitioned queue or topic, Service Bus assigns the message to one of the fragments. The selection is done randomly by Service Bus or by using a partition key that the sender can specify.&#xD;&#xA;&#xD;&#xA;A partition key can be influenced by `SessionId`, `PartitionId, or `MessageId`.&#xD;&#xA;&#xD;&#xA;&gt;  If the queue or topic has the `QueueDescription.RequiresDuplicateDetection` property set to true and the `BrokeredMessage.SessionId` or `BrokeredMessage.PartitionKey` properties are not set, then the **`BrokeredMessage.MessageId` property serves as the partition key**. (Note that the Microsoft .NET and AMQP libraries automatically assign a message ID if the sending application does not.) In this case, **all copies of the same message are handled by the same message broker**. This enables Service Bus to detect and eliminate duplicate messages. If the `QueueDescription.RequiresDuplicateDetection` property is not set to true, Service Bus does not consider the MessageId property as a partition key.&#xD;&#xA;&#xD;&#xA;This is important! To get messages de-duplicated properly when sent to a partitioned entity, a message ID is used to calculate the partition key. The documentation also clearly states that the .NET Framework client is **by default** setting the message ID.&#xD;&#xA;&#xD;&#xA;What that means for the Azure Service Bus full framework client is that even without specifying the message ID, it will be assigned by the client. And since there's no partition key specified, the message ID (randomly assigned by the client) will be used to derive the partition key value. I.e. message IDs will be different. Therefore partition keys will be different. As a result, messages will be sent to different fragments, resulting in duplicates. &#xD;&#xA;&#xD;&#xA;&lt;center&gt;&#xD;&#xA;![ASB][3]&#xD;&#xA;&lt;br/&gt;(Service Bus Architecture diagram, source: [Microsoft docs][4])&#xD;&#xA;&lt;/center&gt;&#xD;&#xA;&#xD;&#xA;**Moral of the story**: always assign a message ID that is deterministic for all the duplicates.&#xD;&#xA;&#xD;&#xA;But that's not everything. At least not all the possible ways to mess things up.&#xD;&#xA;&#xD;&#xA;In case a partition key is specified, it will be used **as-is** to determine the fragment to send messages to. Which will, again, result in messages going to different fragment and from there we know duplicates will be unavoidable.&#xD;&#xA;&#xD;&#xA;**Moral of the story**: do not specify different partition keys for messages that can be duplicates.&#xD;&#xA;&#xD;&#xA;And with the new kid on the block, Azure Service Bus .NET Standard client, the behavior should be identical. Except it's not. It's better. The new client does not mandate message ID to be assigned. Whenever a message without a message ID or a partition key is attempted to be sent to a partitioned entity that has duplicate detection turned on, an exception is thrown.&#xD;&#xA;&#xD;&#xA;&gt; Batching brokered messages with distinct SessionId, PartitionKey, or MessageId  is not supported for an entity with partitioning and duplicate detection enabled. &#xD;&#xA;&#xD;&#xA;Beside the obviously confusing error message which is a [broker minor issue][5], this is a much better outcome then just to have a partition key being assigned from some random message ID. 1:0 in favor of the new Azure Service Bus client!&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://docs.microsoft.com/en-us/azure/service-bus-messaging/duplicate-detection&#xD;&#xA;  [2]: https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-partitioning&#xD;&#xA;  [3]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2017/partitioning-and-de-duplication/asb.architecture.png&#xD;&#xA;  [4]: https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-architecture&#xD;&#xA;  [5]: https://github.com/Azure/azure-service-bus/issues/103" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2017-10-18T03:19:00Z" PublishedUtc="2017-10-18T03:39:41.8141254Z" ModifiedUtc="2017-10-18T03:39:49.0704766Z" />
      <TagsPart Tags="AzureServiceBus" />
      <AutoroutePart Alias="partitioning-and-deduplication" UseCustomPattern="false" />
      <TitlePart Title="Partitioning and de-duplication" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=reading-azure-service-bus-metrics" Status="Published">
      <BodyPart Text="I always found it interesting that most of us start counting earlier than we can read or spell our own names.&#xD;&#xA;Almost as if we are predispositioned to count first. Yet numbers can become very difficult later in the game.&#xD;&#xA;&#xD;&#xA;Azure Service Bus client seems to follow the same footsteps in its evolution. With the &quot;old school&quot; client [(`WindowsAzure.ServiceBus`)][old-client] reading message counts was a trivial exercise.&#xD;&#xA;&#xD;&#xA;    var queueDescription = await namespaceManager.GetQueueAsync(&quot;queue&quot;));&#xD;&#xA;    var details = queueDescription.MessageCountDetails;&#xD;&#xA;    // queueDescription.MessageCount&#xD;&#xA;    // details.ActiveMessageCount&#xD;&#xA;    // details.ScheduledMessageCount&#xD;&#xA;    // details.DeadLetterMessageCount&#xD;&#xA;    // details.TransferDeadLetterMessageCount&#xD;&#xA;    // details.TransferMessageCount&#xD;&#xA;&#xD;&#xA;While it looked simple and innocent, the operation of reading message counts is quite expensive and challenging on the broker side. Imagine a partitioned entity with 16 sections. To get message count, it would perform a query on all 16 brokers and aggregate the results to be served back to the client. Now imagine a &quot;clueless&quot; and &quot;stubborn&quot; client that just keeps pounding the server to get the counts every few seconds. You guessed right, it's not ideal. Message counts were not designed to be queried frequently, and such an action is an abuse.&#xD;&#xA;&#xD;&#xA;And that's why it's going to be deprecated from the new client [`Microsoft.Azure.ServiceBus`][new-client]. Full stop. What do you mean it will be gone?! How will it be possible to get message counts? Fear not. There's a way. Eventually.&#xD;&#xA;&#xD;&#xA;But first, let's look at a bigger picture.&#xD;&#xA;&#xD;&#xA;## Metrics aren't cheap&#xD;&#xA;&#xD;&#xA;Metrics require computational time, and based on what we've already seen, it could be an extensive amount of time for the curious ones. The approach the new client is taking is: rather than allowing reading of the counts directly, to have Service Bus send data to the [Azure Monitor service][monitor-service]. In order to retrieve that information, you'd be able to either use the portal&#xD;&#xA;&#xD;&#xA;![Portal][monitor-portal]&#xD;&#xA;&#xD;&#xA;or use the Monitor API&#xD;&#xA;&#xD;&#xA;    static async Task Main()&#xD;&#xA;    {&#xD;&#xA;    &#x9;var tenantId = &quot;&lt;tenant-id&gt;&quot;;&#xD;&#xA;    &#x9;var clientId = &quot;&lt;client-id&gt;&quot;;&#xD;&#xA;    &#x9;var secret = &quot;&lt;secret&gt;&quot;;&#xD;&#xA;    &#x9;var subscriptionId = &quot;&lt;subscription-id&gt;&quot;;&#xD;&#xA;    &#x9;var resourceId = $&quot;subscriptions/{subscriptionId}/resourceGroups/&lt;resource-group&gt;/providers/Microsoft.ServiceBus/namespaces/&lt;namespace-name&gt;&quot;;&#xD;&#xA;    &#xD;&#xA;    &#x9;var metricsClient = await Authenticate(tenantId, clientId, secret, subscriptionId);&#xD;&#xA;    &#xD;&#xA;    &#x9;var metricDefinitions = await metricsClient.MetricDefinitions.ListAsync(resourceId);&#xD;&#xA;    &#x9;var selectedMetrics = metricDefinitions.Select(x =&gt; new { x.Name.Value, x.Unit }).Dump();&#xD;&#xA;    &#xD;&#xA;    &#x9;var metrics = await metricsClient.Metrics.ListAsync(resourceId, metric: &quot;IncomingRequests&quot;);&#xD;&#xA;    &#x9;Console.WriteLine(JsonConvert.SerializeObject(metrics, Newtonsoft.Json.Formatting.Indented));&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    static async Task&lt;MonitorClient&gt; Authenticate(string tenantId, string clientId, string secret, string subscriptionId)&#xD;&#xA;    {&#xD;&#xA;    &#x9;// Build the service credentials and Monitor client&#xD;&#xA;    &#x9;var serviceCreds = await ApplicationTokenProvider.LoginSilentAsync(tenantId, clientId, secret);&#xD;&#xA;    &#x9;var monitorClient = new MonitorClient(serviceCreds)&#xD;&#xA;    &#x9;{&#xD;&#xA;    &#x9;&#x9;SubscriptionId = subscriptionId&#xD;&#xA;    &#x9;};&#xD;&#xA;    &#xD;&#xA;    &#x9;return monitorClient;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;In this example, code requested `IncomingRequests` metric. &#xD;&#xA;&#xD;&#xA;(Nuget packages needed for the snippet are `Microsoft.Azure.Management.Monitor` and `Microsoft.Rest.ClientRuntime.Azure.Authentication`)&#xD;&#xA;&#xD;&#xA;The time-series data received will look as following (truncated):&#xD;&#xA;&#xD;&#xA;    {&#xD;&#xA;      &quot;cost&quot;: 0.0,&#xD;&#xA;      &quot;timespan&quot;: &quot;2017-10-22T07:20:55Z/2017-10-22T08:20:55Z&quot;,&#xD;&#xA;      &quot;interval&quot;: &quot;00:01:00&quot;,&#xD;&#xA;      &quot;value&quot;: [&#xD;&#xA;        {&#xD;&#xA;          &quot;id&quot;: &quot;/subscriptions/07d47bb1-6bc5-417e-8112-def525f89d66/resourceGroups/ServiceBusSpikes-rg/providers/Microsoft.ServiceBus/namespaces/seanfeldman-aad/providers/Microsoft.Insights/metrics/IncomingRequests&quot;,&#xD;&#xA;          &quot;type&quot;: &quot;Microsoft.Insights/metrics&quot;,&#xD;&#xA;          &quot;name&quot;: {&#xD;&#xA;            &quot;value&quot;: &quot;IncomingRequests&quot;,&#xD;&#xA;            &quot;localizedValue&quot;: &quot;Incoming Requests (Preview)&quot;&#xD;&#xA;          },&#xD;&#xA;          &quot;unit&quot;: &quot;Count&quot;,&#xD;&#xA;          &quot;timeseries&quot;: [&#xD;&#xA;            {&#xD;&#xA;              &quot;metadatavalues&quot;: [],&#xD;&#xA;              &quot;data&quot;: [&#xD;&#xA;                {&#xD;&#xA;                  &quot;timeStamp&quot;: &quot;2017-10-22T07:20:00Z&quot;,&#xD;&#xA;                  &quot;average&quot;: null,&#xD;&#xA;                  &quot;minimum&quot;: null,&#xD;&#xA;                  &quot;maximum&quot;: null,&#xD;&#xA;                  &quot;total&quot;: 0.0,&#xD;&#xA;                  &quot;count&quot;: null&#xD;&#xA;                },&#xD;&#xA;                {&#xD;&#xA;                  &quot;timeStamp&quot;: &quot;2017-10-22T07:58:00Z&quot;,&#xD;&#xA;                  &quot;average&quot;: null,&#xD;&#xA;                  &quot;minimum&quot;: null,&#xD;&#xA;                  &quot;maximum&quot;: null,&#xD;&#xA;                  &quot;total&quot;: 58.0,&#xD;&#xA;                  &quot;count&quot;: null&#xD;&#xA;                },&#xD;&#xA;                {&#xD;&#xA;                  &quot;timeStamp&quot;: &quot;2017-10-22T07:59:00Z&quot;,&#xD;&#xA;                  &quot;average&quot;: null,&#xD;&#xA;                  &quot;minimum&quot;: null,&#xD;&#xA;                  &quot;maximum&quot;: null,&#xD;&#xA;                  &quot;total&quot;: 45.0,&#xD;&#xA;                  &quot;count&quot;: null&#xD;&#xA;                },&#xD;&#xA;                {&#xD;&#xA;                  &quot;timeStamp&quot;: &quot;2017-10-22T08:00:00Z&quot;,&#xD;&#xA;                  &quot;average&quot;: null,&#xD;&#xA;                  &quot;minimum&quot;: null,&#xD;&#xA;                  &quot;maximum&quot;: null,&#xD;&#xA;                  &quot;total&quot;: 0.0,&#xD;&#xA;                  &quot;count&quot;: null&#xD;&#xA;                },&#xD;&#xA;                {&#xD;&#xA;                  &quot;timeStamp&quot;: &quot;2017-10-22T08:01:00Z&quot;,&#xD;&#xA;                  &quot;average&quot;: null,&#xD;&#xA;                  &quot;minimum&quot;: null,&#xD;&#xA;                  &quot;maximum&quot;: null,&#xD;&#xA;                  &quot;total&quot;: 144.0,&#xD;&#xA;                  &quot;count&quot;: null&#xD;&#xA;                },&#xD;&#xA;                {&#xD;&#xA;                  &quot;timeStamp&quot;: &quot;2017-10-22T08:02:00Z&quot;,&#xD;&#xA;                  &quot;average&quot;: null,&#xD;&#xA;                  &quot;minimum&quot;: null,&#xD;&#xA;                  &quot;maximum&quot;: null,&#xD;&#xA;                  &quot;total&quot;: 10.0,&#xD;&#xA;                  &quot;count&quot;: null&#xD;&#xA;                },&#xD;&#xA;                {&#xD;&#xA;                  &quot;timeStamp&quot;: &quot;2017-10-22T08:03:00Z&quot;,&#xD;&#xA;                  &quot;average&quot;: null,&#xD;&#xA;                  &quot;minimum&quot;: null,&#xD;&#xA;                  &quot;maximum&quot;: null,&#xD;&#xA;                  &quot;total&quot;: 380.0,&#xD;&#xA;                  &quot;count&quot;: null&#xD;&#xA;                },&#xD;&#xA;                {&#xD;&#xA;                  &quot;timeStamp&quot;: &quot;2017-10-22T08:04:00Z&quot;,&#xD;&#xA;                  &quot;average&quot;: null,&#xD;&#xA;                  &quot;minimum&quot;: null,&#xD;&#xA;                  &quot;maximum&quot;: null,&#xD;&#xA;                  &quot;total&quot;: 621.0,&#xD;&#xA;                  &quot;count&quot;: null&#xD;&#xA;                },&#xD;&#xA;                {&#xD;&#xA;                  &quot;timeStamp&quot;: &quot;2017-10-22T08:05:00Z&quot;,&#xD;&#xA;                  &quot;average&quot;: null,&#xD;&#xA;                  &quot;minimum&quot;: null,&#xD;&#xA;                  &quot;maximum&quot;: null,&#xD;&#xA;                  &quot;total&quot;: 245.0,&#xD;&#xA;                  &quot;count&quot;: null&#xD;&#xA;                },&#xD;&#xA;                {&#xD;&#xA;                  &quot;timeStamp&quot;: &quot;2017-10-22T08:06:00Z&quot;,&#xD;&#xA;                  &quot;average&quot;: null,&#xD;&#xA;                  &quot;minimum&quot;: null,&#xD;&#xA;                  &quot;maximum&quot;: null,&#xD;&#xA;                  &quot;total&quot;: 56.0,&#xD;&#xA;                  &quot;count&quot;: null&#xD;&#xA;                }&#xD;&#xA;              ]&#xD;&#xA;            }&#xD;&#xA;          ]&#xD;&#xA;        }&#xD;&#xA;      ]&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;## Today's metrics&#xD;&#xA;&#xD;&#xA;The metrics you can already access today are all the metrics listed under Monitor service. Remove spaces and &quot;(Preview)&quot; and you got a metric name.&#xD;&#xA;&#xD;&#xA;&lt;table&gt;&#xD;&#xA; &lt;tr&gt;&#xD;&#xA;  &lt;th&gt;Description&lt;/th&gt;&#xD;&#xA;  &lt;th&gt;Metric&lt;/th&gt;&#xD;&#xA; &lt;/tr&gt;&#xD;&#xA;&lt;tr&gt;&lt;td&gt;Active Connections (Preview)&lt;/td&gt;&lt;td&gt;ActiveConnections&lt;/td&gt;&lt;/tr&gt;&#xD;&#xA;&lt;tr&gt;&lt;td&gt;Connections Closed (Preview)&lt;/td&gt;&lt;td&gt;ConnectionsClosed&lt;/td&gt;&lt;/tr&gt;&#xD;&#xA;&lt;tr&gt;&lt;td&gt;Connections Opened (Preview)&lt;/td&gt;&lt;td&gt;ConnectionsOpened&lt;/td&gt;&lt;/tr&gt;&#xD;&#xA;&lt;tr&gt;&lt;td&gt;Incoming Messages (Preview)&lt;/td&gt;&lt;td&gt;IncomingMessages&lt;/td&gt;&lt;/tr&gt;&#xD;&#xA;&lt;tr&gt;&lt;td&gt;Incoming Requests (Preview)&lt;/td&gt;&lt;td&gt;IncomingRequests&lt;/td&gt;&lt;/tr&gt;&#xD;&#xA;&lt;tr&gt;&lt;td&gt;Outgoing Messages (Preview)&lt;/td&gt;&lt;td&gt;OutgoingMessages&lt;/td&gt;&lt;/tr&gt;&#xD;&#xA;&lt;tr&gt;&lt;td&gt;Server Errors (Preview)&lt;/td&gt;&lt;td&gt;ServerErrors&lt;/td&gt;&lt;/tr&gt;&#xD;&#xA;&lt;tr&gt;&lt;td&gt;Successful Requests (Preview)&lt;/td&gt;&lt;td&gt;SuccessfulRequests&lt;/td&gt;&lt;/tr&gt;&#xD;&#xA;&lt;tr&gt;&lt;td&gt;Throttled Requests (Preview)&lt;/td&gt;&lt;td&gt;ThrottledRequests&lt;/td&gt;&lt;/tr&gt;&#xD;&#xA;&lt;tr&gt;&lt;td&gt;User Errors (Preview)&lt;/td&gt;&lt;td&gt;UserErrors&lt;/td&gt;&lt;/tr&gt;&#xD;&#xA;&lt;/table&gt;&#xD;&#xA;  &#xD;&#xA;To retrieve all metrics available for a resource, the following code can be used:&#xD;&#xA;&#xD;&#xA;    var metricDefinitions = await metricsClient.MetricDefinitions.ListAsync(resourceId);&#xD;&#xA;&#xD;&#xA;**Note**: at this point, only namespace is an acceptable resource.&#xD;&#xA;&#xD;&#xA;## Tomorrow's metrics&#xD;&#xA;&#xD;&#xA;What about entities and message counts? How do you get those numbers?&#xD;&#xA;&#xD;&#xA;They are coming. Hopefully soon. Until then, review how you use message counts in your code and plan to migrate.&lt;br/&gt;&#xD;&#xA;Happy counting!&#xD;&#xA;&#xD;&#xA;[old-client]: https://www.nuget.org/packages/windowsazure.servicebus &quot;WindowsAzure.ServiceBus&quot;&#xD;&#xA;[new-client]: https://www.nuget.org/packages/microsoft.azure.servicebus &quot;Microsoft.Azure.ServiceBus&quot;&#xD;&#xA;[monitor-service]: https://docs.microsoft.com/en-us/azure/monitoring-and-diagnostics/monitoring-overview-azure-monitor &quot;Azure Monitor service&quot;&#xD;&#xA;[monitor-portal]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2017/reading-asb-metrics/monitor-portal.png &quot;Portal&quot;&#xD;&#xA;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2017-10-22T21:23:00Z" PublishedUtc="2017-10-22T21:23:38.7442568Z" ModifiedUtc="2017-10-22T21:24:59.4158116Z" />
      <TagsPart Tags="AzureServiceBus,Monitor" />
      <AutoroutePart Alias="reading-azure-service-bus-metrics" UseCustomPattern="false" />
      <TitlePart Title="Reading Azure Service Bus Metrics" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="true" />
    </BlogPost>
    <BlogPost Id="/alias=azure-service-bus-with-managed-service-identity" Status="Published">
      <BodyPart Text="&lt;center&gt;&#xD;&#xA;[![image][1]][2]&#xD;&#xA;&lt;/center&gt;&#xD;&#xA;&#xD;&#xA;[Managed Server Identity (MSI)*](https://docs.microsoft.com/en-us/azure/active-directory/msi-overview) is a feature of Azure Active Directory (AAD) to allow applications in Azure authenticate to cloud services without managing credentials in your code. &#xD;&#xA;&#xD;&#xA;Integration with MSI presents an excellent opportunity to remove credentials from your code and no longer manage those pesky connections string. What's even better, no more SAS keys to refresh in case those are re-generated. Azure Service Bus documentation has a [quick tutorial](https://docs.microsoft.com/en-ca/azure/service-bus-messaging/service-bus-managed-service-identity) with a linked [sample](https://github.com/Azure/azure-service-bus/tree/master/samples/DotNet/Microsoft.ServiceBus.Messaging/ManagedServiceIdentity), which is not as detailed as I'd like it to be. So here's a more comprehensive walkthrough.&#xD;&#xA;&#xD;&#xA;What's required?&#xD;&#xA;&#xD;&#xA;1. Azure Service Bus namespace with a queue. The namespace has to be in US East, US East 2, or West Europe. These are currently the only supported regions. The queue can be upfront using a tool like ServiceBus Explorer or similar or created via code. The latter is only possible using the old client (WindowsAzure.ServiceBus) and not the new one (Microsoft.Azure.ServiceBus). &#xD;&#xA;&#xD;&#xA;2. Azure WebApp in any Azure region. You're in luck if it's one of those where ASB supports MSI preview. And if not, you can still proceed. Your messages will just travel a bit longer.&#xD;&#xA;&#xD;&#xA;For the same of this tutorial, I'll use web application named `msi-asb-post` a namespace called `msi-asb-post` (FQDN `msi-asb-post.servicebus.windows.net`).&#xD;&#xA;&#xD;&#xA;With all resources ready to go, next step is to configure the web application to use MSI and allow it to access Azure Service Bus namespace. &#xD;&#xA;&#xD;&#xA;MSI needs to be turned on for the web application under Managed service identity.&#xD;&#xA;&#xD;&#xA;&lt;center&gt;![enter image description here][3]&lt;/center&gt;&#xD;&#xA;&#xD;&#xA;Allow web application to access Azure Service Bus namespace using MSI. Select Access control (IAM) under the namespace and add a new permission by clicking +Add. Add Permission screen will show up. Select &quot;Owner&quot; for the Role, leave &quot;Assign access to&quot; as-is, and for the third input box called &quot;Select&quot;, type in the name of the web application (msi-asb-post is the name for my example). UI should find MSI identity for the web application and show it on the list. Select the name and click Save. At this point, App Service `msi-asb-post` has access to the Azure namespace `msi-asb-post`.&#xD;&#xA;&#xD;&#xA;&lt;center&gt;![enter image description here][4]&lt;/center&gt;&#xD;&#xA;&#xD;&#xA;*Tip: you can verify if the right web application is selected by inspecting resource path that is trancated by hovering over.  &#xD;&#xA;`/subscriptions/&lt;subscription-id-guid&gt;/resourcegroups/&lt;resource-group-id&gt;/providers/Microsoft.Web/sites/&lt;web-app-name&gt;`*&#xD;&#xA;&#xD;&#xA;At this point, the code is ready to be executed. Do not to try it locally, as you'll have no AAD and an authentication exception will be thrown. Instead, deploy to the web application and run it here. You can connect your debugger to the web application if you'd like to step through.&#xD;&#xA;&#xD;&#xA;Most noticeable few lines of code are the ones that instruct ASB client to retrieve SAS token from MSI:&#xD;&#xA;&#xD;&#xA;    var messagingFactorySettings = new MessagingFactorySettings&#xD;&#xA;    {&#xD;&#xA;      TokenProvider = TokenProvider.CreateManagedServiceIdentityTokenProvider(ServiceAudience.ServiceBusAudience),&#xD;&#xA;      TransportType = TransportType.Amqp&#xD;&#xA;    };&#xD;&#xA;&#xD;&#xA;There's also a broker known issue that can be worked around with the following line of code until the issue is fixed.&#xD;&#xA;&#xD;&#xA;    messagingFactorySettings.AmqpTransportSettings.EnableLinkRedirect = false;&#xD;&#xA;&#xD;&#xA;If you're using this code in your POC, subscribe to the [tracking issue](https://github.com/Azure/azure-service-bus/issues/136) to remove this workaround once it's fixed on the broker.&#xD;&#xA;&#xD;&#xA;**Note**: it's a good and responsible practice to leave TODO with tracking issue. Do not leave a note for future w/o ability to follow up on something that can be tracked back later. Otherwise, the workaround is sealed and will make it into production.&#xD;&#xA;&#xD;&#xA;Once executed, the following web page will show up.&#xD;&#xA;&#xD;&#xA;&lt;center&gt;![enter image description here][5]&lt;/center&gt;&#xD;&#xA;&#xD;&#xA;1. FQDN to be used should be the namespace created&#xD;&#xA;2. `msi-asb-post.servicebus.windows.net` (your namespace name would replace `msi-asb-post` part).&#xD;&#xA;3. Queue name of the queue you've created earlier&#xD;&#xA;4. `test` is the queue name I've chosen.&#xD;&#xA;5. Data to send. This is going to be the payload of the outgoing message.&#xD;&#xA;6. I'll be sending two messages. `123` for the first message and `Hello from sender` for the second message&#xD;&#xA;7. Send button to send a single message&#xD;&#xA;8. Receive button to receive a single message.&#xD;&#xA;9. The expected output of message payload and it's sequence number (your sequence numbers will be different based on how many messages were sent to the queue).&#xD;&#xA;&#xD;&#xA;With MSI you start preparing your applications for what's coming - credentials worry free deployments. Happy messaging!&#xD;&#xA;&#xD;&#xA;\* *MSI is still in preview and not available for all services in all regions yet.*&#xD;&#xA;&#xD;&#xA;**Update 2018-01-31**: as of now, the new client (Microsoft.Azure.ServiceBus) does not support MSI.&#xD;&#xA;&#xD;&#xA;  [1]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2018/msi-asb/00.private.jpg&#xD;&#xA;  [2]: https://weblogs.asp.net/sfeldman/azure-service-bus-with-managed-service-identity&#xD;&#xA;  [3]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2018/msi-asb/01.msi.webapp.png&#xD;&#xA;  [4]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2018/msi-asb/02.permissionpng.png&#xD;&#xA;  [5]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2018/msi-asb/03.execution.png" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2018-01-26T06:19:00Z" PublishedUtc="2018-02-01T05:58:04.3076463Z" ModifiedUtc="2018-02-01T05:58:04.2607709Z" />
      <TagsPart Tags="AzureServiceBus,AAD" />
      <AutoroutePart Alias="azure-service-bus-with-managed-service-identity" UseCustomPattern="false" />
      <TitlePart Title="Azure Service Bus with Managed Service Identity" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=azure-eventgrid-testing-with-azure-relay" Status="Published">
      <BodyPart Text="Azure Service Bus can now integrate with Azure Event Grid. Great [news][1]! Currently, it's only possible with Azure Service Bus premium tier, but soon standard tier will get the ability as well. Also, at the moment of writing this post, there's no way to directly integrate EventGrid events with Azure Service Bus to post messages whenever there's an event coming from EventGrid.&#xD;&#xA;&#xD;&#xA;Non the less, the ability to connect EventGrid to Azure Functions opens up scenarios such as message processing without long polling by simplifying events consumption. [An example][2] would be an Azure Function that would be triggered whenever there'a new message and no listeners are registered. The Function would retrieve the message and will be able to hibernate again. Until the next message shows up. No long polling, no additional cost. The only problem I find with this approach is testing. To test that logic for EventGrid is working, one has to create an Azure Function. For some integration testing, creating a function sounds a little of an overhead. Using services like [RequestBin][3] to inspect HTTP requests is not ideal either. This is where Azure Relay (WCF Relay) can help.&#xD;&#xA;&#xD;&#xA;Azure Relay? Ok. &quot;But WCF?&quot;. I'm not a big fan of WCF either, but in this case, it helps tremendously with integration testing w/o a need for an external resource or manually inspecting Azure Function invocation.&#xD;&#xA;&#xD;&#xA;First, there's a hidden [EventGrid Relay listener][4] Azure sample gem. It is simple and brilliant. Once the Azure relay is created, the code executes a self-hosted WCF service to receive calls over HTTPS. Once that is in place, an EventGrid subscription can be created with a webhook URL pointing to the previously created Azure Relay. Whenever there's an EventGrid event (initial subscription request or an event fired by resource provider, requests will be relayed to the local machine. This way testing can be performed locally w/o a need for Azure Functions or additional external services for HTTP request interception.&#xD;&#xA;&#xD;&#xA;Note a few issues with the sample:&#xD;&#xA;&#xD;&#xA; 1. The current implementation in the sample has a bug - when a SAS token is used for authentication and passed in as a query string (`?code=SASToken`), SAS token has to be URL encoded to ensure special characters are not stripped away. E.g. a plus sign (+), which can happen with base64 encoded SAS token, would need to become %2B. And so on.&#xD;&#xA; 2. Azure EventGrid registration event is `Microsoft.EventGrid.SubscriptionValidationEvent` and not `Microsoft.EventGrid/SubscriptionValidationEvent`.&#xD;&#xA;&#xD;&#xA;For working sample, refer to the [following PR][5] until the repository is updated.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://azure.microsoft.com/en-us/blog/azure-service-bus-now-integrates-with-azure-event-grid/&#xD;&#xA;  [2]: https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-to-event-grid-integration-example&#xD;&#xA;  [3]: https://requestb.in&#xD;&#xA;  [4]: https://github.com/Azure-Samples/event-grid-relay-listener/&#xD;&#xA;  [5]: https://github.com/Azure-Samples/event-grid-relay-listener/pull/2" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2018-02-28T07:25:00Z" PublishedUtc="2018-02-28T19:35:55.4725696Z" ModifiedUtc="2018-02-28T19:35:55.4569512Z" />
      <TagsPart Tags="Azure,EventGrid" />
      <AutoroutePart Alias="azure-eventgrid-testing-with-azure-relay" UseCustomPattern="false" />
      <TitlePart Title="Azure EventGrid testing with Azure Relay" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="true" />
    </BlogPost>
    <BlogPost Id="/alias=asb-subs-with-correlation-filters" Status="Published">
      <BodyPart Text="&lt;center&gt;&#xD;&#xA;[![filter][1]][2]&#xD;&#xA;&lt;/center&gt;&#xD;&#xA;&#xD;&#xA;Azure Service Bus pub/sub is implemented using topics and subscriptions. Messages are published to topics and copied over to subscription queues with matching criteria. Criteria are declared using Rules. Each rule has a Filter. Filters help the broker decide if a message sent to a topic will be copied over to a subscription or not. Let’s dive into the world of filters to understand how they work.&#xD;&#xA;There are three types of filters supported by the broker:&#xD;&#xA;&#xD;&#xA; 1. Boolean filters&#xD;&#xA; 2. SQL filters&#xD;&#xA; 3. Correlation filters&#xD;&#xA;&#xD;&#xA;## Boolean filters&#xD;&#xA;&#xD;&#xA;These filters (`TrueFilter` and `FalseFilter`) are not the most sophisticated. They are literally &quot;catch-all&quot; or &quot;catch nothing&quot; options. The `TrueFilter` is the default when nothing else is defined. It’s handy when implementing a wiretap to analyze all messages flowing through a topic.&#xD;&#xA;&#xD;&#xA;## SQL filters&#xD;&#xA;&#xD;&#xA;Just as the name indicates, SQL filters allow SQL language-based expressions to define criteria used to filter to identify messages that will be copied over to subscription. If you’re interested in the syntax, see [documentation]( https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-messaging-sql-filter). One thing I’ll mention is the idea of scope, which denotes the type of property; user-defined properties prefixed with `user` and system defined properties prefixed with `sys`.&#xD;&#xA;&#xD;&#xA;With SQL filters it’s possible to create very complex rules for filtering messages out. Keep in mind that the more complex these rules are, the higher performance tall will be on the broker will have to apply these rules to every message. An example of a SQL rule:&#xD;&#xA;&#xD;&#xA;    sys.Label LIKE '%bus%'` OR `user.tag IN ('queue', 'topic', 'subscription')&#xD;&#xA;&#xD;&#xA;## Correlation filters&#xD;&#xA;&#xD;&#xA;Unlike Boolean and SQL filters, this group is used to perform matching against one or more user and system properties in a very efficient way. Paraphrasing [official documentation]( https://docs.microsoft.com/en-us/dotnet/api/microsoft.servicebus.messaging.correlationfilter):&#xD;&#xA;&#xD;&#xA;&gt; The CorrelationFilter provides an efficient filter that deal with equality only. As such, the cost of evaluating filter expression is minimal and almost immediate w/o extra compute required&#xD;&#xA;&#xD;&#xA;The only challenge with this filter, it’s not quite clear how to use it. There are two constructors&#xD;&#xA;&#xD;&#xA; 1. Default (empty) constructor&#xD;&#xA; 2. Constructor taking a single argument&#xD;&#xA;&#xD;&#xA;The second constructor with a single `string` argument initiates a correlation filter to use the passed in value to be the criteria for `CorrelationId`. The first constructor is a mystery. Well, not quite. Empty correlation filter can be used to assign other system and user properties that can be used for filtering. For system properties `ContentType`, `MessageId`, `ReplyTo`, `ReplyToSessionId`, `SessionId`, `To`, and `CorrelationId` can be assigned values to filter on. What about user-defined properties? That’s nwhere it’s a little unclear if you follow the documentation, which hopefully will get updated soon.&#xD;&#xA;&#xD;&#xA;To specify user-defined properties for correlation filter, a property `Properties` of type ` IDictionary &lt;string, object&gt;` is exposed. Keys for this dictionary are the user-defined properties to look up on messages. Values associated with keys are the values to correlate on. Here’s an example.&#xD;&#xA;&#xD;&#xA;    var filter = new CorrelationFilter();&#xD;&#xA;    filter.Label = &quot;blah&quot;;&#xD;&#xA;    filter.ReplyTo = &quot;x&quot;;&#xD;&#xA;    filter.Properties[&quot;prop1&quot;] = &quot;abc&quot;;&#xD;&#xA;    filter.Properties[&quot;prop2&quot;] = &quot;xyz&quot;;&#xD;&#xA;&#xD;&#xA;Created filter will have the following criteria:&#xD;&#xA;&#xD;&#xA;    sys.ReplyTo = 'x' AND sys.Label = 'blah' AND prop1 = 'abc' AND prop2 = 'xyz'&#xD;&#xA;&#xD;&#xA;And you’ve guessed it right. When correlating on multiple properties, logical AND will be used so that all properties have to have the expected values for the filter to be evaluated as truthy.&#xD;&#xA;&#xD;&#xA;In case you wondered how user-defined properties are populated, here's an example:&#xD;&#xA;&#xD;&#xA;    message.Properties[&quot;prop1&quot;] = &quot;abc&quot;;&#xD;&#xA;&#xD;&#xA;## Conclusions&#xD;&#xA;&#xD;&#xA;Filtering messages can be done in several ways. Evaluate what filter to create and don’t default to SQL filter just because it’s easier to create. If filters can be simple enough to be expressed with correlation, prefer `CorrelationFilter` over `SqlFilter`. And remember, no matter what filter is used, filters cannot evaluate message body, but you can always promote from message body to properties/headers.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2018/asb-filters/filter.png&#xD;&#xA;  [2]: https://weblogs.asp.net/sfeldman/%20%20%20asb-subs-with-correlation-filters" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2018-04-01T15:56:33.5460909Z" PublishedUtc="2018-04-01T15:56:33.5460909Z" ModifiedUtc="2018-04-01T15:56:33.5148229Z" />
      <TagsPart Tags="AzureServiceBus" />
      <AutoroutePart Alias="asb-subs-with-correlation-filters" UseCustomPattern="false" />
      <TitlePart Title="Azure Service Bus Subscriptions with Correlation Filters" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=what-you-pay-is-what-you-get" Status="Published">
      <BodyPart Text="**Update 2017-07-09**: it appears none of the documentation was updated yet. ASB team is aware and it's [tracked here](https://github.com/Azure/azure-service-bus/issues/212).&#xD;&#xA;&#xD;&#xA;&quot;What you pay is what you get.&quot;&#xD;&#xA;&lt;br&gt;This age-old wisdom applied to cloud services even more than anywhere. Take Azure Service Bus for example. The service offers 3 tiers that provide a different level of service and commitment.&#xD;&#xA;&#xD;&#xA; - Basic&#xD;&#xA; - Standard&#xD;&#xA; - Premium&#xD;&#xA;&#xD;&#xA;I'm not going to focus on all there here. General information is available on the [pricing page](https://azure.microsoft.com/en-gb/pricing/details/service-bus/). What I am going to focus is on the distinction between the two most dominant tiers: Standard and Premium.&#xD;&#xA;&#xD;&#xA;## Standard Tier&#xD;&#xA;&#xD;&#xA;Standard tier is a very economical tier offering an unlimited number of namespaces for a monthly flat fee of about $10 USD. The tier offers all the standard features you'd get on Premium, minus the new features that are developed solely for Premium such as [IP filtering](https://blogs.msdn.microsoft.com/servicebus/2018/06/27/ip-filtering-for-event-hubs-and-service-bus/) or [Geo-DR](https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-geo-dr). It has neither throughput nor latency SLA. &#xD;&#xA;&#xD;&#xA;An immediate reaction could be &quot;how come?&quot;. Well, if you think about it, it makes a lot of sense.&#xD;&#xA;First, you're paying a fraction of what it costs to build, run, and maintain these features.&#xD;&#xA;Second, you're able to create multiple namespaces and pay no extra besides the number of operations and connections. Though those namespaces are not coming from void, they are still provisioned on some hardware, consuming CPU, memory, bandwidth, and storage. So someone has to pay for it. As we all know, there are no free lunches. So you pay for it. You pay in SLA and performance. First, you cannot get a promised message throughput or latency. You're in a shared environment, and when resources under stress, you'll be throttled. Yes, that [`ServerBusyException`](https://docs.microsoft.com/en-us/dotnet/api/microsoft.azure.servicebus.serverbusyexception?view=azure-dotnet) can and will be thrown at you.&#xD;&#xA;&#xD;&#xA;&lt;center&gt;&#xD;&#xA;![enter image description here][1]&lt;br&gt;&#xD;&#xA;&lt;div&gt;Namespace provisioning on Standard tier&lt;/div&gt;&lt;/center&gt;&#xD;&#xA;&#xD;&#xA;&quot;This is bad&quot; you must be thinking. How can I run my production on a standard tier with no proper SLA, throttling, and all these issues? Let me pose a different question - would you run your mission-critical system on a resource that is shared and not promised 100% of the time? Most likely not. So what's the answer? Premium tier.&#xD;&#xA;&#xD;&#xA;## Premium Tier&#xD;&#xA;&#xD;&#xA;[Premium tier](https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-premium-messaging) was explicitly designed to provide dedicated resources. It provides more predictable performance through higher throughput and lower latency. It does not suffer from the &quot;noisy neighbor&quot; problem affecting Standard tier. It provides an ability to scale workload up and down through a number of Messaging Units (MUs) depending on the scale you required. Moreover, it's designed to support your production-grade systems. Not to mention that it can carry around messages larger than 256KB. One megabyte to be precise.&#xD;&#xA;&#xD;&#xA;&lt;center&gt;&#xD;&#xA;![enter image description here][2]&lt;br&gt;&#xD;&#xA;&lt;div&gt;Experimenting with sends&lt;/div&gt;&lt;/center&gt;&#xD;&#xA;&#xD;&#xA;&quot;It's way too expensive&quot; is what I always here as a first reaction after people read up on the [Premium tier cost](https://azure.microsoft.com/en-gb/pricing/details/service-bus/) and play with [Azure calculator](https://azure.microsoft.com/en-ca/pricing/calculator/). While it's not a cheap offer, you have to ask yourself a simple question: how important for your business to have this service up and running, performing predictably? If it's not a must, then stick with Standard. Alternatively, perhaps look at even cheaper service such as [Storage Queues](https://docs.microsoft.com/en-us/azure/storage/queues/storage-queues-introduction). Otherwise, think for a second time invested into handling throttling, noisy neighbors, throughput limitations, and decide if the Premium is worth the investment rather than spending that on your custom code to overcome all those headaches.&#xD;&#xA;&#xD;&#xA;I'm okay to pay that for production, but there are testing and QA namespaces. That will quickly add up.&#xD;&#xA;No one said you have to use Premium for absolutely everything. You can run your lower environments on standard tier while benefitting from the Premium for production. Also, in case you've missed the news, which was not that hard to miss, **the charge for Premium is no longer per day, but per hour**. You could try sping up a Premium namespace for testing, and tear it down a few minutes later. That is much more economical and in the best spirit of cloud charging.&#xD;&#xA;&#xD;&#xA;## Epilogue&#xD;&#xA;&#xD;&#xA;As developers we often want services to be as cheap as possible, if not free at all. We want to charge for our work and expect to get the best from what we consume. Azure Service Bus offers several options. Two out of those are definite candidates for different types of workloads. With per-hour billing, Premium is becoming even more affordable. Dynamic resource provisioning is an excellent approach for environments that are not required 24/7. With ARM templates, Azure CLI, and other tools available nowadays, statically provisioned resources are not required. Tests, especially automated, can take advantage of spinning up and tearing down resources such as Service Bus namespaces. At the rate of ~90 cents per MU per hour, testing on Premium tier is by far a much better option to have an idea what production will look like.&#xD;&#xA;&#xD;&#xA;When it comes to production, understand your needs. If you need a short ride and not bothered with a bumpy ride, a beaten cab will do. If you're in for a more extended trip and want the peace of mind and adequate service, a limo is likely a better option. &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2018/asb-what-you-pay/asb.containers.namespaces.jpg&#xD;&#xA;  [2]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2018/asb-what-you-pay/sends.JPG" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2018-07-03T17:20:00Z" PublishedUtc="2018-07-09T15:55:09.0687562Z" ModifiedUtc="2018-07-09T15:55:09.0219023Z" />
      <TagsPart Tags="AzureServiceBus" />
      <AutoroutePart Alias="what-you-pay-is-what-you-get" UseCustomPattern="false" />
      <TitlePart Title="What you pay is what you get" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=processing-azure-eventgrid-events-with-nservicebus" Status="Published">
      <BodyPart Text="[![enter image description here][2]][1]&#xD;&#xA;&#xD;&#xA;## What’s EventGrid and why it’s important?&#xD;&#xA;&#xD;&#xA;EventGrid helps with creation of event-based systems. The service manages routing of events from various source to the subscribers. Its high throughput and availability make it very appealing. Currently supports a few Azure Services but will change over time as the service is adopted by more and more other Azure services.&#xD;&#xA;&#xD;&#xA;So, what makes it so important? Event-based development. No longer polling. Instead, it’s a push-based model where events are pushed to the subscribers. Think of Serverless applications. No longer need to poll for a storage blob or a queue. Instead, when a blob is created, or a message is received, an event is fired. If you have developed using NServiceBus in the past, event-driven development is not a new concept to you, and you’ll see that EventGrid and NServiceBus pub/sub are playing along nicely.&#xD;&#xA;&#xD;&#xA;## EventGrid providers&#xD;&#xA;&#xD;&#xA;&lt;center&gt;&#xD;&#xA;![enter image description here][3]&#xD;&#xA;&lt;/center&gt;&#xD;&#xA;&#xD;&#xA;## Publishing and subscribing to events&#xD;&#xA;&#xD;&#xA;Services that already act as event providers (topics) do not require any additional work and can be subscribed to as-is. For custom events, one or more custom topics can be created. To create a custom topic and configure a Storage Queue subscriber, follow the steps provided by Microsoft [here]( https://docs.microsoft.com/en-us/azure/event-grid/custom-event-to-queue-storage).&#xD;&#xA;&#xD;&#xA;Note: make sure your queue name will be NServiceBus endpoint’s input queue.&#xD;&#xA;&#xD;&#xA;To verify your code is working, the following snippet can be used to publish to the custom topic. Inspect Storage queue to find events stored as messages.&#xD;&#xA;&#xD;&#xA;    var topicEndpoint = &quot;https://&lt;custom-topic&gt;.&lt;region&gt;-1.eventgrid.azure.net/api/events&quot;;&#xD;&#xA;    var topicKey = &quot;&lt;topic-key&gt;&quot;;&#xD;&#xA;    var topicHostname = new Uri(topicEndpoint).Host;&#xD;&#xA;&#xD;&#xA;    var topicCredentials = new TopicCredentials(topicKey);&#xD;&#xA;    var client = new EventGridClient(topicCredentials);&#xD;&#xA;&#xD;&#xA;    await client.PublishEventsAsync(topicHostname, GetEventsList());&#xD;&#xA;    Console.Write(&quot;Published events to Event Grid.&quot;);&#xD;&#xA;&#xD;&#xA;To create one or more events (EventGrid supports batches), a collection of `EventGridEvent` needs to be created. A single event has a well defined schema, where custom event data is stored as `Data` property and event type as `EventType` property.&#xD;&#xA;&#xD;&#xA;    new EventGridEvent&#xD;&#xA;    {&#xD;&#xA;&#x9;  Id = Guid.NewGuid().ToString(),&#xD;&#xA;&#x9;  Data = new BlogPostPublished&#xD;&#xA;&#x9;  {&#xD;&#xA;&#x9;&#x9;ItemUri = post&#xD;&#xA;&#x9;  },&#xD;&#xA;&#x9;  EventType = nameof(BlogPostPublished),&#xD;&#xA;&#x9;  EventTime = DateTime.Now,&#xD;&#xA;&#x9;  Subject = &quot;Processing Azure Event Grid events with NServiceBus&quot;,&#xD;&#xA;&#x9;  DataVersion = &quot;1.0&quot;&#xD;&#xA;    });&#xD;&#xA;&#xD;&#xA;Storage queue should contain all published events&#xD;&#xA;&#xD;&#xA;![enter image description here][4]&#xD;&#xA;&#xD;&#xA;## Receiving EventGrid events with NServiceBus endpoint&#xD;&#xA;&#xD;&#xA;NServiceBus can consume custom Storage Queue messages. EventGrid events can be treated as native integration messages. To enable this integration, a [custom envelope unwrapper]( https://docs.particular.net/transports/azure-storage-queues/configuration#custom-envelope-unwrapper) has to be registered.&#xD;&#xA;&#xD;&#xA;    var jsonSerializer = new Newtonsoft.Json.JsonSerializer();&#xD;&#xA;&#xD;&#xA;    transport.UnwrapMessagesWith(cloudQueueMessage =&gt;&#xD;&#xA;    {&#xD;&#xA;    &#x9;using (var stream = new MemoryStream(cloudQueueMessage.AsBytes))&#xD;&#xA;    &#x9;using (var streamReader = new StreamReader(stream))&#xD;&#xA;    &#x9;using (var textReader = new JsonTextReader(streamReader))&#xD;&#xA;    &#x9;{&#xD;&#xA;    &#x9;&#x9;var jObject = JObject.Load(textReader);&#xD;&#xA;&#xD;&#xA;    &#x9;&#x9;using (var jsonReader = jObject.CreateReader())&#xD;&#xA;    &#x9;&#x9;{&#xD;&#xA;    &#x9;&#x9;&#x9;//try deserialize to a NServiceBus envelope first&#xD;&#xA;    &#x9;&#x9;&#x9;var wrapper = jsonSerializer.Deserialize&lt;MessageWrapper&gt;(jsonReader);&#xD;&#xA;&#xD;&#xA;    &#x9;&#x9;&#x9;if (wrapper.MessageIntent != default)&#xD;&#xA;    &#x9;&#x9;&#x9;{&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;//this was a envelope message&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;return wrapper;&#xD;&#xA;    &#x9;&#x9;&#x9;}&#xD;&#xA;    &#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;    &#x9;&#x9;//this was an EventGrid event&#xD;&#xA;    &#x9;&#x9;using (var jsonReader = jObject.CreateReader())&#xD;&#xA;    &#x9;&#x9;{&#xD;&#xA;      &#x9;&#x9;&#x9;var @event = jsonSerializer.Deserialize&lt;EventGridEvent&gt;(jsonReader);&#xD;&#xA; &#xD;&#xA;    &#x9;&#x9;&#x9;var wrapper = new MessageWrapper&#xD;&#xA;    &#x9;&#x9;&#x9;{&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;Id = @event.Id,&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;Headers = new Dictionary&lt;string, string&gt;&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;{&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;&#x9;{ &quot;NServiceBus.EnclosedMessageTypes&quot;, @event.EventType },&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;&#x9;{ &quot;NServiceBus.MessageIntent&quot;, &quot;Publish&quot; },&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;&#x9;{ &quot;EventGrid.topic&quot;, @event.Topic },&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;&#x9;{ &quot;EventGrid.subject&quot;, @event.Subject },&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;&#x9;{ &quot;EventGrid.eventTime&quot;, @event.EventTime.ToString(&quot;u&quot;) },&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;&#x9;{ &quot;EventGrid.dataVersion&quot;, @event.DataVersion },&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;&#x9;{ &quot;EventGrid.metadataVersion&quot;, @event.MetadataVersion },&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;},&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;Body = Encoding.UTF8.GetBytes(JsonConvert.SerializeObject(@event.Data)),&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;MessageIntent = MessageIntentEnum.Publish&#xD;&#xA;&#x9;&#x9;    &#x9;};&#xD;&#xA;&#x9;&#x9;    &#x9;return wrapper;&#xD;&#xA;&#x9;&#x9;    }&#xD;&#xA;    &#x9;}&#xD;&#xA;    });&#xD;&#xA;&#xD;&#xA;To help NServiceBus understand what event type the message represents, a specific header `NServiceBus.EnclosedMessageTypes` needs to be assigned the value of the EventGrid event published. &#xD;&#xA;&#xD;&#xA;Note: handled EventGrid events need to be declared in your NServiceBus using declarative or convention option.&#xD;&#xA;&#xD;&#xA;    public class BlogPostPublished : IEvent&#xD;&#xA;    {&#xD;&#xA;        public string ItemUri { get; set; }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;`EventGridEvent` is an EventGrid wrapper defined by the service schema&#xD;&#xA;&#xD;&#xA;    public class EventGridEvent&#xD;&#xA;    {&#xD;&#xA;        [JsonProperty(PropertyName = &quot;id&quot;)]&#xD;&#xA;        public string Id { get; set; }&#xD;&#xA;    &#xD;&#xA;        [JsonProperty(PropertyName = &quot;topic&quot;)]&#xD;&#xA;        public string Topic { get; set; }&#xD;&#xA;    &#xD;&#xA;        [JsonProperty(PropertyName = &quot;subject&quot;)]&#xD;&#xA;        public string Subject { get; set; }&#xD;&#xA;&#xD;&#xA;        [JsonProperty(PropertyName = &quot;data&quot;)]&#xD;&#xA;        public object Data { get; set; }&#xD;&#xA;&#xD;&#xA;        [JsonProperty(PropertyName = &quot;eventType&quot;)]&#xD;&#xA;        public string EventType { get; set; }&#xD;&#xA;&#xD;&#xA;        [JsonProperty(PropertyName = &quot;eventTime&quot;)]&#xD;&#xA;        public DateTime EventTime { get; set; }&#xD;&#xA;&#xD;&#xA;        [JsonProperty(PropertyName = &quot;metadataVersion&quot;)]&#xD;&#xA;        public string MetadataVersion { get; set; }&#xD;&#xA;&#xD;&#xA;        [JsonProperty(PropertyName = &quot;dataVersion&quot;)]&#xD;&#xA;        public string DataVersion { get; set; }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;At this point, an event handler can be defined&#xD;&#xA;&#xD;&#xA;    public class BlogPostPublishedHandler : IHandleMessages&lt;BlogPostPublished&gt;&#xD;&#xA;    {&#xD;&#xA;        static ILog log = LogManager.GetLogger&lt;BlogPostPublishedHandler&gt;();&#xD;&#xA;&#xD;&#xA;        public Task Handle(BlogPostPublished message, IMessageHandlerContext context)&#xD;&#xA;        {&#xD;&#xA;            log.Info($&quot;Received {nameof(BlogPostPublished)}: {message.ItemUri}&quot;);&#xD;&#xA;            log.Info($&quot;Topic: {context.MessageHeaders[&quot;EventGrid.topic&quot;]}&quot;);&#xD;&#xA;            log.Info($&quot;Subject: {context.MessageHeaders[&quot;EventGrid.subject&quot;]}&quot;);&#xD;&#xA;            log.Info($&quot;Event time: {context.MessageHeaders[&quot;EventGrid.eventTime&quot;]}&quot;);&#xD;&#xA;&#xD;&#xA;            return Task.CompletedTask;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;Resulting in&#xD;&#xA;&#xD;&#xA;&lt;div&gt;&#xD;&#xA;2018-07-14 10:09:14.975 INFO  BlogPostPublishedHandler Received BlogPostPublished: https://weblogs.asp.net/sfeldman/eventgrid-events-with-nservicebus&lt;br&gt;&#xD;&#xA;2018-07-14 10:09:14.980 INFO  BlogPostPublishedHandler Topic: /subscriptions/&lt;subscription-id&gt;/resourceGroups/EventGrid-ASQ-RG/providers/Microsoft.EventGrid/topics/Events&lt;br&gt;&#xD;&#xA;2018-07-14 10:09:14.984 INFO  BlogPostPublishedHandler Subject: Processing Azure Event Grid events with NServiceBus&lt;br&gt;&#xD;&#xA;2018-07-14 10:09:14.986 INFO  BlogPostPublishedHandler Event time: 2018-07-14 16:08:48Z&#xD;&#xA;&lt;/div&gt;&#xD;&#xA;&#xD;&#xA;## Handling specific events&#xD;&#xA;&#xD;&#xA;When a new event type is published, the endpoint will receive it and attempt to process. In case NServiceBus endpoint is not aware of the event type, it will end up in the error queue. This is caused by EventGrid subscription by default subscribing to all published events. To fix this, EventGrid subscription needs to be updated to receive only specific types.&#xD;&#xA;&#xD;&#xA;    az eventgrid event-subscription update \&#xD;&#xA;    --resource-id &quot;/subscriptions/&lt;subscription-id&gt;/resourceGroups/eventgrid-asq-rg/providers/microsoft.eventgrid/topics/events&quot; \&#xD;&#xA;    --name asq-subscription \&#xD;&#xA;    --included-event-types BlogPostPublished&#xD;&#xA;&#xD;&#xA;Once the subscription is updated, the filter will be on and only specified event types (`BlogPostPusblished` in this case) will be passed on to the Storage queue.&#xD;&#xA;&#xD;&#xA;    {&#xD;&#xA;      &quot;destination&quot;: {&#xD;&#xA;        &quot;endpointType&quot;: &quot;StorageQueue&quot;,&#xD;&#xA;        &quot;queueName&quot;: &quot;queue&quot;,&#xD;&#xA;        &quot;resourceId&quot;: &quot;/subscriptions/&lt;subscription-id&gt;/resourceGroups/EventGrid-ASQ-RG/providers/Microsoft.Storage/storageAccounts/eventgridasq&quot;&#xD;&#xA;      },&#xD;&#xA;      &quot;eventDeliverySchema&quot;: &quot;InputEventSchema&quot;,&#xD;&#xA;      &quot;filter&quot;: {&#xD;&#xA;        &quot;includedEventTypes&quot;: [&#xD;&#xA;      &quot;BlogPostPublished&quot;&#xD;&#xA;        ],&#xD;&#xA;        &quot;isSubjectCaseSensitive&quot;: null,&#xD;&#xA;        &quot;subjectBeginsWith&quot;: &quot;&quot;,&#xD;&#xA;        &quot;subjectEndsWith&quot;: &quot;&quot;&#xD;&#xA;      },&#xD;&#xA;      …&#xD;&#xA;    }&#xD;&#xA;&lt;/div&gt;&#xD;&#xA;&#xD;&#xA;## What's next?&#xD;&#xA;&#xD;&#xA;Next would be taking advantage of EventGrid with custom topics or Azure services that can already emit EventGrid events. In the next blog post I'll show how easy it would be to subscribe to Storage Blob events.&#xD;&#xA;&#xD;&#xA;Happy eventing!&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://weblogs.asp.net/sfeldman/processing-azure-eventgrid-events-with-nservicebus&#xD;&#xA;  [2]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2018/eventgrid-with-nsb/header.png&#xD;&#xA;  [3]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2018/eventgrid-with-nsb/image.png&#xD;&#xA;  [4]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2018/eventgrid-with-nsb/image-1.png" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2018-07-14T17:46:00Z" PublishedUtc="2021-05-31T16:32:28.2071324Z" ModifiedUtc="2021-05-31T16:32:28.1442168Z" />
      <TagsPart Tags="EventGrid,NServiceBus" />
      <AutoroutePart Alias="processing-azure-eventgrid-events-with-nservicebus" UseCustomPattern="false" />
      <TitlePart Title="Processing Azure EventGrid events with NServiceBus" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="true" />
    </BlogPost>
    <BlogPost Id="/alias=processing-azure-services-eventgrid-events-with-nservicebus" Status="Published">
      <BodyPart Text="&lt;center&gt;&#xD;&#xA;[![enter image description here][1]][2]&#xD;&#xA;&lt;/center&gt;&#xD;&#xA;&#xD;&#xA;In the previous post [Processing Azure EventGrid events with NServiceBus][3], I showed how to process custom events emitted to EventGrid using NServiceBus.&#xD;&#xA;&#xD;&#xA;In this post, I’ll focus on events emitted by EventGrid for Azure services such as Blob Storage and Resources. Note that there are other Azure resource providers that can raise EventGrid events which could be processed in the same manner.&#xD;&#xA;&#xD;&#xA;To make processing simpler, I’ve extracted the logic for message conversion and contracts into its package, [NServiceBus.AzureEventGrid.StorageQueues]( https://www.nuget.org/packages/NServiceBus.AzureEventGrid.StorageQueues). &#xD;&#xA;&#xD;&#xA;To enable EventGrid message processing, NServiceBus endpoint configured to use Azure Storage Queues transport should invoke the following configuration API:&#xD;&#xA;&#xD;&#xA;    var transport = endpointConfiguration.UseTransport&lt;AzureStorageQueueTransport&gt;();&#xD;&#xA;    transport.EnableSupportForEventGridEvents();&#xD;&#xA;&#xD;&#xA;## What Services support EventGrids events?&#xD;&#xA;&#xD;&#xA; - Resource Groups&#xD;&#xA; - Azure Subscriptions&#xD;&#xA; - Blob Storage&#xD;&#xA; - Service Bus&#xD;&#xA; - Event Hubs&#xD;&#xA; - IoT Hubs&#xD;&#xA; - Media Services&#xD;&#xA; - Container Registry&#xD;&#xA;&#xD;&#xA;## Subscribing to Storage Blob events&#xD;&#xA;&#xD;&#xA;    storageid=$(az storage account show --name eventgridasq --resource-group EventGrid-ASQ-RG --query id --output tsv)&#xD;&#xA;    queueid=&quot;$storageid/queueservices/default/queues/queue&quot;&#xD;&#xA;&#xD;&#xA;Note: this is Bash script. For Windows AZ CLI the syntax is slightly different, `$storageid=(az storage...)`.&#xD;&#xA;&#xD;&#xA;    az eventgrid event-subscription create \&#xD;&#xA;      --resource-id $storageid \&#xD;&#xA;      --name asq-blob-subscription \&#xD;&#xA;      --endpoint-type storagequeue \&#xD;&#xA;      --endpoint $queueid&#xD;&#xA;&#xD;&#xA;Azure Event Grid event schema for Blob storage defined [here](https://docs.microsoft.com/en-us/azure/event-grid/event-schema-blob-storage) is defined in the package mentioned above and can be subscribed to using the standard NServiceBus syntax. Below is an example of handling Storage Blob `Microsoft.Storage.BlobCreated` event:&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    public class BlobCreatedHandler : IHandleMessages&lt;BlobCreated&gt;&#xD;&#xA;    {&#xD;&#xA;      static ILog log = LogManager.GetLogger&lt;BlobCreated&gt;();&#xD;&#xA;&#xD;&#xA;      public Task Handle(BlobCreated message, IMessageHandlerContext context)&#xD;&#xA;      {&#xD;&#xA;        log.Info($&quot;EventGrid.eventType: {context.MessageHeaders[Headers.EnclosedMessageTypes]}&quot;);&#xD;&#xA;    &#xD;&#xA;        log.Info($&quot;URL: {message.Url}&quot;);&#xD;&#xA;        log.Info($&quot;API: {message.Api}&quot;);&#xD;&#xA;        log.Info($&quot;BlobType: {message.BlobType}&quot;);&#xD;&#xA;        log.Info($&quot;ContentType: {message.ContentType}&quot;);&#xD;&#xA;        log.Info($&quot;ContentLength: {message.ContentLength}&quot;);&#xD;&#xA;    &#xD;&#xA;        return Task.CompletedTask;&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;Creating a blob with “This is a test.” content &#xD;&#xA;&#xD;&#xA;&lt;center&gt;&#xD;&#xA;![blob][4]&#xD;&#xA;&lt;/center&gt;&#xD;&#xA;&#xD;&#xA;will produce the following output:&#xD;&#xA;&#xD;&#xA;2018-07-14 11:24:25.560 INFO  Microsoft.Storage.BlobCreated URL: https://eventgridasq.blob.core.windows.net/eventgrid-post/file.txt&lt;br&gt;&#xD;&#xA;2018-07-14 11:24:25.585 INFO  Microsoft.Storage.BlobCreated API: PutBlob&lt;br&gt;&#xD;&#xA;2018-07-14 11:24:25.592 INFO  Microsoft.Storage.BlobCreated BlobType: BlockBlob&lt;br&gt;&#xD;&#xA;2018-07-14 11:24:25.598 INFO  Microsoft.Storage.BlobCreated ContentType: text/plain&lt;br&gt;&#xD;&#xA;2018-07-14 11:24:25.602 INFO  Microsoft.Storage.BlobCreated ContentLength: 15&#xD;&#xA;&#xD;&#xA;Update the blob with an additional character will cause `BlobCreated` event to fire again with an updated length:&#xD;&#xA;&#xD;&#xA;2018-07-14 11:25:40.547 INFO  Microsoft.Storage.BlobCreated URL: https://eventgridasq.blob.core.windows.net/eventgrid-post/file.txt&lt;br&gt;&#xD;&#xA;2018-07-14 11:25:40.556 INFO  Microsoft.Storage.BlobCreated API: PutBlob&lt;br&gt;&#xD;&#xA;2018-07-14 11:25:40.562 INFO  Microsoft.Storage.BlobCreated BlobType: BlockBlob&lt;br&gt;&#xD;&#xA;2018-07-14 11:25:40.569 INFO  Microsoft.Storage.BlobCreated ContentType: text/plain&lt;br&gt;&#xD;&#xA;2018-07-14 11:25:40.576 INFO  Microsoft.Storage.BlobCreated ContentLength: **16** &#xD;&#xA;&#xD;&#xA;Once a blob is deleted, `Microsoft.Storage.BlobDeleted` will be fired&#xD;&#xA;&#xD;&#xA;2018-07-14 11:33:21.228 INFO  BlobDeletedHandler URL: https://eventgridasq.blob.core.windows.net/eventgrid-post/file.txt&lt;br&gt;&#xD;&#xA;2018-07-14 11:33:21.234 INFO  BlobDeletedHandler API: DeleteBlob&lt;br&gt;&#xD;&#xA;2018-07-14 11:33:21.238 INFO  BlobDeletedHandler BlobType: BlockBlob&lt;br&gt;&#xD;&#xA;2018-07-14 11:33:21.242 INFO  BlobDeletedHandler ContentType: text/plain&lt;br&gt;&#xD;&#xA;&#xD;&#xA;&lt;center&gt;&#xD;&#xA;![enter image description here][5]&#xD;&#xA;&lt;/center&gt;&#xD;&#xA;&#xD;&#xA;## Processing Resource Group events&#xD;&#xA;&#xD;&#xA;    storageid=$(az storage account show --name eventgridasq --resource-group EventGrid-ASQ-RG --query id --output tsv)&#xD;&#xA;    queueid=&quot;$storageid/queueservices/default/queues/queue&quot;&#xD;&#xA;&#xD;&#xA;    az eventgrid event-subscription create \&#xD;&#xA;      --resource-group EventGrid-ASQ-RG \&#xD;&#xA;      --name rg-subscription \&#xD;&#xA;      --endpoint-type storagequeue \&#xD;&#xA;      --endpoint $queueid&#xD;&#xA;&#xD;&#xA;## The devil is in details&#xD;&#xA;&#xD;&#xA;Every service has nuances associated with the events it emits. Look into documentation to understand how those generated. For example, Service Bus will emit events per entity until there’s an active receiver or no receive operation happened for two minutes as per [documentation]( https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-to-event-grid-integration-concept).&#xD;&#xA;&#xD;&#xA;## What if a service doesn’t expose EventGrid events?&#xD;&#xA;&#xD;&#xA;If you’d like to see more Azure services to emit EventGrid events, raise your request with the appropriate product groups responsible for the services you’re interested in.&#xD;&#xA;&#xD;&#xA;## Summary&#xD;&#xA;&#xD;&#xA;EventGrid offers a powerful event-driven ability. It’s still very new and as with anything new has a few rough edges. As time goes and more services are onboard, EventGrid will become a vital fabric of many Azure-based solutions. And potentially beyond Azure as well.&#xD;&#xA;The code is available on [GitHub](https://github.com/SeanFeldman/EventGridWithNServiceBus).&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2018/eventgrid-with-nsb/header2.png&#xD;&#xA;  [2]: https://weblogs.asp.net/sfeldman/processing-azure-services-eventgrid-events-with-nservicebus&#xD;&#xA;  [3]: https://weblogs.asp.net/sfeldman/processing-azure-eventgrid-events-with-nservicebus&#xD;&#xA;  [4]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2018/eventgrid-with-nsb/blob.png&#xD;&#xA;  [5]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2018/eventgrid-with-nsb/metrics.png" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2018-07-24T06:28:00Z" PublishedUtc="2018-07-25T05:15:12.2694959Z" ModifiedUtc="2018-07-25T05:15:12.238474Z" />
      <TagsPart Tags="EventGrid,Azure" />
      <AutoroutePart Alias="processing-azure-services-eventgrid-events-with-nservicebus" UseCustomPattern="false" />
      <TitlePart Title="Processing Azure Services EventGrid events with NServiceBus" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=dealing-with-large-azure-service-bus-messages-part-1" Status="Published">
      <BodyPart Text="Whenever you deal with messages, message size is always a question you'll have to answer and address. If you're interested some of the factors going into message size and high-level options to tackle the challenge, continue [here](https://www.serverless360.com/blog/deal-with-large-service-bus-messages)." />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2018-08-09T19:16:45.5483126Z" PublishedUtc="2018-08-09T19:16:45.5483126Z" ModifiedUtc="2018-08-09T19:16:45.4439466Z" />
      <TagsPart Tags="AzureServiceBus" />
      <AutoroutePart Alias="dealing-with-large-azure-service-bus-messages-part-1" UseCustomPattern="false" />
      <TitlePart Title="Dealing with large Azure Service Bus messages (part 1)" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=dealing-with-large-azure-service-bus-messages-part-2" Status="Published">
      <BodyPart Text="This is a follow-up post discussing [how to deal with large messages](https://weblogs.asp.net/sfeldman/dealing-with-large-azure-service-bus-messages-part-1).&#xD;&#xA;This time, I'm looking at [implementing Claim Check pattern](https://www.serverless360.com/blog/deal-with-large-service-bus-messages-using-claim-check-pattern) in a simple manner, using Azure Storage Queues, which is powering Azure Service Bus  [ServiceBus.AttachmentPlugin](https://www.nuget.org/packages/ServiceBus.AttachmentPlugin/) implementation." />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2018-09-06T21:33:12.0306777Z" PublishedUtc="2018-09-06T21:33:12.0306777Z" ModifiedUtc="2018-09-06T21:33:11.9525588Z" />
      <TagsPart Tags="Azure,AzureServiceBus" />
      <AutoroutePart Alias="dealing-with-large-azure-service-bus-messages-part-2" UseCustomPattern="false" />
      <TitlePart Title="Dealing with large Azure Service Bus messages (part 2)" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=techorama-nl-2018" Status="Published">
      <BodyPart Text="This week had an opportunity to present at the great Techorama conference. This year it was hosted in the Netherlands, executed by Dutch and Belgian teams. For a first time conference, I was amazed how well it was set up, the flawlessness, the speaker line, and the excitement they have managed to build around the event for both speakers and attendees. Not to mention the venue that was perfectly suited for the event, spacious, and filled with natural light while being there for two days.&#xD;&#xA;&#xD;&#xA;The range of talks was impressive. Have to admit for a second I was worried for the success of the two talks so closely related to each other I was supposed to deliver: [Azure Messaging Crossroads][1] and [Azure Service Bus Deep Dive][2]. It turned out quite well. The first, very high-level talk, was accepted well and there was genuine interest in the subject. Messaging and Azure messaging offers, in particular, are picking up. Thanks to Serverless and the general Azure adoption. Fascinated how the domain will be evolving over the next 6-12 months with EventGrid maturing, expanding its offerings. With Azure Service Bus strengthening its identity as an Enterprise Messaging service. And the rest of the Azure messaging services enhance their capabilities.&#xD;&#xA;&#xD;&#xA;Sharing some highlights from one of the sessions (Azure Messaging Crossroads) in a [blog post][3] for anyone interested in the subject.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://sched.co/EiuD&#xD;&#xA;  [2]: https://sched.co/EjEw&#xD;&#xA;  [3]: https://www.serverless360.com/blog/azure-messaging-crossroads" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2018-10-04T09:16:47.0307621Z" PublishedUtc="2018-10-04T09:16:47.0307621Z" ModifiedUtc="2018-10-04T09:16:46.9370359Z" />
      <TagsPart Tags="Azure,AzureServiceBus,EventGrid" />
      <AutoroutePart Alias="techorama-nl-2018" UseCustomPattern="false" />
      <TitlePart Title="Azure Messaging Crossroads - Techorama NL edition" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=auto-forwarding" Status="Published">
      <BodyPart Text="The principle of the auto-forwarding feature is simple and straightforward.&lt;br&gt;&#xD;&#xA;Thought use cases are not always obvious, and implementation sometimes can get a twist.&lt;br&gt;&#xD;&#xA;If you'd like to learn more, read all about the feature in my post [here](https://www.serverless360.com/blog/auto-forwarding-a-hidden-gem-of-service-bus).&#xD;&#xA;&#xD;&#xA;You might have a similar reaction to the Principal Program Manager Lead for Azure Messaging 😉&#xD;&#xA;&#xD;&#xA;[![enter image description here][1]][2]&#xD;&#xA;&#xD;&#xA;  [1]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2018/asb-auto-forwarding/auto-forwarding.jpg&#xD;&#xA;  [2]: https://twitter.com/DanRosanova/status/1074716456238014464" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2018-12-17T17:48:00Z" PublishedUtc="2019-05-26T21:25:11.5620827Z" ModifiedUtc="2019-05-26T21:25:11.5308Z" />
      <TagsPart Tags="AzureServiceBus" />
      <AutoroutePart Alias="auto-forwarding" UseCustomPattern="false" />
      <TitlePart Title="Azure Service Bus auto-forwarding" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=transactional-messaging-with-azure-functions-and-service-bus" Status="Published">
      <BodyPart Text="## Azure Functions basics&#xD;&#xA;&#xD;&#xA;Azure Functions design is a modular design. It consists of&#xD;&#xA;- Mandatory trigger&#xD;&#xA;- Function logic&#xD;&#xA;- Optional one or more output bindings&#xD;&#xA;&#xD;&#xA;![Function general design][1]&#xD;&#xA;&#xD;&#xA;Triggers and output bindings can be of different types. For example, a trigger could be an Azure Service Bus message, while an output binding could be a Storage Blob. The flexibility to mix and match is extremely powerful but has a price. And that price is the necessity to keep triggers and output bindings independent of each other, having no connection or relation whatsoever. In almost all combinations of triggers and output bindings, it's expected to be the case with one exception when both the trigger and the output binding are of Service Bus type.&#xD;&#xA;&#xD;&#xA;First, what's a typical function with Service Bus input and output would look like?&#xD;&#xA;&#xD;&#xA;    public static class ServiceBusTriggeredFunction&#xD;&#xA;    {&#xD;&#xA;        [FunctionName(&quot;queue-in&quot;)] &#xD;&#xA;        public static async Task Run(&#xD;&#xA;            [ServiceBusTrigger(&quot;queue-in&quot;, Connection = &quot;ConnectionString&quot;)]Message message,&#xD;&#xA;            [ServiceBus(&quot;queue-out&quot;, Connection = &quot;ConnectionString&quot;)]IAsyncCollector&lt;string&gt; collector,&#xD;&#xA;            ILogger logger)&#xD;&#xA;        {&#xD;&#xA;            logger.LogInformation(&quot;Sending a message out&quot;);&#xD;&#xA;            await collector.AddAsync($&quot;Processed message with ID {message.MessageId}&quot;);&#xD;&#xA;            logger.LogInformation(&quot;Done&quot;);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;So what's the problem?&#xD;&#xA;&#xD;&#xA;Most of the time, this design is working just fine. But sometimes, there are issues. One of those issues are those pesky intermittent failures. For example, the incoming message that couldn't be completed. Looking at the sample above, the collector is given a string, which is turned into a message that is immediately dispatched. &#xD;&#xA;&#xD;&#xA;When an incoming message arrives&#xD;&#xA;&#xD;&#xA;![incoming.messages][2]&#xD;&#xA;&#xD;&#xA;The function is triggered, and an outgoing message is emitted via the collector.&#xD;&#xA;&#xD;&#xA;![processing.1][3]&#xD;&#xA;&#xD;&#xA;Notice the &quot;Done&quot; statement was not logged yet. The outgoing message will be created while the incoming message is still in the queue-in.&#xD;&#xA;&#xD;&#xA;![incoming.and.outgoing.messages][4]&#xD;&#xA;&#xD;&#xA;But then, the incoming message is failing to be completed. Because of that, it will be re-delivered to the function and reprocessed. This can happen several times.&#xD;&#xA;&#xD;&#xA;![enter image description here][5]&#xD;&#xA;&#xD;&#xA;And as long as that happens (2 failures in this example), output messages are generated. &#xD;&#xA;&#xD;&#xA;![incoming.and.more.outgoing.messages][6]&#xD;&#xA;&#xD;&#xA;In the cloud world, these &quot;duplicates&quot; are not unexpected. One of the options to handle a situation such as this is to implement idempotent processing of the outgoing messages to ensure duplicates are disregarded. But is there a different way?&#xD;&#xA;&#xD;&#xA;There is — transactional message processing.&#xD;&#xA;&#xD;&#xA;## Transactional messaging with Service Bus&#xD;&#xA;&#xD;&#xA;Service Bus' transactional processing allows sending the outgoing message(s) along with the completion of the incoming message in an atomic operation, ensuring all messages either succeed or get reverted. For that to work, the collector needs to send messages via the input queue. Which is not possible by design.&#xD;&#xA;&#xD;&#xA;It would work if the Service Bus trigger and output binding would share the same connection and would be possible to define the &quot;send-via&quot; entity for the output binding. Unfortunately, that would mean coupling between the two components, which are by design shouldn't be.&#xD;&#xA;&#xD;&#xA;Gladly, there's a way. Any function can be injected with additional dependencies SDK can supply. For Service Bus trigger it's the [message metadata][7], a.k.a properties or headers. There's an additional, undocumented option. The `MessageReceiver` used to retrieve the incoming message is also available to be injected in the function. A true hidden gem! Message receiver contains the connection string, which is necessary to create a message sender that would participate in the transaction. With that, the function will be able to send the message and it won't be dispatched to the output queue unless the incoming message is successfully completed. &#xD;&#xA;&#xD;&#xA;    public static class AsbConnectedFunction&#xD;&#xA;    {&#xD;&#xA;        [FunctionName(&quot;queue-in&quot;)]&#xD;&#xA;        public static async Task Run(&#xD;&#xA;            [ServiceBusTrigger(&quot;queue-in&quot;, Connection = &quot;ConnectionString&quot;)]Message message,&#xD;&#xA;            ILogger logger,&#xD;&#xA;            MessageReceiver messageReceiver)&#xD;&#xA;        {&#xD;&#xA;            using (var scope = new TransactionScope(TransactionScopeOption.RequiresNew, TransactionScopeAsyncFlowOption.Enabled))&#xD;&#xA;            {&#xD;&#xA;                var messageSender = new MessageSender(messageReceiver.ServiceBusConnection, &quot;queue-out&quot;, &quot;queue-in&quot;);&#xD;&#xA;&#xD;&#xA;                var outgoingMessage = new Message(Encoding.UTF8.GetBytes($&quot;Processed message with ID {message.MessageId}&quot;));&#xD;&#xA;&#xD;&#xA;                logger.LogInformation(&quot;Sending a message out&quot;);&#xD;&#xA;                await messageSender.SendAsync(outgoingMessage);&#xD;&#xA;                logger.LogInformation(&quot;Done&quot;);&#xD;&#xA;&#xD;&#xA;                await messageReceiver.CompleteAsync(message.SystemProperties.LockToken);&#xD;&#xA;&#xD;&#xA;                scope.Complete();&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;Note: completing manually a message in the function will cause function host to throw an exception when it tries to do the same. &#xD;&#xA;&#xD;&#xA;![exception][9]&#xD;&#xA;&#xD;&#xA;To disable function auto-completion of the incoming message, turn [`autoComplete` flag][8] off in `host.json`.&#xD;&#xA;&#xD;&#xA;Sending a message to the `queue-in` and setting a breaking point at the completion command, will reveal that even though the outgoing message was dispatched, it does not appear to be in the `queue-out`. Not until the incoming message is completed.&#xD;&#xA;&#xD;&#xA;Sending the message with successful incoming message completion&#xD;&#xA;&#xD;&#xA;![incoming.messages][10]&#xD;&#xA;&#xD;&#xA;results in a single message dispatched. In case there are errors, the outgoing message is discarded and the function is invoked again. Yet there's only one message dispatched to the `queue-out`.&#xD;&#xA;&#xD;&#xA;![atomic.messages][11]&#xD;&#xA;&#xD;&#xA;That's a powerful option that is missing from Azure Functions when working with Azure Service Bus. Remember that transaction processing is slower than non-transactional and should be employed where it necessary and required.&#xD;&#xA;&#xD;&#xA;## What's next?&#xD;&#xA;&#xD;&#xA;Transactional message processing with Service Bus in Functions is a great hidden feature. To my personal taste, the need to manually create a sender and wrap the logic in a transaction scope is clunky and less than optimal. I would rather like to see the code less about the infrastructure and the inner workings of Service Bus and more about business. Imagine function code being expressed with POCOs and solely focus on the business logic in the following way:&#xD;&#xA;&#xD;&#xA;    public class GenericAsyncHandler : IHandleMessages&lt;RegisterOrder&gt;&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;public awaut Task Handle(RegisterOrder message, IMessageHandlerContext context)&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;// process order registration&#xD;&#xA;&#x9;&#x9;&#x9;await context.Publish(new OrderRegistered { OrderId = message.OrderId });&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;&#xD;&#xA;Wait for a second, this is extremely similar to the  [NServieBus handlers][12] paradigm. Or is it? &#xD;&#xA;&#xD;&#xA;Interested to take your Functions to the next level and transform from a collection of utility methods into a manageable code? Stay tuned!&#xD;&#xA;&#xD;&#xA;  [1]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2019/asb-transaction-function/00.function.design.png&#xD;&#xA;  [2]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2019/asb-transaction-function/02.incoming.messages.png&#xD;&#xA;  [3]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2019/asb-transaction-function/processing.1.png&#xD;&#xA;  [4]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2019/asb-transaction-function/03.incoming.and.outgoing.messages.png&#xD;&#xA;  [5]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2019/asb-transaction-function/processing.2.png&#xD;&#xA;  [6]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2019/asb-transaction-function/04.incoming.and.more.outgoing.messages.png&#xD;&#xA;  [7]: https://docs.microsoft.com/en-us/azure/azure-functions/functions-bindings-service-bus#trigger---message-metadata&#xD;&#xA;  [8]: https://docs.microsoft.com/en-us/azure/azure-functions/functions-bindings-service-bus#hostjson-settings&#xD;&#xA;  [9]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2019/asb-transaction-function/exception.png&#xD;&#xA;  [10]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2019/asb-transaction-function/02.incoming.messages.png&#xD;&#xA;  [11]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2019/asb-transaction-function/05.atomic.messages.png&#xD;&#xA;  [12]: https://docs.particular.net/nservicebus/handlers/" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2019-05-26T21:17:00Z" PublishedUtc="2019-05-26T21:22:55.884155Z" ModifiedUtc="2019-05-26T21:23:01.5425254Z" />
      <TagsPart Tags="AzureServiceBus,AzureFunctions" />
      <AutoroutePart Alias="transactional-messaging-with-azure-functions-and-service-bus" UseCustomPattern="false" />
      <TitlePart Title="Transactional messaging with Azure Functions and Service Bus" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=understanding-Azure-service-bus-prefetch" Status="Published">
      <BodyPart Text="Working with a remote broker can be a challenge at times. The latency caused by the roundtrip to the broker to fetch a single message can exceed the processing time of that message. To help with this problem, Azure Service Bus (ASB) offers a prefetching option to retrieve messages before they are requested. This option is available with all three clients capable of retrieving messages: `MessageReceiver`, `QueueClient`, and `SubscriptionClient`. When a message is requested, and this option is turned on, the ASB client retrieves more messages. The additional messages are kept in a memory buffer until the user code requests the next message. Except for this time, the client will not fetch it from the broker but rather from the in-memory buffer. That beats the latency and improves the overall throughput of the application or the system performing message processing.&#xD;&#xA;&#xD;&#xA;Prefetch is configured on the client-side. For .NET SDK that is specified by providing the PrefetchCount to one of the clients, as mentioned earlier. Note that the exact number of prefetched messages is not always the same as the requested number. If the broker has fewer messages to pass, it will not wait for the requested number of messages to materialize on the broker to be prefetched. It will send whatever is available.&#xD;&#xA;&#xD;&#xA;Prefetch feature reduces the average latency per message and drives the throughput up, but it is not enabled by default. And there’s a good reason why by default prefetch is set to none. Safety.&#xD;&#xA;&#xD;&#xA;Let’s have a look at the two modes ASB messages can be processed: `ReceiveAndDelete` and `PeekLock`.&#xD;&#xA;&#xD;&#xA;## Prefetch with ReceiveAndDelete mode&#xD;&#xA;&#xD;&#xA;With `ReceiveAndDelete` mode, messages are processed in at-most-once mode. When a message is retrieved from the broker to the client, the message is immediately removed from the broker w/o the client’s acknowledgement. And that’s risky. &#xD;&#xA;&#xD;&#xA;What happens to the pre-fetched messages in this mode? If the application crashes, the in-memory buffer is gone. And so are the pre-fetched messages that were still in that buffer. And that’s dangerous. Unless it’s tolerable and acceptable to lose a few messages for the sake of speed. Though you were warned.&#xD;&#xA;&#xD;&#xA;## Prefetch with PeekLock mode&#xD;&#xA;&#xD;&#xA;Unlike the first mode, PeekLock is a safer mode by default. A message is never deleted from the broker until the client has confirmed its successful processing or has explicitly instructed on a different course of action. Such an action would be explicit dead-lettering, deferral, or cancellation. Though there’s a condition, a message has to be processed and actioned within a pre-defined time known as `MaxLockDuration`. That’s a lease time; each message gets on the broker for a client to get finished with it. When a client takes longer than that time, the lease is no longer respected and the message is given to another client. This pattern is also known as a competing consumer. &#xD;&#xA;&#xD;&#xA;The challenge with the competing consumer pattern combined with ASB’s lease lock is that sometimes message processing can take longer than the duration of the lease. And that has consequences – message processing by multiple competing consumers. &#xD;&#xA;&#xD;&#xA;Why is this a problem? There are a few issues:&#xD;&#xA;&#xD;&#xA; 1. When a message cannot be completed within the lease time (`MaxLockDuration`), the work that is performed is unnecessary.&#xD;&#xA; 1. 2.&#x9;The additional work would need to be reverted, or some de-duplication would need to take place to ensure the same data is not stored twice, for example.&#xD;&#xA;&#xD;&#xA;So, what would be the right approach in this receive mode? A balance. A balance between the number of messages prefetched, max lease time configured, and the longest time it takes to process a single message. And even then, sometimes there are edge cases. Thanks to the brokered message properties, some of those edge cases can be mitigated. Upon arrival on the client-side, each message is “stamped” with a few system properties. One of those properties is `LockedUntilUtc`. Or until when the lease is valid. This property can be used to “gatekeep” from the unnecessary processing of those messages that arrive too late or just before the lease is about to expire and due to processing times will not have a chance to be completed successfully (read w/o LockLostException).&#xD;&#xA;&#xD;&#xA;A word of caution, the time for `LockedUntilUtc`, represents the broker time. Clients can be impacted by a clock skew and throw calculations off by a split of a second. Nothing is perfect. 🤷‍♂‍&#xD;&#xA;&#xD;&#xA;## Summary&#xD;&#xA;&#xD;&#xA;If you’ve never used pre-fetch, check it out. Not only you’ll be equipped with a robust feature, but also improve the throughput and shave those milliseconds off. Log and measure. Use it wisely.&#xD;&#xA;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2019-12-13T21:13:00Z" PublishedUtc="2019-12-13T13:13:56.1128681Z" ModifiedUtc="2019-12-13T13:13:56.0503587Z" />
      <TagsPart Tags="AzureServiceBus" />
      <AutoroutePart Alias="understanding-Azure-service-bus-prefetch" UseCustomPattern="false" />
      <TitlePart Title="Understanding Azure Service Bus Prefetch" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="true" />
    </BlogPost>
    <BlogPost Id="/alias=azure-events-wishlist" Status="Published">
      <BodyPart Text="Azure Event Grid is by far not a new kid on the block. [Announced](https://azure.microsoft.com/en-ca/blog/announcing-the-general-availability-of-azure-event-grid/) in January 2018, the service promised to get us closer to the event-driven architecture and replace the cumbersome polling for communication between services with a simple mechanism - pub/sub. Other the course of two years, we've seen some Azure services adding a few events, unleashing the power of Event Grid. Yet the list of services and their corresponding events are still shy to call it done-done. Current services providing _some_ events are:&#xD;&#xA;&#xD;&#xA;- [Azure Subscriptions](https://docs.microsoft.com/en-us/azure/event-grid/event-schema-subscriptions) 9&#xD;&#xA;- [Blob Storage](https://docs.microsoft.com/en-us/azure/event-grid/event-schema-blob-storage) 2&#xD;&#xA;- [Container Registry](https://docs.microsoft.com/en-us/azure/event-grid/event-schema-container-registry) 4&#xD;&#xA;- [EventHubs](https://docs.microsoft.com/en-us/azure/event-grid/event-schema-container-registry) 1&#xD;&#xA;- [IoT Hub](https://docs.microsoft.com/en-us/azure/event-grid/event-schema-iot-hub) 5&#xD;&#xA;- [Key Vault](https://docs.microsoft.com/en-us/azure/event-grid/event-schema-key-vault) 9&#xD;&#xA;- [Media Services](https://docs.microsoft.com/en-us/azure/media-services/latest/media-services-event-schemas) 7&#xD;&#xA;- [Resource Groups](https://docs.microsoft.com/en-us/azure/event-grid/event-schema-resource-groups) 9&#xD;&#xA;- [Service Bus](https://docs.microsoft.com/en-us/azure/event-grid/event-schema-service-bus) 2&#xD;&#xA;- [Azure Maps](https://docs.microsoft.com/en-us/azure/event-grid/event-schema-azure-maps) 3&#xD;&#xA;- [Azure App Configuration](https://docs.microsoft.com/en-us/azure/event-grid/event-schema-app-configuration) 2&#xD;&#xA;- [Azure SignalR](https://docs.microsoft.com/en-us/azure/event-grid/event-schema-azure-signalr) 2&#xD;&#xA;- [Azure Machine Learning](https://docs.microsoft.com/en-us/azure/event-grid/event-schema-machine-learning) 4&#xD;&#xA;&#xD;&#xA;While the list is impressive, not all Azure services have been on-boarded, and many events are still missing — event for the services that have already been on-boarded. While EventGrid is the underlying engine, each Azure product team manages its backlog of the requested events. Sometimes it's via UserVoice forums. Other times it's via internal backlogs. And often, via service-specific various channels that are not always easy to access, track, participate, and get updated until today.&#xD;&#xA;&#xD;&#xA;Say hello to the Azure Events Wishlist repository. This has a particular objective - help Azure services teams and users bridge the gap of identifying, requesting, discussing, and get notified about new events added. &#xD;&#xA;&#xD;&#xA;How does it work?&#xD;&#xA;&#xD;&#xA;Are you looking for an event to be provided by a specific Azure service? Raise an issue describing what the event should be, tag it against one of the 100+ Azure services. By doing so, you'll be sending a message to the service team and allow them to interact with the community to understand how valuable an event is and wherever it should be added.&#xD;&#xA;&#xD;&#xA;Found an already created event idea? No problem. Help the community to emphasize the importance of the event by upvoting the idea. Participate in the discussions by adding real-world use cases via comments.&#xD;&#xA;&#xD;&#xA;The repository will serve as a consolidated source of the ideas, hopefully enabling a conversation about the needed events from various services in **the open**, and allow everyone interested track it with an ease GitHub is providing.&#xD;&#xA;&#xD;&#xA;So, what are you waiting for? Add the missing events and spread the word about [https://github.com/SeanFeldman/azure-events-wishlist](https://github.com/SeanFeldman/azure-events-wishlist)." />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2019-12-18T17:46:00Z" PublishedUtc="2019-12-18T17:48:04.2263844Z" ModifiedUtc="2019-12-18T17:48:09.3601274Z" />
      <TagsPart Tags="EventGrid" />
      <AutoroutePart Alias="azure-events-wishlist" UseCustomPattern="false" />
      <TitlePart Title="Announcing Azure Events Wishlist" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="true" />
    </BlogPost>
    <BlogPost Id="/alias=the-future-of-asb-dotnet-sdk" Status="Published">
      <BodyPart Text="&lt;center&gt;&#xD;&#xA;![The Azure Service Bus SDK for .NET is one of the oldest Azure SDKs][1]&#xD;&#xA;&lt;/center&gt;&#xD;&#xA;&#xD;&#xA;## The past and the current of the SDK&#xD;&#xA;&#xD;&#xA;The Azure Service Bus SDK for .NET is one of the oldest Azure SDKs. Its first public appearance as a NuGet package [`WindowsAzure.ServiceBus`](https://www.nuget.org/packages/WindowsAzure.ServiceBus/0.5.0) goes back to 2011. Back then, it was for .NET Framework and closed source. The package had an excellent mileage and is still used on multiple projects even today. And then the .NET Core and Standard have landed. Times have changed, open-source has become much more mainstream and accepted. The Azure Service Bus .NET SDK has moved into the brand new world with a successor package, [`Microsoft.Azure.ServiceBus`](https://www.nuget.org/packages/Microsoft.Azure.ServiceBus/). Started in early 2017, it showed up, causing some havoc to the brownfield projects. These projects were forced to face a complete rewrite due to the nature of the disruptive changes introduced by the new package. Once the dust has settled, the old and the new SDK nomenclature has established, and slowly projects have embraced the new SDK. There was a balance in the Force.&#xD;&#xA;&#xD;&#xA;&quot;I felt a great disturbance in the Force&quot;&#xD;&#xA;―Obi-Wan Kenobi&#xD;&#xA;&#xD;&#xA;They say change is the only constant. Yet again, it was time for the .NET Azure Service Bus SDK to change. This time the change was not about .NET Standard or open source. It was bigger than that. The SDK has joined a new family - Azure SDKs family. What family?&#xD;&#xA;&#xD;&#xA;## Azure SDKs&#xD;&#xA;&#xD;&#xA;A few words on the Azure SDKs first. In the past, various Azure service teams were responsible for the client SDKs. Those SDKs would be for .NET, Java, and other languages the teams could support. Not always consistent. Not very idiomatic, and not necessarily all the popular programming languages. A decision was taken to consolidate client SDKs developments with a single group, Azure SDK group, that would focus on the popular languages, building idiomatic client-side SDKs for the Azure services with a few goals: consistency, simplicity, best practices, and so forth. Most of the Azure services SDKs are request-response based over HTTP, and that's where the focus was spent first. Eventually, it was messaging services turn. While EventHubs SDK was first, the real complex SDK, Azure Service Bus, the first preview has landed. Lo and behold, [`Azure.Messaging.ServiceBus`](https://www.nuget.org/packages/Azure.Messaging.ServiceBus/7.0.0-preview.1) version 7.&#xD;&#xA;&#xD;&#xA;## Excuse me?!&#xD;&#xA;&#xD;&#xA;Yes. There's some explaining to be done.&#xD;&#xA;&#xD;&#xA;First, the project has moved home. It's no longer https://github.com/Azure/azure-service-bus-dotnet, rather https://github.com/Azure/azure-sdk-for-net/. Well, rather https://github.com/Azure/azure-sdk-for-net/tree/master/sdk/servicebus as it's a mondo repository with roughtly 100 various .NET SDKs sharing the repo. Don't confuse it with the broker repository, https://github.com/Azure/azure-service-bus, which doesn't contain the source code for the Service Bus service. Instead, it's used as a public issue tracker for broker related issues. Not client SDK. Capiche? It's okay if you feel slighly confused. Microsoft is good at making things confusing. But also eventually sorting those out. Not a 100% track record, but it's decent.&#xD;&#xA;&#xD;&#xA;Second, there were some executive decisions made to position the new-new SDK in the right place. &#xD;&#xA;&#xD;&#xA;Full disclaimer: I'm very critical of some of these decisions. Time will show wherever I was just an old man yelling on the kids to get off my lawn or actually predicted some of the challenges the .NET SDK for Service Bus will experience.&#xD;&#xA;&#xD;&#xA;## Executive decisions&#xD;&#xA;&#xD;&#xA;The package name. All the [new Azure SDKs](https://azure.github.io/azure-sdk/releases/latest/dotnet.html) follow the naming convention that prescribes `Azure` prefix. Hence the new package name, `Azure.Messaging.ServiceBus`. Argueably, this is a sane decision given that the previous package, `Microsoft.Azure.ServiceBus` is not dead. At least not yet.&#xD;&#xA;&#xD;&#xA;The code base is a brand new code base. Or, simply put, it's a complete re-write. Do not expect to find a full feature parity. Not yet. There are going to be many breaking changes and I can sense the tention in the air. Especially for those who have already gone through a complete re-write in the last couple of years. Brace yourselves, you'll go through another one. On the positive note, some of these changes will be very welcomed. Support for `CancellationToken`s, safe batching, Memory&lt;T&gt; support, and some more of the .NET goodies. But enogh with the spoilers. More about that in my next post.&#xD;&#xA;&#xD;&#xA;The version start from...7. WTF?! Well, yes. It's a brand new package. Entirely re-written code base. And it starts with version 7. Traditionally it would be version 1, but the decision described in this [GitHub issue](https://github.com/Azure/azure-sdk-for-net/issues/10959) is beyond my understanding and I will read it to the readers to decide wherever I was just arguing for the sake of the argument or there was a merit in staring the version from 1. As of today, the legacy package, `WindowsAzure.ServiceBus` is still on top, so the assumption that version will bring the new-new package up, at least for now, is not quite working. BTW, your'e welcome to chime in if like me your head is spinning from this decision. Or if you'd like to show some support for it 😉&#xD;&#xA;&#xD;&#xA;## How do we call all these Service Bus SDKs?&#xD;&#xA;&#xD;&#xA;Old, new, and new-new? No, that's confusing. Gen1, gen2, and gen3? That'd be great, but that's not how it started. The Azure SDK team has decided to call all previous implementation `Track 1`, covering `Microsoft.Azure.ServiceBus` with that name. The new `Azure.Messaging.ServiceBus` is naturally `Track 2`. Leaving `WindowsAzure.ServiceBus` the true developer enumerated name `Track 0` which I've coined at this point. In my future post, I'm going to refer to them as`Track 0` (`WindowsAzure.ServiceBus`), `Track 1` (`Microsoft.Azure.ServiceBus`), and `Track 2` (`Azure.Messaging.ServiceBus`).&#xD;&#xA;&#xD;&#xA;## Summary&#xD;&#xA;&#xD;&#xA;The king is not yet dead, but a successor is emerging. It will take some time till it becomes a viable replacement, but a preview is out and you can take it for a spin. Make sure to provide your feedback and engage with the Azure SDK team at https://github.com/Azure/azure-sdk-for-net/issues. &#xD;&#xA;&#xD;&#xA;In the next posts I'll be covering more of the new Service Bus SDK, some design changes, and the exciting changes coming to the Track 2 library.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2020/the-future-of-asb-dotnet-sdk/crystal-ball.jpg" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2020-04-09T04:35:00Z" PublishedUtc="2020-04-09T04:35:33.9998075Z" ModifiedUtc="2020-04-15T04:20:14.0276473Z" />
      <TagsPart Tags="AzureServiceBus,AzureSDK,.NET" />
      <AutoroutePart Alias="the-future-of-asb-dotnet-sdk" UseCustomPattern="false" />
      <TitlePart Title="The future of Azure Service Bus .NET SDK" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=sb-servicebusclient" Status="Published">
      <BodyPart Text="![Azure Service Bus SDK - ServiceBusClient][2]&#xD;&#xA;&#xD;&#xA;&lt;div style=&quot;color: #CCCCCC;font-family:  Arial, Helvetica, sans-serif;&quot;&gt;&#xD;&#xA;Note: SDK Track 2 is still a preview and subject to API changes.&#xD;&#xA;&lt;/div&gt;&#xD;&#xA;&lt;br&gt;&#xD;&#xA;&#xD;&#xA;Table of contents&#xD;&#xA;&#xD;&#xA; 1. [The future of Azure Service Bus .NET SDK][3]&#xD;&#xA; 2. ServiceBusClient&#xD;&#xA; 3. [ServiceBusSender][4]&#xD;&#xA; 4. [ServiceBusReceiver][5]&#xD;&#xA; 5. [Safe Batching](6)&#xD;&#xA;&#xD;&#xA;## Entry point&#xD;&#xA;&#xD;&#xA;Back in the days of Track 0 to be able to work with the SDK, everything had to go through a factory class called `MessagingFactory`. The messaging factory was responsible for the construction of all the Service Bus constructs to perform any operation. These constructs where `QueueClient`, `SubscriptionClient`, `TopicClient`, `MessageSender`, and `MessageReceiver`. The messaging factory had dedicated factory methods per each construct. That's probably not the most important technical detail except that there was something additional that `MessageFactory` has provided. Connection pooling&#xD;&#xA;&#xD;&#xA;&lt;blockquote&gt;&#xD;&#xA;A connection pool is a cache of broker connections maintained so that the connections can be reused when future requests to the broker are required. Connection pools are used to enhance performance. Opening and maintaining a new connection for each construct is costly and wastes resources. In connection pooling, after a connection is created, it is placed in the pool, and it is used again so that a new connection does not have to be established. Connection pooling also cuts down on the amount of time a user must wait to establish a connection to the broker.&#xD;&#xA;&lt;/blockquote&gt;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;That has drastically changed in Track 2, where every construct was constructed directly by invoking a constructor and accepting either a connection string or a shared `ServiceBusConnection` object. When a connection string was used, a new connection would be established. The biggest drawback was the loss of the automatic connection pooling by default.&#xD;&#xA;&#xD;&#xA;Trak 2 SDK is changing that again.&#xD;&#xA;&#xD;&#xA;## Meet ServiceBusClient&#xD;&#xA;&#xD;&#xA;Azure SDK guidelines prescribe a specific design for any service entry point using `&lt;service_name&gt;Client` convention. For Azure Service Bus SDK, that's the `ServiceBusClient` class. This class is responsible for establishing the connection to the broker _and_ perform connection pooling for any entity-specific client created later. This will be covered in the next post.&#xD;&#xA;&#xD;&#xA;`ServiceBusClient` can be constructed using a connection string or [`TokenCredential`][6], a credential capable of providing an OAuth token.&#xD;&#xA;&#xD;&#xA;An additional optional parameter is `ServiceBusClientOptions`. The options object is used to configure the `ServiceBusClient` for its entire lifecycle. Those include options:&#xD;&#xA;- `ServiceBusTransportType` - AMQP protocol over TCP (`AmqpTcp`) or WebSockets (`AmqpWebSockets`)&#xD;&#xA;- `Proxy` - proxy to use when WebSockets are used&#xD;&#xA;- `RetryOptions` - retry options specified using `ServiceBusRetryOptions`&#xD;&#xA;&#xD;&#xA;Retry options provide a way to specify the default retry policy which needs to implement the `ServiceBusRetryPolicy` base class.&#xD;&#xA;&#xD;&#xA;    var options = new ServiceBusClientOptions&#xD;&#xA;    {&#xD;&#xA;        TransportType = ServiceBusTransportType.AmqpTcp,&#xD;&#xA;        RetryOptions = new ServiceBusRetryOptions(){&#xD;&#xA;            Mode = ServiceBusRetryMode.Exponential,&#xD;&#xA;            CustomRetryPolicy = new MyRetryPolicy()&#xD;&#xA;        }&#xD;&#xA;    };&#xD;&#xA;&#xD;&#xA;    public class MyRetryPolicy : ServiceBusRetryPolicy&#xD;&#xA;    {&#xD;&#xA;        public override TimeSpan? CalculateRetryDelay(Exception lastException, int attemptCount)&#xD;&#xA;        {&#xD;&#xA;            return TimeSpan.FromSeconds(10);&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        public override TimeSpan CalculateTryTimeout(int attemptCount)&#xD;&#xA;        {&#xD;&#xA;            return TimeSpan.FromSeconds(30);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;Note: at this point, retry options set on the Service Bus client will be the options applied to every other client it creates.&#xD;&#xA;&#xD;&#xA;    await using var client = new ServiceBusClient(connectionString, options);&#xD;&#xA;&#xD;&#xA;## Disposal&#xD;&#xA;&#xD;&#xA;The `ServiceBusClient` implements `IDisposeAsync` and is responsible for resource cleanup. `.DisposeAsync()` has to be called when the client is no longer required and should be disposed of and was not created with a `using` keyword. This includes broker connection termination.&#xD;&#xA;&#xD;&#xA;    await sender.DisposeAsync();&#xD;&#xA;&#xD;&#xA;And with this, we've concluded the entry point into the new Azure Service Bus SDK, a.k.a. Track 2. In the next post, we'll look at sending and receiving messages with the new client.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [2]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2020/sb-servicebusclient/start.jpg&#xD;&#xA;  [3]: https://weblogs.asp.net/sfeldman/the-future-of-asb-dotnet-sdk&#xD;&#xA;  [4]: https://weblogs.asp.net/sfeldman/sb-servicebussender&#xD;&#xA;  [5]: https://weblogs.asp.net/sfeldman/sb-servicebusreceiver&#xD;&#xA;  [6]: https://docs.microsoft.com/en-us/dotnet/api/azure.core.tokencredential?view=azure-dotnet" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2020-04-27T04:19:00Z" PublishedUtc="2020-05-01T03:18:03.7070758Z" ModifiedUtc="2021-07-26T23:30:11.4913356Z" />
      <TagsPart Tags="AzureServiceBus,AzureSDK,.NET" />
      <AutoroutePart Alias="sb-servicebusclient" UseCustomPattern="false" />
      <TitlePart Title="Azure Service Bus SDK - ServiceBusClient" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=sb-servicebussender" Status="Published">
      <BodyPart Text="![Azure SDK - Service Bus - ServiceBusSender][1]&#xD;&#xA;&#xD;&#xA;&lt;div style=&quot;color: #CCCCCC;font-family:  Arial, Helvetica, sans-serif;&quot;&gt;&#xD;&#xA;Note: SDK Track 2 is still a preview and subject to API changes.&#xD;&#xA;&lt;/div&gt;&#xD;&#xA;&lt;br&gt;&#xD;&#xA;&#xD;&#xA;Table of contents&#xD;&#xA;&#xD;&#xA; 1. [The future of Azure Service Bus .NET SDK][2]&#xD;&#xA; 2. [ServiceBusClient][3]&#xD;&#xA; 3. ServiceBusSender&#xD;&#xA; 4. [ServiceBusReceiver][4]&#xD;&#xA; 5. [Safe Batching][5]&#xD;&#xA;&#xD;&#xA;## What's a message?&#xD;&#xA;&#xD;&#xA;Throughout the time, the Azure Service Bus message has changed a lot.&#xD;&#xA;&#xD;&#xA;In Track 0, it was a `BrokeredMessage` that included both the data and the disposition operations. One drawback that was found with that implementation was the difference with regards to the disposition operations when it came to the protocol: SBMP vs AMQP.&#xD;&#xA;&#xD;&#xA;In Track 1, a message has become just a `Message`. A message was a collection of properties and no disposition methods. All the operations were moved to the entity clients/message receiver to adhere to the single AMQP protocol, which requires disposition operations to be performed on the link used to receive the message.&#xD;&#xA;&#xD;&#xA;In Track 2, things are changing again. In the right way, this time. A message is no longer just a message. It has a semantic meaning, describing message intent, a message sent, or a message received. For an outgoing message, `ServiceBusMessage` is the message type. `ServiceBusMessage` includes solely the properties that can be found on an outgoing message. Nothing related to the incoming messages. This separation of concerns will help to differentiate between incoming and outgoing messages as the type is intent revealing.&#xD;&#xA;&#xD;&#xA;All the properties found on the `ServiceBusMessage` are identical to the subset of the properties from Track 1 `Message`. Except for two minor yet essential differences.&#xD;&#xA;&#xD;&#xA;The two properties that have different types are:&#xD;&#xA;&#xD;&#xA; 1. `ScheduledEnqueueTime`&#xD;&#xA; 2. `Body`&#xD;&#xA;&#xD;&#xA;Why are these two different? Azure SDK was following the best practices and tasked to optimize the code to take advantage of the latest improvements in .NET space.&#xD;&#xA;&#xD;&#xA;### `ScheduledEnqueueTime`&#xD;&#xA;&#xD;&#xA;The property represents time and is no longer of type `DataTime` but rather `DateTimeOffset`. `DateTimeOffset` is designed for date and time, plus the offset from UTC.&#xD;&#xA;&#xD;&#xA;### `Body`&#xD;&#xA;&#xD;&#xA;The property represents the payload and is no longer an array of bytes but rather `ReadOnlyMemory&lt;T&gt;`. Represents a contiguous region of memory which accepts byte array as well.&#xD;&#xA;&#xD;&#xA;## Sending a message&#xD;&#xA;&#xD;&#xA;To send a message, we need to go through the entry point which is `ServiceBusClient`:&#xD;&#xA;&#xD;&#xA;    await using var client = new ServiceBusClient(connectionString, serviceBusClientOptions);&#xD;&#xA;&#xD;&#xA;Once the client is obtained, a `ServiceBusSender` can be created. Sender creation is done with the client acting as a factory:&#xD;&#xA;&#xD;&#xA;    var sender = client.CreateSender(&quot;queue-or-topic&quot;); // entity needs to exist&#xD;&#xA;&#xD;&#xA;*Note: `ServiceBusSenderOptions` is optional and currently only useful when sending messages transactionally using Send-Via feature. Will be covered in a later post.*&#xD;&#xA;&#xD;&#xA;And sending a message:&#xD;&#xA;&#xD;&#xA;    var message = new ServiceBusMessage(Encoding.UTF8.GetBytes(&quot;hello&quot;));&#xD;&#xA;    await sender.SendAsync(message, cancellationToken);&#xD;&#xA;&#xD;&#xA;And here's the excellent news - Track 2 has finally added support for `CancellationToken` with the receive operation (spoiler alert, not only sending operation).&#xD;&#xA;&#xD;&#xA;And finally, when the sender is no longer required, it can be disposed:&#xD;&#xA;&#xD;&#xA;    await sender.DisposeAsync();&#xD;&#xA;&#xD;&#xA;With this, messages can be sent to queues and topics. Next is receiving messages.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2020/sb-servicebussender/sending.jpg&#xD;&#xA;  [2]: https://weblogs.asp.net/sfeldman/the-future-of-asb-dotnet-sdk&#xD;&#xA;  [3]: https://weblogs.asp.net/sfeldman/sb-servicebusclient&#xD;&#xA;  [4]: https://weblogs.asp.net/sfeldman/sb-servicebusreceiver&#xD;&#xA;  [5]: https://weblogs.asp.net/sfeldman/sb-servicebusreceiver/sb-safebatching" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2020-05-04T05:50:00Z" PublishedUtc="2020-05-04T21:22:41.2607531Z" ModifiedUtc="2021-07-26T23:29:45.9810746Z" />
      <TagsPart Tags="AzureServiceBus,AzureSDK,.NET" />
      <AutoroutePart Alias="sb-servicebussender" UseCustomPattern="false" />
      <TitlePart Title="Azure Service Bus SDK - Sending ServiceBusMessage(s)" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=sb-servicebusreceiver" Status="Published">
      <BodyPart Text="![Azure SDK - Service Bus - ServiceBusReceiver][1]&#xD;&#xA;&#xD;&#xA;&lt;div style=&quot;color: #CCCCCC;font-family:  Arial, Helvetica, sans-serif;&quot;&gt;&#xD;&#xA;Note: SDK Track 2 is still a preview and subject to API changes.&#xD;&#xA;&lt;/div&gt;&#xD;&#xA;&lt;br&gt;&#xD;&#xA;&#xD;&#xA;Table of contents&#xD;&#xA;&#xD;&#xA; 1. [The future of Azure Service Bus .NET SDK][2]&#xD;&#xA; 2. [ServiceBusClient][3]&#xD;&#xA; 3. [ServiceBusSender][4]&#xD;&#xA; 4. ServiceBusReceiver&#xD;&#xA; 5. [Safe Batching][5]&#xD;&#xA;&#xD;&#xA;## Sent message vs received message&#xD;&#xA;&#xD;&#xA;Not all messages are born equal. A message sent starts its life on the client-side and has fewer attributes than a message that is received. Why is that? Well, a message that is sent has not been on the server-side. It hasn't been received and &quot;leased&quot;. And as a result of that, it has no values for `SequenceNumber`, `DeliveryCount`, `LockToken`/`LockedUntil`, `DeadLetterReason` or any other value that would be set on the broker. But historically, that was not the case. Both, Track 0 and Track 1 took an approach of a canonical message that represented both messages, sent and received. With Track 2 that's changing. Message sent from the client-side, `ServiceBusMessage` is not the type received. Received messages are of the type `ServiceBusReceivedMessage`. It's an &quot;extension&quot; of the `ServiceBusMessage`, containing all the additional information broker (server-side) would set.&#xD;&#xA;&#xD;&#xA;This change, while it is a small change, is designed to enforce cleaner code and separation of concerns when dealing with two types of messages (outgoing and incoming). At the moment of writing this post, it is impossible to create a `ServiceBusReceivedMessage`. It will be possible to create it for testing purposes, using a static factory for **testing** purposes. I also suspect there will be some way to create a copy/clone with modifications when the support for the incoming pipeline will be in place. Yet that is not implemented yet and will be a future post topic. For now, you can track the progress on the topic in the issue [here][6].&#xD;&#xA;&#xD;&#xA;## Receiving a message&#xD;&#xA;&#xD;&#xA;So, assuming there are messages waiting to be received, how to receive those?&#xD;&#xA;&#xD;&#xA;As always, we need a Service Bus client to create a receiver. The receiver can also take an optional options parameter, used to specify receive mode and custom prefetch count.&#xD;&#xA;&#xD;&#xA;    await using var client = new ServiceBusClient(connectionString, options);&#xD;&#xA;    var receiveOptions = new ServiceBusReceiverOptions&#xD;&#xA;    {&#xD;&#xA;    &#x9;PrefetchCount = 0,&#xD;&#xA;    &#x9;ReceiveMode = ReceiveMode.PeekLock&#xD;&#xA;    };&#xD;&#xA;&#x9;&#xD;&#xA;    await using var receiver = client.CreateReceiver(&quot;myqueue&quot;, receiveOptions);&#xD;&#xA;&#xD;&#xA;Once we've got the receiver, we can request a single message or multiple messages&#xD;&#xA;&#xD;&#xA;    ServiceBusReceivedMessage message = await receiver.ReceiveAsync(cancellationToken);&#xD;&#xA;    IList&lt;ServiceBusReceivedMessage&gt; messages = await receiver.ReceiveBatchAsync(maxMessages, cancellationToken);&#xD;&#xA;&#xD;&#xA;Note that `ReceiveBatchAsync()` method implies there's a batch received, in reality it's a best-effort operation to retrieve up-to `maxMessages` requested and not exactly that number of messages.&#xD;&#xA;&#xD;&#xA;And another great addition in Track 2 is support for `CancellationToken` by all vital methods.&#xD;&#xA;&#xD;&#xA;Now we can send and receive using Azure Service Bus future SDK. Exciting!&#xD;&#xA;&#xD;&#xA;In the next post, I'll be looking at the feature that has almost made it to the Track 1 SDK and is finally here - safe batching. Until then, happy coding.&#xD;&#xA;&#xD;&#xA;  [1]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2020/sb-servicebusreceiver/receiving.jpg&#xD;&#xA;  [2]: https://weblogs.asp.net/sfeldman/the-future-of-asb-dotnet-sdk&#xD;&#xA;  [3]: https://weblogs.asp.net/sfeldman/sb-servicebusclient&#xD;&#xA;  [4]: https://weblogs.asp.net/sfeldman/sb-servicebussender&#xD;&#xA;  [5]: https://weblogs.asp.net/sfeldman/sb-servicebusreceiver/sb-safebatching&#xD;&#xA;  [6]: https://github.com/Azure/azure-sdk-for-net/issues/11986" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2020-05-11T05:28:30.470579Z" PublishedUtc="2020-05-11T05:28:30.470579Z" ModifiedUtc="2020-05-11T05:28:30.2987182Z" />
      <TagsPart Tags="AzureServiceBus,AzureSDK,.NET" />
      <AutoroutePart Alias="sb-servicebusreceiver" UseCustomPattern="false" />
      <TitlePart Title="Azure Service Bus SDK - Receiving ServiceBusReceivedMessage(s)" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=sb-safebatching" Status="Published">
      <BodyPart Text="![Azure SDK - Service Bus - Safe Batching][1]&#xD;&#xA;&#xD;&#xA;&lt;div style=&quot;color: #CCCCCC;font-family:  Arial, Helvetica, sans-serif;&quot;&gt;&#xD;&#xA;Note: SDK Track 2 is still a preview and subject to API changes.&#xD;&#xA;&lt;/div&gt;&#xD;&#xA;&lt;br&gt;&#xD;&#xA;&#xD;&#xA;Table of contents&#xD;&#xA;&#xD;&#xA; 1. [The future of Azure Service Bus .NET SDK][2]&#xD;&#xA; 2. [ServiceBusClient][3]&#xD;&#xA; 3. [ServiceBusSender][4]&#xD;&#xA; 4. [ServiceBusReceiver][5]&#xD;&#xA; 5. Safe Batching&#xD;&#xA;&#xD;&#xA;## Unsafe batching&#xD;&#xA;&#xD;&#xA;In one of the previous posts, [Sending ServiceBusMessage(s)][6] I've mentioned the option to send a single message using `SendAsync()` API. Sometimes, sending a single message is not enough and multiple messages need to be sent. The same method provides an overload to send a collection of messages.&#xD;&#xA;&#xD;&#xA;    IEnumerable&lt;ServiceBusMessage&gt; messages = new &#xD;&#xA;    List&lt;messages&gt;{ ... };&#xD;&#xA;    await sender.SendAsync(messages, cancellationToken);&#xD;&#xA;&#xD;&#xA;This method is great when messages are pre-created and sent in a single operation. It's subject to a single message size restriction but other than that, it's straight forward. Except it's not.&#xD;&#xA;&#xD;&#xA;Consider the following scenario: you've created multiple messages and about to send those, but as you do so, `MessageSizeExceededException` exception is thrown. Why is that? That's due to the fact that each message is smaller than the maximum message size. But combined together, multiple messages can exceed that limit and there's no way to validate the total size until an attempt to send those to the broker is made. And that's far from optimal. This is especially problematic when handling a continuous stream of data that needs to be converted to messages and sent out. How to know how messages would be within the right size boundaries? What if there's an outlier causing an assumed batch size to be invalidated?&#xD;&#xA;&#xD;&#xA;In the past, for track 0 SDK, I've dealt with that by [estimating the batch size][7] and used padding percentage. While it worked, it wasn't very accurate and it's the biggest drawback was high inaccuracy with small messages. But hey, it worked well for the closed source SDK.&#xD;&#xA;&#xD;&#xA;For track 1 SDK, this was no longer required as safe batching could be implemented in the SDK code.&#xD;&#xA;I've started working on the [PR to add the feature](https://github.com/Azure/azure-service-bus-dotnet/pull/539) to the SDK and it was almost there, except things didn't go as I was hoping they'd go.&#xD;&#xA;&#xD;&#xA;&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Current status: building &lt;a href=&quot;https://twitter.com/hashtag/Azure?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#Azure&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/servicebus?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#servicebus&lt;/a&gt; safe batching API for &lt;a href=&quot;https://twitter.com/hashtag/azureservicebus?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#azureservicebus&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/netstandard?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#netstandard&lt;/a&gt; client. No more surprises at run-time. &lt;a href=&quot;https://t.co/2kHD5mapSR&quot;&gt;pic.twitter.com/2kHD5mapSR&lt;/a&gt;&lt;/p&gt;&amp;mdash; Sean Feldman (@sfeldman) &lt;a href=&quot;https://twitter.com/sfeldman/status/1024902379475324928?ref_src=twsrc%5Etfw&quot;&gt;August 2, 2018&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&#xD;&#xA;&#xD;&#xA;Nonetheless, the idea was straight forward - build up a batch of messages in a controlled manner by converting those message to AMQP messages and counting their size towards total batch size.&#xD;&#xA;&#xD;&#xA;![safe batching track 1][8]&#xD;&#xA;&#xD;&#xA;## Safe batching&#xD;&#xA;&#xD;&#xA;Wait, is that all to it? Yes. That's all. And the good news, track 2 SDK already has it. Let's have a look at the API.&#xD;&#xA;&#xD;&#xA;First step is to create a sender. A sender is necessary not only to dispatch a batch of messages, but also to create the batch.&#xD;&#xA;&#xD;&#xA;    await using var client = new ServiceBusClient(connectionString, options);&#xD;&#xA;    await using var sender = client.CreateSender(&quot;myqueue&quot;);&#xD;&#xA;&#xD;&#xA;The next step is to define batch creation options. Currently it only supports `MaxSizeInBytes`, which is necessary if you'd like to control the batch maximum size. If omitted, the maximum message size for the namespace tier/SKU will be used.&#xD;&#xA;&#xD;&#xA;    var batchOptions = new CreateBatchOptions&#xD;&#xA;    {&#xD;&#xA;    &#x9;MaxSizeInBytes = 100&#xD;&#xA;    };&#xD;&#xA;&#xD;&#xA;With the options and sender, we can create a batch&#xD;&#xA;&#xD;&#xA;    using var batch = await sender.CreateBatchAsync(batchOptions, cancellationToken);&#xD;&#xA;&#xD;&#xA;Note that `ServiceBusMessageBatch` is `IDisposable` and should be disposed of after used up.&#xD;&#xA;&#xD;&#xA;Adding messages to the batch is done in a controlled manner, using `TryAdd(message)` method. Try-add is a well-established pattern to attempt an operation and indicate wherever it succeeded or not without a failure. The operation adds the message and returns `true` if the message's addition does not surpass the maximum batch size. Otherwise, `false` is returned and the message is not added to the batch, leaving it for the next batch. E.g.:&#xD;&#xA;    &#xD;&#xA;    batch.TryAdd(message1);&#xD;&#xA;    batch.TryAdd(message2);&#xD;&#xA;    batch.TryAdd(message3);&#xD;&#xA;&#xD;&#xA;`ServiceBusMessageBatch` also exposes the following properties to query it's size:&#xD;&#xA;&#xD;&#xA; 1. Count - number of messages in a batch&#xD;&#xA; 2. SizeInBytes - batch total size&#xD;&#xA; 3. MaxSizeInBytes - maximum allowed batch size&#xD;&#xA;&#xD;&#xA;And last but not the least, sending the batch&#xD;&#xA;&#xD;&#xA;    await sender.SendAsync(batch, cancellationToken);&#xD;&#xA;&#xD;&#xA;## Conclusion&#xD;&#xA;&#xD;&#xA;This small but extremely powerful feature solves the problem of unexpected surprises when trying to send a collection of messages to the broker. By using safe batching API, there's no more gambling wherever the send operation will succeed or fail.&#xD;&#xA;&#xD;&#xA;  [1]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2020/sb-safebatching/batch.jpg&#xD;&#xA;  [2]: https://weblogs.asp.net/sfeldman/the-future-of-asb-dotnet-sdk&#xD;&#xA;  [3]: https://weblogs.asp.net/sfeldman/sb-servicebusclient&#xD;&#xA;  [4]: https://weblogs.asp.net/sfeldman/sb-servicebussender&#xD;&#xA;  [5]: https://weblogs.asp.net/sfeldman/sb-servicebusreceiver&#xD;&#xA;  [6]: https://weblogs.asp.net/sfeldman/sb-servicebussender&#xD;&#xA;  [7]: https://weblogs.asp.net/sfeldman/asb-batching-brokered-messages&#xD;&#xA;  [8]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2020/sb-safebatching/code.png" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2020-05-26T03:38:00Z" PublishedUtc="2020-05-26T04:12:05.2628464Z" ModifiedUtc="2020-05-26T04:12:05.2472186Z" />
      <TagsPart Tags="AzureServiceBus,AzureSDK,.NET" />
      <AutoroutePart Alias="sb-safebatching" UseCustomPattern="false" />
      <TitlePart Title="Azure Service Bus SDK - Safe Batching" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=sbe-portal" Status="Published">
      <BodyPart Text="&lt;center&gt;&#xD;&#xA;&#xD;&#xA;![Service Bus Explorer for Azure Portal][1]&#xD;&#xA;&#xD;&#xA;&lt;/center&gt;&#xD;&#xA;&#xD;&#xA;If you ever used the Service Bus Explorer (SBE) tool, you can appreciate how handy it is to be able to explore the namespace, inspect individual entities, and perform CRUD operation. It's also extremely handy to be able to perform operations that involve messages. For a long time, the tool was only available for Windows users and there was a long-standing [feature request][2] to make the tool cross-platform. The tool is an open-source project and is entirely driven by the volunteered effort. For a long time, the tool was compensating for what Microsoft didn't provide. And, I must admit, was doing a great job, considering its open-source nature and completely voluntary contributions. Until today.&#xD;&#xA;&#xD;&#xA;What has changed today? Today, the Azure portal has officially launched Service Bus Explorer in Azure portal. While the name is very similar, do not confuse the two. This is a very early preview with somewhat basic functionality, but a minimum viable product and is a step in the right direction. A very welcomed and long-anticipated addition. But why is it some important? For a few reasons:&#xD;&#xA;&#xD;&#xA; 1. It's a Microsoft backed tool with a support guarantee&#xD;&#xA; 2. It's a web-based tool right in the portal, meaning can be run anywhere.&#xD;&#xA; 3. This tool, similar to Storage Explorer, has a chance to potentially become a standalone tool solving the cross-platform ask.&#xD;&#xA;&#xD;&#xA;## How do I access the tool?&#xD;&#xA;&#xD;&#xA;Right now the only way to see the tool is to navigate to one of the entities (Queues or Topics section in the Entities section of the Service Bus blade).&#xD;&#xA;&#xD;&#xA;![enter image description here][3]&#xD;&#xA;&#xD;&#xA;## So what can the tool do now?&#xD;&#xA;&#xD;&#xA;### Queues&#xD;&#xA;&#xD;&#xA;Queues can be created and deleted&#xD;&#xA;&#xD;&#xA;![create queues][4]&#xD;&#xA;&#xD;&#xA;It also can be modified. I found it a bit awkward to do that not under 'Service Bus Explorer' section, but rather under 'Properties'.&#xD;&#xA;&#xD;&#xA;![update queue][5]&#xD;&#xA;&#xD;&#xA;This is probably years of using the other SBE tool is talking 🙂&#xD;&#xA;&#xD;&#xA;The next big thing is the message operations. This is where it finally closes the gap. For queues, messages can be sent, received, and peeked.&#xD;&#xA;&#xD;&#xA;Sending messages allows quick population of custom/user properties as well as system properties by ticking off 'Expand Advanced Properties'. There you'll find Message ID, Label, To, Reply-To, Correlation ID, Schedule time and TTL. &#xD;&#xA;![send a message][6]&#xD;&#xA;&#xD;&#xA;Peeking messages can be done from either the queue or its dead-letter queue.&#xD;&#xA;&#xD;&#xA;![peek a message][7]&#xD;&#xA;&#xD;&#xA;**Note**: only up-to 32 messages can be peeked at the moment. I hope this restriction will be removed as it's possible to peek more than just 32.&#xD;&#xA;&#xD;&#xA;Selecting a single message from the peeked messages list allows closer message inspection, revealing custom headers and broker-set properties.&#xD;&#xA;&#xD;&#xA;![message properties][8]&#xD;&#xA;&#xD;&#xA;Receiving is always done for a single message. Received message can be either from the queue or its dead-letter queue and is **ALWAYS** performed using `ReceiveAndDelete` mode.&#xD;&#xA;&#xD;&#xA;![receive a message][9]&#xD;&#xA;&#xD;&#xA;**Note**: only a single message can be received at this point. Hopefully, this will change and it will be possible to control the number of messages to be retrieved.&#xD;&#xA;&#xD;&#xA;### Topics&#xD;&#xA;&#xD;&#xA;Topics can be created, modified, and deleted in a similar way to the queues. And now, with the SBE for the portal messages can be published to the topics as well.&#xD;&#xA;&#xD;&#xA;To publish a message to a topic, there's got to be at least one subscription. Once a subscription is created (see down the post), messages can be posted to the topic. Publishing is identical to the sending a message to a queue.&#xD;&#xA;&#xD;&#xA;Peeking and receiving are different though. Whenever messages are picked or received from a topic (which is logically invalid), a subscription is required. And that's because messages should be received and peeked from the subscriptions under the topic, not the topic directly.&#xD;&#xA;&#xD;&#xA;![receive a message][10]&#xD;&#xA;&#xD;&#xA;### Subscriptions&#xD;&#xA;&#xD;&#xA;Subscriptions are entities that belong to the topics. Creation, modification, and management of subscription is done under the topics section.&#xD;&#xA;&#xD;&#xA;A subscription creation allows providing all the parameters.&#xD;&#xA;&#xD;&#xA;![create a subscription][11]&#xD;&#xA;&#xD;&#xA;And under individual subscriptions, there's an option to manage the filters.&#xD;&#xA;&#xD;&#xA;### Subscription filters/rules&#xD;&#xA;&#xD;&#xA;The 'Overview' section of each subscription entity shows also the list of the filters.&#xD;&#xA;&#xD;&#xA;![filters][12]&#xD;&#xA;&#xD;&#xA;The `$Default` filter, which is by default created with each subscription, will always be there for each new subscription.&#xD;&#xA;&#xD;&#xA;When creating a filter, the SBE allows SQL and [Correlation filters][13], with a nice touch of SQL filter validation.&#xD;&#xA;&#xD;&#xA;![create a filter][14]&#xD;&#xA;&#xD;&#xA;**Note**: filter action cannot be modified at this point.&#xD;&#xA;&#xD;&#xA;Existing filters can be inspected _and_ modified.&#xD;&#xA;&#xD;&#xA;For Correlation filters, the UI provides a drop-down for the correlation properties and entry fields for the custom header/value pairs.&#xD;&#xA;&#xD;&#xA;![correlation filter][15]&#xD;&#xA;&#xD;&#xA;While in preview, this is an exciting addition to the portal and a great addition to the Azure Service Bus tooling, which was missing for a long time. I'm looking forward to GA-ing of the SBE as well as additional functionality added over the time. It's not on par with any of the other 3rd party tools. And I date to say it doesn't try to replace those. But it's a heck of help to all the developers that need to perform basic operations on the entities and messages. And this tool is going to receive a warm welcome.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2020/sbe-portal/sbe.png&#xD;&#xA;  [2]: https://github.com/paolosalvatori/ServiceBusExplorer/issues/286&#xD;&#xA;  [3]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2020/sbe-portal/entities.png&#xD;&#xA;  [4]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2020/sbe-portal/queue-create.png&#xD;&#xA;  [5]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2020/sbe-portal/queue-update.png&#xD;&#xA;  [6]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2020/sbe-portal/queue-send.png&#xD;&#xA;  [7]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2020/sbe-portal/queue-peek.png&#xD;&#xA;  [8]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2020/sbe-portal/message-properties.png&#xD;&#xA;  [9]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2020/sbe-portal/message-receive.png&#xD;&#xA;  [10]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2020/sbe-portal/subscription-receive.png&#xD;&#xA;  [11]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2020/sbe-portal/subscription-create.png&#xD;&#xA;  [12]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2020/sbe-portal/filters.png&#xD;&#xA;  [13]: https://weblogs.asp.net/sfeldman/asb-subs-with-correlation-filters&#xD;&#xA;  [14]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2020/sbe-portal/filter-create.png&#xD;&#xA;  [15]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2020/sbe-portal/filter-correlation.png" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2020-05-20T04:05:00Z" PublishedUtc="2020-05-20T05:43:11.8213291Z" ModifiedUtc="2020-05-20T05:43:11.805728Z" />
      <TagsPart Tags="AzureServiceBus" />
      <AutoroutePart Alias="sbe-portal" UseCustomPattern="false" />
      <TitlePart Title="Service Bus Explorer in Azure Portal" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=azure-webjob-with-github-action" Status="Published">
      <BodyPart Text="![enter image description here][1]&#xD;&#xA;&#xD;&#xA;**2022-04 Update**: as Lee McMullen has [pointed out][2], the deployment task `srijken/azure-zip-deploy@v1.0.1` has been replaced by `azure/webapps-deploy@`.&#xD;&#xA;&#xD;&#xA;WebJobs are a hidden gem within Azure App Service. While it's coupled to the web application, one of the neat tricks is to turn it into a worker service for continuous background processing. Arguably, this could be also accomplished by Azure Functions, but in certain scenarios, it's simpler to have an equivalent of what used to be a Windows Service. I will skip the building a WebJob part. It's sufficiently enough [documented](https://docs.microsoft.com/en-us/azure/app-service/webjobs-create) by Microsoft. [Yves Goeleven](https://twitter.com/yvesgoeleven) has done some really nice work with WebJobs he'd be happy to share with those that are looking for ideas. And while what he's done is great, I will mention that I'd love to see a WebJob as a Service kind of offer coming soon. Or some Worker as a role. Something that would fill in the gap that is there. Not everything is containers/Kubernetes or Functions. And using WebJobs under the App Service umbrella feels like hunting a mosquito with a canon. Without further ado, how to deploy a WebJob using GitHub actions?&#xD;&#xA;&#xD;&#xA;## Assumptions&#xD;&#xA;&#xD;&#xA;### Operation system&#xD;&#xA;&#xD;&#xA;When using GitHub actions, the operating system used matters. Windows images are twice more expensive than Linux. This directly translates into having half the free minutes when running with Windows. While it's not the biggest factor, there's really no reason to demand a Windows image when building, testing, and deploying to Azure a .NET based WebJob. Therefore, I'll be using a Linux image for this post.&#xD;&#xA;&#xD;&#xA;### Conditional execution&#xD;&#xA;&#xD;&#xA;If you're like me and push almost every commit, it can become quite expensive very fast. I also like to work in PRs, leveraging draft PRs as an indication the work is still in progress. With that in mind, I'd like to avoid unnecessary deployments on PR builds while PRs are marked as draft PRs. In addition to that, I'll skip the packaging of the WebJob if a deployment is not taking place. While it's such a small optimization, it leads to faster build execution.&#xD;&#xA;&#xD;&#xA;### Managing secrets&#xD;&#xA;&#xD;&#xA;GitHub Actions has support for [creating and managing secrets](https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets). I'll use that and frankly, recommend you always store your secrets that way. In my example, I'll be storing `.publishsettings` files retrieved from the portal as GitHub secrets.&#xD;&#xA;&#xD;&#xA;### Project structure&#xD;&#xA;&#xD;&#xA;    WebJobSolution/&#xD;&#xA;    ├── .github/workflows/&#xD;&#xA;    │   └── dotnet-core.yml&#xD;&#xA;    └── src/&#xD;&#xA;        ├── worker&#xD;&#xA;        │   ├── worker.csproj&#xD;&#xA;        │   ├── run.cmd&#xD;&#xA;        │   ├── settings.job&#xD;&#xA;        │   └── ...&#xD;&#xA;        └── worker.sln&#xD;&#xA;&#xD;&#xA;## Action script&#xD;&#xA;&#xD;&#xA;    name: .NET Core&#xD;&#xA;    &#xD;&#xA;    env:&#xD;&#xA;      BINARIES: './output/app_data/jobs/continuous/mywebjob' # the last folder name will become the webjob name in the portal&#xD;&#xA;      ZIP_FILE: 'webjob.zip'&#xD;&#xA;      ZIP_PATH: './output'&#xD;&#xA;      ZIP_FILEPATH: './output/webjob.zip'&#xD;&#xA;    &#xD;&#xA;    on:&#xD;&#xA;      push:&#xD;&#xA;        branches: [ master, develop ]&#xD;&#xA;      pull_request:&#xD;&#xA;        branches: [ master, develop ]&#xD;&#xA;        types: [review_requested, ready_for_review]&#xD;&#xA;    &#xD;&#xA;    jobs:&#xD;&#xA;      build:&#xD;&#xA;        runs-on: ubuntu-latest&#xD;&#xA;    &#xD;&#xA;        steps:&#xD;&#xA;        - uses: actions/checkout@v2&#xD;&#xA;    &#xD;&#xA;        - name: Setup .NET Core&#xD;&#xA;          uses: actions/setup-dotnet@v1&#xD;&#xA;          with:&#xD;&#xA;            dotnet-version: 3.1.101&#xD;&#xA;    &#xD;&#xA;        - name: Install dependencies&#xD;&#xA;          run: dotnet restore ./src/worker.sln&#xD;&#xA;    &#xD;&#xA;        - name: Build&#xD;&#xA;          run: dotnet build ./src/worker.sln --configuration Release --no-restore --output ${{env.BINARIES}}&#xD;&#xA;        &#xD;&#xA;        - name: Test&#xD;&#xA;          run: dotnet test ./src/worker.sln --no-restore --verbosity normal --output ${{env.BINARIES}}&#xD;&#xA;    &#xD;&#xA;        - name: Zip&#xD;&#xA;          if: github.event_name != 'pull_request' # skip on PRs&#xD;&#xA;          uses: nguyenquyhy/zip-release@v0.3.0&#xD;&#xA;          with:&#xD;&#xA;            filename: '${{env.ZIP_FILE}}'&#xD;&#xA;            workingDirectory:  ${{env.ZIP_PATH}}&#xD;&#xA;            exclusions: 'worker.exe app_data/**/unix/*' # skip .exe and Unix runtime as deployment will be to a Windows App Service&#xD;&#xA;    &#xD;&#xA;        - name: Deploy to Test (develop branch) # skip on PRs&#xD;&#xA;          if: github.ref == 'refs/heads/develop' &amp;&amp; github.event_name != 'pull_request' # skip on PRs, deploy develop branch to the test environment&#xD;&#xA;          uses: srijken/azure-zip-deploy@v1.0.1&#xD;&#xA;          with:&#xD;&#xA;            zip-file: ${{env.ZIP_FILEPATH}}&#xD;&#xA;            publish-profile: ${{ secrets.WEBJOB_PUBLISH_PROFILE_TEST }}&#xD;&#xA;    &#xD;&#xA;        - name: Deploy to Production (master branch)&#xD;&#xA;          if: github.ref == 'refs/heads/master' &amp;&amp; github.event_name != 'pull_request' # skip on PRs, deploy master branch to the production environment&#xD;&#xA;          uses: azure/webapps-deploy@v2&#xD;&#xA;          with:&#xD;&#xA;            app-name: ${{ env.AZURE_WEBAPP_NAME }}&#xD;&#xA;            package: ${{env.ZIP_FILEPATH}}&#xD;&#xA;            publish-profile: ${{ secrets.WEBJOB_PUBLISH_PROFILE_PROD }}&#xD;&#xA;&#xD;&#xA;With this fairly small script, an automated CI/CD will be executed and deploy the WebJob whenever a change is done on `develop` or `master` branches, deploying the bits into the testing or production environment. Happy deploying!&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2020/azure-webjob-with-github-action/cogwheel.jpg&#xD;&#xA;  [2]: https://twitter.com/leemcmullen/status/1509821581329149954" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2020-06-02T05:11:00Z" PublishedUtc="2022-04-01T20:04:51.2000031Z" ModifiedUtc="2022-04-01T20:04:51.184355Z" />
      <TagsPart Tags="WebJob; GitHub" />
      <AutoroutePart Alias="azure-webjob-with-github-action" UseCustomPattern="false" />
      <TitlePart Title="Deploying an Azure WebJob with GitHub Actions" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="true" />
    </BlogPost>
    <BlogPost Id="/alias=eg-advanced-filters" Status="Published">
      <BodyPart Text="![filter][1]&#xD;&#xA;&#xD;&#xA;Event Grid subscriptions filtering offers advanced filtering that allows data payload attributes filtering. Or filtering on the payload. This is a feature you cannot have with Azure Service Bus, for example. If you'd like to achieve the same functionality with Service Bus, you'd need to promote data from the payload into the headers. But back to Event Grid.&#xD;&#xA;&#xD;&#xA;There is a maximum of 5 advanced filters per subscription. This might seem not much, but it's actually quite a lot. Advanced filtered are evaluated using AND logic among themselves. Within each advanced filter, the evaluation of multiple values is done using OR logic. Except there's a caveat. The documentation is outdated and the portal does not reflect the real power of these filters - the number of values advanced filters can evaluate are not [restricted to 5](https://docs.microsoft.com/en-us/azure/event-grid/event-filtering#limitations) values per filter. Rather, the &lt;strong&gt;number&lt;/strong&gt; of those values is a pool shared by all 5 advanced filters.&#xD;&#xA;&#xD;&#xA;![portal][2]&#xD;&#xA;&#xD;&#xA;This means a single advanced filter can have up to 25 values if there are no other advanced filters on the subscription. Unfortunately, the only way to accomplish that today is to use ARM template or the management SDK to provision subscriptions with pulled values for advanced filters. The service team will update both the portal and the documentation. Until then, it's another hidden gem of Azure.&#xD;&#xA;&#xD;&#xA;![pooled values][3]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2020/eg-advanced-filters/filter.jpg&#xD;&#xA;  [2]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2020/eg-advanced-filters/bug.jpg&#xD;&#xA;  [3]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2020/eg-advanced-filters/pooled.filters.jpg" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2020-06-04T05:16:56.022719Z" PublishedUtc="2020-06-04T05:16:56.022719Z" ModifiedUtc="2020-06-04T05:16:56.0070886Z" />
      <TagsPart Tags="EventGrid" />
      <AutoroutePart Alias="eg-advanced-filters" UseCustomPattern="false" />
      <TitlePart Title="Event Grid advanced filters and value pooling" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=hello-azurite" Status="Published">
      <BodyPart Text="![hello Azurite][1]&#xD;&#xA;&#xD;&#xA;## Why Azurite?&#xD;&#xA;&#xD;&#xA;For a long time, I was using Storage Emulator to execute some verification tests for [ServiceBus.AttachmentPlugin](https://github.com/SeanFeldman/ServiceBus.AttachmentPlugin) project. And I'd continue using it if not a few inconveniences it had.&#xD;&#xA;&#xD;&#xA; - Needs to be installed. While it's not big of a deal, using something like PowerShell it can be download and installed swiftly. &#xD;&#xA;&lt;br&gt;&#xD;&#xA;&#xD;&#xA;    $msiPath = &quot;$($env:USERPROFILE)\MicrosoftAzureStorageEmulator.msi&quot;&#xD;&#xA;            (New-Object Net.WebClient).DownloadFile('https://download.visualstudio.microsoft.com/download/pr/e9476781-1f65-40e4-b7fd-e6b49840c7de/7028682de076b2dbc1aa5f1e02ec420a/microsoftazurestorageemulator.msi', $msiPath)&lt;br&gt;&#xD;&#xA;    cmd /c start /wait msiexec /i $msiPath /quiet&lt;br&gt;&#xD;&#xA;    del $msiPath&#xD;&#xA;&#xD;&#xA; - Requires Microsoft SQL Server 2012 Express LocalDB instance&#xD;&#xA; - Has [no support for HTTPS](https://docs.microsoft.com/en-us/azure/storage/common/storage-use-emulator#authenticating-requests-against-the-storage-emulator)&#xD;&#xA; - Is not cross-platform&#xD;&#xA;&#xD;&#xA;And for quite some time I was OK with these limitations. Until GitHub Actions knocked on the door.&#xD;&#xA;I wanted to run the test suite and Windows runner on GitHub would have to have both Storage Emulator and SQL Server Express installed. That would mean increased time for the builds, which I wanted to reduce rather than expand. The second issue was running my CI/CD on Windows only. In my earlier post [Deploying an Azure WebJob with GitHub Actions](https://weblogs.asp.net/sfeldman/azure-webjob-with-github-action) I was able to run build and deploy using Linux runner to reduce the cost. I surely wanted to stay in that realm which would not be doable with the Storage Emulator.&#xD;&#xA;&#xD;&#xA;## Azurite to the rescue&#xD;&#xA;&#xD;&#xA;Fortunately, there's an OSS project that Microsoft/Azure supports now and that was Azurite. Not only that, it's now the first option [recommended by Microsoft](https://docs.microsoft.com/en-us/azure/storage/common/storage-use-azurite). And it surely looks like as if the investment is going into this tool rather than the Storage Emulator. Some of the benefits of this new tool are:&#xD;&#xA;&#xD;&#xA; - Install and run with NPM similar to .NET Core global tool (`npm install -g azurite`&#xD;&#xA; - Can run a single service only (Blobs or Queues)&#xD;&#xA; - Can run as a Docker container and the image is provided by Microsoft&#xD;&#xA; - Open-source with a GitHub issue tracker (I'll expand on the importance of that below)&#xD;&#xA; - Easy to purge (data stored in a folder that can be deleted to remove everything)&#xD;&#xA; - Has support for HTTPS and Oauth&#xD;&#xA; - Still supports `devstoreaccount1` credentials and `UseDevelopmentStorage=true` connection string&#xD;&#xA; - Works with Storage SDK v12&#xD;&#xA; - Plays well with [Storage Explorer](https://azure.microsoft.com/en-us/features/storage-explorer/)&#xD;&#xA; - Nice integration with VS Code (if you need that)&#xD;&#xA;&#xD;&#xA;The tool met all of my requirements and even exceeded those. But be aware, not everything is flawless. There are a few differences between Storage Explorer and Azurite. The ones are worth noting are:&#xD;&#xA;&#xD;&#xA; 1. Error messages may be different, while error status codes align.&#xD;&#xA; 2. No support for Table Storage. **Update**: support will be added back and is [worked on][2].&#xD;&#xA;&#xD;&#xA;While the first discrepancy is not as bad as you might think, after all, status codes matter more, the second limitation is substantial.  It means the tool cannot be used to verify Table Storage based code. At all. Now recall the benefit of being OSS and having an issue tracker? Well, there's an [issue to lobby for Table Storage support](https://github.com/Azure/Azurite/issues/428). As for now, the [official response is](https://github.com/Azure/Azurite/issues/253#issuecomment-524146020): &#xD;&#xA;&#xD;&#xA;&gt; The Azure Storage Emulator is being deprecated in favour of Azurite V3. Till Aug 13, 2020, the Azure Storage Emulator will continue to be available for download via the standalone installer and via the Azure SDK and will continue to support the latest Storage REST service versions. New feature capabilities, however, will be available only in Azurite starting REST service version 2019-02-02. Azure Table will not be supported in Azurite. Instead, the CosmosDB emulator should be used for emulating Table access.&#xD;&#xA;&#xD;&#xA;And it would almost work for my scenario, except CosmosSB emulator is not cross platform. I hope there's a plan to make it cross-platform. These days, with .NET Core and [.NET Core Global tools](https://docs.microsoft.com/en-us/dotnet/core/tools/global-tools) everything is possible.&#xD;&#xA;&#xD;&#xA;## Build server woes&#xD;&#xA;&#xD;&#xA;I'm using AppVeyor and had to find a way to get Azurite running in the background while the tests where running. &#xD;&#xA;&#xD;&#xA;For Azure DevOps, the answer was simple, provided on the [issue tracker](https://github.com/Azure/Azurite/issues/382). &#xD;&#xA;For AppVeyor I was able to use PowerShell cmdlet to run a background process using `Start-Process azurite-blob.cmd -PassThru`. Note the `.cmd`. It's important to specify file extension on Windows as there's also an extensionless variant that is a Bash script, which PowerShell will fail to execute.&#xD;&#xA;&#xD;&#xA;But none of this worked with GitHub Actions (I was trying with the Windows runner rather than Linux). Thanks to Edward Thomson, he has [reminded](https://github.com/Azure/Azurite/issues/451#issuecomment-639398801) that there's a Linux version that just worked.&#xD;&#xA;&#xD;&#xA;And now I can run the test suite with Azurite!&#xD;&#xA;&#xD;&#xA;![Result in action][3]&#xD;&#xA;&#xD;&#xA;&lt;p&gt;&lt;p&gt;&lt;div style=&quot;height:50px&quot;&gt;&lt;br&lt;/p&gt;&lt;/p&gt;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2020/hello-azurite/image-1.png&#xD;&#xA;  [2]: https://github.com/Azure/Azurite/issues/428#issuecomment-664213293&#xD;&#xA;  [3]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2020/hello-azurite/image.png" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2020-06-06T20:36:00Z" PublishedUtc="2020-07-27T15:38:48.5398305Z" ModifiedUtc="2020-07-27T15:38:48.5272343Z" />
      <TagsPart Tags="GitHub;" />
      <AutoroutePart Alias="hello-azurite" UseCustomPattern="false" />
      <TitlePart Title="Goodbye Azure Storage Emulator. Hello Azurite!" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=cosmosdb-container-provisioning-throttling" Status="Published">
      <BodyPart Text="![throttling][1]&#xD;&#xA;&#xD;&#xA;When working with CosmosDB, you're quickly accustomed to the idea that each operation costs a certain amount of RUs. And when there's not enough RUs, the request gets throttled. There's a [capacity calculator][2] that helps to find out the estimated required throughput based on the operations and other criteria to avoid throttling. But this calculator is omitting important information that does not appear to be documented at the moment. Creating collections can be throttled as well, except not due to an insufficient amount of RUs. To demonstrate how collection creation requests can be throttled, I'll emulate concurrent requests coming to the broker to create temporary collection.&#xD;&#xA;&#xD;&#xA;    var builder = new CosmosClientBuilder(&quot;&lt;connection-string&gt;&quot;);&#xD;&#xA;    using var client = builder.Build();&#xD;&#xA;&#xD;&#xA;&#x9;var database = client.GetDatabase(&quot;cosmos-db&quot;);&#xD;&#xA;&#xD;&#xA;&#x9;var tasks = new List&lt;Task&gt;();&#xD;&#xA;&#x9;for (var i = 0; i &lt; 40; i++)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;$&quot;Create container temp-{i}&quot;.Dump();&#xD;&#xA;&#x9;&#x9;var containerProperties = new ContainerProperties($&quot;temp-{i}&quot;, partitionKeyPath: &quot;/PartitionKey&quot;);&#xD;&#xA;&#x9;&#x9;tasks.Add(database.CreateContainerIfNotExistsAsync(containerProperties));&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;await Task.WhenAll(tasks);&#xD;&#xA;&#xD;&#xA;&#x9;for (var i = 0; i &lt; 40; i++)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;var containerProperties = new ContainerProperties($&quot;temp-{i}&quot;, partitionKeyPath: &quot;/PartitionKey&quot;);&#xD;&#xA;&#x9;&#x9;try&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;var container = database.GetContainer($&quot;temp-{i}&quot;);&#xD;&#xA;&#x9;&#x9;&#x9;await container.DeleteContainerAsync();&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;catch (CosmosException)&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;continue;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;}&#xD;&#xA;&#xD;&#xA;While my database has plenty of RUs, this code is still getting throttled.&#xD;&#xA;&#xD;&#xA;    CosmosException: Response status code does not indicate success: TooManyRequests (429); Substatus: 3200; ActivityId: e5797480-8cda-4123-b721-5731560c7669; Reason: ({&#xD;&#xA;      &quot;code&quot;: &quot;429&quot;,&#xD;&#xA;      &quot;message&quot;: &quot;Message: {\&quot;Errors\&quot;:[\&quot;Request rate is large. More Request Units may be needed, so no changes were made. Please retry this request later. Learn more: http://aka.ms/cosmosdb-error-429\&quot;]}\r\nActivityId: e5797480-8cda-4123-b721-5731560c7669, Request URI: /apps/ba11a36b-ba48-43cf-bfd9-7b2c8cf533da/services/a3491e68-7504-441b-a03f-d6a4acfe8b5e/partitions/d0e40c30-0561-42b5-badc-86a05e4aebf2/replicas/132440638817019063p, RequestStats: , SDK: Microsoft.Azure.Documents.Common/2.11.0&quot;&#xD;&#xA;    });&#xD;&#xA;&#xD;&#xA;Requests to create containers are throttled and status code 429 is returned. What's really confusing is that the error message makes a reference to the potentially insufficient RUs.&#xD;&#xA;&#xD;&#xA;The real reason for the throttling has to do with the number of containers created concurrently per unit of time and not RUs provisioned for the database. And that number is 5 containers per minute as it stands today. Keep that in mind. &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2020/cosmosdb%20-%20collections%20rate%20limitting/speed.limit.jpg&#xD;&#xA;  [2]: https://cosmos.azure.com/capacitycalculator/" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2020-09-09T05:47:00Z" PublishedUtc="2020-09-09T16:35:25.0386979Z" ModifiedUtc="2020-09-09T16:35:25.0230691Z" />
      <TagsPart Tags="CosmosDB" />
      <AutoroutePart Alias="cosmosdb-container-provisioning-throttling" UseCustomPattern="false" />
      <TitlePart Title="CosmosDB - container provisioning throttling" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=user-secrets-the-human-readable-version" Status="Published">
      <BodyPart Text="![enter image description here][1]&#xD;&#xA;&#xD;&#xA;When developing locally, there are many ways to store secrets locally without risk of receiving a GitHub notification about leaked keys and secrets. Environment variables, local files excluded from check-ins, user secrets with secret storage, etc. This post is about user secrets. If you have no experience with user secrets, [this Microsoft article][2] does a good job to go from zero to sixty in about 30 seconds. &#xD;&#xA;&#xD;&#xA;User secrets work just fine. Except if you don't like to read and memorize the mapping between GUIDs to project names, you'll have difficulty understanding what projects have their secrets stored on the file system. Imagine this:&#xD;&#xA;&#xD;&#xA;    4bddaed0-75ba-464a-94f1-917236f36c35&#xD;&#xA;    174f8024-a077-4411-8adf-8523f610ef47&#xD;&#xA;    ...&#xD;&#xA;&#xD;&#xA;What project is `174f8024-a077-4411-8adf-8523f610ef47` exactly? You get the idea.&#xD;&#xA;&#xD;&#xA;Unfortunately, the documentation only speaks about GUIDs as project identifiers. But what if I'd like an identifier that is human-readable *and* to match the project name? Not sure what about you, but for projects that require user secrets, I found those project names to be quite unique. That's an assumption. Right.&#xD;&#xA;&#xD;&#xA;The good news - `.csproj` files properties are MSBuild properties. Looking at the user secret definition for a given project:&#xD;&#xA;&#xD;&#xA;    &lt;PropertyGroup&gt;&#xD;&#xA;      &lt;TargetFramework&gt;netcoreapp3.1&lt;/TargetFramework&gt;&#xD;&#xA;      &lt;UserSecretsId&gt;174f8024-a077-4411-8adf-8523f610ef47&lt;/UserSecretsId&gt;&#xD;&#xA;    &lt;/PropertyGroup&gt;&#xD;&#xA;&#xD;&#xA;`UserSecretsId` is a variable assigned a horrific GUID. Instead of that monstrous value, we could use our project name. For the sake of this post, I'll call it `MyWonderfulProject`. The section change to&#xD;&#xA;&#xD;&#xA;    &lt;PropertyGroup&gt;&#xD;&#xA;      &lt;TargetFramework&gt;netcoreapp3.1&lt;/TargetFramework&gt;&#xD;&#xA;      &lt;UserSecretsId&gt;MyWonderfulProject&lt;/UserSecretsId&gt;&#xD;&#xA;    &lt;/PropertyGroup&gt;&#xD;&#xA;&#xD;&#xA;Inspecting `%APPDATA%\Microsoft\UserSecrets\` we'll find a folder called `MyWonderfulProject` with the `secrets.json` file. Great!&#xD;&#xA;&#xD;&#xA;Now, a project *might* be renamed. If you really insist on not changing the value of the `UserSecretsId` property ever, that's possible as well. This is where reserved [MSBuild properties][3] are coming in handy. One of those variables is `MSBuildProjectName`. Let's use it.&#xD;&#xA;&#xD;&#xA;    &lt;PropertyGroup&gt;&#xD;&#xA;      &lt;TargetFramework&gt;netcoreapp3.1&lt;/TargetFramework&gt;&#xD;&#xA;      &lt;UserSecretsId&gt;$(MSBuildProjectName)&lt;/UserSecretsId&gt;&#xD;&#xA;    &lt;/PropertyGroup&gt;&#xD;&#xA;&#xD;&#xA;Et voilà! Now we have the following in the secrets store:&#xD;&#xA;&#xD;&#xA;    4bddaed0-75ba-464a-94f1-917236f36c35&#xD;&#xA;    MyWonderfulProject  &lt;|-- Look! I know what project is using this folder!&#xD;&#xA;    ...&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;This works with Visual Studio 2019 (Manage User Secrets). Unfortunately, Rider has no built-in support for user secrets, and [.NET Core User Secrets plugin][4] has a [bug][5] that doesn't allow using MSBuild variables.&#xD;&#xA;&#xD;&#xA;**Update**: the wonderful [Maarten Balliauw][6] has raised a PR that is going to fix this and allow user secrets with MSBuild variables to be used with Rider! 🎉&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2020/user-secrets/lockers.png&#xD;&#xA;  [2]: https://docs.microsoft.com/en-us/aspnet/core/security/app-secrets?view=aspnetcore-3.1&amp;tabs=windows&#xD;&#xA;  [3]: https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild-reserved-and-well-known-properties?view=vs-2019&#xD;&#xA;  [4]: https://plugins.jetbrains.com/plugin/10183--net-core-user-secrets&#xD;&#xA;  [5]: https://github.com/Witik/RiderUserSecrets/issues/8&#xD;&#xA;  [6]: https://blog.maartenballiauw.be/" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2020-10-09T05:16:00Z" PublishedUtc="2020-10-12T17:30:39.096951Z" ModifiedUtc="2020-10-12T17:30:39.0781411Z" />
      <TagsPart Tags=".NET" />
      <AutoroutePart Alias="user-secrets-the-human-readable-version" UseCustomPattern="false" />
      <TitlePart Title="User Secrets, the human-readable version" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=automatic-queue-creation-for-function" Status="Published">
      <BodyPart Text="![header][1]&#xD;&#xA;&#xD;&#xA;Azure Functions are great. Take HTTP triggered Function. You make a request, it's passed into the Function code, the code is executed, and that's it. Simple. What does it take to deploy an HTTP-triggered function? Packaging and deploying it.&#xD;&#xA;&#xD;&#xA;    [FunctionName(&quot;HttpTriggerFunc&quot;)]&#xD;&#xA;    public async Task&lt;IActionResult&gt; Run(&#xD;&#xA;        [HttpTrigger(AuthorizationLevel.Function, &quot;get&quot;, &quot;post&quot;, Route = null)]&#xD;&#xA;        HttpRequest req, ILogger log)&#xD;&#xA;    {&#xD;&#xA;        log.LogInformation(&quot;C# HTTP trigger function processed a request.&quot;);&#xD;&#xA;&#xD;&#xA;        string name = req.Query[&quot;name&quot;];&#xD;&#xA;&#xD;&#xA;        return name != null&#xD;&#xA;            ? (ActionResult)new OkObjectResult($&quot;Hello, {name}&quot;)&#xD;&#xA;            : new BadRequestObjectResult(&quot;Please pass a name on the query string&quot;);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;If only all triggers were that simple. Let's take a queue triggered Function.&#xD;&#xA;&#xD;&#xA;Let's write a function that is triggered by incoming messages on a queue called `myqueue` and logs its label to mimic the message's processing. Here's how the code would look like:&#xD;&#xA;&#xD;&#xA;    [FunctionName(&quot;ServiceBusQueueTriggerCSharp&quot;)]                    &#xD;&#xA;    public Task Run([ServiceBusTrigger(&quot;myqueue&quot;)] Message message, ILogger log)&#xD;&#xA;    {&#xD;&#xA;        log.LogInformation($&quot;Received message with label: {message.Label}&quot;);&#xD;&#xA;        return Task.CompletedTask;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;What does it take to deploy a Service Bus triggered function? Packaging and deploying it? Unfortunately not that simple. The queue that we'd like the function to be listening to has to be provisioned first. But to trigger the function the message has to arrive from that queue. This means it has to be there in the first place before the function even runs. A queue-triggered function will only execute if there's a message, i.e. a queue has to be there. That's sort of a chicken and egg situation.&#xD;&#xA;&#xD;&#xA;The obvious solution is to provision the queue first and then deploy the function. While some even prefer this controlled infrastructure deployment, some prefer not to split the queue provision and the deployment of the function. I.e. have the function to create what's needed. What's gives?&#xD;&#xA;&#xD;&#xA;Sometimes, a brute force approach is an approach to take. If you're using statically defined Functions, have a look at using the `FunctionsHostBuilder` approach. It enables the generic host approach and DI container use with Functions. It also opens up the option of executing an arbitrary code when setting up dependencies. And it runs _before_ any trigger, upon function startup.&#xD;&#xA;&#xD;&#xA;    [assembly: FunctionsStartup(typeof(Startup))]&#xD;&#xA;    public class Startup : FunctionsStartup&#xD;&#xA;    {&#xD;&#xA;        public override void Configure(IFunctionsHostBuilder builder)&#xD;&#xA;        {&#xD;&#xA;          // DI setup&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;This is the spot that could be used to &quot;hack&quot; the provisioning of the necessary infrastructure! Adding a helper method to create the queue:&#xD;&#xA;&#xD;&#xA;    static async Task CreateTopology(IConfiguration configuration)&#xD;&#xA;    {&#xD;&#xA;        var connectionString = configuration.GetValue&lt;string&gt;(&quot;AzureWebJobsServiceBus&quot;); // this is the default connection string name&#xD;&#xA;        var managementClient = new ManagementClient(connectionString);&#xD;&#xA;        &#xD;&#xA;        if (!await managementClient.QueueExistsAsync(&quot;myqueue&quot;))&#xD;&#xA;        {&#xD;&#xA;            await managementClient.CreateQueueAsync(&quot;myqueue&quot;);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;All that's left is to call the helper method from the Configure class. Unfortunately, this would be calling an asynchronous helper method from a synchronous `Configure` method, which will require somewhat dirty implementation but hey, à la guerre comme à la guerre!&#xD;&#xA;&#xD;&#xA;    [assembly: FunctionsStartup(typeof(Startup))]&#xD;&#xA;    public class Startup : FunctionsStartup&#xD;&#xA;    {&#xD;&#xA;        public override void Configure(IFunctionsHostBuilder builder)&#xD;&#xA;        {&#xD;&#xA;          CreateTopology(builder.GetContext().Configuration).GetAwaiter().GetResult();&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;That's it. Now the function can be deployed, and no need to worry about queue deployment. The helper method is invoked once only when a function instance is created or scaled-out. A small price to pay to not worry about queue provisioning: the same approach can be applied to subscription-triggered functions.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2021/automatic-queue-creation-for-function/chicken-egg.jpg" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2021-01-08T07:41:25.2220651Z" PublishedUtc="2021-01-08T07:41:25.2220651Z" ModifiedUtc="2021-01-08T07:41:25.206462Z" />
      <TagsPart Tags="Azure,Functions,AzureServiceBus" />
      <AutoroutePart Alias="automatic-queue-creation-for-function" UseCustomPattern="false" />
      <TitlePart Title="Automatically create Service Bus trigger queue for Azure Function" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=automatic-nservicebus-topology-creation-for-function" Status="Published">
      <BodyPart Text="![enter image description here][1]&#xD;&#xA;&#xD;&#xA;**2021-01-19 update**: code for subscription was adjusted to ensure the correct default rule for subscription is created.&#xD;&#xA;&#xD;&#xA;In the previous post, [Automatically create Service Bus trigger queue for Azure Function][2], I've shown how to provision a `ServiceBusTrigger` queue from within a Function.&#xD;&#xA;&#xD;&#xA;In this post, we'll take that idea and push it further to something a bit more sophisticated - provisioning the topology necessary for NServiceBus endpoint hosted with Azure Function and using Azure Service Bus transport. If you haven't used NServiceBus or NServiceBus with Azure Functions, here's a [starting point][3] for you. NServiceBus can bring a few advantages over native Functions I'll leave to discover on your own. And now, let's have a look at what are the things we'll need to accomplish.&#xD;&#xA;&#xD;&#xA;Just as with the native Azure Function, a logical endpoint is represented by an input queue. That input queue needs to be created.&#xD;&#xA;&#xD;&#xA;Next, NServiceBus has centralized error and audit queues. While those are not difficult to create, it's more convenient to have those queues created by the first starting endpoint.&#xD;&#xA;&#xD;&#xA;Last is the pub/sub infrastructure. Azure Service Bus transport has a specific topology all endpoints adhere to. That includes a centralized topic, by default named `bundle-1` and each logical endpoint as a subscription. Upon startup, each endpoint subscribes to the events it's interested in using this infrastructure.&#xD;&#xA;&#xD;&#xA;With this information, let's start putting the pieces needed for the whole thing to work together.&#xD;&#xA;&#xD;&#xA;## Discovering endpoints&#xD;&#xA;&#xD;&#xA;As there might be one or more logical endpoints, the hard-coding queue name as it was done in the previous post is not ideal. An alternative would be to reflect the endpoint's name (queue name) at runtime when the Function App is bootstrapping everything.&#xD;&#xA;&#xD;&#xA;        var attribute = Assembly.GetExecutingAssembly().GetTypes()&#xD;&#xA;            .SelectMany(t =&gt; t.GetMethods())&#xD;&#xA;            .Where(m =&gt; m.GetCustomAttribute&lt;FunctionNameAttribute&gt;(false) != null)&#xD;&#xA;            .SelectMany(m =&gt; m.GetParameters())&#xD;&#xA;            .SelectMany(p =&gt; p.GetCustomAttributes&lt;ServiceBusTriggerAttribute&gt;(false))&#xD;&#xA;            .FirstOrDefault();&#xD;&#xA;&#xD;&#xA;With this code, we'll discover all `ServiceBusTriggerAttribute` applied to Azure Service Bus triggered functions. For each of these attributes, we'll have to &#xD;&#xA;&#xD;&#xA;1. Create a queue if it doesn't exist&#xD;&#xA;2. Create a subscription if it doesn't exist&#xD;&#xA;&#xD;&#xA;The caveat is that a subscription can only be created when a topic is found. Therefore a topic needs to be created first. Also, to make the topology work as the transport expects, each subscription should be auto-forwarding messages to the input queue it's associated with. And finally, the audit and error queues can be provisioned as well, completing the topology work necessary for each endpoint to be bootstrapped.&#xD;&#xA;&#xD;&#xA;## Putting it together&#xD;&#xA;&#xD;&#xA;Here's the helper method we'd be using:&#xD;&#xA;&#xD;&#xA;    static async Task CreateTopologyWithReflection(IConfiguration configuration, string topicName = &quot;bundle-1&quot;, string auditQueue = &quot;audit&quot;, string errorQueue = &quot;error&quot;)&#xD;&#xA;    {&#xD;&#xA;        var connectionString = configuration.GetValue&lt;string&gt;(&quot;AzureWebJobsServiceBus&quot;);&#xD;&#xA;        var managementClient = new ManagementClient(connectionString);&#xD;&#xA;&#xD;&#xA;        var attribute = Assembly.GetExecutingAssembly().GetTypes()&#xD;&#xA;            .SelectMany(t =&gt; t.GetMethods())&#xD;&#xA;            .Where(m =&gt; m.GetCustomAttribute&lt;FunctionNameAttribute&gt;(false) != null)&#xD;&#xA;            .SelectMany(m =&gt; m.GetParameters())&#xD;&#xA;            .SelectMany(p =&gt; p.GetCustomAttributes&lt;ServiceBusTriggerAttribute&gt;(false))&#xD;&#xA;            .FirstOrDefault();&#xD;&#xA;&#xD;&#xA;        if (attribute == null)&#xD;&#xA;        {&#xD;&#xA;            throw new Exception(&quot;No endpoint was found&quot;);&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        // there are endpoints, create a topic&#xD;&#xA;        if (!await managementClient.TopicExistsAsync(topicName))&#xD;&#xA;        {&#xD;&#xA;            await managementClient.CreateTopicAsync(topicName);&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        var endpointQueueName = attributes.First().QueueName;&#xD;&#xA;&#xD;&#xA;        if (!await managementClient.QueueExistsAsync(endpointQueueName))&#xD;&#xA;        {&#xD;&#xA;            await managementClient.CreateQueueAsync(endpointQueueName);&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        if (!await managementClient.SubscriptionExistsAsync(topicName, endpointQueueName))&#xD;&#xA;        {&#xD;&#xA;            var subscriptionDescription = new SubscriptionDescription(topicName, endpointQueueName)&#xD;&#xA;            {&#xD;&#xA;                ForwardTo = endpointQueueName,&#xD;&#xA;                UserMetadata = $&quot;Events {endpointQueueName} subscribed to&quot;&#xD;&#xA;            };&#xD;&#xA;            var ruleDescription = new RuleDescription&#xD;&#xA;            {&#xD;&#xA;                Filter = new FalseFilter()&#xD;&#xA;            };&#xD;&#xA;            await managementClient.CreateSubscriptionAsync(subscriptionDescription, ruleDescription);&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        if (!await managementClient.QueueExistsAsync(auditQueue))&#xD;&#xA;        {&#xD;&#xA;            await managementClient.CreateQueueAsync(auditQueue);&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        if (!await managementClient.QueueExistsAsync(errorQueue))&#xD;&#xA;        {&#xD;&#xA;            await managementClient.CreateQueueAsync(errorQueue);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;Next, this helper method needs to be involved in the Startup class:&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    [assembly: FunctionsStartup(typeof(Startup))]&#xD;&#xA;    public class Startup : FunctionsStartup&#xD;&#xA;    {&#xD;&#xA;        public override void Configure(IFunctionsHostBuilder builder)&#xD;&#xA;        {      &#xD;&#xA;            CreateTopology(builder.GetContext().Configuration).GetAwaiter().GetResult();&#xD;&#xA;&#xD;&#xA;            builder.UseNServiceBus(() =&gt;&#xD;&#xA;            {&#xD;&#xA;              var configuration = new ServiceBusTriggeredEndpointConfiguration(AzureServiceBusTriggerFunction.EndpointName);&#xD;&#xA;              configuration.Transport.SubscriptionRuleNamingConvention(type =&gt; type.Name);&#xD;&#xA;              return configuration;&#xD;&#xA;            });&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;In my test solutions, I've defined an endpoint named `ASBEndpoint` (`AzureServiceBusTriggerFunction.EndpointName` is assigned the name). Once Azure Function hosting the endpoint is deployed, the following topology is created:&#xD;&#xA;&#xD;&#xA;![topology][4]&#xD;&#xA;&#xD;&#xA;with the correct forwarding to the input queue&#xD;&#xA;&#xD;&#xA;![fording][5]&#xD;&#xA;&#xD;&#xA;## Subscribing to events&#xD;&#xA;&#xD;&#xA;In the endpoint, I've added an event and event handler.&#xD;&#xA;&#xD;&#xA;    public class SimpleEvent : IEvent { }&#xD;&#xA;&#xD;&#xA;    public class SimpleEventHandler : IHandleMessages&lt;SimpleEvent&gt;&#xD;&#xA;    {&#xD;&#xA;        readonly ILogger&lt;SimpleEvent&gt; logger;&#xD;&#xA;&#xD;&#xA;        public SimpleEventHandler(ILogger&lt;SimpleEvent&gt; logger)&#xD;&#xA;        {&#xD;&#xA;            this.logger = logger;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        public Task Handle(SimpleEvent message, IMessageHandlerContext context)&#xD;&#xA;        {&#xD;&#xA;            logger.LogInformation($&quot;{nameof(SimpleEventHandler)} invoked&quot;);&#xD;&#xA;            return Task.CompletedTask;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;NServiceBus automatically picks up and subscribes to all the events it finds handlers for. The subscription is expressed as a rule for each event. But this only happens when an endpoint is activated. This is not the case with message triggered Function endpoint. Luckily, there's a trick with `TimerTrigger` we can apply.&#xD;&#xA;&#xD;&#xA;## Timer trigger trick&#xD;&#xA;&#xD;&#xA;Normally, `TimerTirgger` is executed periodically using a schedule defined using the CRON expression. In addition to that, there's also a flag to force a time-triggered function to run a single time when a timer triggered function is deployed. With this option, we can leverage a timer triggered function to run once upon deployment and stay dormant for a year. When the function executes, it will dispatch the `ForceAutoSubscription` control message and cause the endpoint to load and auto-subscribe to the `SimpleEvent`.&#xD;&#xA;&#xD;&#xA;Control message definition:&#xD;&#xA;&#xD;&#xA;    public class ForceAutoSubscription : IMessage { }&#xD;&#xA;&#xD;&#xA;Timer function:&#xD;&#xA;&#xD;&#xA;    public class TimerFunc&#xD;&#xA;    {&#xD;&#xA;        readonly IFunctionEndpoint functionEndpoint;&#xD;&#xA;&#xD;&#xA;        public TimerFunc(IFunctionEndpoint functionEndpoint)&#xD;&#xA;        {&#xD;&#xA;            this.functionEndpoint = functionEndpoint;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        [FunctionName(&quot;TimerFunc&quot;)]&#xD;&#xA;        public async Task Run([TimerTrigger(&quot;* * * 1 1 *&quot;, RunOnStartup = true)]TimerInfo myTimer,&#xD;&#xA;            ILogger logger, ExecutionContext executionContext)&#xD;&#xA;        {&#xD;&#xA;            var sendOptions = new SendOptions();&#xD;&#xA;            sendOptions.SetHeader(Headers.ControlMessageHeader, bool.TrueString);&#xD;&#xA;            sendOptions.SetHeader(Headers.MessageIntent, MessageIntentEnum.Send.ToString());&#xD;&#xA;            sendOptions.RouteToThisEndpoint();&#xD;&#xA;            await functionEndpoint.Send(new ForceAutoSubscription(), sendOptions, executionContext, logger);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;Note: `ForceAutoSubscription` is a control message and will neither require a message handler to be defined nor will it cause recoverability to be executed.&#xD;&#xA;&#xD;&#xA;The final result is what we needed. The endpoint is subscribed to `SimpleEvent`, and it's part of the topology. This means there's a rule under the endpoint's subscription.&#xD;&#xA;&#xD;&#xA;![event-subscription][6]&#xD;&#xA;&#xD;&#xA;## Summary&#xD;&#xA;&#xD;&#xA;With this in place, we can bootstrap NServiceBus Function hosted endpoint using Azure Service Bus transport (preview 0.5 and later) w/o the need to manually provision the topology.&#xD;&#xA;&#xD;&#xA;P.S.: if you're interested in Azure Functions supporting an opt-in queue creation, here's a [feature request][7] you could upvote.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2021/automatic-nservicebus-topology-creation-for-function/pipes.jpg&#xD;&#xA;  [2]: https://weblogs.asp.net/sfeldman/automatic-queue-creation-for-function&#xD;&#xA;  [3]: https://docs.particular.net/previews/azure-functions-service-bus&#xD;&#xA;  [4]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2021/automatic-nservicebus-topology-creation-for-function/topology.png&#xD;&#xA;  [5]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2021/automatic-nservicebus-topology-creation-for-function/forwarding.png&#xD;&#xA;  [6]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2021/automatic-nservicebus-topology-creation-for-function/image.png&#xD;&#xA;  [7]: https://github.com/Azure/azure-functions-servicebus-extension/issues/130" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2021-01-15T04:36:00Z" PublishedUtc="2021-02-16T21:36:44.3375684Z" ModifiedUtc="2021-02-16T21:36:44.3199164Z" />
      <TagsPart Tags="Azure,AzureServiceBus,Functions,NServiceBus" />
      <AutoroutePart Alias="automatic-nservicebus-topology-creation-for-function" UseCustomPattern="false" />
      <TitlePart Title="Automatically provision NServiceBus Service Bus Function endpoint topology" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=azure-functions-elevated" Status="Published">
      <BodyPart Text="A recent talk I gave online at ServerlessDays Amsterdam&#xD;&#xA;&#xD;&#xA;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/oxsDVjxGGfc?start=3288&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2021-06-02T18:42:04.6830917Z" PublishedUtc="2021-06-02T18:42:04.6830917Z" ModifiedUtc="2021-06-02T18:42:04.2581522Z" />
      <TagsPart Tags="Azure,AzureFunctions,NServiceBus" />
      <AutoroutePart Alias="azure-functions-elevated" UseCustomPattern="false" />
      <TitlePart Title="Azure Functions Elevated" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=functions-isolated-worker-sending-multiple-messages" Status="Published">
      <BodyPart Text="![enter image description here][1]&#xD;&#xA;&#xD;&#xA;The new Azure Functions SDK for Isolated Worker (process) has been introduced around .NET 5. While it's still in flux despite being GA-ed, it's gaining more and more popularity. And yet, there are still some sharp edges you should be careful with and validate that everything you're using with the older SDK, In-Process, is offered with the new SDK. Or at least there's a replacement.&#xD;&#xA;&#xD;&#xA;Today, I've stumbled upon a StackOverflow question about `IAsyncCollector` and Service Bus messages. `IAsyncCollector,` as its synchronous counterpart `ICollector` offers the comfort of output binding and returning multiple items. For example, with Azure Service Bus, one can send out multiple messages from the executing function. Quite handy, and with the In-Process SDK, it looks like the following. The function's signature contains a collector (I call it dispatcher) that can be used to &quot;add&quot; messages. Those are actually getting dispatched to the queue the `ServiceBus` attribute is configured with by adding messages. Which, in this case, is a queue called `dest`.&#xD;&#xA;&#xD;&#xA;    [FunctionName(&quot;Concierge&quot;)]&#xD;&#xA;    public async Task&lt;IActionResult&gt; Handle([HttpTrigger(AuthorizationLevel.Function,&quot;post&quot;, Route = &quot;receive&quot;)] HttpRequest req,&#xD;&#xA;        [ServiceBus(&quot;dest&quot;, Connection = &quot;AzureServiceBus&quot;)] IAsyncCollector&lt;ServiceBusMessage&gt; dispatcher)&#xD;&#xA;&#xD;&#xA;And sending messages:&#xD;&#xA;&#xD;&#xA;    for (var i = 0; i &lt; 10; i++)&#xD;&#xA;    {&#xD;&#xA;       var message = new ServiceBusMessage($&quot;Message #{i}&quot;);&#xD;&#xA;       await collector.AddAsync(serviceBusMessage);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;Straight forward and simple. But how do you do the same with the new Isolated Worker (out of process) SDK?&#xD;&#xA;&#xD;&#xA;Not the same way. The new SDK doesn't currently support native SDK types. Therefore types such as `ServiceBusMessage` are not supported. Also, SDK Service Bus clients are not available directly. So functions need to marshal data as strings or byte arrays to be able to send those. And receive as well. But we're focusing on sending. So what's the way to send those multiple messages?&#xD;&#xA;&#xD;&#xA;The official documentation does mention [multiple output binding][2]. But that's in the context of using multiple *different* output bindings. To output multiple items to the **same** output binding, we need to resort to a bit of tedious work. &#xD;&#xA;&#xD;&#xA;First, we'll need to serialize our messages. Then we'll dispatch those serialized objects using an output binding, connected to a collection property. Here's an example:&#xD;&#xA;&#xD;&#xA;    [Function(&quot;OneToMany&quot;)]&#xD;&#xA;    public static DispatchedMessages Run([ServiceBusTrigger(&quot;myqueue&quot;, &#xD;&#xA;        Connection = &quot;AzureServiceBus&quot;)] string myQueueItem, FunctionContext context)&#xD;&#xA;    {&#xD;&#xA;      // Generate 5 messages&#xD;&#xA;      var messages = new List&lt;MyMessage&gt;();&#xD;&#xA;      for (var i = 0; i &lt; 5; i++)&#xD;&#xA;      {&#xD;&#xA;          var message = new MyMessage { Value = $&quot;Message #{i}&quot; };&#xD;&#xA;          messages.Add(message);&#xD;&#xA;      }&#xD;&#xA;&#xD;&#xA;      return new DispatchedMessages&#xD;&#xA;      { &#xD;&#xA;          Messages = messages.Select(x =&gt; JsonSerializer.Serialize(x)) &#xD;&#xA;      };&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;Each message of type `MyMessage` is serialized first.&#xD;&#xA;&#xD;&#xA;    class MyMessage&#xD;&#xA;    {&#xD;&#xA;        public string Value { get; set; }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;And then, we return an object of `DispatchedMessage` where the binding glue is:&#xD;&#xA;&#xD;&#xA;    public class DispatchedMessages&#xD;&#xA;    {&#xD;&#xA;        [ServiceBusOutput(queueOrTopicName: &quot;dest&quot;, Connection = &quot;AzureServiceBus&quot;)]&#xD;&#xA;        public IEnumerable&lt;string&gt; Messages { get; set; }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;This object will be returned from the function and marshalled back to the SDK code that will take care to enumerate over the `Messages` property, taking each string and passing it as the body value to the newly constructed `ServiceBusMessage`. With the help of the `ServiceBusOutput` attribute, Functions SDK knows where to send the message and where to find the connection string. Note that w/o specifying the connection string name, the SDK will attempt to load the connection string from the variable/key named `AzureWebJobsServiceBus`. This means that we can have multiple dispatchers, similar to the in-process SDK multiple collectors, by having a property per destination/namespace on the returned type.&#xD;&#xA;&#xD;&#xA;And just like this, we can kick off the function and dispatch multiple messages with the new Isolated Worker SDK.&#xD;&#xA;&#xD;&#xA;![enter image description here][3]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2021/functions-isolated-worker-sending-multiple-messages/collector.jpg&#xD;&#xA;  [2]: https://docs.microsoft.com/en-us/azure/azure-functions/dotnet-isolated-process-guide#multiple-output-bindings&#xD;&#xA;  [3]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2021/functions-isolated-worker-sending-multiple-messages/result.png" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2021-09-14T06:48:00Z" PublishedUtc="2021-09-14T07:00:39.5752697Z" ModifiedUtc="2021-09-14T07:00:39.5596396Z" />
      <TagsPart Tags="Functions,AzureServiceBus" />
      <AutoroutePart Alias="functions-isolated-worker-sending-multiple-messages" UseCustomPattern="false" />
      <TitlePart Title="Azure Functions Isolated Worker - Sending multiple messages" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=asb-message-to-blob" Status="Published">
      <BodyPart Text="About 5+ years ago I blogged about [turning messages into audit blobs][1]. Back then, it was for Storage Queue messages and the early Azure Functions implementation that required portal configuration. Since then, Storage Queues has been replaced by Azure Service Bus and Azure Functions has gained the ability to declare everything through the code. And not only that but also in two different ways, using&#xD;&#xA;&#xD;&#xA;1. In-Process SDK&#xD;&#xA;1. Isolated Worker SDK (out-of-process)&#xD;&#xA;&#xD;&#xA;The concept hasn't changed much but the the code did become somewhat simpler.&#xD;&#xA;&#xD;&#xA;**In-Process SDK**&#xD;&#xA;&#xD;&#xA;    public static class MessageTriggeredFunction&#xD;&#xA;    {&#xD;&#xA;        [FunctionName(nameof(MessageTriggeredFunction))]&#xD;&#xA;        public static async Task Run(&#xD;&#xA;            [ServiceBusTrigger(&quot;myqueue&quot;, Connection = &quot;ServiceBusConnectionString&quot;)]string payload,&#xD;&#xA;            string messageId,&#xD;&#xA;            [Blob(&quot;messages/{messageId}.txt&quot;, FileAccess.Write, Connection = &quot;StorageAccountConnectionString&quot;)] Stream output)&#xD;&#xA;        {&#xD;&#xA;            await output.WriteAsync(Encoding.UTF8.GetBytes(payload));&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;**Isolated Worker SDK**&#xD;&#xA;&#xD;&#xA;    public class MessageTriggeredFunctionIsolated&#xD;&#xA;    {&#xD;&#xA;       [Function(nameof(MessageTriggeredFunctionIsolated))]&#xD;&#xA;       [BlobOutput(&quot;messages/{messageId}.txt&quot;, Connection = &quot;StorageAccountConnectionString&quot;)]&#xD;&#xA;       public string Run(&#xD;&#xA;           [ServiceBusTrigger(&quot;myqueue&quot;, Connection = &quot;ServiceBusConnectionString&quot;)] string payload,&#xD;&#xA;           string messageId)&#xD;&#xA;      {&#xD;&#xA;                return payload;&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;The two snippets will result in the same outcome - a message will trigger the function and cause a blob to be generated and named as `message-id.txt` where `message-id` will be the physical message id.&#xD;&#xA;&#xD;&#xA;  [1]: https://weblogs.asp.net/sfeldman/azure-functions-to-make-audit-queue-and-auditors-happy" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2022-02-28T06:26:31.3319464Z" PublishedUtc="2022-02-28T06:26:31.3319464Z" ModifiedUtc="2022-02-28T06:26:31.3163162Z" />
      <TagsPart Tags="AzureServiceBus,Functions" />
      <AutoroutePart Alias="asb-message-to-blob" UseCustomPattern="false" />
      <TitlePart Title="Service Bus Message to Blob" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=executing-azure-timer-function-manually" Status="Published">
      <BodyPart Text="![enter image description here][1]&#xD;&#xA;&#xD;&#xA;Azure timer triggered. Functions are convenient for automated execution. With the specified time interval, a function gets to execute when specified and then sleeps until the subsequent execution.&#xD;&#xA;&#xD;&#xA;But what happens when a function needs to be executed on demand? For example, during development, when debugging the logic and want to kick off a function right away rather than waiting?&#xD;&#xA;&#xD;&#xA;That's possible with the `TimerTrigger` that accepts an additional parameter, `RunOnStartup`. Assign it a value of `true`, and the function will be executed when the Function App starts. You might want to wrap it with `#if DEBUG` to ensure it gets executed upon each deployment or restarting a Function/Function App in production.&#xD;&#xA;&#xD;&#xA;    [FunctionName(nameof(MyTimerTrigger))]&#xD;&#xA;    public async Task RunAsync([TimerTrigger(&quot;0 0 */12 * * *&quot;&#xD;&#xA;    #if DEBUG&#xD;&#xA;      , RunOnStartup = true&#xD;&#xA;    #endif&#xD;&#xA;    )] TimerInfo myTimer, ExecutionContext executionContext)&#xD;&#xA;    {&#xD;&#xA;     // function code&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;That's great, but what if I need to force the function to execute not right away? For example, my function executes every 12 hours (`&quot;0 0 */12 * * *&quot;`), and I need to force it to run earlier than that?&#xD;&#xA;&#xD;&#xA;One way is to use the CRON expression from a configuration, update the configuration and restart the Function. But that's clunky and inconvenient. A better way is to force the function to execute by making a request through the administrative API.&#xD;&#xA;&#xD;&#xA;An HTTP request to the administrative API with a master key will trigger the function execution. The URL is always of the following format:&#xD;&#xA;&#xD;&#xA;`https://&lt;function-app&gt;.azurewebsites.net/admin/functions/&lt;function-name&gt;`&#xD;&#xA;&#xD;&#xA;For example, https://my-test-funcapp.azurewebsites.net/admin/functions/MyTimerTrigger&#xD;&#xA;&#xD;&#xA;The content to POST-ed for a timer-triggered function can be an empty JSON, `&quot;{}&quot;`.&#xD;&#xA;The master key can be found under the Function App Keys section. Careful with the value, do not share or commit it. The value should be passed with the header `x-functions-key`. &#xD;&#xA;&#xD;&#xA;Note: locally, the `x-functions-key` header is not required.&#xD;&#xA;&#xD;&#xA;Upon successful execution, HTTP response code 202 Accepted will be returned.&#xD;&#xA;&#xD;&#xA;Conveniently enough, this works on _any_ non-HTTP triggered function and on v3 and v4 In-Process SDK and Isolated Worker SDK.&#xD;&#xA;&#xD;&#xA;While this little gem is [documented](https://docs.microsoft.com/en-us/azure/azure-functions/functions-manually-run-non-http), it deserves more publicity it brings some excellent options to the table when it comes to invoking non-HTTP functions on demand.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2022/executing-azure-timer-function-manually/screwdrivers.jpg" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2022-03-21T06:34:00Z" PublishedUtc="2022-03-21T06:38:26.0262736Z" ModifiedUtc="2022-03-21T06:38:25.9950352Z" />
      <TagsPart Tags="Functions,Azure" />
      <AutoroutePart Alias="executing-azure-timer-function-manually" UseCustomPattern="false" />
      <TitlePart Title="Executing Azure Timer function manually" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=impersonating-events" Status="Published">
      <BodyPart Text="![enter image description here][1]&#xD;&#xA;&#xD;&#xA;Azure Service Bus queues and subscriptions are an excellent way to process messages using competing consumers. But it can also get really tricky. Let's look at a scenario where a single event needs to be processed by two services. For this example, I'll use a process of an agent being assigned to a case. The requirement is pretty straightforward. When an agent is assigned to a case, we should send an email notifying the agent. In my system, I've designed it the way that when the event of assignment (`AgentAssigned`) is taking place, there are two event handlers that would react to it:&#xD;&#xA;&#xD;&#xA;1. Update the querying data store with the information about the assignment to be able to look up agent assignments, and&#xD;&#xA;1. Notify the agent about the assignment with some case details.&#xD;&#xA;&#xD;&#xA;![enter image description here][2]&#xD;&#xA;&#xD;&#xA;It's all great except for one problem. When the second handler runs first, there's still no association between the agent and the case. No email can go out as there's nothing to notify about. Or worse, when another event, `AgentReassigned`, took place but hasn't been processed by the first handler. In this case, we'd be sending an email notification to the original agent who's no longer on the case. The problem is quite apparent - we can't have competing consumers for the same event. And the order of execution is clearly essential.&#xD;&#xA;&#xD;&#xA;One of the solutions is to introduce an additional event, `AgentAssignedCompleted`, which would be triggered by the first handler when the querying data store is updated with the information about the case and the agent. And have the second handler subscribe to this new event rather than the original one.&#xD;&#xA;&#xD;&#xA;But what if I have more than one event to notify about where I shouldn't have competing consumers? And the original event would need to be duplicated as-is as the same information would be required. I really don't want to do that. The good news is there's no need. Azure Service Bus is robust enough to allow message impersonation. How does it work?&#xD;&#xA;&#xD;&#xA;The first handler, upon its completion, will dispatch a new event. We'll use a convention of `{OriginalMessageType}Completed`. In the case of `AgentReassigned`, the newly dispatched event will be `AgentAssignedCompleted`. But what we'll do is stamp the new message headers with the _original_ message type and set the payload to the original message payload.&#xD;&#xA;&#xD;&#xA;    var outgoingMessage = new ServiceBusMessage(BinaryData.FromObjectAsJson(message))&#xD;&#xA;    {&#xD;&#xA;    &#x9;ApplicationProperties =&#xD;&#xA;    &#x9;{&#xD;&#xA;    &#x9;&#x9;{ &quot;EventType&quot;, $&quot;{nameof(ConsultantReassigned)}Completed&quot; },&#xD;&#xA;    &#x9;&#x9;{ &quot;OriginalEventType&quot;, typeof(ConsultantReassigned).FullName }&#xD;&#xA;    &#x9;}&#xD;&#xA;    };&#xD;&#xA;    await sender.SendMessageAsync(outgoingMessage);&#xD;&#xA;&#xD;&#xA;The subscription we'll create for the 2nd handler will subscribe to the `AgentAssignedCompleted` event type, using SQL filter `EventType='ConsultantReassignedCompleted'`. This will ensure that copies of the messages of `ConsultantReassignedCompleted` will be stored under the subscription.&#xD;&#xA;&#xD;&#xA;And here's the trick, we'll use SQL filter **action**to replace `EventType` of the message that will be given to the subscription if it matches the condition, back to the original message type using the following instruction: `SET EventType=OriginalEventType; REMOVE OriginalEventType;.` With this action, any message that has satisfied the SQL filter will have its header `EventType` modified to the header's value `OriginalEventType`, removing the temporary `OriginalEventType` after that.&#xD;&#xA;&#xD;&#xA;When the 2nd handler receives messages from this subscription, the type of the message indicated by `EventType` will be the original `ConsultantReassigned` event rather than the modified `ConsultantReassignedCompleted` type. And the payload will be the original `ConsultantReassigned` payload.&#xD;&#xA;&#xD;&#xA;![enter image description here][3]&#xD;&#xA;&#xD;&#xA;### Provisioning&#xD;&#xA;&#xD;&#xA;There are several ways. Manually, using a tool such as ServiceBus Explorer, or scripted using Az CLI or Bicep. Bicep seems to have a [bug](https://github.com/Azure/bicep/issues/6557), but [Az CLI](https://docs.microsoft.com/en-us/cli/azure/servicebus/topic/subscription/rule?view=azure-cli-latest#az-servicebus-topic-subscription-rule-create) works great. This is what it would look like:&#xD;&#xA;&#xD;&#xA;    az servicebus topic subscription rule create --resource-group 'MyGroup' --namespace-name 'MyNamespace'&#xD;&#xA;        --topic-name 'tva.events' --subscription-name 'Notifications' --name ConsultantReassignedCompleted&#xD;&#xA;        --filter-sql-expression=&quot;EventType='ConsultantReassignedCompleted'&quot; &#xD;&#xA;        --action-sql-expression='SET EventType=OriginalEventType; REMOVE OriginalEventType;'&#xD;&#xA;&#xD;&#xA;## Is this necessary?&#xD;&#xA;&#xD;&#xA;It really depends. You could create Additional `xxxxCompleted` types and duplicate all the properties from the original message types if you'd like. We can skip that and keep only the original events that matter, enabling ordered processing by tweaking the provisioned topology with event impersonation.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2022/impersonating-events/mask.jpg&#xD;&#xA;  [2]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2022/impersonating-events/no-order.jpg&#xD;&#xA;  [3]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2022/impersonating-events/order.jpg" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2022-04-15T07:47:00Z" PublishedUtc="2022-04-15T07:55:56.6235649Z" ModifiedUtc="2022-04-15T08:12:48.7150291Z" />
      <TagsPart Tags="Azure,AzureServiceBus" />
      <AutoroutePart Alias="impersonating-events" UseCustomPattern="false" />
      <TitlePart Title="Impersonating Events" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=sagas-with-azure-service-bus" Status="Published">
      <BodyPart Text="## Introduction&#xD;&#xA;&#xD;&#xA;Handling messages out of order is always tricky. The asynchronous nature of messaging makes it challenging. On top of that, systems in the real world are messy and unpredictable. That's why handling workflows always brings more complexity than just handling messages. To illustrate the challenge, I'll use a scenario where my workflow depends on two different services.&#xD;&#xA;&#xD;&#xA;   1. Payments&#xD;&#xA;   1. Shipping&#xD;&#xA;&#xD;&#xA;To successfully complete an order, I'll need to handle a message from each service. `PaymentAccepted` from the Payments service and `ItemShipped` from the Shipping service. The order can be considered successfully completed only when the two messages are received. The absence of one of the messages would indicate a failed state and require a compensating action. The compensating action will depend on which one of the two messages has already been handled. I'll leave the details of the compensating action out of this post to keep it somewhat light.&#xD;&#xA;&#xD;&#xA;## Setting the expectations&#xD;&#xA;&#xD;&#xA;One of the assumptions I'll make is how we handle a given order. Both the payment and the shipping services would need to use a correlation ID to connect the things together. This could be an order ID that should be unique. Another assumption is how to handle messages out of order over time. This is where the [saga pattern](https://docs.microsoft.com/en-us/azure/architecture/reference-architectures/saga/saga). An important aspect to note is that it will require persisting the state because we'll deal with time. And while we could leverage an external storage/database service with Azure Service Bus, this is unnecessary, thanks to a feature called [Message Sessions](https://docs.microsoft.com/en-us/azure/service-bus-messaging/message-sessions). While Message Sessions is more commonly used for FIFO scenarios where the message processing order has to be the same as the message sending order, my choice of Message Sessions was not driven by that. An additional property of the Message Sessions feature that is frequently overlooked is the ability to have a state associated with a given session. The state is an arbitrary object kept on the broker and associated with the session ID. The state can event exist w/o any messages for the session being around. This session state can be accessed by the session ID and can hold up to a single message size of data.&#xD;&#xA;&#xD;&#xA;## Implementation&#xD;&#xA;&#xD;&#xA;With all this in mind, let's get to the implementation. Each of the two services, as mentioned above, will post a message. The messages will always indicate the order ID as a correlation ID and set the message's `SessionId` to this value. I'll use a specific GUID as the order ID and store it in a shared project under `Correlation.Id` to make the demo simple.&#xD;&#xA;&#xD;&#xA;    public static class Correlation&#xD;&#xA;    {&#xD;&#xA;        public const string Id = &quot;77777777-0000-0000-0000-000000000000&quot;;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;To mimic the real world where messages can come out of order and at different times, the Shipping service will post a message with a delay.&#xD;&#xA;&#xD;&#xA;    await publisher.ScheduleMessageAsync(new ServiceBusMessage(&quot;Shipping OK&quot;)&#xD;&#xA;    {&#xD;&#xA;        SessionId = Correlation.Id,&#xD;&#xA;        ApplicationProperties = { { &quot;MessageType&quot;, &quot;ItemShipped&quot; } },&#xD;&#xA;    }, DateTimeOffset.Now.Add(TimeSpan.FromSeconds(7)));&#xD;&#xA;&#xD;&#xA;Notice the `MessageType` header. I'll use topics and subscriptions, filtering out messages based on the `MessageType` header. Similar code but without delay will be published an even from the Payments service.&#xD;&#xA;&#xD;&#xA;    await publisher.SendMessageAsync(new ServiceBusMessage(&quot;Payment OK&quot;)&#xD;&#xA;    {&#xD;&#xA;        SessionId = Correlation.Id,&#xD;&#xA;        ApplicationProperties = { { &quot;MessageType&quot;, &quot;PaymentAccepted&quot; }  }&#xD;&#xA;    });&#xD;&#xA;&#xD;&#xA;When these two are executed, `PaymentAccepted` will be delivered right away and `ItemShipped` after 7 seconds. And now to the saga implementation that will handle these messages coming out of order at different times and the option that not always both messages will make it.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;## Saga implementation&#xD;&#xA;&#xD;&#xA;As mentioned earlier, the saga will be implemented using Message Sessions. To process session messages, the SDK provides a `SessionProcessor`. To see messages flow in a way that is easier to digest, I'll set the number of sessions to handle to 1. Of course, we'd not want to handle a single session but instead multiple sessions in the real world.&#xD;&#xA;&#xD;&#xA;    var options = new ServiceBusSessionProcessorOptions&#xD;&#xA;    {&#xD;&#xA;        MaxConcurrentSessions = 1,&#xD;&#xA;        MaxConcurrentCallsPerSession = 1,&#xD;&#xA;        SessionIdleTimeout = TimeSpan.FromSeconds(15)&#xD;&#xA;    };&#xD;&#xA;    var processor = client.CreateSessionProcessor(topicName: &quot;orchestration&quot;, subscriptionName: &quot;orchestrator&quot;, options);&#xD;&#xA;&#xD;&#xA;Not that I'm using a topic and a subscription. You could also use a queue or some other topology. Here's how I've arranged my topology for this demo:&#xD;&#xA;&#xD;&#xA;    orchestration (topic)&#xD;&#xA;    │&#xD;&#xA;    └────orchestrator (subscription)&#xD;&#xA;         │&#xD;&#xA;         ├────ItemShipped (rule)&#xD;&#xA;         │&#xD;&#xA;         ├────PaymentAccepted (rule)&#xD;&#xA;         │&#xD;&#xA;         └────Timeout (rule)&#xD;&#xA;&#xD;&#xA;Notice the `Timeout` rule. This will be needed whenever we are waiting for the arrival of the missing messages. Timeouts will be our postponing of saga execution until either all messages will be handled or we'll reach the condition where no more waiting can occur. Then, a compensating action has to be executed as we've given up.&#xD;&#xA;&#xD;&#xA;A session has several lifecycle events that can take place. Those are:&#xD;&#xA;&#xD;&#xA;    processor.SessionInitializingAsync += args =&gt;&#xD;&#xA;    {&#xD;&#xA;        WriteLine($&quot;Handling session with ID: {args.SessionId}&quot;);&#xD;&#xA;        return Task.CompletedTask;&#xD;&#xA;    };&#xD;&#xA;    &#xD;&#xA;    processor.SessionClosingAsync += args =&gt;&#xD;&#xA;    {&#xD;&#xA;        WriteLine($&quot;Closing session with ID: {args.SessionId}&quot;);&#xD;&#xA;        return Task.CompletedTask;&#xD;&#xA;    };&#xD;&#xA;    &#xD;&#xA;    processor.ProcessErrorAsync += args =&gt;&#xD;&#xA;    {&#xD;&#xA;        WriteLine($&quot;Error: {args.Exception}&quot;, warning: true);        &#xD;&#xA;        return Task.CompletedTask;&#xD;&#xA;    };&#xD;&#xA;&#xD;&#xA;And the important one, `ProcessMessageAsync`. Again, it's a bit overwhelming, so give it a quick look and head over to the explanation below.&#xD;&#xA;&#xD;&#xA;    processor.ProcessMessageAsync += async args =&gt;&#xD;&#xA;    {&#xD;&#xA;        // (1)&#xD;&#xA;        var message = args.Message;&#xD;&#xA;        var messageType = message.ApplicationProperties[&quot;MessageType&quot;];&#xD;&#xA;        WriteLine($&quot;Got a message of type: {messageType} for session with ID {args.SessionId}&quot;);&#xD;&#xA;    &#xD;&#xA;        // (2)&#xD;&#xA;        var sessionState = await args.GetSessionStateAsync();&#xD;&#xA;        var state = sessionState is null&#xD;&#xA;            ? new State()&#xD;&#xA;            : sessionState.ToObject&lt;State&gt;(new JsonObjectSerializer())!;&#xD;&#xA;    &#xD;&#xA;        // (3)&#xD;&#xA;        if (state.Completed)&#xD;&#xA;        {&#xD;&#xA;            WriteLine($&quot;Completing the process for Order with correlation ID {message.SessionId}&quot;);&#xD;&#xA;    &#xD;&#xA;            var publisher = client.CreateSender(&quot;orchestration&quot;);&#xD;&#xA;            await publisher.SendMessageAsync(new ServiceBusMessage($&quot;Orchestration for Order with session ID {message.SessionId} is completed&quot;));&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        Func&lt;State, Task&gt; ExecuteAction = messageType switch&#xD;&#xA;        {&#xD;&#xA;            // (4)&#xD;&#xA;            &quot;PaymentAccepted&quot; =&gt; async delegate&#xD;&#xA;            {&#xD;&#xA;                state.PaymentReceived = true;&#xD;&#xA;                await SetTimeoutIfNecessary(client, args, state, TimeSpan.FromSeconds(5));&#xD;&#xA;            },&#xD;&#xA;            &quot;ItemShipped&quot; =&gt; async delegate&#xD;&#xA;            {&#xD;&#xA;                state.ItemShipped = true;&#xD;&#xA;                await SetTimeoutIfNecessary(client, args, state, TimeSpan.FromSeconds(5));&#xD;&#xA;            },&#xD;&#xA;            // (5)&#xD;&#xA;            &quot;Timeout&quot; =&gt; async delegate&#xD;&#xA;            {&#xD;&#xA;                if (state.Completed || sessionState is null)&#xD;&#xA;                {&#xD;&#xA;                    WriteLine($&quot;Orchestration ID {args.SessionId} has completed. Discarding timeout.&quot;);&#xD;&#xA;                    return;&#xD;&#xA;                }&#xD;&#xA;                &#xD;&#xA;                if (state.RetriesCount &lt; 3)&#xD;&#xA;                {&#xD;&#xA;                    await SetTimeoutIfNecessary(client, args, state, TimeSpan.FromSeconds(5));&#xD;&#xA;                }&#xD;&#xA;                else&#xD;&#xA;                {&#xD;&#xA;                    WriteLine($&quot;Exhausted all retries ({state.RetriesCount}). Executing compensating action and completing session with ID {args.SessionId}&quot;, warning: true);&#xD;&#xA;                    // Compensating action here&#xD;&#xA;                    await args.SetSessionStateAsync(null);&#xD;&#xA;                }&#xD;&#xA;            },&#xD;&#xA;            _ =&gt; throw new Exception($&quot;Received unexpected message type {messageType} (message ID: {message.MessageId})&quot;)&#xD;&#xA;        };&#xD;&#xA;    &#xD;&#xA;        await ExecuteAction(state);&#xD;&#xA;    &#xD;&#xA;        static async Task SetTimeoutIfNecessary(ServiceBusClient client, ProcessSessionMessageEventArgs args, State state, TimeSpan timeout)&#xD;&#xA;        {&#xD;&#xA;            if (state.Completed)&#xD;&#xA;            {&#xD;&#xA;                WriteLine($&quot;Orchestration with session ID {args.SessionId} has successfully completed. Sending notification (TBD).&quot;);&#xD;&#xA;                await args.SetSessionStateAsync(null);&#xD;&#xA;                return;&#xD;&#xA;            }&#xD;&#xA;    &#xD;&#xA;            WriteLine($&quot;Scheduling a timeout to check in {timeout}&quot;);&#xD;&#xA;    &#xD;&#xA;            var publisher = client.CreateSender(&quot;orchestration&quot;);&#xD;&#xA;            await publisher.ScheduleMessageAsync(new ServiceBusMessage&#xD;&#xA;            {&#xD;&#xA;                SessionId = args.Message.SessionId,&#xD;&#xA;                ApplicationProperties = { { &quot;MessageType&quot;, &quot;Timeout&quot; } }&#xD;&#xA;            }, DateTimeOffset.Now.Add(timeout));&#xD;&#xA;    &#xD;&#xA;            state.RetriesCount++;&#xD;&#xA;            await args.SetSessionStateAsync(BinaryData.FromObjectAsJson(state));&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;What this code is doing is the following:&#xD;&#xA;&#xD;&#xA; 1. Upon a received message, it looks at the message type and the session state.&#xD;&#xA; 1. Session state is the saga state. If one doesn't exist, a new state is initiated. Otherwise, it's deserialized into the POCO to be used for the logic. The state keeps the vital information for the decision-making that needs to survive over the time between the messages.&#xD;&#xA; 1. If the state indicates completion (both messages received), notify about the successful completion of the saga. The underlying session will be completed eventually.&#xD;&#xA; 1. If the message is `PaymentAccepted`, the state is updated to indicate this message has been handled. And right away, a timeout is set, if necessary.&#xD;&#xA; 1. If the message is `Timeout`, the state is checked for completion (meaning `PaymentAccepted` _and_ `ItemShipped` where received), or if the session state is null, telling the saga is over. If that's the case, the timeout message will be discarded as it has arrived after the saga has been completed. Otherwise, a simple number of retries will be checked to determine wherever the saga should continue waiting or not. This part is very custom, and I've decided to let the saga issue a timeout of 5 seconds for 3 times. You could do it exponentially or introduce different types of timeouts. **But** if the number of retries has been exceeded, we've never got one of the missing messages, and the saga has not been completed successfully. This is where a compensating action would occur, and the session state would be cleared. It's crucial to remove the session state to ensure it doesn't stay on the broker forever.&#xD;&#xA;&#xD;&#xA;Here's a happy day scenario, when both messages make it to the topic:&#xD;&#xA;&#xD;&#xA;    [23:35:42] Handling session with ID: 77777777-0000-0000-0000-000000000000&#xD;&#xA;    [23:35:42] Got a message of type: PaymentAccepted for session with ID 77777777-0000-0000-0000-000000000000&#xD;&#xA;    [23:35:43] Scheduling a timeout to check in 00:00:05&#xD;&#xA;    [23:35:48] Got a message of type: Timeout for session with ID 77777777-0000-0000-0000-000000000000&#xD;&#xA;    [23:35:48] Scheduling a timeout to check in 00:00:05&#xD;&#xA;    [23:35:52] Got a message of type: Timeout for session with ID 77777777-0000-0000-0000-000000000000&#xD;&#xA;    [23:35:53] Scheduling a timeout to check in 00:00:05&#xD;&#xA;    [23:35:55] Got a message of type: ItemShipped for session with ID 77777777-0000-0000-0000-000000000000&#xD;&#xA;    [23:35:55] Orchestration with session ID 77777777-0000-0000-0000-000000000000 has successfully completed. Sending notification (TBD).&#xD;&#xA;    [23:35:57] Got a message of type: Timeout for session with ID 77777777-0000-0000-0000-000000000000&#xD;&#xA;    [23:35:57] Orchestration ID 77777777-0000-0000-0000-000000000000 has completed. Discarding timeout.&#xD;&#xA;    [23:36:13] Closing session with ID: 77777777-0000-0000-0000-000000000000&#xD;&#xA;&#xD;&#xA;And this is what the execution looks like when one of the messages never arrives:&#xD;&#xA;&#xD;&#xA;    [01:15:16] Handling session with ID: 77777777-0000-0000-0000-000000000000&#xD;&#xA;    [01:15:16] Got a message of type: PaymentAccepted for session with ID 77777777-0000-0000-0000-000000000000&#xD;&#xA;    [01:15:16] Scheduling a timeout to check in 00:00:05&#xD;&#xA;    [01:15:21] Got a message of type: Timeout for session with ID 77777777-0000-0000-0000-000000000000&#xD;&#xA;    [01:15:21] Scheduling a timeout to check in 00:00:05&#xD;&#xA;    [01:15:26] Got a message of type: Timeout for session with ID 77777777-0000-0000-0000-000000000000&#xD;&#xA;    [01:15:26] Scheduling a timeout to check in 00:00:05&#xD;&#xA;    [01:15:31] Got a message of type: Timeout for session with ID 77777777-0000-0000-0000-000000000000&#xD;&#xA;    [01:15:31] Exhausted all retries (3). Executing compensating action and completing session with ID 77777777-0000-0000-0000-000000000000&#xD;&#xA;    [01:15:47] Closing session with ID: 77777777-0000-0000-0000-000000000000&#xD;&#xA;&#xD;&#xA;## Recap&#xD;&#xA;&#xD;&#xA;Modelling a process that is executing over time requires persistence. With Azure Service Bus we can leverage Message Sessions to keep the state along with the session's messages, adding timeout messages to provide some future checkpoints to determine wherever the compensating logic needs to be executed or not. with the session state, we can also inspect the state of the saga by querying for it with the session ID and the correlation ID to be used.&#xD;&#xA;&#xD;&#xA;Full solution is available on [GitHub](https://github.com/SeanFeldman/Orchestration)." />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2022-04-25T07:22:00Z" PublishedUtc="2022-04-25T13:31:24.7236903Z" ModifiedUtc="2022-04-25T13:31:24.7080632Z" />
      <TagsPart Tags="AzureServiceBus" />
      <AutoroutePart Alias="sagas-with-azure-service-bus" UseCustomPattern="false" />
      <TitlePart Title="Sagas with Azure Service Bus" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="true" />
    </BlogPost>
    <BlogPost Id="/alias=fixing-nservicebus-default-databus-serializer-in-net-6" Status="Published">
      <BodyPart Text="Upgrading to .NET 6, updating all the packages, boosters turned on, launching testing.&#xD;&#xA;&#xD;&#xA;Houston, we've got a problem.&#xD;&#xA;&#xD;&#xA;&gt; System.NotSupportedException:  BinaryFormatter serialization and&#xD;&#xA;&gt; deserialization are disabled within this application. See&#xD;&#xA;&gt; https://aka.ms/binaryformatter for more information.&#xD;&#xA;&#xD;&#xA;Ouch! What just happened? There were no warnings, no obsolete messages, nothing on to the autopsy.&#xD;&#xA;&#xD;&#xA;NServiceBus has a [data bus](https://docs.particular.net/nservicebus/messaging/databus/) (or a 'databus') feature. The feature implements the [Claim Check pattern](https://docs.microsoft.com/en-us/azure/architecture/patterns/claim-check) to allow messages to surpass the imposed maximum message size by the underlying messaging technology. The feature serializes the data internally, and the default `DefaultDataBusSerializer` uses `BinaryFormatter`. Nothing new; it has been [used for years](https://github.com/Particular/NServiceBus/blame/a510c214806540d920de10ed81b50f191129fbed/src/databus/NServiceBus.Databus/DefaultDatabusSerializer.cs#L6). Unfortunately, with .NET 5, `BinaryFormatter` was deprecated due to a [security risk](https://docs.microsoft.com/en-ca/dotnet/standard/serialization/binaryformatter-security-guide) it poses. And while you could skip .NET 5 and live with .NET Core 3.1, .NET 6 is breathing down the neck, and an upgrade is imminent.&#xD;&#xA;&#xD;&#xA;There is only one option:&#xD;&#xA;&#xD;&#xA; 1. [Re-enable the binary formatter](https://docs.microsoft.com/en-us/dotnet/core/compatibility/core-libraries/5.0/binaryformatter-serialization-obsolete) 🦨&#xD;&#xA; 1. Work around the problem until Particular has an official solution&#xD;&#xA;&#xD;&#xA;You read it right. Until an official fix, #2 is the only option that will be compliant with most environments.&#xD;&#xA;&#xD;&#xA;The workaround can be summarized as the following:&#xD;&#xA;&#xD;&#xA; - Pick serialization&#xD;&#xA; - Replace the default data bus serializer with the custom version&#xD;&#xA; - Deploy&#xD;&#xA;&#xD;&#xA;## Picking serialization&#xD;&#xA;&#xD;&#xA;I've chosen to go with BSON. The naive implementation is the following:&#xD;&#xA;&#xD;&#xA;    public class BsonDataBusSerializer : IDataBusSerializer&#xD;&#xA;    {&#xD;&#xA;        public void Serialize(object databusProperty, Stream stream)&#xD;&#xA;        {&#xD;&#xA;            using var writer = CreateNonClosingStreamWriter(stream);&#xD;&#xA;            using var bsonBinaryWriter = new BsonBinaryWriter(stream);&#xD;&#xA;            BsonSerializer.Serialize(bsonBinaryWriter, databusProperty);&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        StreamWriter CreateNonClosingStreamWriter(Stream stream)&#xD;&#xA;            =&gt; new(stream, Encoding.UTF8, bufferSize: 1024, leaveOpen: true);&#xD;&#xA;    &#xD;&#xA;        public object Deserialize(Stream stream)&#xD;&#xA;        {&#xD;&#xA;            using var bsonBinaryReader = new BsonBinaryReader(stream);&#xD;&#xA;            return BsonSerializer.Deserialize&lt;object&gt;(bsonBinaryReader);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;## Replacing the default data bus serializer&#xD;&#xA;&#xD;&#xA;**Update**: there's a cleaner option. Skip to the I Need a Better Option section below.&#xD;&#xA;&#xD;&#xA;One of the things I wanted to avoid is sprinkling the code-base with the replacement code in various projects that use NServiceBus. So rather than going to the multiple places and having to register the workaround in the following way:&#xD;&#xA;&#xD;&#xA;    // TODO: required workaround for issue (link). Remove when fixed.&#xD;&#xA;    endpoint.AdvancedConfiguration.RegisterComponents(c =&gt; &#xD;&#xA;        c.RegisterSingleton&lt;IDataBusSerializer&gt;(new BsonDataBusSerializer()));&#xD;&#xA;&#xD;&#xA;A perfect candidate would be using an auto-registered [features](https://docs.particular.net/nservicebus/pipeline/features) feature. A feature could be a part of the Shared solution that all endpoints are using and would automatically replace the data bus serializer w/o any endpoints having to do anything in the configuration code.&#xD;&#xA;&#xD;&#xA;    internal class BsonDataBusSerializerFeature : Feature&#xD;&#xA;    {&#xD;&#xA;        public BsonDataBusSerializerFeature()&#xD;&#xA;        {&#xD;&#xA;            DependsOn&lt;NServiceBus.Features.DataBus&gt;();&#xD;&#xA;    &#xD;&#xA;            EnableByDefault();&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        protected override void Setup(FeatureConfigurationContext context)&#xD;&#xA;        {&#xD;&#xA;            if (context.Container.HasComponent&lt;IDataBusSerializer&gt;())&#xD;&#xA;            {&#xD;&#xA;               // ???. Remove(defaultDataBusSerializer);&#xD;&#xA;            }&#xD;&#xA;            context.Container.ConfigureComponent&lt;IDataBusSerializer&gt;(_ =&gt; &#xD;&#xA;                  new BsonDataBusSerializer(), DependencyLifecycle.SingleInstance);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;Except there's no way to achieve that with NServiceBus _today_. The `IServiceCollection` is adapted into NServiceBus `ServiceCollectionAdapter`, which doesn't provide a way to remove any previously registered services as one can do with a plain `IServiceCollection`. More details [here](https://github.com/Particular/NServiceBus/issues/6374#issuecomment-1119799315).&#xD;&#xA;&#xD;&#xA;## Workaround for the workaround&#xD;&#xA;&#xD;&#xA;This part might be a bit smelly, but it's the necessary evil. NServiceBus adapts `IServiceCollection` and keeps a reference as a private member field. With some reflection, we can get hold of the service collection and purge the default `IDataBusSerializer` implementation to ensure it's not registered and [resolved first](https://github.com/Particular/NServiceBus/issues/6374#issuecomment-1114447110).&#xD;&#xA;&#xD;&#xA;    protected override void Setup(FeatureConfigurationContext context)&#xD;&#xA;    {&#xD;&#xA;    &#x9;if (context.Container.HasComponent&lt;IDataBusSerializer&gt;())&#xD;&#xA;    &#x9;{&#xD;&#xA;    &#x9;&#x9;var serviceCollection = context.Container.GetFieldValue&lt;IServiceCollection&gt;(&quot;serviceCollection&quot;);&#xD;&#xA;    &#xD;&#xA;    &#x9;&#x9;if (serviceCollection is not null)&#xD;&#xA;    &#x9;&#x9;{&#xD;&#xA;    &#x9;&#x9;&#x9;var defaultDataBusSerializer = serviceCollection.FirstOrDefault(descriptor =&gt;&#xD;&#xA;                           descriptor.ServiceType == typeof(IDataBusSerializer));&#xD;&#xA;    &#xD;&#xA;    &#x9;&#x9;&#x9;if (defaultDataBusSerializer is not null)&#xD;&#xA;    &#x9;&#x9;&#x9;{&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;serviceCollection.Remove(defaultDataBusSerializer);&#xD;&#xA;    &#x9;&#x9;&#x9;}&#xD;&#xA;    &#x9;&#x9;}&#xD;&#xA;    &#x9;}&#xD;&#xA;    &#xD;&#xA;    &#x9;context.Container.ConfigureComponent&lt;IDataBusSerializer&gt;(_ =&gt; &#xD;&#xA;                 new BsonDataBusSerializer(), DependencyLifecycle.SingleInstance);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;With a slight modification to the `Setup` method, the feature is now ready to be used!&#xD;&#xA;&#xD;&#xA;## I Need a Better Option&#xD;&#xA;&#xD;&#xA;And as was [pointed out](https://github.com/Particular/NServiceBus/issues/6374#issuecomment-1129634358) by Particular, there's an option to register a custom data bus serializer earlier than Core does it, removing the need in reflection. The feature could be replaced by an [`INeedInitialization` component](https://docs.particular.net/nservicebus/lifecycle/ineedinitialization), which is invoked _before_ endpoint creation and initialization.&#xD;&#xA;&#xD;&#xA;    public class ReplaceDefaultDataBusSerializer : INeedInitialization&#xD;&#xA;    {&#xD;&#xA;      public void Customize(EndpointConfiguration endpointConfiguration)&#xD;&#xA;      {&#xD;&#xA;        endpointConfiguration.RegisterComponents(components =&gt;&#xD;&#xA;          components.RegisterSingleton&lt;IDataBusSerializer&gt;(new BsonDataBusSerializer()));&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;## Deploying&#xD;&#xA;&#xD;&#xA;A word of caution for the solutions using one of these features in combination with data bus:&#xD;&#xA;- Events&#xD;&#xA;- Delayed messages&#xD;&#xA;&#xD;&#xA;You will need to tread carefully. The migration is not a simple data bus serializer replacement in these scenarios. It has to cater to the fact that messages serialized with `BinaryFormatter` could be processed by the endpoints converted to use the new serialization. Subscribing to the [issue](https://github.com/Particular/NServiceBus/issues/6058) on this topic is probably a safe bet. Or at least toss a few ideas before you start. And no matter what, good luck!" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2022-05-06T17:31:00Z" PublishedUtc="2022-05-20T16:09:03.9216038Z" ModifiedUtc="2022-05-20T16:09:03.9216038Z" />
      <TagsPart Tags="C#,NServiceBus" />
      <AutoroutePart Alias="fixing-nservicebus-default-databus-serializer-in-net-6" UseCustomPattern="false" />
      <TitlePart Title="Fixing NServiceBus default databus serializer in .NET 6" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=updating-azure-functions-tools" Status="Published">
      <BodyPart Text="Azure Functions Tools is at the heart of providing local development for Azure Function. Whenever you use Visual Studio, Rider, VS Code, or anything else, you need it to be able to run your bits. For command line folks, the installation process is [outlined](https://github.com/Azure/azure-functions-core-tools#installing) in the tools repository. For Visual Studio (2022) and Rider, it is less evident as it depends on the tool. So, where am I heading with this? Right, the need to update the Azure Functions Tools.&#xD;&#xA;&#xD;&#xA;Normally, VS and Rider do it automatically. Azure Functions Tools feed (https://functionscdn.azureedge.net/public/cli-feed-v4.json) stored at `%LocalAppData%\AzureFunctionsTools` has a JSON feed file, `feed-v&lt;sequence-number&gt;.json`, that is periodically updated. This file points to all the necessary information, including the latest version for the version of the function (v4 in my case).&#xD;&#xA;&#xD;&#xA;    &quot;v4&quot;: {&#xD;&#xA;      &quot;release&quot;: &quot;4.20.0&quot;,&#xD;&#xA;      &quot;releaseQuality&quot;: &quot;GA&quot;,&#xD;&#xA;      &quot;hidden&quot;: false&#xD;&#xA;    },&#xD;&#xA;&#xD;&#xA;Release points at the Core Tools version&#xD;&#xA;&#xD;&#xA;    &quot;coreTools&quot;: [&#xD;&#xA;        {&#xD;&#xA;          &quot;OS&quot;: &quot;Linux&quot;,&#xD;&#xA;          &quot;Architecture&quot;: &quot;x64&quot;,&#xD;&#xA;          &quot;downloadLink&quot;: &quot;https://functionscdn.azureedge.net/public/4.0.4704/Azure.Functions.Cli.linux-x64.4.0.4704.zip&quot;,&#xD;&#xA;          //...&#xD;&#xA;        },&#xD;&#xA;&#xD;&#xA;When running your Functions project and noticing that the version is falling behind, there are a few things to check:&#xD;&#xA;&#xD;&#xA;1. The feed file. It could be that the feed is stale.&#xD;&#xA;2. The tooling in the IDE is not updating.&#xD;&#xA;&#xD;&#xA;For #2, there's a difference between VS and Rider.&#xD;&#xA;&#xD;&#xA; - Rider will check for a newer version of Azure Functions Tools each time a project is loaded*&#xD;&#xA; - VS will check for a newer version when a new Functions project is **created**&#xD;&#xA;&#xD;&#xA;\*Rider also allows inspecting the version and manually replacing it with another version by going through Settings --&gt; Tools --&gt; Azure --&gt; Functions and configuring Azure Functions Tools location.&#xD;&#xA;&#xD;&#xA;![Rider settings screenshot][1]&#xD;&#xA;&#xD;&#xA;With VS, it's not really intuitive. If I work on the same project and do not add new triggers or Funcitons projects to the solution, it can be very confusing. Rider does a better job, no doubt.&#xD;&#xA;&#xD;&#xA;*Running the same project before and after adding an _additional_ Funcitons project just to update the tools.*&#xD;&#xA;&#xD;&#xA;Before:&#xD;&#xA;&#xD;&#xA;![before][2]&#xD;&#xA;&#xD;&#xA;After:&#xD;&#xA;&#xD;&#xA;![after][3]&#xD;&#xA;&#xD;&#xA;With this, the version of Tools can always be up-to-date.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2022/updating-azure-functions-tools/image.png&#xD;&#xA;  [2]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2022/updating-azure-functions-tools/image-1.png&#xD;&#xA;  [3]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2022/updating-azure-functions-tools/image-2.png" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2022-08-10T17:06:00Z" PublishedUtc="2022-08-10T17:19:42.1566492Z" ModifiedUtc="2022-08-10T17:19:42.1254136Z" />
      <TagsPart Tags="AzureFunctions,VS.NET,Rider" />
      <AutoroutePart Alias="updating-azure-functions-tools" UseCustomPattern="false" />
      <TitlePart Title="Updating Azure Functions Tools" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=manually-completing-service-bus-messages-with-functions" Status="Published">
      <BodyPart Text="Message settlement with Azure Service Bus has undergone some changes over the past few iterations of the Service Bus SDK for .NET. In the latest SDK (Azure.Messaging.ServiceBus), the settlement is performed via the `ServiceBusReceivedMessage`. In the previous SDK, this was accomplished with the help of the `MessageReceiver` object.&#xD;&#xA;&#xD;&#xA;Azure Functions In-Process SDK can disable message auto-completion by specifying `AutoComplete = false` on the `ServiceBusTrigger`. When auto-completion is disabled, the responsibility to complete (settle) the incoming message is on the function code. Except with the latest SDK, `MessageReceiver` is no longer an option. And while the equivalent, `ServiceBusReceiver`, seems to be the logical replacement, it is not. Instead, a particular type, `ServiceBusMessageActions`*, must be injected and used to settle messages.&#xD;&#xA;&#xD;&#xA;And what about Isolated Worker SDK? Well, not there yet. Hopefully, it [will be](https://github.com/Azure/azure-functions-dotnet-worker/issues/1008) soon.&#xD;&#xA;&#xD;&#xA;\* will require `Microsoft.Azure.WebJobs.Extensions.ServiceBus` NuGet package to be added" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2022-09-06T06:27:00Z" PublishedUtc="2022-09-06T06:33:10.58789Z" ModifiedUtc="2022-09-06T06:33:10.5722322Z" />
      <TagsPart Tags="AzureFunctions,Azure" />
      <AutoroutePart Alias="manually-completing-service-bus-messages-with-functions" UseCustomPattern="false" />
      <TitlePart Title="Manually Completing Service Bus Messages with Functions" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=why-event-sourcing" Status="Published">
      <BodyPart Text="![refill][1]&#xD;&#xA;&#xD;&#xA;# Some context&#xD;&#xA;&#xD;&#xA;I've seen software systems built since 2001. My first exposure was to classic ASP and VB6 applications with traditional state-based architecture. As someone new to software development, I was both fascinated by the use of data stores such as SQL Server to persist the vast amounts of data and horrified by the ease of irreversible mistakes that could take place. I should be honest; that **took** place when I accidentally ran some SQL update statements against the wrong database. Glorious days of a newbie developer at a startup company. I learned quickly that a safe strategy includes backing up data frequently. &#xD;&#xA;&#xD;&#xA;Twenty years later, I realized it could have been a *safe* strategy. Still, it wasn't a good solution, to begin with, for a domain that involves business applications. So let's dig into the details.&#xD;&#xA;&#xD;&#xA;# State-based Application lie&#xD;&#xA;&#xD;&#xA;I've been with a particular pharmacy for a long time. We moved a lot, and with each address change, the local pharmacy has always registered my new address and used that to confirm my identity each time I picked up a prescription. I had lived for over 5 years at the current address, so you can imagine my surprise when I failed the identity verification during a routine prescription pick-up. I'm older these days, but still not at the stage where I forget my address. So that was quite confusing.&#xD;&#xA;&#xD;&#xA;When asked if I could provide a different address, I returned to the memory lane to the previous address. But, to my even bigger surprise, that wasn't the address on the file either. So I asked the pharmacist if they happened to store more than one address, trying the theory that the pharmacy system is not showing the default address. But no, the system only has a single address. So now I was really puzzled. But just for kicks, I gave it the address I had over 15 years ago. And bingo! My identity was confirmed. But let's unpack what has happened here.&#xD;&#xA;&#xD;&#xA;The address in the system has changed. Obviously, somewhere in the pharmacy's system *something* changed my address from the current to the one I had over 15 years ago. But what was that event? Would it be possible to look at a log to determine what happened? If I file a complaint, would it be possible to find out what happened? And how did the dormant address for 15 years miraculously get resurrected, replacing my active address? A mystery surrounded by more guesses than answers.&#xD;&#xA;&#xD;&#xA;# Operating within the constraints&#xD;&#xA;&#xD;&#xA;So how would a &quot;mystery&quot; of this sort get approached in a conventional system? Logs. Let's look into logs to see what has happened. That's assuming logs account for such a scenario and log the details. But it's virtually impossible to log absolutely every permutation in the system.&#xD;&#xA;&#xD;&#xA;Track database changes! See if there's anything in the data. Well, that's not a trivial exercise, either. Assuming data changes are captured. And let's assume those data changes are captured; what's the context? What was the **event** that took place that caused the system to start using that 15yo address? Cricket.&#xD;&#xA;&#xD;&#xA;# What's a better approach?&#xD;&#xA;&#xD;&#xA;This is the question I've been toying around for quite a while. My career has taken me from business applications to libraries and back. And it was the second round when I started questioning the state-based approach and the conventional architecture. This is where I got to return to the idea of Event Sourcing and re-evaluate the approach. If my **data** are the events that take place in the system, those events are the authoritative source of truth, not only allowing us to reconstruct the current state but also help understand how that state was derived. And that's a game changer.&#xD;&#xA;&#xD;&#xA;I will save you from the details as plenty of more competent people wrote better posts on the topic. I'll just wrap up with my own experience highlight. Being able to trust the system and understand how it got to the place where it is is invaluable for business applications.&#xD;&#xA;&#xD;&#xA;![events][2]&#xD;&#xA;&#xD;&#xA;# Great. How do I do it?&#xD;&#xA;&#xD;&#xA;YMMV. I've started simple. No frameworks and no products. Just Azure Storage Tables to store my events, Azure Service Bus to communicate events for projections (async), and Azure MySQL Flex Server to keep projections for searches and queries. Knowing what I know today, I would probably do that again but choose slightly different services. Nothing works better than building your own to understand the concepts. If you need someone else to take over, consider a framework of some sort.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2023/why-event-sourcing/refill.jpg&#xD;&#xA;  [2]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2023/why-event-sourcing/log.jpg" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2023-05-31T05:10:00Z" PublishedUtc="2023-05-31T05:11:09.1222346Z" ModifiedUtc="2023-05-31T05:11:09.1066326Z" />
      <TagsPart Tags="EventSourcing" />
      <AutoroutePart Alias="why-event-sourcing" UseCustomPattern="false" />
      <TitlePart Title="Why Event Sourcing?" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=azure-function-a-single-line-to-drive-you-nuts" Status="Published">
      <BodyPart Text="&lt;!-- ![image][2] --&gt;&#xD;&#xA;&#xD;&#xA;Azure Functions Isolated Worker SDK is an easy-to-set-up and get-running framework.&#xD;&#xA;The minimal `Progarm.cs` is hard to mess up.&#xD;&#xA;&#xD;&#xA;    var host = new HostBuilder()&#xD;&#xA;        .ConfigureFunctionsWorkerDefaults()&#xD;&#xA;        .Build();&#xD;&#xA;    &#xD;&#xA;    await host.RunAsync();&#xD;&#xA;&#xD;&#xA;Right? Except when it's not. The extension method, `ConfigureFunctionsWorkerDefaults` is a critical piece of code that **has** to be invoked, or the generic host will start, but nothing will be wired up. When it's just a few lines, it's not hard to miss if the call is accidentally omitted. But it's less noticeable if that's an average Functions Application with several things configured, such as dependency services and configurations.&#xD;&#xA;&#xD;&#xA;And that's the situation I found myself in. While performing code refactoring, I unintentionally deleted the invocation of ConfigureFunctionsWorkerDefaults. Surprisingly, there were no compilation errors or startup issues. However, an unexpected problem arose: binding a configuration file to one of my custom configuration classes failed. This raised eyebrows. When I examined the configuration providers, I immediately noticed that the environment variables provider was absent, which should have been included by default. At this point, I realized that I had accidentally eliminated the entire startup process of the Isolated Worker by inadvertently omitting that crucial extension method call.&#xD;&#xA;&#xD;&#xA;Even more ironic is that I commented on a [similar issue][1] about six months ago. Same setup, same problem. And the suggestion I made back then would help me today - an analyzer that ensures `ConfigureFunctionsWorkerDefaults` is not removed accidentally.&#xD;&#xA;&#xD;&#xA;Why do I still think that analyzer could be helpful? No one wants to remember special methods to be called. The point in the case is the class below.&#xD;&#xA;&#xD;&#xA;    class Demo&#xD;&#xA;    {&#xD;&#xA;      public void Initialize() { // important initialization here }&#xD;&#xA;    &#xD;&#xA;      public void DoSomething() {}&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;To use `d`, it needs to be initialized.&#xD;&#xA;&#xD;&#xA;    var d = new Demo();&#xD;&#xA;    d.Initialize();&#xD;&#xA;    d.DoSomehting();&#xD;&#xA;&#xD;&#xA;From the class itself, it is not apparent that `Initialize()` has to take place, and it is easy to omit the call. That's why `DoSomething()` is likely to validate if the initialization took place.&#xD;&#xA;&#xD;&#xA;    class Demo&#xD;&#xA;    {&#xD;&#xA;      private bool initialized;&#xD;&#xA;      &#xD;&#xA;      public void Initialize()&#xD;&#xA;      {&#xD;&#xA;        // important initialization here &#xD;&#xA;        initialized = true;&#xD;&#xA;      }&#xD;&#xA;      &#xD;&#xA;      private CheckWasInitialized()&#xD;&#xA;      {&#xD;&#xA;        if (initialized == false)&#xD;&#xA;        {&#xD;&#xA;          throw new Exception(&quot;Initialization did not occur. Call Initialize() first&quot;);&#xD;&#xA;        }&#xD;&#xA;      }&#xD;&#xA;    &#xD;&#xA;      public void DoSomething()&#xD;&#xA;      {&#xD;&#xA;        CheckWasInitialized();&#xD;&#xA;        // logic&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;Not the most elegant approach, but you get the idea. Trying to use an instance of `Demo` without going through initialization will cause an exception to be thrown.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;However, achieving this goal using ConfigureFunctionsWorkerDefaults is currently not feasible. If the complete initialization of Azure Functions relies on this method, it would be desirable to implement a protective measure that guarantees its presence. One potential solution could involve utilizing a Roslyn analyzer to verify the method's existence. This might appear excessive at first glance, but this precaution could be worthwhile considering the potential consequences of removing a single line of code, which could bring down the entire function app without a clear indication of the issue. Currently, prioritizing stability and error prevention is paramount when compensation is no longer tied to the number of code lines produced.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://github.com/Azure/azure-functions-dotnet-worker/issues/1347&#xD;&#xA;  [2]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2023/azure-function-a-single-line-to-drive-you-nuts/functions.jpg" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2023-08-12T22:48:00Z" PublishedUtc="2023-08-12T23:03:28.471285Z" ModifiedUtc="2023-08-12T23:03:28.455664Z" />
      <TagsPart Tags="Functions" />
      <AutoroutePart Alias="azure-function-a-single-line-to-drive-you-nuts" UseCustomPattern="false" />
      <TitlePart Title="Azure Function: One Line of Insanity" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=azure-blob-storage-cold-tier" Status="Published">
      <BodyPart Text="Azure Storage service is the foundational building block in cloud architecture. Cheap, reliable, resilient, and powerful. From small solutions to monster systems, Blob service, in particular, is convenient. Any system that involves any type of document slowly but steadily has the number of blobs/files growing over time. Be it specific business requirements or legal aspects, blobs must be kept around for some time. But not all blobs are equal.&#xD;&#xA;&#xD;&#xA;Blobs has had the concept of tiers for quite a while. Two tiers that are opposite extremes are Hot and Archive. The Hot tier is fast and inexpensive to access but more expensive to store. The Archive tier is inexpensive to store, but when it comes to reading and writing, let's say it's not a good idea. For a while, there was also the Cool tier. A middle ground if you wish. Blobs that might be accessed but very infrequently.&#xD;&#xA;&#xD;&#xA;Recently, there's even more granularity when it comes to tiers. The Cold tier. The Cold tier is positioned between the Cool and Archive, adding more cost-effectiveness to storing blobs. &#xD;&#xA;&#xD;&#xA;So how do you choose which tier is the right tear for the problem?&#xD;&#xA;&#xD;&#xA;Understand the business needs. How blobs will be used. Plan accordingly. In many cases, blobs must be frequently accessed initially and then progress into the next, cooler tier, depending on the business rules. Microsoft recommended strategy is the [following][1].&#xD;&#xA;&#xD;&#xA; - **Cool** tier: minimum retention of 30 days&#xD;&#xA; - **Cold** tier: minimum retention of 90 days&#xD;&#xA; - **Archive** tier: minimum retention of 180 days&#xD;&#xA;&#xD;&#xA;This doesn't mean you absolutely must follow this recommendation. What if your blobs are stored and never accessed? Or stored and might be accessed at any time?&#xD;&#xA;&#xD;&#xA;This is where [Blob Lifecycle Management Policies][2] are so handy. For example, let's say I'd like to reduce the cost of keeping blobs from day one but have the option to access those. I.e. not fully archived. The following policy would help with that by moving all blobs (including the existing ones) to the new Cold tier right away (some delay is expected as Storage service runs this not in real-time).&#xD;&#xA;&#xD;&#xA;    {&#xD;&#xA;      &quot;rules&quot;: [&#xD;&#xA;        {&#xD;&#xA;          &quot;enabled&quot;: true,&#xD;&#xA;          &quot;name&quot;: &quot;To-Cold&quot;,&#xD;&#xA;          &quot;type&quot;: &quot;Lifecycle&quot;,&#xD;&#xA;          &quot;definition&quot;: {&#xD;&#xA;            &quot;actions&quot;: {&#xD;&#xA;              &quot;baseBlob&quot;: {&#xD;&#xA;                &quot;tierToCold&quot;: {&#xD;&#xA;                  &quot;daysAfterModificationGreaterThan&quot;: 0&#xD;&#xA;                }&#xD;&#xA;              }&#xD;&#xA;            },&#xD;&#xA;            &quot;filters&quot;: {&#xD;&#xA;              &quot;blobTypes&quot;: [&#xD;&#xA;                &quot;blockBlob&quot;&#xD;&#xA;              ],&#xD;&#xA;              &quot;prefixMatch&quot;: [&#xD;&#xA;                &quot;masters/&quot;&#xD;&#xA;              ]&#xD;&#xA;            }&#xD;&#xA;          }&#xD;&#xA;        }&#xD;&#xA;      ]&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;This will allow much lower storage costs. Remember, there will be higher access and transaction costs when blobs are accessed. The difference is that these blobs will be available **immediately** and not **eventually**, as they would be with the Archived tier.&#xD;&#xA;&#xD;&#xA;  [1]: https://learn.microsoft.com/en-us/azure/storage/blobs/access-tiers-overview#summary-of-access-tier-options&#xD;&#xA;  [2]: https://learn.microsoft.com/en-us/azure/storage/blobs/lifecycle-management-policy-configure" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2023-08-16T04:31:46.6170331Z" PublishedUtc="2023-08-16T04:31:46.6170331Z" ModifiedUtc="2023-08-16T04:31:46.5857521Z" />
      <TagsPart Tags="" />
      <AutoroutePart Alias="azure-blob-storage-cold-tier" UseCustomPattern="false" />
      <TitlePart Title="Azure Blob Storage Cold Tier" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=recoverability-with-azure-functions" Status="Published">
      <BodyPart Text="When working with Azure Service Bus triggers and Functions, the recoverability story is not the best with the out-of-box implementation. To understand the challenges with the built-in recoverability and how to overcome those, this post will dive into the built-in recoverability with Azure Functions for Service Bus queues and subscriptions, offering an alternative. But first, what is recoverability?&#xD;&#xA;&#xD;&#xA;&gt; Recoverability in messaging refers to a messaging system's ability to ensure that messages are reliably delivered even in the presence of failures or disruptions. It involves message persistence, acknowledgments, message queues, redundancy, failover mechanisms, and retry strategies to guarantee message delivery and prevent data loss. This is vital for applications where message loss can have serious consequences.&#xD;&#xA;&#xD;&#xA;With Azure Service Bus, recoverability is provided with `MaxDeliveryCount` and a dead-letter queue. To be more specific, a message is delivered at least `MaxDeliveryCount` time and, upon further failure, when re-delivered, will be moved to a special dead-letter sub-queue. Azure Functions leverage that feature to retry messages. However, there are a few issues with this approach.&#xD;&#xA;&#xD;&#xA; 1. Retries are immediate&#xD;&#xA; 2. Upon final failure, the dead-lettered message has no information to assist in troubleshooting.&#xD;&#xA;&#xD;&#xA;Let's dive into those issues to see what can be done.&#xD;&#xA;&#xD;&#xA;As part of processing a message, we must contact a 3rd part API. But, for some reason, despite the promised up-time of 99.9%, we hit an error. As a result of that error, the message processing will throw an exception, and the message will be re-delivered. It will be attempted as many times as the value of `MaxDeliveryCount` defined on the entity used to trigger the function. If it's set to 10, that would be 10 retries one after another. Or 10 *immediate* retries. That's not a small number of attempts. But if the problem persists, the message will be dead-lettered to allow the Function processing of other messages. Which is good. But when we need to understand what happened with the message at the time of the failure, we'll have a hard time. When a message is dead-lettered, the reason for dead-lettering will only contain the benign reason: the maximum delivery count has been exceeded. Not very helpful. Gladly, there are Application Insights and logged errors that could be correlated to the errors that have occurred and hopefully link between the dead-lettered message(s) and the logged exception(s). But wouldn't it be simpler to look at the message and know _exactly_ the reason why it failed?&#xD;&#xA;&#xD;&#xA;Thanks to the Isolated Worker SDK, we can do that. Similar to frameworks such as NServiceBus and MassTransit, we can enable recoverability with Azure Functions and make our prod-ops life easier. So, let's build that recoverability! &#xD;&#xA;&#xD;&#xA;## Centralized error queue&#xD;&#xA;&#xD;&#xA;Unlike [centralized dead-letter queue](https://weblogs.asp.net/sfeldman/centralized-dead-letter-queue-with-azure-service-bus), a centralized error queue is an arbitrary queue that we'll add to the topology to store any messages that would typically go to the dead-letter sub-queue per entity. I.e. we won't allow `MaxDeliveryCount` executions for the message to be dead-lettered. Instead, we'll ensure we attempt a message no more than N times, **moving** it to the error queue afterwards. For the sake of the exercise, I'll use a queue called `error`.&#xD;&#xA;&#xD;&#xA;## Middleware&#xD;&#xA;&#xD;&#xA;To implement recoverability, a Funcitons Isolated Worker SDK is required as it supports the concept of middleware (think pipeline). Below is a high-level implementation to elaborate on the approach. You'll need some package references, but the idea is what's important. We're getting closer!&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    public class Program&#xD;&#xA;    {&#xD;&#xA;        public static void Main()&#xD;&#xA;        {&#xD;&#xA;            var host = new HostBuilder()&#xD;&#xA;                .ConfigureFunctionsWorkerDefaults(builder =&gt;&#xD;&#xA;                {&#xD;&#xA;                    builder.UseWhen&lt;ServiceBusMiddleware&gt;(Is.ServiceBusTrigger); // Up-vote https://github.com/Azure/azure-functions-dotnet-worker/issues/1999 😉&#xD;&#xA;                })&#xD;&#xA;                .ConfigureServices((builder, services) =&gt;&#xD;&#xA;                {&#xD;&#xA;                    var serviceBusConnectionString = Environment.GetEnvironmentVariable(&quot;AzureServiceBus&quot;);&#xD;&#xA;                    if (string.IsNullOrEmpty(serviceBusConnectionString))&#xD;&#xA;                    {&#xD;&#xA;                        throw new InvalidOperationException(&quot;Specify a valid AzureServiceBus connection string in the Azure Functions Settings or your local.settings.json file.&quot;);&#xD;&#xA;                    }&#xD;&#xA;    &#xD;&#xA;                    // This can also be done with the AddAzureClients() API&#xD;&#xA;                    services.AddSingleton(new ServiceBusClient(serviceBusConnectionString));&#xD;&#xA;                })&#xD;&#xA;                .Build();&#xD;&#xA;    &#xD;&#xA;            host.Run();&#xD;&#xA;        } &#xD;&#xA;&#xD;&#xA;The main focus is the `ServiceBusMiddleware` class, where the recoverability logic will be found. In a few words, we'll try to execute the functions, `await next(context)` call. If it throws, function invocation has failed and will be retried. Except we'll intercept that, and based on how many retries we allow, we'll decide wherever to rethrow or move the message to the centralized error queue. Note that we don't actually move the message. Instead, we clone it, complete the original message by swallowing the exception and sending the clone to the error queue. On top of that, we'll add the exception details to the cloned message to allow easier troubleshooting by inspecting the message headers. This will help the prod-ops to understand better why a message has failed by looking at the exception stack trace and exception details. Message payload, along with the error, can also be very helpful in solving the issue. &#xD;&#xA;&#xD;&#xA;    internal class ServiceBusMiddleware : IFunctionsWorkerMiddleware&#xD;&#xA;    {&#xD;&#xA;        private readonly ILogger&lt;ServiceBusMessage&gt; logger;&#xD;&#xA;        private readonly ServiceBusClient serviceBusClient;&#xD;&#xA;    &#xD;&#xA;        public ServiceBusMiddleware(ServiceBusClient serviceBusClient, ILogger&lt;ServiceBusMessage&gt; logger)&#xD;&#xA;        {&#xD;&#xA;            this.serviceBusClient = serviceBusClient;&#xD;&#xA;            this.logger           = logger;&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        public async Task Invoke(FunctionContext context, FunctionExecutionDelegate next)&#xD;&#xA;        {&#xD;&#xA;            try&#xD;&#xA;            {&#xD;&#xA;                await next(context);&#xD;&#xA;            }&#xD;&#xA;            catch (AggregateException exception)&#xD;&#xA;            {&#xD;&#xA;                BindingMetadata meta = context.FunctionDefinition.InputBindings.FirstOrDefault(b =&gt; b.Value.Type == &quot;serviceBusTrigger&quot;).Value;&#xD;&#xA;                var input = await context.BindInputAsync&lt;ServiceBusReceivedMessage&gt;(meta);&#xD;&#xA;                var message = input.Value ?? throw new Exception($&quot;Failed to send message to error queue, message was null. Original exception: {exception.Message}&quot;, exception);&#xD;&#xA;    &#xD;&#xA;                if (message.DeliveryCount &lt;= 5)&#xD;&#xA;                {&#xD;&#xA;                    logger.LogDebug(&quot;Failed processing message {MessageId} after {Attempt} time, will retry&quot;, message.MessageId, message.DeliveryCount);&#xD;&#xA;    &#xD;&#xA;                    throw;&#xD;&#xA;                }&#xD;&#xA;    &#xD;&#xA;                // TODO: remove when fixed https://github.com/Azure/azure-functions-dotnet-worker/issues/993&#xD;&#xA;                var specificException = GetSpecificException(exception);&#xD;&#xA;                var failedMessage = message.CloneForError(context.FunctionDefinition.Name, specificException);&#xD;&#xA;                var sender = serviceBusClient.CreateSenderFor(Endpoint.Error);&#xD;&#xA;                await sender.SendMessageAsync(failedMessage);&#xD;&#xA;    &#xD;&#xA;                logger.LogError(&quot;Message ID {MessageId} failed processing and was moved to the error queue&quot;, message.MessageId);&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        static Exception GetSpecificException(AggregateException exception) =&gt; exception.Flatten().InnerExceptions.FirstOrDefault()?.InnerException ?? exception;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;What about Functions? That's the great part. Every Function triggered by Azure Service Bus messages will be covered. No more need to catch exceptions and handle those.&#xD;&#xA;&#xD;&#xA;## Result&#xD;&#xA;&#xD;&#xA;What does it look like in action? Sending a message that will continuously fail all 5 retries will cause the message to be &quot;moved&quot; into the error queue.&#xD;&#xA;&#xD;&#xA;![failed message][1]&#xD;&#xA;&#xD;&#xA;I've decided to provide the failed function name as `Error.FailedQ` to identify what queue/Function has failed. Stack trace and error message to have the details. Straightforward and very helpful when handling failed messages.&#xD;&#xA;&#xD;&#xA;## Back-off retries (delayed retries)&#xD;&#xA;&#xD;&#xA;In the next post, we'll cover delayed retries to make recoverability even more robust.&#xD;&#xA;&#xD;&#xA;  [1]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2023/azure-functions-recoverability/error-message.jpg" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2023-10-31T02:33:14.689091Z" PublishedUtc="2023-10-31T02:33:14.689091Z" ModifiedUtc="2023-10-31T02:33:14.689091Z" />
      <TagsPart Tags="Azure,Functions,AzureServiceBus" />
      <AutoroutePart Alias="recoverability-with-azure-functions" UseCustomPattern="false" />
      <TitlePart Title="Recoverability with Azure Functions" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=recoverability-with-azure-functions-delayed-retries" Status="Published">
      <BodyPart Text="In the [previous post][1], I showed how to implement basic recoverability with Azure Functions and Service Bus. In this post, I'm going to expand on the idea and demonstrate how to implement a back-off strategy.&#xD;&#xA;&#xD;&#xA;## Back-off strategy&#xD;&#xA;&#xD;&#xA;A backoff strategy is intended to help with intermittent failures when immediate subsequent retries will suffice due to the required resources not being available within a short period but having a high probability of being back online after a short timeout. This is also known as delayed retries, when retries are attempted after a certain time (delay) to increase the chances of succeeding rather than bombarding with immediate retries and risking failing all the attempts within a short period. &#xD;&#xA;&#xD;&#xA;## Implementation&#xD;&#xA;&#xD;&#xA;For delayed retries, we'll set an arbitrary number. Let's call it `NumberOfDelayedRetries`. The number could be hardcoded or taken from the configuration. The idea is to represent with this number how many delayed retry attempts there will be. Setting it to 0 would disable delayed retries altogether.&#xD;&#xA;&#xD;&#xA;Delayed retries should kick in when the immediate retries are all exhausted. With Azure Service Bus, immediate retries are fairly simple to implement - Service Bus does that for us with the `DeliveryCount` on the given message. Unfortunately, today, there's no way to achieve the same with the native message. This will change in the future when there will be the ability to [abandon a message with a custom timespan][2]. Until then, some custom code will be required to mimic this behaviour.&#xD;&#xA;&#xD;&#xA;### Delayed retry logic&#xD;&#xA;&#xD;&#xA;Whenever all immediate retries are exhausted, a message should go back to the queue and be delayed (scheduled) for a later time to be received. The problem with this approach is that we could exceed the `MaxDeliveryCount` that's there to protect from infinite processing. Sending back the same message also won't work due to the reason explained above (service limitation). So we'll cheat.&#xD;&#xA;&#xD;&#xA;The incoming failing message will be cloned. And when cloned, we'll add a header, let's say `&quot;Error.DelayedRetries&quot;`. And each time we want to increase the number of attempted delayed retries, we'll read the original incoming message's header and increase it by one for the cloned message. The first time, there will be no such header, so we need to account for that. As long as we need to proceed with the delayed retries, we'll be completing the original incoming message. That's why logging at this point is important.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    public async Task Invoke(FunctionContext context, FunctionExecutionDelegate next)&#xD;&#xA;    {&#xD;&#xA;    &#x9;try&#xD;&#xA;    &#x9;{&#xD;&#xA;    &#x9;&#x9;await next(context);&#xD;&#xA;    &#x9;}&#xD;&#xA;    &#x9;catch (AggregateException exception)&#xD;&#xA;    &#x9;{&#xD;&#xA;    &#x9;&#x9;BindingMetadata meta = context.FunctionDefinition.InputBindings.FirstOrDefault(b =&gt; b.Value.Type == &quot;serviceBusTrigger&quot;).Value;&#xD;&#xA;    &#x9;&#x9;var input = await context.BindInputAsync&lt;ServiceBusReceivedMessage&gt;(meta);&#xD;&#xA;    &#x9;&#x9;var message = input.Value ?? throw new Exception($&quot;Failed to send message to error queue, message was null. Original exception: {exception.Message}&quot;, exception);&#xD;&#xA;    &#xD;&#xA;    &#x9;&#x9;if (message.DeliveryCount &lt;= 5)&#xD;&#xA;    &#x9;&#x9;{&#xD;&#xA;    &#x9;&#x9;&#x9;logger.LogDebug(&quot;Failed processing message {MessageId} after {Attempt} time, will retry&quot;, message.MessageId, message.DeliveryCount);&#xD;&#xA;    &#xD;&#xA;    &#x9;&#x9;&#x9;throw;&#xD;&#xA;    &#x9;&#x9;}&#xD;&#xA;    &#x9;&#x9;&#xD;&#xA;    &#x9;&#x9;#region Delayed Retries&#xD;&#xA;    &#x9;&#x9;&#xD;&#xA;    &#x9;&#x9;var retries = message.GetNumberOfAttemptedDelayedRetries();&#xD;&#xA;    &#xD;&#xA;    &#x9;&#x9;if (retries &lt; NumberOfDelayedRetries)&#xD;&#xA;    &#x9;&#x9;{&#xD;&#xA;    &#x9;&#x9;&#x9;var retriedMessage = message.CloneForDelayedRetry(retries + 1);&#xD;&#xA;    &#xD;&#xA;    &#x9;&#x9;&#x9;await using var senderRetries = serviceBusClient.CreateSenderFor(Enum.Parse&lt;Endpoint&gt;(context.FunctionDefinition.Name));&#xD;&#xA;    &#x9;&#x9;&#x9;await senderRetries.ScheduleMessageAsync(retriedMessage, DateTimeOffset.UtcNow.Add(DelayedRetryBackoff));&#xD;&#xA;    &#xD;&#xA;    &#x9;&#x9;&#x9;logger.LogWarning(&quot;Message ID {MessageId} failed all immediate retries. Will perform a delayed retry #{Attempt} in {Time}&quot;, message.MessageId, retries + 1, DelayedRetryBackoff);&#xD;&#xA;    &#x9;&#x9;&#x9;return;&#xD;&#xA;    &#x9;&#x9;}&#xD;&#xA;    &#x9;&#x9;&#xD;&#xA;    &#x9;&#x9;#endregion&#xD;&#xA;    &#xD;&#xA;    &#x9;&#x9;// TODO: remove when fixed https://github.com/Azure/azure-functions-dotnet-worker/issues/993&#xD;&#xA;    &#x9;&#x9;var specificException = GetSpecificException(exception);&#xD;&#xA;    &#x9;&#x9;var failedMessage = message.CloneForError(context.FunctionDefinition.Name, specificException);&#xD;&#xA;    &#x9;&#x9;var sender = serviceBusClient.CreateSenderFor(Endpoint.Error);&#xD;&#xA;    &#x9;&#x9;await sender.SendMessageAsync(failedMessage);&#xD;&#xA;    &#xD;&#xA;    &#x9;&#x9;logger.LogError(&quot;Message ID {MessageId} failed processing and was moved to the error queue&quot;, message.MessageId);&#xD;&#xA;    &#x9;}&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;And that's all there is. The extension methods `GetNumberOfAttemptedDelayedRetries()` and `CloneForDelayedRetry()` are provided below for reference.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    public static int GetNumberOfAttemptedDelayedRetries(this ServiceBusReceivedMessage message)&#xD;&#xA;    {&#xD;&#xA;    &#x9;message.ApplicationProperties.TryGetValue(&quot;Error.DelayedRetries&quot;, out object? delayedRetries);&#xD;&#xA;    &#xD;&#xA;    &#x9;return delayedRetries is null ? 0 : (int)delayedRetries;&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    public static ServiceBusMessage CloneForDelayedRetry(this ServiceBusReceivedMessage message, int attemptedDelayedRetries)&#xD;&#xA;    {&#xD;&#xA;    &#x9;message.ApplicationProperties.TryGetValue(&quot;Error.OriginalMessageId&quot;, out var value);&#xD;&#xA;    &#x9;var originalMessageId = value is null ? message.MessageId : value.ToString();&#xD;&#xA;    &#xD;&#xA;    &#x9;var error = new ServiceBusMessage(message)&#xD;&#xA;    &#x9;{&#xD;&#xA;    &#x9;&#x9;ApplicationProperties =&#xD;&#xA;    &#x9;&#x9;{&#xD;&#xA;    &#x9;&#x9;&#x9;[&quot;Error.DelayedRetries&quot;]    = attemptedDelayedRetries,&#xD;&#xA;    &#x9;&#x9;&#x9;[&quot;Error.OriginalMessageId&quot;] = originalMessageId&#xD;&#xA;    &#x9;&#x9;},&#xD;&#xA;    &#x9;&#x9;// TODO: remove when https://github.com/Azure/azure-sdk-for-net/issues/38875 is addressed&#xD;&#xA;    &#x9;&#x9;TimeToLive = TimeSpan.MaxValue&#xD;&#xA;    &#x9;};&#xD;&#xA;    &#xD;&#xA;    &#x9;return error;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;Notice the `&quot;Error.OriginalMessageId&quot;` header. It is helpful to correlate the original Service Bus message to the delayed retried messages as those are physically different messages.&#xD;&#xA;&#xD;&#xA;![message][3]&#xD;&#xA;&#xD;&#xA;Et voilà! We've got ourselves a nice recoverability with immediate and delayed retries to help deal with intermittent errors and temporary failures.&#xD;&#xA;&#xD;&#xA;![screenshot][4]&#xD;&#xA;&#xD;&#xA;## Auditing&#xD;&#xA;&#xD;&#xA;In the next post, I'll demonstrate how we can implement the audit trail of the successfully processed messages to complete the entire picture of all messages processed with Azure Functions.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://weblogs.asp.net/sfeldman/recoverability-with-azure-functions&#xD;&#xA;  [2]: https://github.com/Azure/azure-service-bus/issues/454&#xD;&#xA;  [3]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2023/azure-functions-recoverability-delayed-retries/image.png&#xD;&#xA;  [4]: https://aspblogs.blob.core.windows.net:443/media/sfeldman/2023/azure-functions-recoverability-delayed-retries/image-1.png" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2023-11-03T05:14:00Z" PublishedUtc="2023-11-03T15:14:52.7839642Z" ModifiedUtc="2023-11-03T15:16:40.1560045Z" />
      <TagsPart Tags="Functions,AzureServiceBus" />
      <AutoroutePart Alias="recoverability-with-azure-functions-delayed-retries" UseCustomPattern="false" />
      <TitlePart Title="Recoverability with Azure Functions - Delayed Retries" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=auditing-with-azure-functions" Status="Published">
      <BodyPart Text="In the previous two posts about [recoverability][1], I focused on the rainy day scenarios where intermittent failures require retries and backoffs. This post will focus on the happy day scenario, where everything works as expected. So what's the issue then?&#xD;&#xA;&#xD;&#xA;A successful message processing is not the only outcome that's required. More often than not there's also an audit trail that's requried. Imagine processing purchase orders. Not only you want to know nothing has failed. You might also want to have the confidence in a form of an audit trail that consists of those processed messages.&#xD;&#xA;&#xD;&#xA;With Azure Functions Isolated Worker SDK, this becomes an extremely easy feature to implement. You could implement it as a standalone middleware but I chose to combine it with the revoverability middleware to keep the picture complete.&#xD;&#xA;&#xD;&#xA;    public async Task Invoke(FunctionContext context, FunctionExecutionDelegate next)&#xD;&#xA;    {&#xD;&#xA;    &#x9;try&#xD;&#xA;    &#x9;{&#xD;&#xA;    &#x9;    await next(context);&#xD;&#xA;&#xD;&#xA;            await Audit(message, context);&#xD;&#xA;    &#x9;}&#xD;&#xA;    &#x9;catch (AggregateException exception)&#xD;&#xA;    &#x9;{&#xD;&#xA;    &#x9;    // Recoverability, omitted for clarity&#xD;&#xA;    &#x9;}&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;The implementation for auditing is just sending a message to the queue chosen to be the audit queue. Similar to the centralized error queue.&#xD;&#xA;&#xD;&#xA;    private async Task Audit(ServiceBusReceivedMessage message, FunctionContext context)&#xD;&#xA;    {&#xD;&#xA;        var auditMessage = new ServiceBusMessage(message);&#xD;&#xA;    &#xD;&#xA;        auditMessage.ApplicationProperties[&quot;Endpoint&quot;] = context.FunctionDefinition.Name;&#xD;&#xA;    &#xD;&#xA;        await using var serviceBusSender = serviceBusClient.CreateSender(&quot;audit&quot;);&#xD;&#xA;    &#xD;&#xA;        await serviceBusSender.SendMessageAsync(auditMessage);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;Notice the custom header `&quot;Endpoint&quot;`. This is intentional to keep track of the endpoint/function that has successfully processed the message that got audited. While there is additional information that could be propagated with the audited message, this is enough for a basic audit trail.&#xD;&#xA;&#xD;&#xA;  [1]: https://weblogs.asp.net/sfeldman/recoverability-with-azure-functions-delayed-retries&#xD;&#xA;" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2023-11-03T17:29:00Z" PublishedUtc="2023-11-06T17:24:39.0625365Z" ModifiedUtc="2023-11-06T17:24:39.0468426Z" />
      <TagsPart Tags="" />
      <AutoroutePart Alias="auditing-with-azure-functions" UseCustomPattern="false" />
      <TitlePart Title="Auditing with Azure Functions" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=creating-azure-storage-sftp-with-password-using-bicep" Status="Published">
      <BodyPart Text="Azure Storage service has a neat little option for hosting an SFTP. Doing so lets you upload your files as blobs to your Storage account. This is extremely helpful, especially when working on the decades-old system migrated to Azure but still requiring SFTP for data transfer. The documentation and setup of SFTP with a Storage account are straightforward—until you try to create the resource using Bicep and set the password as part of Bicep deployment. This is where it's getting a bit cumbersome.&#xD;&#xA;&#xD;&#xA;TLDR: Setting the password when creating the Storage account and SFTP user using Bicep is impossible. The password has to be **reset**.&#xD;&#xA;&#xD;&#xA;This means that OOTB Bicep can create an SFTP user but cannot set the password. The password needs to be reset, even if it hasn't been set yet, and the only way to do that is via the portal UI or scripting. The portal UI option is unacceptable if you're trying to automate your resource deployment. Which leaves the scripting option. Let's dive into the code.&#xD;&#xA;&#xD;&#xA;    param location string = resourceGroup().location&#xD;&#xA;    &#xD;&#xA;    var sftpRootContainterName = 'sftp'&#xD;&#xA;    var sftpUserName = 'sftpuser'&#xD;&#xA;    var unique = uniqueString(resourceGroup().id)&#xD;&#xA;    &#xD;&#xA;    resource storageAccount 'Microsoft.Storage/storageAccounts@2022-09-01' = {&#xD;&#xA;      name: toLower('mysftp${unique}')&#xD;&#xA;      location: location&#xD;&#xA;      sku: {&#xD;&#xA;        name: 'Standard_LRS'&#xD;&#xA;      }&#xD;&#xA;      kind: 'StorageV2'&#xD;&#xA;      properties: {&#xD;&#xA;        allowBlobPublicAccess: false&#xD;&#xA;        allowCrossTenantReplication: false&#xD;&#xA;        allowSharedKeyAccess: true&#xD;&#xA;        isHnsEnabled: true&#xD;&#xA;        isLocalUserEnabled: true&#xD;&#xA;        isSftpEnabled: true&#xD;&#xA;        isNfsV3Enabled: false&#xD;&#xA;        minimumTlsVersion: 'TLS1_2'&#xD;&#xA;        supportsHttpsTrafficOnly: true&#xD;&#xA;      }&#xD;&#xA;      tags: {}&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    resource blobServicesResource 'Microsoft.Storage/storageAccounts/blobServices@2022-09-01' = {&#xD;&#xA;      parent: storageAccount&#xD;&#xA;      name: 'default'&#xD;&#xA;      properties: {&#xD;&#xA;      }&#xD;&#xA;    &#xD;&#xA;      resource sftpStorageContainer 'containers' = {&#xD;&#xA;        name: sftpRootContainterName&#xD;&#xA;        properties: {&#xD;&#xA;          publicAccess: 'None'&#xD;&#xA;        }&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    resource sftpLocalUserResource 'Microsoft.Storage/storageAccounts/localUsers@2023-05-01' = {&#xD;&#xA;      name: sftpUserName &#xD;&#xA;      parent: storageAccount&#xD;&#xA;      properties: {&#xD;&#xA;        permissionScopes: [&#xD;&#xA;          {&#xD;&#xA;            permissions: 'rcwdl'&#xD;&#xA;            service: 'blob'&#xD;&#xA;            resourceName: sftpRootContainterName&#xD;&#xA;          }&#xD;&#xA;        ]&#xD;&#xA;        homeDirectory: '${sftpRootContainterName}/' // This user will have complete control over the &quot;root&quot; directory in sftpRootContainterName&#xD;&#xA;        hasSharedKey: false&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    // Managed identity necessary to execute the scirpt&#xD;&#xA;    resource storageAccountManagedIdentity 'Microsoft.ManagedIdentity/userAssignedIdentities@2023-01-31' existing = {&#xD;&#xA;      name: 'mi-sandbox-sean-feldman'&#xD;&#xA;      scope: resourceGroup()&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    // The script to reset the password&#xD;&#xA;    resource deploymentScript 'Microsoft.Resources/deploymentScripts@2023-08-01'= {&#xD;&#xA;      name: 'mysftp-inlineCLI-${unique}'&#xD;&#xA;      location: location&#xD;&#xA;      kind: 'AzureCLI'&#xD;&#xA;      identity: {&#xD;&#xA;        type: 'UserAssigned'&#xD;&#xA;        userAssignedIdentities: {&#xD;&#xA;          '${storageAccountManagedIdentity.id}': {}&#xD;&#xA;        }&#xD;&#xA;      }&#xD;&#xA;      properties: {&#xD;&#xA;        azCliVersion: '2.63.0'&#xD;&#xA;        arguments: '${storageAccount.name} ${resourceGroup().name} ${sftpUserName}'&#xD;&#xA;        scriptContent: '''&#xD;&#xA;          az storage account local-user regenerate-password --account-name $1 -g $2 -n $3&#xD;&#xA;        '''&#xD;&#xA;        timeout: 'PT5M'                 // Set timeout for the script execution (optional)&#xD;&#xA;        cleanupPreference: 'OnSuccess'  // Automatically clean up after success&#xD;&#xA;        retentionInterval: 'PT1H'       // Retain script resources for 1 hour after execution&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    // DO NOT do this in production&#xD;&#xA;    output text string = deploymentScript.properties.outputs.sshPassword&#xD;&#xA;&#xD;&#xA;The solution is to deploy and run the `deploymentScript` AZ CLI script to reset the password. The output of the `az storage account local-user regenerate-password` is the generated password, the output object of the script resource, as the `sshPassword`. But this is not ideal for production. For production, keeping the password in Azure KeyVault or Azure Config Service is better. With a twist, testing if the value exists first and setting it only if it doesn't is better." />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2024-10-21T04:08:20.4333752Z" PublishedUtc="2024-10-21T04:08:20.4333752Z" ModifiedUtc="2024-10-21T04:08:20.3552409Z" />
      <TagsPart Tags="Azure,Bicep" />
      <AutoroutePart Alias="creating-azure-storage-sftp-with-password-using-bicep" UseCustomPattern="false" />
      <TitlePart Title="Creating Azure Storage SFTP with Password using Bicep" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
    </BlogPost>
    <BlogPost Id="/alias=datetime-to-string-with-custom-formatting" Status="Published">
      <BodyPart Text="When formatting `DateTime` to a string, the format specifier provides access to the parts of the date and time we want to express as a string. E.g. &#xD;&#xA;    &#xD;&#xA;    DateTime.UtcNow.ToString(&quot;yyyy-MM-dd HH:mm:ss.fff&quot;)&#xD;&#xA;&#xD;&#xA;will produce something like `2024-11-03 12:34:56.789`. But, you must be extra careful with the time separator `:`. It's not always the same for all cultures, and if an explicit culture is not specified, the default local culture might surprise you. Let's see an example.&#xD;&#xA;&#xD;&#xA;Let's say the code is running on a machine set up with Finish culture. &#xD;&#xA;&#xD;&#xA;    DateTime.UtcNow.ToString(&quot;yyyy-MM-dd HH:mm:ss.fff&quot;, new CultureInfo(&quot;fi-FI&quot;)).Dump();&#xD;&#xA;&#xD;&#xA;The same code snippet used earlier produces an entirely different result, `2024-11-03 12.34.56.789`. But how is that possible? That's because the `:` custom format specifier is culture-specific. The separator character must be specified within a literal string delimiter to change the time separator for a particular date and time string. &#xD;&#xA;&#xD;&#xA;    DateTime.UtcNow.ToString(&quot;yyyy-MM-dd HH':'mm':'ss.fff&quot;)&#xD;&#xA;&#xD;&#xA; Or escaped. &#xD;&#xA;&#xD;&#xA;    DateTime.UtcNow.ToString(&quot;yyyy-MM-dd HH\\:mm\\:ss.fff&quot;)&#xD;&#xA;&#xD;&#xA;Escaping would be required to avoid surprises if date formatting `yyyy/MM/dd` is needed. Find more about date and time separator specifiers on [MSDN][1].&#xD;&#xA;&#xD;&#xA;  [1]: https://learn.microsoft.com/en-us/dotnet/standard/base-types/custom-date-and-time-format-strings#date-and-time-separator-specifiers" />
      <CommonPart Owner="/User.UserName=sfeldman" Container="/alias=" CreatedUtc="2024-11-03T20:49:36.4941296Z" PublishedUtc="2024-11-03T20:49:36.4941296Z" ModifiedUtc="2024-11-03T20:49:36.3846464Z" />
      <TagsPart Tags="C#" />
      <AutoroutePart Alias="datetime-to-string-with-custom-formatting" UseCustomPattern="false" />
      <TitlePart Title="DateTime to String with Custom Formatting" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
    </BlogPost>
    <TagCloud Id="" Status="Published">
      <CommonPart Owner="/User.UserName=sfeldman" Container="/Layer.LayerName=Default" CreatedUtc="2014-05-23T22:59:45.1007564Z" PublishedUtc="2014-05-23T22:59:45.127925Z" ModifiedUtc="2014-05-23T22:59:45.1435054Z" />
      <WidgetPart Title="" Position="2" Zone="Footer" RenderTitle="true" Name="FooterWithTagCloud" />
      <TagCloudPart Slug="" Buckets="5" />
    </TagCloud>
  </Data>
</Orchard>
name: Build and deploy
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:
permissions:
  contents: read
  pages: write
  id-token: write
  pull-requests: write
concurrency:
  group: pages
  cancel-in-progress: false
defaults:
  run:
    shell: bash
jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      base_url: ${{ steps.pages.outputs.base_url }}
      origin: ${{ steps.pages.outputs.origin }}
      base_path: ${{ steps.pages.outputs.base_path }}
    env:
      DART_SASS_VERSION: 1.93.2
      GO_VERSION: 1.25.1
      HUGO_VERSION: 0.151.0
      NODE_VERSION: 22.18.0
      TZ: Europe/Oslo
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          submodules: recursive
          fetch-depth: 0
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: false
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5
      - name: Create directory for user-specific executable files
        run: |
          mkdir -p "${HOME}/.local"
      - name: Install Dart Sass
        run: |
          curl -sLJO "https://github.com/sass/dart-sass/releases/download/${DART_SASS_VERSION}/dart-sass-${DART_SASS_VERSION}-linux-x64.tar.gz"
          tar -C "${HOME}/.local" -xf "dart-sass-${DART_SASS_VERSION}-linux-x64.tar.gz"
          rm "dart-sass-${DART_SASS_VERSION}-linux-x64.tar.gz"
          echo "${HOME}/.local/dart-sass" >> "${GITHUB_PATH}"
      - name: Install Hugo
        run: |
          curl -sLJO "https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.tar.gz"
          mkdir "${HOME}/.local/hugo"
          tar -C "${HOME}/.local/hugo" -xf "hugo_extended_${HUGO_VERSION}_linux-amd64.tar.gz"
          rm "hugo_extended_${HUGO_VERSION}_linux-amd64.tar.gz"
          echo "${HOME}/.local/hugo" >> "${GITHUB_PATH}"
      - name: Verify installations
        run: |
          echo "Dart Sass: $(sass --version)"
          echo "Go: $(go version)"
          echo "Hugo: $(hugo version)"
          echo "Node.js: $(node --version)"
      - name: Install Node.js dependencies
        run: |
          [[ -f package-lock.json || -f npm-shrinkwrap.json ]] && npm ci || true
      - name: Configure Git
        run: |
          git config core.quotepath false
      - name: Cache restore
        id: cache-restore
        uses: actions/cache/restore@v4
        with:
          path: ${{ runner.temp }}/hugo_cache
          key: hugo-${{ github.run_id }}
          restore-keys:
            hugo-
      - name: Build the site
        run: |
          BASE_URL="${{ steps.pages.outputs.base_url }}/"
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BASE_URL="${{ steps.pages.outputs.origin }}${{ steps.pages.outputs.base_path }}/"
          fi
          echo "Using baseURL=$BASE_URL"
          hugo \
            --gc \
            --minify \
            --baseURL "$BASE_URL" \
            --cacheDir "${{ runner.temp }}/hugo_cache"
      - name: Cache save
        id: cache-save
        uses: actions/cache/save@v4
        with:
          path: ${{ runner.temp }}/hugo_cache
          key: ${{ steps.cache-restore.outputs.cache-primary-key }}
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public
  deploy:
    # Deploy for pushes, and for PRs only when the PR comes from the same repo (not forks)
    if: ${{ github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository }}
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          preview: ${{ github.event_name == 'pull_request' }}
      - name: Comment PR with preview URLs
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/github-script@v7
        env:
          PREVIEW_ORIGIN: ${{ needs.build.outputs.origin }}
          PREVIEW_BASE_PATH: ${{ needs.build.outputs.base_path }}
          FALLBACK_URL: ${{ steps.deployment.outputs.page_url }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue_number = context.issue.number;
            const origin = process.env.PREVIEW_ORIGIN || '';
            const basePath = process.env.PREVIEW_BASE_PATH || '';
            const previewFromPages = origin && basePath ? `${origin}${basePath}` : '';

            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const sha = context.payload.pull_request?.head?.sha || context.sha;

            // Try to get the environment_url from the latest deployment status for this PR commit
            let envUrl = '';
            try {
              const deployments = await github.rest.repos.listDeployments({ owner, repo, sha, environment: 'github-pages', per_page: 5 });
              if (deployments.data && deployments.data.length) {
                // Pick the most recent deployment for this sha
                const dep = deployments.data[0];
                const statuses = await github.rest.repos.listDeploymentStatuses({ owner, repo, deployment_id: dep.id, per_page: 5 });
                if (statuses.data && statuses.data.length) {
                  // Find the most recent status with an environment_url
                  const withUrl = statuses.data.find(s => s.environment_url) || statuses.data[0];
                  envUrl = withUrl.environment_url || '';
                }
              }
            } catch (e) {
              core.info(`Could not resolve environment_url from deployments: ${e.message}`);
            }

            const deploymentOutputUrl = process.env.FALLBACK_URL || '';
            const previewUrl = envUrl || previewFromPages || deploymentOutputUrl;
            const deploysUrl = `${{ github.server_url }}/${{ github.repository }}/deployments/activity_log?environment=github-pages`;
            const body = [
              `ðŸš€ Preview deployed: ${previewUrl}`,
              ``,
              `ðŸ”Ž View deployment in GitHub: ${deploysUrl}`
            ].join('\n');
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number,
              body
            });